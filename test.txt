   Compiling paxforth v0.1.0 (/Users/trim/Sync/paxconsola/paxforth)
warning: variable does not need to be mutable
   --> paxforth/src/parse/mod.rs:198:21
    |
198 |                 let mut group = BlockReference::new("<begin-leave>", None);
    |                     ----^^^^^
    |                     |
    |                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: 1 warning emitted

    Finished dev [unoptimized + debuginfo] target(s) in 10.99s
     Running `target/debug/paxforth dump paxforth/tests/check/case-begin.fs`
wtf: [BlockReference { label: "0=", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<else>", from_block_index: None, to_block_indices: [2] }]
wtf: [BlockReference { label: "0<", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<else>", from_block_index: None, to_block_indices: [3] }]
wtf: [BlockReference { label: "%", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [] }, BlockReference { label: "<begin>", from_block_index: Some(1), to_block_indices: [] }, BlockReference { label: "<else>", from_block_index: None, to_block_indices: [8] }]
----> block_refs: [BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [] }, BlockReference { label: "<begin>", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<if>", from_block_index: None, to_block_indices: [3] }]
---@> block_refs: [BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [4] }, BlockReference { label: "<begin>", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<if>", from_block_index: None, to_block_indices: [3] }]
wtf: [BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [4] }, BlockReference { label: "<begin>", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<if>", from_block_index: None, to_block_indices: [3] }]
----> block_refs: [BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [4] }, BlockReference { label: "<begin>", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<if>", from_block_index: None, to_block_indices: [8] }]
---@> block_refs: [BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [4, 9] }, BlockReference { label: "<begin>", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<if>", from_block_index: None, to_block_indices: [8] }]
wtf: [BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [4, 9] }, BlockReference { label: "<begin>", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<if>", from_block_index: None, to_block_indices: [8] }]
----> block_refs: [BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [4, 9] }, BlockReference { label: "<begin>", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<if>", from_block_index: None, to_block_indices: [13] }]
---@> block_refs: [BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [4, 9, 14] }, BlockReference { label: "<begin>", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<if>", from_block_index: None, to_block_indices: [13] }]
wtf: [BlockReference { label: "<begin-leave>", from_block_index: None, to_block_indices: [4, 9, 14] }, BlockReference { label: "<begin>", from_block_index: Some(0), to_block_indices: [] }, BlockReference { label: "<if>", from_block_index: None, to_block_indices: [13] }]
( fn "dup" )
    ( block 0 )
        [target-0]                               \ src/prelude.rs:13:3 in `main`
    ( block 1 )
        temp!                                    \ src/prelude.rs:13:10 in `dup`
        temp@                                    \ src/prelude.rs:13:16 in `dup`
        temp@                                    \ src/prelude.rs:13:22 in `dup`
        exit                                     \ src/prelude.rs:13:28 in `dup`


( fn "invert" )
    ( block 0 )
        [target-0]                               \ src/prelude.rs:19:3 in `main`
    ( block 1 )
        -1                                       \ src/prelude.rs:19:12 in `invert`
        nand                                     \ src/prelude.rs:19:15 in `invert`
        exit                                     \ src/prelude.rs:19:20 in `invert`


( fn "negate" )
    ( block 0 )
        [target-0]                               \ src/prelude.rs:20:3 in `main`
    ( block 1 )
        call "invert"                            \ src/prelude.rs:20:12 in `negate`
    ( block 2 )
        1                                        \ src/prelude.rs:20:19 in `negate`
        +                                        \ src/prelude.rs:20:21 in `negate`
        exit                                     \ src/prelude.rs:20:23 in `negate`


( fn "-" )
    ( block 0 )
        [target-0]                               \ src/prelude.rs:21:3 in `main`
    ( block 1 )
        call "negate"                            \ src/prelude.rs:21:12 in `-`
    ( block 2 )
        +                                        \ src/prelude.rs:21:19 in `-`
        exit                                     \ src/prelude.rs:21:21 in `-`


( fn "0=" )
    ( block 0 )
        [target-0]                               \ src/prelude.rs:26:3 in `main`
    ( block 1 )
        branch0 [target-3]                       \ src/prelude.rs:26:8 in `0=`
    ( block 2 )
        0                                        \ src/prelude.rs:26:11 in `0=`
        0                                        \ src/prelude.rs:26:13 in `0=`
        branch0 [target-4]                       \ src/prelude.rs:26:13 in `0=`
    ( block 3 )
        [target-3]                               \ src/prelude.rs:26:13 in `0=`
    ( block 4 )
        -1                                       \ src/prelude.rs:26:18 in `0=`
        [target-4]                               \ src/prelude.rs:26:21 in `0=`
    ( block 5 )
        exit                                     \ src/prelude.rs:26:26 in `0=`


( fn "=" )
    ( block 0 )
        [target-0]                               \ src/prelude.rs:27:3 in `main`
    ( block 1 )
        call "-"                                 \ src/prelude.rs:27:8 in `=`
    ( block 2 )
        call "0="                                \ src/prelude.rs:27:10 in `=`
    ( block 3 )
        exit                                     \ src/prelude.rs:27:13 in `=`


( fn "main" )
    ( block 0 )
        7                                        \ paxforth/tests/check/case-begin.fs:3:1 in `main`
        [target-0]                               \ paxforth/tests/check/case-begin.fs:3:3 in `main`
    ( block 1 )
        call "dup"                               \ paxforth/tests/check/case-begin.fs:4:5 in `main`
    ( block 2 )
        6                                        \ paxforth/tests/check/case-begin.fs:4:9 in `main`
        call "="                                 \ paxforth/tests/check/case-begin.fs:4:11 in `main`
    ( block 3 )
        branch0 [target-5]                       \ paxforth/tests/check/case-begin.fs:4:13 in `main`
    ( block 4 )
        0                                        \ paxforth/tests/check/case-begin.fs:4:16 in `main`
        print                                    \ paxforth/tests/check/case-begin.fs:4:18 in `main`
        0                                        \ :0:0 in ``
        branch0 [target-17]                      \ paxforth/tests/check/case-begin.fs:4:24 in `main`
    ( block 5 )
        [target-5]                               \ paxforth/tests/check/case-begin.fs:4:30 in `main`
    ( block 6 )
        call "dup"                               \ paxforth/tests/check/case-begin.fs:5:5 in `main`
    ( block 7 )
        7                                        \ paxforth/tests/check/case-begin.fs:5:9 in `main`
        call "="                                 \ paxforth/tests/check/case-begin.fs:5:11 in `main`
    ( block 8 )
        branch0 [target-10]                      \ paxforth/tests/check/case-begin.fs:5:13 in `main`
    ( block 9 )
        1                                        \ paxforth/tests/check/case-begin.fs:5:16 in `main`
        print                                    \ paxforth/tests/check/case-begin.fs:5:18 in `main`
        0                                        \ :0:0 in ``
        branch0 [target-17]                      \ paxforth/tests/check/case-begin.fs:5:24 in `main`
    ( block 10 )
        [target-10]                              \ paxforth/tests/check/case-begin.fs:5:30 in `main`
    ( block 11 )
        call "dup"                               \ paxforth/tests/check/case-begin.fs:6:5 in `main`
    ( block 12 )
        8                                        \ paxforth/tests/check/case-begin.fs:6:9 in `main`
        call "="                                 \ paxforth/tests/check/case-begin.fs:6:11 in `main`
    ( block 13 )
        branch0 [target-15]                      \ paxforth/tests/check/case-begin.fs:6:13 in `main`
    ( block 14 )
        2                                        \ paxforth/tests/check/case-begin.fs:6:16 in `main`
        print                                    \ paxforth/tests/check/case-begin.fs:6:18 in `main`
        0                                        \ :0:0 in ``
        branch0 [target-17]                      \ paxforth/tests/check/case-begin.fs:6:24 in `main`
    ( block 15 )
        [target-15]                              \ paxforth/tests/check/case-begin.fs:6:30 in `main`
    ( block 16 )
        3                                        \ paxforth/tests/check/case-begin.fs:7:17 in `main`
        print                                    \ paxforth/tests/check/case-begin.fs:7:19 in `main`
        1                                        \ paxforth/tests/check/case-begin.fs:8:5 in `main`
        branch0 [target-0]                       \ paxforth/tests/check/case-begin.fs:9:1 in `main`
    ( block 17 )
        [target-17]                              \ paxforth/tests/check/case-begin.fs:9:1 in `main`
    ( block 18 )
        exit                                     \ :0:0 in ``


