ca65 V2.18 - Git N/A
Main file   : paxconsola.s
Current file: paxconsola.s

000000r 1               GFX = $0400
000000r 1               
000000r 1               ;helpful labels
000000r 1               ; https://gist.github.com/biomood/1001256
000000r 1               CLEAR = $E544
000000r 1               GETIN  =  $FFE4
000000r 1               SCNKEY =  $FF9F
000000r 1               
000000r 1               ; Override Datasette ram
000000r 1               TEMP = $92
000000r 1               TEMP2 = $93
000000r 1               TEMP3 = $94
000000r 1               
000000r 1               TEMP_PAX1 = $95
000000r 1               TEMP_PAX2 = $96
000000r 1               
000000r 1               STACK_RESERVE = $97
000000r 1               
000000r 1               ; Can override all BASIC values
000000r 1               ; https://csdb.dk/forums/index.php?roomid=11&topicid=3541&showallposts=1
000000r 1               X_START = $02
000000r 1               X_END = $7f
000000r 1               
000000r 1               .code
000000r 1                   ; Make screen black and text white
000000r 1  A9 00            lda #$00
000002r 1  8D 20 D0         sta $d020
000005r 1  8D 21 D0         sta $d021
000008r 1  A9 01            lda #$01
00000Ar 1  8D 86 02         sta $0286
00000Dr 1               
00000Dr 1                   ; Select charset
00000Dr 1  A9 17            lda #23
00000Fr 1  8D 18 D0         sta $d018
000012r 1               
000012r 1                   ; Clear the screen
000012r 1  20 44 E5         jsr $e544
000015r 1               
000015r 1                   ; draw some helpful text
000015r 1  20 rr rr         jsr draw_text
000018r 1               
000018r 1  A9 00            lda #00
00001Ar 1  A2 7D            ldx #(X_END-X_START)
00001Cr 1               ClearReturnStackLoop:
00001Cr 1  95 02            sta X_START,x
00001Er 1  CA               dex
00001Fr 1  10 FB            bpl ClearReturnStackLoop
000021r 1               
000021r 1  A9 00            lda #$00
000023r 1  A2 FF            ldx #$ff
000025r 1               ClearMemoryLoop:
000025r 1  9D 00 90         sta $9000,x
000028r 1  CA               dex
000029r 1  D0 FA            bne ClearMemoryLoop
00002Br 1               
00002Br 1               
00002Br 1               before_mainloop:
00002Br 1  EA               nop
00002Cr 1               mainloop:
00002Cr 1  AD 11 D0         lda $d011
00002Fr 1  10 FB            bpl mainloop ; no: go to mainloop
000031r 1               
000031r 1               pax_start:
000031r 1                   ; disable inerrupts
000031r 1  78               sei
000032r 1                   ; store stack pointer, since execution might not be clean
000032r 1  BA               tsx
000033r 1  86 97            stx STACK_RESERVE
000035r 1               
000035r 1                   ; Set up PAX registers for execution
000035r 1                   ; X=return stack pointer, Y = high byte of TOS, A = low byte of TOS
000035r 1  A2 02            ldx #X_START
000037r 1  A9 00            lda #0
000039r 1  A0 00            ldy #0
00003Br 1               
00003Br 1  20 rr rr         jsr PAX_FN_main
00003Er 1               
00003Er 1                   ; restore stack
00003Er 1  A6 97            ldx STACK_RESERVE
000040r 1  9A               txs
000041r 1                   ; re-enable interrupts
000041r 1  58               cli
000042r 1               
000042r 1               
000042r 1  A9 05            LDA #5
000044r 1  85 7F            STA $7f
000046r 1               
000046r 1  20 9F FF         JSR SCNKEY      ;SCAN KEYBOARD
000049r 1  20 E4 FF         JSR GETIN       ;GET CHARACTER
00004Cr 1  C9 00            CMP #0          ;IS IT NULL?
00004Er 1  F0 2F            BEQ pax_finished  ;no? skip
000050r 1               
000050r 1               
000050r 1               START	:
000050r 1  C9 57            CMP #87		;W - up
000052r 1  F0 0F            BEQ UP
000054r 1               
000054r 1  C9 53            CMP #83		;S - down
000056r 1  F0 12            BEQ DOWN
000058r 1               
000058r 1  C9 41            CMP #65		;A - left
00005Ar 1  F0 15            BEQ LEFT
00005Cr 1               
00005Cr 1  C9 44            CMP #68		;D - right
00005Er 1  F0 18            BEQ RIGHT
000060r 1               
000060r 1                   ;CMP ENTER	;end if enter clicked
000060r 1                   ;BEQ END
000060r 1               
000060r 1  4C rr rr         JMP pax_finished
000063r 1               
000063r 1               UP:
000063r 1  A9 26            LDA #38
000065r 1  85 7E            STA $7e
000067r 1  4C rr rr         JMP pax_finished
00006Ar 1               
00006Ar 1               DOWN:
00006Ar 1  A9 28            LDA #40
00006Cr 1  85 7E            STA $7e
00006Er 1  4C rr rr         JMP pax_finished
000071r 1               
000071r 1               LEFT:
000071r 1  A9 25            LDA #37
000073r 1  85 7E            STA $7e
000075r 1  4C rr rr         JMP pax_finished
000078r 1               
000078r 1               RIGHT:
000078r 1  A9 27            LDA #39
00007Ar 1  85 7E            STA $7e
00007Cr 1  4C rr rr         JMP pax_finished
00007Fr 1               
00007Fr 1               
00007Fr 1               pax_finished:
00007Fr 1  4C rr rr         jmp mainloop
000082r 1               
000082r 1               
000082r 1               msg:
000082r 1  20 20 20 20      .asciiz "              snake world!              "
000086r 1  20 20 20 20  
00008Ar 1  20 20 20 20  
0000ABr 1               
0000ABr 1               draw_text:
0000ABr 1  A2 00            ldx #$00
0000ADr 1               draw_loop:
0000ADr 1  BD rr rr         lda msg,x
0000B0r 1  9D 18 05         sta $0518,x
0000B3r 1  E8               inx
0000B4r 1  E0 28            cpx #$28
0000B6r 1  D0 F5            bne draw_loop
0000B8r 1  60               rts
0000B9r 1               
0000B9r 1               
0000B9r 1               ; http://forum.6502.org/viewtopic.php?f=9&t=689
0000B9r 1               .proc replace_PAX_FN_2A
0000B9r 1  CA               dex
0000BAr 1  CA               dex
0000BBr 1               
0000BBr 1  A0 00            LDY   #0
0000BDr 1  B5 00            LDA   0,X   ; Move NOS to N and then zero
0000BFr 1  85 92            STA   TEMP  ; (ie, erase) NOS (2 bytes).
0000C1r 1  94 00            STY   0,X   ; STZ can be replaced with STY
0000C3r 1                               ; here since NEXT left 0 in Y.
0000C3r 1  B5 01            LDA   1,X
0000C5r 1  85 93            STA   TEMP2
0000C7r 1  94 01            STY   1,X   ; STZ can be replaced with STY
0000C9r 1                               ; here since NEXT left 0 in Y.
0000C9r 1  A0 10            LDY   #$10  ; Go through the loop 16 times.
0000CBr 1               
0000CBr 1               @1:
0000CBr 1  16 00            ASL  0,X    ; Shift the 2 top stack cells
0000CDr 1  36 01            ROL  1,X    ; (ie, four bytes) left one bit.
0000CFr 1  36 02            ROL  2,X    ; The multiplier gets shifted out
0000D1r 1  36 03            ROL  3,X    ; as the product gets shifted in.
0000D3r 1  90 15            BCC  @2
0000D5r 1                               ; If the high bit shifted out was 1,
0000D5r 1  18               CLC         ; add the 2-byte value at N into NOS,
0000D6r 1  A5 92            LDA  TEMP
0000D8r 1  75 00            ADC  0,X    ; low byte,
0000DAr 1  95 00            STA  0,X
0000DCr 1               
0000DCr 1  A5 93            LDA  TEMP2
0000DEr 1  75 01            ADC  1,X    ; then high byte.
0000E0r 1  95 01            STA  1,X
0000E2r 1                               ; If there was a carry, then
0000E2r 1  90 06            BCC  @2     ; increment low byte of high cell.
0000E4r 1  F6 02            INC  2,X    ; Public-domain used LDA#0, ADC, STA.
0000E6r 1                               ; If incrementing the low byte of the
0000E6r 1  D0 02            BNE  @2     ; high cell made it 0, you must also
0000E8r 1  F6 03            INC  3,X    ; increment the high byte of the high
0000EAr 1                               ; cell!  Lacking this is where the
0000EAr 1                               ; bug lay in the public-domain UM*
0000EAr 1               @2:
0000EAr 1  88               DEY
0000EBr 1  D0 DE            BNE   @1    ; Loop again if not done.
0000EDr 1               
0000EDr 1  60               rts
0000EEr 1               .endproc
0000EEr 1               
0000EEr 1               
0000EEr 1               
0000EEr 1               ; Generated code
0000EEr 1               
0000EEr 1                   .include "generated.asm"
0000EEr 2               .proc PAX_FN_draw2Dapple
0000EEr 2               @target_0:
0000EEr 2               
0000EEr 2               ; snake.fth:208:3 in `draw-apple`
0000EEr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-26664)
0000EEr 2  E8               inx
0000EFr 2  E8               inx
0000F0r 2  A9 D8            lda #216
0000F2r 2  95 00            sta $00,x
0000F4r 2  A9 97            lda #151
0000F6r 2  95 01            sta $01,x
0000F8r 2               
0000F8r 2               ; snake.fth:208:11 in `draw-apple`
0000F8r 2               @OPCODE_2:   ; [c64_ir] Load
0000F8r 2  A1 00            lda ($00,x)
0000FAr 2  95 00            sta $00,x
0000FCr 2  A9 00            lda #0
0000FEr 2  95 01            sta $01,x
000100r 2               
000100r 2               ; snake.fth:208:13 in `draw-apple`
000100r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(-26662)
000100r 2  E8               inx
000101r 2  E8               inx
000102r 2  A9 DA            lda #218
000104r 2  95 00            sta $00,x
000106r 2  A9 97            lda #151
000108r 2  95 01            sta $01,x
00010Ar 2               
00010Ar 2               ; snake.fth:208:21 in `draw-apple`
00010Ar 2               @OPCODE_4:   ; [c64_ir] Load
00010Ar 2  A1 00            lda ($00,x)
00010Cr 2  95 00            sta $00,x
00010Er 2  A9 00            lda #0
000110r 2  95 01            sta $01,x
000112r 2               
000112r 2               ; snake.fth:208:23 in `draw-apple`
000112r 2               @OPCODE_5:   ; [c64_ir] Call("draw-apple-tile")
000112r 2  20 rr rr             jsr PAX_FN_draw2Dapple2Dtile
000115r 2               
000115r 2               @target_1:
000115r 2               
000115r 2               ; snake.fth:208:39 in `draw-apple`
000115r 2               @OPCODE_7:   ; [c64_ir] Exit
000115r 2  60               rts
000116r 2               .endproc
000116r 2               
000116r 2               
000116r 2               
000116r 2               
000116r 2               
000116r 2               ; function start
000116r 2               
000116r 2               .proc PAX_FN_swap
000116r 2               @target_0:
000116r 2               
000116r 2               ; src/prelude.fth:3:10 in `swap`
000116r 2               @OPCODE_1:   ; [c64_ir] AltPush
000116r 2  CA               dex
000117r 2  CA               dex
000118r 2  B5 03            lda $03,x
00011Ar 2  48               pha
00011Br 2  B5 02            lda $02,x
00011Dr 2  48               pha
00011Er 2               
00011Er 2               ; src/prelude.fth:3:13 in `swap`
00011Er 2               @OPCODE_2:   ; [c64_ir] TempStore
00011Er 2  CA               dex
00011Fr 2  CA               dex
000120r 2  B5 03            lda $03,x
000122r 2  85 96            sta TEMP_PAX2
000124r 2  B5 02            lda $02,x
000126r 2  85 95            sta TEMP_PAX1
000128r 2               
000128r 2               ; src/prelude.fth:3:19 in `swap`
000128r 2               @OPCODE_3:   ; [c64_ir] AltPop
000128r 2  E8               inx
000129r 2  E8               inx
00012Ar 2  68               pla
00012Br 2  95 00            sta $00,x
00012Dr 2  68               pla
00012Er 2  95 01            sta $01,x
000130r 2               
000130r 2               ; src/prelude.fth:3:22 in `swap`
000130r 2               @OPCODE_4:   ; [c64_ir] TempLoad
000130r 2  E8               inx
000131r 2  E8               inx
000132r 2  A5 95            lda TEMP_PAX1
000134r 2  95 00            sta $00,x
000136r 2  A5 96            lda TEMP_PAX2
000138r 2  95 01            sta $01,x
00013Ar 2               
00013Ar 2               ; src/prelude.fth:3:28 in `swap`
00013Ar 2               @OPCODE_5:   ; [c64_ir] Exit
00013Ar 2  60               rts
00013Br 2               .endproc
00013Br 2               
00013Br 2               
00013Br 2               
00013Br 2               
00013Br 2               
00013Br 2               ; function start
00013Br 2               
00013Br 2               .proc PAX_FN_over
00013Br 2               @target_0:
00013Br 2               
00013Br 2               ; src/prelude.fth:4:10 in `over`
00013Br 2               @OPCODE_1:   ; [c64_ir] AltPush
00013Br 2  CA               dex
00013Cr 2  CA               dex
00013Dr 2  B5 03            lda $03,x
00013Fr 2  48               pha
000140r 2  B5 02            lda $02,x
000142r 2  48               pha
000143r 2               
000143r 2               ; src/prelude.fth:4:13 in `over`
000143r 2               @OPCODE_2:   ; [c64_ir] TempStore
000143r 2  CA               dex
000144r 2  CA               dex
000145r 2  B5 03            lda $03,x
000147r 2  85 96            sta TEMP_PAX2
000149r 2  B5 02            lda $02,x
00014Br 2  85 95            sta TEMP_PAX1
00014Dr 2               
00014Dr 2               ; src/prelude.fth:4:19 in `over`
00014Dr 2               @OPCODE_3:   ; [c64_ir] TempLoad
00014Dr 2  E8               inx
00014Er 2  E8               inx
00014Fr 2  A5 95            lda TEMP_PAX1
000151r 2  95 00            sta $00,x
000153r 2  A5 96            lda TEMP_PAX2
000155r 2  95 01            sta $01,x
000157r 2               
000157r 2               ; src/prelude.fth:4:25 in `over`
000157r 2               @OPCODE_4:   ; [c64_ir] AltPop
000157r 2  E8               inx
000158r 2  E8               inx
000159r 2  68               pla
00015Ar 2  95 00            sta $00,x
00015Cr 2  68               pla
00015Dr 2  95 01            sta $01,x
00015Fr 2               
00015Fr 2               ; src/prelude.fth:4:28 in `over`
00015Fr 2               @OPCODE_5:   ; [c64_ir] TempLoad
00015Fr 2  E8               inx
000160r 2  E8               inx
000161r 2  A5 95            lda TEMP_PAX1
000163r 2  95 00            sta $00,x
000165r 2  A5 96            lda TEMP_PAX2
000167r 2  95 01            sta $01,x
000169r 2               
000169r 2               ; src/prelude.fth:4:34 in `over`
000169r 2               @OPCODE_6:   ; [c64_ir] Exit
000169r 2  60               rts
00016Ar 2               .endproc
00016Ar 2               
00016Ar 2               
00016Ar 2               
00016Ar 2               
00016Ar 2               
00016Ar 2               ; function start
00016Ar 2               
00016Ar 2               .proc PAX_FN_rot
00016Ar 2               @target_0:
00016Ar 2               
00016Ar 2               ; src/prelude.fth:5:10 in `rot`
00016Ar 2               @OPCODE_1:   ; [c64_ir] AltPush
00016Ar 2  CA               dex
00016Br 2  CA               dex
00016Cr 2  B5 03            lda $03,x
00016Er 2  48               pha
00016Fr 2  B5 02            lda $02,x
000171r 2  48               pha
000172r 2               
000172r 2               ; src/prelude.fth:5:13 in `rot`
000172r 2               @OPCODE_2:   ; [c64_ir] Call("swap")
000172r 2  20 rr rr             jsr PAX_FN_swap
000175r 2               
000175r 2               @target_1:
000175r 2               
000175r 2               ; src/prelude.fth:5:18 in `rot`
000175r 2               @OPCODE_4:   ; [c64_ir] AltPop
000175r 2  E8               inx
000176r 2  E8               inx
000177r 2  68               pla
000178r 2  95 00            sta $00,x
00017Ar 2  68               pla
00017Br 2  95 01            sta $01,x
00017Dr 2               
00017Dr 2               ; src/prelude.fth:5:21 in `rot`
00017Dr 2               @OPCODE_5:   ; [c64_ir] Call("swap")
00017Dr 2  20 rr rr             jsr PAX_FN_swap
000180r 2               
000180r 2               @target_2:
000180r 2               
000180r 2               ; src/prelude.fth:5:26 in `rot`
000180r 2               @OPCODE_7:   ; [c64_ir] Exit
000180r 2  60               rts
000181r 2               .endproc
000181r 2               
000181r 2               
000181r 2               
000181r 2               
000181r 2               
000181r 2               ; function start
000181r 2               
000181r 2               .proc PAX_FN_dup
000181r 2               @target_0:
000181r 2               
000181r 2               ; src/prelude.fth:6:10 in `dup`
000181r 2               @OPCODE_1:   ; [c64_ir] TempStore
000181r 2  CA               dex
000182r 2  CA               dex
000183r 2  B5 03            lda $03,x
000185r 2  85 96            sta TEMP_PAX2
000187r 2  B5 02            lda $02,x
000189r 2  85 95            sta TEMP_PAX1
00018Br 2               
00018Br 2               ; src/prelude.fth:6:16 in `dup`
00018Br 2               @OPCODE_2:   ; [c64_ir] TempLoad
00018Br 2  E8               inx
00018Cr 2  E8               inx
00018Dr 2  A5 95            lda TEMP_PAX1
00018Fr 2  95 00            sta $00,x
000191r 2  A5 96            lda TEMP_PAX2
000193r 2  95 01            sta $01,x
000195r 2               
000195r 2               ; src/prelude.fth:6:22 in `dup`
000195r 2               @OPCODE_3:   ; [c64_ir] TempLoad
000195r 2  E8               inx
000196r 2  E8               inx
000197r 2  A5 95            lda TEMP_PAX1
000199r 2  95 00            sta $00,x
00019Br 2  A5 96            lda TEMP_PAX2
00019Dr 2  95 01            sta $01,x
00019Fr 2               
00019Fr 2               ; src/prelude.fth:6:28 in `dup`
00019Fr 2               @OPCODE_4:   ; [c64_ir] Exit
00019Fr 2  60               rts
0001A0r 2               .endproc
0001A0r 2               
0001A0r 2               
0001A0r 2               
0001A0r 2               
0001A0r 2               
0001A0r 2               ; function start
0001A0r 2               
0001A0r 2               .proc PAX_FN_2dup
0001A0r 2               @target_0:
0001A0r 2               
0001A0r 2               ; src/prelude.fth:8:10 in `2dup`
0001A0r 2               @OPCODE_1:   ; [c64_ir] Call("over")
0001A0r 2  20 rr rr             jsr PAX_FN_over
0001A3r 2               
0001A3r 2               @target_1:
0001A3r 2               
0001A3r 2               ; src/prelude.fth:8:15 in `2dup`
0001A3r 2               @OPCODE_3:   ; [c64_ir] Call("over")
0001A3r 2  20 rr rr             jsr PAX_FN_over
0001A6r 2               
0001A6r 2               @target_2:
0001A6r 2               
0001A6r 2               ; src/prelude.fth:8:20 in `2dup`
0001A6r 2               @OPCODE_5:   ; [c64_ir] Exit
0001A6r 2  60               rts
0001A7r 2               .endproc
0001A7r 2               
0001A7r 2               
0001A7r 2               
0001A7r 2               
0001A7r 2               
0001A7r 2               ; function start
0001A7r 2               
0001A7r 2               .proc PAX_FN_invert
0001A7r 2               @target_0:
0001A7r 2               
0001A7r 2               ; src/prelude.fth:14:12 in `invert`
0001A7r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-1)
0001A7r 2  E8               inx
0001A8r 2  E8               inx
0001A9r 2  A9 FF            lda #255
0001ABr 2  95 00            sta $00,x
0001ADr 2  A9 FF            lda #255
0001AFr 2  95 01            sta $01,x
0001B1r 2               
0001B1r 2               ; src/prelude.fth:14:15 in `invert`
0001B1r 2               @OPCODE_2:   ; [c64_ir] Nand
0001B1r 2                   ; 26
0001B1r 2  CA               dex
0001B2r 2  CA               dex
0001B3r 2  B5 00            lda $00,x
0001B5r 2  35 02            and $02,x
0001B7r 2  49 FF            eor #$ff
0001B9r 2  95 00            sta $00,x
0001BBr 2  B5 01            lda $01,x
0001BDr 2  35 03            and $03,x
0001BFr 2  49 FF            eor #$ff
0001C1r 2  95 01            sta $01,x
0001C3r 2               
0001C3r 2               ; src/prelude.fth:14:20 in `invert`
0001C3r 2               @OPCODE_3:   ; [c64_ir] Exit
0001C3r 2  60               rts
0001C4r 2               .endproc
0001C4r 2               
0001C4r 2               
0001C4r 2               
0001C4r 2               
0001C4r 2               
0001C4r 2               ; function start
0001C4r 2               
0001C4r 2               .proc PAX_FN_negate
0001C4r 2               @target_0:
0001C4r 2               
0001C4r 2               ; src/prelude.fth:15:12 in `negate`
0001C4r 2               @OPCODE_1:   ; [c64_ir] Call("invert")
0001C4r 2  20 rr rr             jsr PAX_FN_invert
0001C7r 2               
0001C7r 2               @target_1:
0001C7r 2               
0001C7r 2               ; src/prelude.fth:15:19 in `negate`
0001C7r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(1)
0001C7r 2  E8               inx
0001C8r 2  E8               inx
0001C9r 2  A9 01            lda #1
0001CBr 2  95 00            sta $00,x
0001CDr 2  A9 00            lda #0
0001CFr 2  95 01            sta $01,x
0001D1r 2               
0001D1r 2               ; src/prelude.fth:15:21 in `negate`
0001D1r 2               @OPCODE_4:   ; [c64_ir] Add
0001D1r 2                   ; 21
0001D1r 2  CA               dex
0001D2r 2  CA               dex
0001D3r 2  18               clc
0001D4r 2  B5 00            lda $00,x
0001D6r 2  75 02            adc $02,x
0001D8r 2  95 00            sta $00,x
0001DAr 2  B5 01            lda $01,x
0001DCr 2  75 03            adc $03,x
0001DEr 2  95 01            sta $01,x
0001E0r 2               
0001E0r 2               ; src/prelude.fth:15:23 in `negate`
0001E0r 2               @OPCODE_5:   ; [c64_ir] Exit
0001E0r 2  60               rts
0001E1r 2               .endproc
0001E1r 2               
0001E1r 2               
0001E1r 2               
0001E1r 2               
0001E1r 2               
0001E1r 2               ; function start
0001E1r 2               
0001E1r 2               .proc PAX_FN_2D
0001E1r 2               @target_0:
0001E1r 2               
0001E1r 2               ; src/prelude.fth:16:12 in `-`
0001E1r 2               @OPCODE_1:   ; [c64_ir] Call("negate")
0001E1r 2  20 rr rr             jsr PAX_FN_negate
0001E4r 2               
0001E4r 2               @target_1:
0001E4r 2               
0001E4r 2               ; src/prelude.fth:16:19 in `-`
0001E4r 2               @OPCODE_3:   ; [c64_ir] Add
0001E4r 2                   ; 21
0001E4r 2  CA               dex
0001E5r 2  CA               dex
0001E6r 2  18               clc
0001E7r 2  B5 00            lda $00,x
0001E9r 2  75 02            adc $02,x
0001EBr 2  95 00            sta $00,x
0001EDr 2  B5 01            lda $01,x
0001EFr 2  75 03            adc $03,x
0001F1r 2  95 01            sta $01,x
0001F3r 2               
0001F3r 2               ; src/prelude.fth:16:21 in `-`
0001F3r 2               @OPCODE_4:   ; [c64_ir] Exit
0001F3r 2  60               rts
0001F4r 2               .endproc
0001F4r 2               
0001F4r 2               
0001F4r 2               
0001F4r 2               
0001F4r 2               
0001F4r 2               ; function start
0001F4r 2               
0001F4r 2               .proc PAX_FN_12B
0001F4r 2               @target_0:
0001F4r 2               
0001F4r 2               ; src/prelude.fth:18:8 in `1+`
0001F4r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(1)
0001F4r 2  E8               inx
0001F5r 2  E8               inx
0001F6r 2  A9 01            lda #1
0001F8r 2  95 00            sta $00,x
0001FAr 2  A9 00            lda #0
0001FCr 2  95 01            sta $01,x
0001FEr 2               
0001FEr 2               ; src/prelude.fth:18:10 in `1+`
0001FEr 2               @OPCODE_2:   ; [c64_ir] Add
0001FEr 2                   ; 21
0001FEr 2  CA               dex
0001FFr 2  CA               dex
000200r 2  18               clc
000201r 2  B5 00            lda $00,x
000203r 2  75 02            adc $02,x
000205r 2  95 00            sta $00,x
000207r 2  B5 01            lda $01,x
000209r 2  75 03            adc $03,x
00020Br 2  95 01            sta $01,x
00020Dr 2               
00020Dr 2               ; src/prelude.fth:18:12 in `1+`
00020Dr 2               @OPCODE_3:   ; [c64_ir] Exit
00020Dr 2  60               rts
00020Er 2               .endproc
00020Er 2               
00020Er 2               
00020Er 2               
00020Er 2               
00020Er 2               
00020Er 2               ; function start
00020Er 2               
00020Er 2               .proc PAX_FN_2B21
00020Er 2               @target_0:
00020Er 2               
00020Er 2               ; src/prelude.fth:20:8 in `+!`
00020Er 2               @OPCODE_1:   ; [c64_ir] Call("dup")
00020Er 2  20 rr rr             jsr PAX_FN_dup
000211r 2               
000211r 2               @target_1:
000211r 2               
000211r 2               ; src/prelude.fth:20:12 in `+!`
000211r 2               @OPCODE_3:   ; [c64_ir] AltPush
000211r 2  CA               dex
000212r 2  CA               dex
000213r 2  B5 03            lda $03,x
000215r 2  48               pha
000216r 2  B5 02            lda $02,x
000218r 2  48               pha
000219r 2               
000219r 2               ; src/prelude.fth:20:15 in `+!`
000219r 2               @OPCODE_4:   ; [c64_ir] Load
000219r 2  A1 00            lda ($00,x)
00021Br 2  95 00            sta $00,x
00021Dr 2  A9 00            lda #0
00021Fr 2  95 01            sta $01,x
000221r 2               
000221r 2               ; src/prelude.fth:20:17 in `+!`
000221r 2               @OPCODE_5:   ; [c64_ir] Add
000221r 2                   ; 21
000221r 2  CA               dex
000222r 2  CA               dex
000223r 2  18               clc
000224r 2  B5 00            lda $00,x
000226r 2  75 02            adc $02,x
000228r 2  95 00            sta $00,x
00022Ar 2  B5 01            lda $01,x
00022Cr 2  75 03            adc $03,x
00022Er 2  95 01            sta $01,x
000230r 2               
000230r 2               ; src/prelude.fth:20:19 in `+!`
000230r 2               @OPCODE_6:   ; [c64_ir] AltPop
000230r 2  E8               inx
000231r 2  E8               inx
000232r 2  68               pla
000233r 2  95 00            sta $00,x
000235r 2  68               pla
000236r 2  95 01            sta $01,x
000238r 2               
000238r 2               ; src/prelude.fth:20:22 in `+!`
000238r 2               @OPCODE_7:   ; [c64_ir] Store
000238r 2  CA               dex
000239r 2  CA               dex
00023Ar 2  CA               dex
00023Br 2  CA               dex
00023Cr 2  B5 02            lda $02,x
00023Er 2  81 04            sta ($04,x)
000240r 2                   ; TODO high byte
000240r 2               
000240r 2               ; src/prelude.fth:20:24 in `+!`
000240r 2               @OPCODE_8:   ; [c64_ir] Exit
000240r 2  60               rts
000241r 2               .endproc
000241r 2               
000241r 2               
000241r 2               
000241r 2               
000241r 2               
000241r 2               ; function start
000241r 2               
000241r 2               .proc PAX_FN_03D
000241r 2               @target_0:
000241r 2               
000241r 2               ; src/prelude.fth:21:8 in `0=`
000241r 2               @OPCODE_1:   ; [c64_ir] JumpIf0(2)
000241r 2  CA               dex
000242r 2  CA               dex
000243r 2  B5 02            lda $02,x
000245r 2  15 03            ora $03,x
000247r 2  D0 03            bne *+5
000249r 2  4C rr rr         jmp @target_2
00024Cr 2               
00024Cr 2               @target_1:
00024Cr 2               
00024Cr 2               ; src/prelude.fth:21:11 in `0=`
00024Cr 2               @OPCODE_3:   ; [c64_ir] PushLiteral(0)
00024Cr 2  E8               inx
00024Dr 2  E8               inx
00024Er 2  A9 00            lda #0
000250r 2  95 00            sta $00,x
000252r 2  A9 00            lda #0
000254r 2  95 01            sta $01,x
000256r 2               
000256r 2               ; src/prelude.fth:21:13 in `0=`
000256r 2               @OPCODE_4:   ; [c64_ir] JumpElse(3)
000256r 2  4C rr rr         jmp @target_3
000259r 2               
000259r 2               @target_2:
000259r 2               
000259r 2               ; src/prelude.fth:21:18 in `0=`
000259r 2               @OPCODE_6:   ; [c64_ir] PushLiteral(-1)
000259r 2  E8               inx
00025Ar 2  E8               inx
00025Br 2  A9 FF            lda #255
00025Dr 2  95 00            sta $00,x
00025Fr 2  A9 FF            lda #255
000261r 2  95 01            sta $01,x
000263r 2               
000263r 2               ; src/prelude.fth:21:21 in `0=`
000263r 2               @OPCODE_7:   ; [c64_ir] JumpTarget(2)
000263r 2               
000263r 2               @target_3:
000263r 2               
000263r 2               ; src/prelude.fth:21:26 in `0=`
000263r 2               @OPCODE_9:   ; [c64_ir] Exit
000263r 2  60               rts
000264r 2               .endproc
000264r 2               
000264r 2               
000264r 2               
000264r 2               
000264r 2               
000264r 2               ; function start
000264r 2               
000264r 2               .proc PAX_FN_3D
000264r 2               @target_0:
000264r 2               
000264r 2               ; src/prelude.fth:22:8 in `=`
000264r 2               @OPCODE_1:   ; [c64_ir] Call("-")
000264r 2                   ; http://www.obelisk.me.uk/6502/algorithms.html
000264r 2  CA               dex
000265r 2  CA               dex
000266r 2  38               sec
000267r 2  B5 00            lda $00,x
000269r 2  F5 02            sbc $02,x
00026Br 2  95 00            sta $00,x
00026Dr 2  B5 01            lda $01,x
00026Fr 2  F5 03            sbc $03,x
000271r 2  95 01            sta $01,x
000273r 2               
000273r 2               @target_1:
000273r 2               
000273r 2               ; src/prelude.fth:22:10 in `=`
000273r 2               @OPCODE_3:   ; [c64_ir] Call("0=")
000273r 2  20 rr rr             jsr PAX_FN_03D
000276r 2               
000276r 2               @target_2:
000276r 2               
000276r 2               ; src/prelude.fth:22:13 in `=`
000276r 2               @OPCODE_5:   ; [c64_ir] Exit
000276r 2  60               rts
000277r 2               .endproc
000277r 2               
000277r 2               
000277r 2               
000277r 2               
000277r 2               
000277r 2               ; function start
000277r 2               
000277r 2               .proc PAX_FN_or
000277r 2               @target_0:
000277r 2               
000277r 2               ; src/prelude.fth:26:8 in `or`
000277r 2               @OPCODE_1:   ; [c64_ir] Call("invert")
000277r 2  20 rr rr             jsr PAX_FN_invert
00027Ar 2               
00027Ar 2               @target_1:
00027Ar 2               
00027Ar 2               ; src/prelude.fth:26:15 in `or`
00027Ar 2               @OPCODE_3:   ; [c64_ir] Call("swap")
00027Ar 2  20 rr rr             jsr PAX_FN_swap
00027Dr 2               
00027Dr 2               @target_2:
00027Dr 2               
00027Dr 2               ; src/prelude.fth:26:20 in `or`
00027Dr 2               @OPCODE_5:   ; [c64_ir] Call("invert")
00027Dr 2  20 rr rr             jsr PAX_FN_invert
000280r 2               
000280r 2               @target_3:
000280r 2               
000280r 2               ; src/prelude.fth:26:27 in `or`
000280r 2               @OPCODE_7:   ; [c64_ir] Nand
000280r 2                   ; 26
000280r 2  CA               dex
000281r 2  CA               dex
000282r 2  B5 00            lda $00,x
000284r 2  35 02            and $02,x
000286r 2  49 FF            eor #$ff
000288r 2  95 00            sta $00,x
00028Ar 2  B5 01            lda $01,x
00028Cr 2  35 03            and $03,x
00028Er 2  49 FF            eor #$ff
000290r 2  95 01            sta $01,x
000292r 2               
000292r 2               ; src/prelude.fth:26:32 in `or`
000292r 2               @OPCODE_8:   ; [c64_ir] Exit
000292r 2  60               rts
000293r 2               .endproc
000293r 2               
000293r 2               
000293r 2               
000293r 2               
000293r 2               
000293r 2               ; function start
000293r 2               
000293r 2               .proc PAX_FN_and
000293r 2               @target_0:
000293r 2               
000293r 2               ; src/prelude.fth:28:9 in `and`
000293r 2               @OPCODE_1:   ; [c64_ir] Nand
000293r 2                   ; 26
000293r 2  CA               dex
000294r 2  CA               dex
000295r 2  B5 00            lda $00,x
000297r 2  35 02            and $02,x
000299r 2  49 FF            eor #$ff
00029Br 2  95 00            sta $00,x
00029Dr 2  B5 01            lda $01,x
00029Fr 2  35 03            and $03,x
0002A1r 2  49 FF            eor #$ff
0002A3r 2  95 01            sta $01,x
0002A5r 2               
0002A5r 2               ; src/prelude.fth:28:14 in `and`
0002A5r 2               @OPCODE_2:   ; [c64_ir] Call("invert")
0002A5r 2  20 rr rr             jsr PAX_FN_invert
0002A8r 2               
0002A8r 2               @target_1:
0002A8r 2               
0002A8r 2               ; src/prelude.fth:28:21 in `and`
0002A8r 2               @OPCODE_4:   ; [c64_ir] Exit
0002A8r 2  60               rts
0002A9r 2               .endproc
0002A9r 2               
0002A9r 2               
0002A9r 2               
0002A9r 2               
0002A9r 2               
0002A9r 2               ; function start
0002A9r 2               
0002A9r 2               .proc PAX_FN_loopimpl
0002A9r 2               @target_0:
0002A9r 2               
0002A9r 2               ; src/prelude.fth:33:12 in `loopimpl`
0002A9r 2               @OPCODE_1:   ; [c64_ir] AltPop
0002A9r 2  E8               inx
0002AAr 2  E8               inx
0002ABr 2  68               pla
0002ACr 2  95 00            sta $00,x
0002AEr 2  68               pla
0002AFr 2  95 01            sta $01,x
0002B1r 2               
0002B1r 2               ; src/prelude.fth:33:15 in `loopimpl`
0002B1r 2               @OPCODE_2:   ; [c64_ir] AltPop
0002B1r 2  E8               inx
0002B2r 2  E8               inx
0002B3r 2  68               pla
0002B4r 2  95 00            sta $00,x
0002B6r 2  68               pla
0002B7r 2  95 01            sta $01,x
0002B9r 2               
0002B9r 2               ; src/prelude.fth:33:18 in `loopimpl`
0002B9r 2               @OPCODE_3:   ; [c64_ir] AltPop
0002B9r 2  E8               inx
0002BAr 2  E8               inx
0002BBr 2  68               pla
0002BCr 2  95 00            sta $00,x
0002BEr 2  68               pla
0002BFr 2  95 01            sta $01,x
0002C1r 2               
0002C1r 2               ; src/prelude.fth:33:21 in `loopimpl`
0002C1r 2               @OPCODE_4:   ; [c64_ir] Call("1+")
0002C1r 2  20 rr rr             jsr PAX_FN_12B
0002C4r 2               
0002C4r 2               @target_1:
0002C4r 2               
0002C4r 2               ; src/prelude.fth:33:24 in `loopimpl`
0002C4r 2               @OPCODE_6:   ; [c64_ir] Call("2dup")
0002C4r 2  20 rr rr             jsr PAX_FN_2dup
0002C7r 2               
0002C7r 2               @target_2:
0002C7r 2               
0002C7r 2               ; src/prelude.fth:33:29 in `loopimpl`
0002C7r 2               @OPCODE_8:   ; [c64_ir] AltPush
0002C7r 2  CA               dex
0002C8r 2  CA               dex
0002C9r 2  B5 03            lda $03,x
0002CBr 2  48               pha
0002CCr 2  B5 02            lda $02,x
0002CEr 2  48               pha
0002CFr 2               
0002CFr 2               ; src/prelude.fth:33:32 in `loopimpl`
0002CFr 2               @OPCODE_9:   ; [c64_ir] AltPush
0002CFr 2  CA               dex
0002D0r 2  CA               dex
0002D1r 2  B5 03            lda $03,x
0002D3r 2  48               pha
0002D4r 2  B5 02            lda $02,x
0002D6r 2  48               pha
0002D7r 2               
0002D7r 2               ; src/prelude.fth:33:35 in `loopimpl`
0002D7r 2               @OPCODE_10:   ; [c64_ir] Call("=")
0002D7r 2  20 rr rr             jsr PAX_FN_3D
0002DAr 2               
0002DAr 2               @target_3:
0002DAr 2               
0002DAr 2               ; src/prelude.fth:33:37 in `loopimpl`
0002DAr 2               @OPCODE_12:   ; [c64_ir] Call("swap")
0002DAr 2  20 rr rr             jsr PAX_FN_swap
0002DDr 2               
0002DDr 2               @target_4:
0002DDr 2               
0002DDr 2               ; src/prelude.fth:33:42 in `loopimpl`
0002DDr 2               @OPCODE_14:   ; [c64_ir] AltPush
0002DDr 2  CA               dex
0002DEr 2  CA               dex
0002DFr 2  B5 03            lda $03,x
0002E1r 2  48               pha
0002E2r 2  B5 02            lda $02,x
0002E4r 2  48               pha
0002E5r 2               
0002E5r 2               ; src/prelude.fth:33:45 in `loopimpl`
0002E5r 2               @OPCODE_15:   ; [c64_ir] Exit
0002E5r 2  60               rts
0002E6r 2               .endproc
0002E6r 2               
0002E6r 2               
0002E6r 2               
0002E6r 2               
0002E6r 2               
0002E6r 2               ; function start
0002E6r 2               
0002E6r 2               .proc PAX_FN_2Dloopimpl
0002E6r 2               @target_0:
0002E6r 2               
0002E6r 2               ; src/prelude.fth:35:13 in `-loopimpl`
0002E6r 2               @OPCODE_1:   ; [c64_ir] AltPop
0002E6r 2  E8               inx
0002E7r 2  E8               inx
0002E8r 2  68               pla
0002E9r 2  95 00            sta $00,x
0002EBr 2  68               pla
0002ECr 2  95 01            sta $01,x
0002EEr 2               
0002EEr 2               ; src/prelude.fth:35:16 in `-loopimpl`
0002EEr 2               @OPCODE_2:   ; [c64_ir] Call("swap")
0002EEr 2  20 rr rr             jsr PAX_FN_swap
0002F1r 2               
0002F1r 2               @target_1:
0002F1r 2               
0002F1r 2               ; src/prelude.fth:35:21 in `-loopimpl`
0002F1r 2               @OPCODE_4:   ; [c64_ir] AltPop
0002F1r 2  E8               inx
0002F2r 2  E8               inx
0002F3r 2  68               pla
0002F4r 2  95 00            sta $00,x
0002F6r 2  68               pla
0002F7r 2  95 01            sta $01,x
0002F9r 2               
0002F9r 2               ; src/prelude.fth:35:24 in `-loopimpl`
0002F9r 2               @OPCODE_5:   ; [c64_ir] Call("swap")
0002F9r 2  20 rr rr             jsr PAX_FN_swap
0002FCr 2               
0002FCr 2               @target_2:
0002FCr 2               
0002FCr 2               ; src/prelude.fth:35:29 in `-loopimpl`
0002FCr 2               @OPCODE_7:   ; [c64_ir] AltPop
0002FCr 2  E8               inx
0002FDr 2  E8               inx
0002FEr 2  68               pla
0002FFr 2  95 00            sta $00,x
000301r 2  68               pla
000302r 2  95 01            sta $01,x
000304r 2               
000304r 2               ; src/prelude.fth:35:32 in `-loopimpl`
000304r 2               @OPCODE_8:   ; [c64_ir] Call("swap")
000304r 2  20 rr rr             jsr PAX_FN_swap
000307r 2               
000307r 2               @target_3:
000307r 2               
000307r 2               ; src/prelude.fth:35:37 in `-loopimpl`
000307r 2               @OPCODE_10:   ; [c64_ir] Call("-")
000307r 2                   ; http://www.obelisk.me.uk/6502/algorithms.html
000307r 2  CA               dex
000308r 2  CA               dex
000309r 2  38               sec
00030Ar 2  B5 00            lda $00,x
00030Cr 2  F5 02            sbc $02,x
00030Er 2  95 00            sta $00,x
000310r 2  B5 01            lda $01,x
000312r 2  F5 03            sbc $03,x
000314r 2  95 01            sta $01,x
000316r 2               
000316r 2               @target_4:
000316r 2               
000316r 2               ; src/prelude.fth:35:39 in `-loopimpl`
000316r 2               @OPCODE_12:   ; [c64_ir] Call("2dup")
000316r 2  20 rr rr             jsr PAX_FN_2dup
000319r 2               
000319r 2               @target_5:
000319r 2               
000319r 2               ; src/prelude.fth:35:44 in `-loopimpl`
000319r 2               @OPCODE_14:   ; [c64_ir] AltPush
000319r 2  CA               dex
00031Ar 2  CA               dex
00031Br 2  B5 03            lda $03,x
00031Dr 2  48               pha
00031Er 2  B5 02            lda $02,x
000320r 2  48               pha
000321r 2               
000321r 2               ; src/prelude.fth:35:47 in `-loopimpl`
000321r 2               @OPCODE_15:   ; [c64_ir] AltPush
000321r 2  CA               dex
000322r 2  CA               dex
000323r 2  B5 03            lda $03,x
000325r 2  48               pha
000326r 2  B5 02            lda $02,x
000328r 2  48               pha
000329r 2               
000329r 2               ; src/prelude.fth:35:50 in `-loopimpl`
000329r 2               @OPCODE_16:   ; [c64_ir] Call("=")
000329r 2  20 rr rr             jsr PAX_FN_3D
00032Cr 2               
00032Cr 2               @target_6:
00032Cr 2               
00032Cr 2               ; src/prelude.fth:35:52 in `-loopimpl`
00032Cr 2               @OPCODE_18:   ; [c64_ir] Call("swap")
00032Cr 2  20 rr rr             jsr PAX_FN_swap
00032Fr 2               
00032Fr 2               @target_7:
00032Fr 2               
00032Fr 2               ; src/prelude.fth:35:57 in `-loopimpl`
00032Fr 2               @OPCODE_20:   ; [c64_ir] AltPush
00032Fr 2  CA               dex
000330r 2  CA               dex
000331r 2  B5 03            lda $03,x
000333r 2  48               pha
000334r 2  B5 02            lda $02,x
000336r 2  48               pha
000337r 2               
000337r 2               ; src/prelude.fth:35:60 in `-loopimpl`
000337r 2               @OPCODE_21:   ; [c64_ir] Exit
000337r 2  60               rts
000338r 2               .endproc
000338r 2               
000338r 2               
000338r 2               
000338r 2               
000338r 2               
000338r 2               ; function start
000338r 2               
000338r 2               .proc PAX_FN_i
000338r 2               @target_0:
000338r 2               
000338r 2               ; src/prelude.fth:38:5 in `i`
000338r 2               @OPCODE_1:   ; [c64_ir] AltPop
000338r 2  E8               inx
000339r 2  E8               inx
00033Ar 2  68               pla
00033Br 2  95 00            sta $00,x
00033Dr 2  68               pla
00033Er 2  95 01            sta $01,x
000340r 2               
000340r 2               ; src/prelude.fth:38:8 in `i`
000340r 2               @OPCODE_2:   ; [c64_ir] AltPop
000340r 2  E8               inx
000341r 2  E8               inx
000342r 2  68               pla
000343r 2  95 00            sta $00,x
000345r 2  68               pla
000346r 2  95 01            sta $01,x
000348r 2               
000348r 2               ; src/prelude.fth:38:11 in `i`
000348r 2               @OPCODE_3:   ; [c64_ir] AltPop
000348r 2  E8               inx
000349r 2  E8               inx
00034Ar 2  68               pla
00034Br 2  95 00            sta $00,x
00034Dr 2  68               pla
00034Er 2  95 01            sta $01,x
000350r 2               
000350r 2               ; src/prelude.fth:38:14 in `i`
000350r 2               @OPCODE_4:   ; [c64_ir] TempStore
000350r 2  CA               dex
000351r 2  CA               dex
000352r 2  B5 03            lda $03,x
000354r 2  85 96            sta TEMP_PAX2
000356r 2  B5 02            lda $02,x
000358r 2  85 95            sta TEMP_PAX1
00035Ar 2               
00035Ar 2               ; src/prelude.fth:38:20 in `i`
00035Ar 2               @OPCODE_5:   ; [c64_ir] TempLoad
00035Ar 2  E8               inx
00035Br 2  E8               inx
00035Cr 2  A5 95            lda TEMP_PAX1
00035Er 2  95 00            sta $00,x
000360r 2  A5 96            lda TEMP_PAX2
000362r 2  95 01            sta $01,x
000364r 2               
000364r 2               ; src/prelude.fth:38:26 in `i`
000364r 2               @OPCODE_6:   ; [c64_ir] AltPush
000364r 2  CA               dex
000365r 2  CA               dex
000366r 2  B5 03            lda $03,x
000368r 2  48               pha
000369r 2  B5 02            lda $02,x
00036Br 2  48               pha
00036Cr 2               
00036Cr 2               ; src/prelude.fth:38:29 in `i`
00036Cr 2               @OPCODE_7:   ; [c64_ir] AltPush
00036Cr 2  CA               dex
00036Dr 2  CA               dex
00036Er 2  B5 03            lda $03,x
000370r 2  48               pha
000371r 2  B5 02            lda $02,x
000373r 2  48               pha
000374r 2               
000374r 2               ; src/prelude.fth:38:32 in `i`
000374r 2               @OPCODE_8:   ; [c64_ir] AltPush
000374r 2  CA               dex
000375r 2  CA               dex
000376r 2  B5 03            lda $03,x
000378r 2  48               pha
000379r 2  B5 02            lda $02,x
00037Br 2  48               pha
00037Cr 2               
00037Cr 2               ; src/prelude.fth:38:35 in `i`
00037Cr 2               @OPCODE_9:   ; [c64_ir] TempLoad
00037Cr 2  E8               inx
00037Dr 2  E8               inx
00037Er 2  A5 95            lda TEMP_PAX1
000380r 2  95 00            sta $00,x
000382r 2  A5 96            lda TEMP_PAX2
000384r 2  95 01            sta $01,x
000386r 2               
000386r 2               ; src/prelude.fth:38:41 in `i`
000386r 2               @OPCODE_10:   ; [c64_ir] Exit
000386r 2  60               rts
000387r 2               .endproc
000387r 2               
000387r 2               
000387r 2               
000387r 2               
000387r 2               
000387r 2               ; function start
000387r 2               
000387r 2               .proc PAX_FN_cells
000387r 2               @target_0:
000387r 2               
000387r 2               ; src/prelude.fth:41:9 in `cells`
000387r 2               @OPCODE_1:   ; [c64_ir] Call("dup")
000387r 2  20 rr rr             jsr PAX_FN_dup
00038Ar 2               
00038Ar 2               @target_1:
00038Ar 2               
00038Ar 2               ; src/prelude.fth:41:13 in `cells`
00038Ar 2               @OPCODE_3:   ; [c64_ir] Add
00038Ar 2                   ; 21
00038Ar 2  CA               dex
00038Br 2  CA               dex
00038Cr 2  18               clc
00038Dr 2  B5 00            lda $00,x
00038Fr 2  75 02            adc $02,x
000391r 2  95 00            sta $00,x
000393r 2  B5 01            lda $01,x
000395r 2  75 03            adc $03,x
000397r 2  95 01            sta $01,x
000399r 2               
000399r 2               ; src/prelude.fth:41:15 in `cells`
000399r 2               @OPCODE_4:   ; [c64_ir] Exit
000399r 2  60               rts
00039Ar 2               .endproc
00039Ar 2               
00039Ar 2               
00039Ar 2               
00039Ar 2               
00039Ar 2               
00039Ar 2               ; function start
00039Ar 2               
00039Ar 2               .proc PAX_FN_03C
00039Ar 2               @target_0:
00039Ar 2               
00039Ar 2               ; src/prelude.fth:47:8 in `0<`
00039Ar 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-32768)
00039Ar 2  E8               inx
00039Br 2  E8               inx
00039Cr 2  A9 00            lda #0
00039Er 2  95 00            sta $00,x
0003A0r 2  A9 80            lda #128
0003A2r 2  95 01            sta $01,x
0003A4r 2               
0003A4r 2               ; src/prelude.fth:47:14 in `0<`
0003A4r 2               @OPCODE_2:   ; [c64_ir] Nand
0003A4r 2                   ; 26
0003A4r 2  CA               dex
0003A5r 2  CA               dex
0003A6r 2  B5 00            lda $00,x
0003A8r 2  35 02            and $02,x
0003AAr 2  49 FF            eor #$ff
0003ACr 2  95 00            sta $00,x
0003AEr 2  B5 01            lda $01,x
0003B0r 2  35 03            and $03,x
0003B2r 2  49 FF            eor #$ff
0003B4r 2  95 01            sta $01,x
0003B6r 2               
0003B6r 2               ; src/prelude.fth:47:19 in `0<`
0003B6r 2               @OPCODE_3:   ; [c64_ir] Call("invert")
0003B6r 2  20 rr rr             jsr PAX_FN_invert
0003B9r 2               
0003B9r 2               @target_1:
0003B9r 2               
0003B9r 2               ; src/prelude.fth:47:26 in `0<`
0003B9r 2               @OPCODE_5:   ; [c64_ir] JumpIf0(3)
0003B9r 2  CA               dex
0003BAr 2  CA               dex
0003BBr 2  B5 02            lda $02,x
0003BDr 2  15 03            ora $03,x
0003BFr 2  D0 03            bne *+5
0003C1r 2  4C rr rr         jmp @target_3
0003C4r 2               
0003C4r 2               @target_2:
0003C4r 2               
0003C4r 2               ; src/prelude.fth:47:29 in `0<`
0003C4r 2               @OPCODE_7:   ; [c64_ir] PushLiteral(-1)
0003C4r 2  E8               inx
0003C5r 2  E8               inx
0003C6r 2  A9 FF            lda #255
0003C8r 2  95 00            sta $00,x
0003CAr 2  A9 FF            lda #255
0003CCr 2  95 01            sta $01,x
0003CEr 2               
0003CEr 2               ; src/prelude.fth:47:32 in `0<`
0003CEr 2               @OPCODE_8:   ; [c64_ir] JumpElse(4)
0003CEr 2  4C rr rr         jmp @target_4
0003D1r 2               
0003D1r 2               @target_3:
0003D1r 2               
0003D1r 2               ; src/prelude.fth:47:37 in `0<`
0003D1r 2               @OPCODE_10:   ; [c64_ir] PushLiteral(0)
0003D1r 2  E8               inx
0003D2r 2  E8               inx
0003D3r 2  A9 00            lda #0
0003D5r 2  95 00            sta $00,x
0003D7r 2  A9 00            lda #0
0003D9r 2  95 01            sta $01,x
0003DBr 2               
0003DBr 2               ; src/prelude.fth:47:39 in `0<`
0003DBr 2               @OPCODE_11:   ; [c64_ir] JumpTarget(3)
0003DBr 2               
0003DBr 2               @target_4:
0003DBr 2               
0003DBr 2               ; src/prelude.fth:47:44 in `0<`
0003DBr 2               @OPCODE_13:   ; [c64_ir] Exit
0003DBr 2  60               rts
0003DCr 2               .endproc
0003DCr 2               
0003DCr 2               
0003DCr 2               
0003DCr 2               
0003DCr 2               
0003DCr 2               ; function start
0003DCr 2               
0003DCr 2               .proc PAX_FN_25
0003DCr 2               @target_0:
0003DCr 2               
0003DCr 2               ; src/prelude.fth:48:34 in `%`
0003DCr 2               @OPCODE_1:   ; [c64_ir] LoopTarget(0)
0003DCr 2               
0003DCr 2               @target_1:
0003DCr 2               
0003DCr 2               ; src/prelude.fth:48:40 in `%`
0003DCr 2               @OPCODE_3:   ; [c64_ir] Call("2dup")
0003DCr 2  20 rr rr             jsr PAX_FN_2dup
0003DFr 2               
0003DFr 2               @target_2:
0003DFr 2               
0003DFr 2               ; src/prelude.fth:48:45 in `%`
0003DFr 2               @OPCODE_5:   ; [c64_ir] Call("-")
0003DFr 2                   ; http://www.obelisk.me.uk/6502/algorithms.html
0003DFr 2  CA               dex
0003E0r 2  CA               dex
0003E1r 2  38               sec
0003E2r 2  B5 00            lda $00,x
0003E4r 2  F5 02            sbc $02,x
0003E6r 2  95 00            sta $00,x
0003E8r 2  B5 01            lda $01,x
0003EAr 2  F5 03            sbc $03,x
0003ECr 2  95 01            sta $01,x
0003EEr 2               
0003EEr 2               @target_3:
0003EEr 2               
0003EEr 2               ; src/prelude.fth:48:47 in `%`
0003EEr 2               @OPCODE_7:   ; [c64_ir] Call("dup")
0003EEr 2  20 rr rr             jsr PAX_FN_dup
0003F1r 2               
0003F1r 2               @target_4:
0003F1r 2               
0003F1r 2               ; src/prelude.fth:48:51 in `%`
0003F1r 2               @OPCODE_9:   ; [c64_ir] Call("0<")
0003F1r 2  20 rr rr             jsr PAX_FN_03C
0003F4r 2               
0003F4r 2               @target_5:
0003F4r 2               
0003F4r 2               ; src/prelude.fth:48:54 in `%`
0003F4r 2               @OPCODE_11:   ; [c64_ir] JumpIf0(7)
0003F4r 2  CA               dex
0003F5r 2  CA               dex
0003F6r 2  B5 02            lda $02,x
0003F8r 2  15 03            ora $03,x
0003FAr 2  D0 03            bne *+5
0003FCr 2  4C rr rr         jmp @target_7
0003FFr 2               
0003FFr 2               @target_6:
0003FFr 2               
0003FFr 2               ; src/prelude.fth:48:57 in `%`
0003FFr 2               @OPCODE_13:   ; [c64_ir] Add
0003FFr 2                   ; 21
0003FFr 2  CA               dex
000400r 2  CA               dex
000401r 2  18               clc
000402r 2  B5 00            lda $00,x
000404r 2  75 02            adc $02,x
000406r 2  95 00            sta $00,x
000408r 2  B5 01            lda $01,x
00040Ar 2  75 03            adc $03,x
00040Cr 2  95 01            sta $01,x
00040Er 2               
00040Er 2               ; src/prelude.fth:48:59 in `%`
00040Er 2               @OPCODE_14:   ; [c64_ir] PushLiteral(-1)
00040Er 2  E8               inx
00040Fr 2  E8               inx
000410r 2  A9 FF            lda #255
000412r 2  95 00            sta $00,x
000414r 2  A9 FF            lda #255
000416r 2  95 01            sta $01,x
000418r 2               
000418r 2               ; src/prelude.fth:48:62 in `%`
000418r 2               @OPCODE_15:   ; [c64_ir] JumpElse(10)
000418r 2  4C rr rr         jmp @target_10
00041Br 2               
00041Br 2               @target_7:
00041Br 2               
00041Br 2               ; src/prelude.fth:48:67 in `%`
00041Br 2               @OPCODE_17:   ; [c64_ir] Call("rot")
00041Br 2  20 rr rr             jsr PAX_FN_rot
00041Er 2               
00041Er 2               @target_8:
00041Er 2               
00041Er 2               ; src/prelude.fth:48:71 in `%`
00041Er 2               @OPCODE_19:   ; [c64_ir] Drop
00041Er 2  CA               dex
00041Fr 2  CA               dex
000420r 2               
000420r 2               ; src/prelude.fth:48:76 in `%`
000420r 2               @OPCODE_20:   ; [c64_ir] Call("swap")
000420r 2  20 rr rr             jsr PAX_FN_swap
000423r 2               
000423r 2               @target_9:
000423r 2               
000423r 2               ; src/prelude.fth:48:81 in `%`
000423r 2               @OPCODE_22:   ; [c64_ir] PushLiteral(0)
000423r 2  E8               inx
000424r 2  E8               inx
000425r 2  A9 00            lda #0
000427r 2  95 00            sta $00,x
000429r 2  A9 00            lda #0
00042Br 2  95 01            sta $01,x
00042Dr 2               
00042Dr 2               ; src/prelude.fth:48:83 in `%`
00042Dr 2               @OPCODE_23:   ; [c64_ir] JumpTarget(9)
00042Dr 2               
00042Dr 2               @target_10:
00042Dr 2               
00042Dr 2               ; src/prelude.fth:48:88 in `%`
00042Dr 2               @OPCODE_25:   ; [c64_ir] LoopIf0(1)
00042Dr 2  CA               dex
00042Er 2  CA               dex
00042Fr 2  B5 02            lda $02,x
000431r 2  15 03            ora $03,x
000433r 2  D0 03            bne *+5
000435r 2  4C rr rr         jmp @target_1
000438r 2               
000438r 2               @target_11:
000438r 2               
000438r 2               ; src/prelude.fth:48:94 in `%`
000438r 2               @OPCODE_27:   ; [c64_ir] Call("swap")
000438r 2  20 rr rr             jsr PAX_FN_swap
00043Br 2               
00043Br 2               @target_12:
00043Br 2               
00043Br 2               ; src/prelude.fth:48:99 in `%`
00043Br 2               @OPCODE_29:   ; [c64_ir] Drop
00043Br 2  CA               dex
00043Cr 2  CA               dex
00043Dr 2               
00043Dr 2               ; src/prelude.fth:48:104 in `%`
00043Dr 2               @OPCODE_30:   ; [c64_ir] Exit
00043Dr 2  60               rts
00043Er 2               .endproc
00043Er 2               
00043Er 2               
00043Er 2               
00043Er 2               
00043Er 2               
00043Er 2               ; function start
00043Er 2               
00043Er 2               .proc PAX_FN_random
00043Er 2               @target_0:
00043Er 2               
00043Er 2               ; snake.fth:8:10 in `random`
00043Er 2               @OPCODE_1:   ; [c64_ir] PushLiteral(127)
00043Er 2  E8               inx
00043Fr 2  E8               inx
000440r 2  A9 7F            lda #127
000442r 2  95 00            sta $00,x
000444r 2  A9 00            lda #0
000446r 2  95 01            sta $01,x
000448r 2               
000448r 2               ; snake.fth:8:26 in `random`
000448r 2               @OPCODE_2:   ; [c64_ir] Load
000448r 2  A1 00            lda ($00,x)
00044Ar 2  95 00            sta $00,x
00044Cr 2  A9 00            lda #0
00044Er 2  95 01            sta $01,x
000450r 2               
000450r 2               ; snake.fth:8:28 in `random`
000450r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(255)
000450r 2  E8               inx
000451r 2  E8               inx
000452r 2  A9 FF            lda #255
000454r 2  95 00            sta $00,x
000456r 2  A9 00            lda #0
000458r 2  95 01            sta $01,x
00045Ar 2               
00045Ar 2               ; snake.fth:8:32 in `random`
00045Ar 2               @OPCODE_4:   ; [c64_ir] Call("and")
00045Ar 2  20 rr rr             jsr PAX_FN_and
00045Dr 2               
00045Dr 2               @target_1:
00045Dr 2               
00045Dr 2               ; snake.fth:8:36 in `random`
00045Dr 2               @OPCODE_6:   ; [c64_ir] Call("swap")
00045Dr 2  20 rr rr             jsr PAX_FN_swap
000460r 2               
000460r 2               @target_2:
000460r 2               
000460r 2               ; snake.fth:8:41 in `random`
000460r 2               @OPCODE_8:   ; [c64_ir] Call("%")
000460r 2  20 rr rr             jsr PAX_FN_25
000463r 2               
000463r 2               @target_3:
000463r 2               
000463r 2               ; snake.fth:8:43 in `random`
000463r 2               @OPCODE_10:   ; [c64_ir] Exit
000463r 2  60               rts
000464r 2               .endproc
000464r 2               
000464r 2               
000464r 2               
000464r 2               
000464r 2               
000464r 2               ; function start
000464r 2               
000464r 2               .proc PAX_FN_snake2Dx
000464r 2               @target_0:
000464r 2               
000464r 2               ; snake.fth:42:3 in `snake-x`
000464r 2               @OPCODE_1:   ; [c64_ir] Call("cells")
000464r 2  20 rr rr             jsr PAX_FN_cells
000467r 2               
000467r 2               @target_1:
000467r 2               
000467r 2               ; snake.fth:42:9 in `snake-x`
000467r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(-28668)
000467r 2  E8               inx
000468r 2  E8               inx
000469r 2  A9 04            lda #4
00046Br 2  95 00            sta $00,x
00046Dr 2  A9 90            lda #144
00046Fr 2  95 01            sta $01,x
000471r 2               
000471r 2               ; snake.fth:42:22 in `snake-x`
000471r 2               @OPCODE_4:   ; [c64_ir] Add
000471r 2                   ; 21
000471r 2  CA               dex
000472r 2  CA               dex
000473r 2  18               clc
000474r 2  B5 00            lda $00,x
000476r 2  75 02            adc $02,x
000478r 2  95 00            sta $00,x
00047Ar 2  B5 01            lda $01,x
00047Cr 2  75 03            adc $03,x
00047Er 2  95 01            sta $01,x
000480r 2               
000480r 2               ; snake.fth:42:24 in `snake-x`
000480r 2               @OPCODE_5:   ; [c64_ir] Exit
000480r 2  60               rts
000481r 2               .endproc
000481r 2               
000481r 2               
000481r 2               
000481r 2               
000481r 2               
000481r 2               ; function start
000481r 2               
000481r 2               .proc PAX_FN_snake2Dy
000481r 2               @target_0:
000481r 2               
000481r 2               ; snake.fth:45:3 in `snake-y`
000481r 2               @OPCODE_1:   ; [c64_ir] Call("cells")
000481r 2  20 rr rr             jsr PAX_FN_cells
000484r 2               
000484r 2               @target_1:
000484r 2               
000484r 2               ; snake.fth:45:9 in `snake-y`
000484r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(-27666)
000484r 2  E8               inx
000485r 2  E8               inx
000486r 2  A9 EE            lda #238
000488r 2  95 00            sta $00,x
00048Ar 2  A9 93            lda #147
00048Cr 2  95 01            sta $01,x
00048Er 2               
00048Er 2               ; snake.fth:45:22 in `snake-y`
00048Er 2               @OPCODE_4:   ; [c64_ir] Add
00048Er 2                   ; 21
00048Er 2  CA               dex
00048Fr 2  CA               dex
000490r 2  18               clc
000491r 2  B5 00            lda $00,x
000493r 2  75 02            adc $02,x
000495r 2  95 00            sta $00,x
000497r 2  B5 01            lda $01,x
000499r 2  75 03            adc $03,x
00049Br 2  95 01            sta $01,x
00049Dr 2               
00049Dr 2               ; snake.fth:45:24 in `snake-y`
00049Dr 2               @OPCODE_5:   ; [c64_ir] Exit
00049Dr 2  60               rts
00049Er 2               .endproc
00049Er 2               
00049Er 2               
00049Er 2               
00049Er 2               
00049Er 2               
00049Er 2               ; function start
00049Er 2               
00049Er 2               .proc PAX_FN_convert2Dx2Dy
00049Er 2               @target_0:
00049Er 2               
00049Er 2               ; snake.fth:48:34 in `convert-x-y`
00049Er 2               @OPCODE_1:   ; [c64_ir] PushLiteral(40)
00049Er 2  E8               inx
00049Fr 2  E8               inx
0004A0r 2  A9 28            lda #40
0004A2r 2  95 00            sta $00,x
0004A4r 2  A9 00            lda #0
0004A6r 2  95 01            sta $01,x
0004A8r 2               
0004A8r 2               ; snake.fth:48:37 in `convert-x-y`
0004A8r 2               @OPCODE_2:   ; [c64_ir] Call("*")
0004A8r 2  20 rr rr             jsr replace_PAX_FN_2A
0004ABr 2               
0004ABr 2               @target_1:
0004ABr 2               
0004ABr 2               ; snake.fth:48:39 in `convert-x-y`
0004ABr 2               @OPCODE_4:   ; [c64_ir] Add
0004ABr 2                   ; 21
0004ABr 2  CA               dex
0004ACr 2  CA               dex
0004ADr 2  18               clc
0004AEr 2  B5 00            lda $00,x
0004B0r 2  75 02            adc $02,x
0004B2r 2  95 00            sta $00,x
0004B4r 2  B5 01            lda $01,x
0004B6r 2  75 03            adc $03,x
0004B8r 2  95 01            sta $01,x
0004BAr 2               
0004BAr 2               ; snake.fth:48:41 in `convert-x-y`
0004BAr 2               @OPCODE_5:   ; [c64_ir] Exit
0004BAr 2  60               rts
0004BBr 2               .endproc
0004BBr 2               
0004BBr 2               
0004BBr 2               
0004BBr 2               
0004BBr 2               
0004BBr 2               ; function start
0004BBr 2               
0004BBr 2               .proc PAX_FN_draw2Dindex
0004BBr 2               @target_0:
0004BBr 2               
0004BBr 2               ; snake.fth:49:34 in `draw-index`
0004BBr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(1024)
0004BBr 2  E8               inx
0004BCr 2  E8               inx
0004BDr 2  A9 00            lda #0
0004BFr 2  95 00            sta $00,x
0004C1r 2  A9 04            lda #4
0004C3r 2  95 01            sta $01,x
0004C5r 2               
0004C5r 2               ; snake.fth:49:43 in `draw-index`
0004C5r 2               @OPCODE_2:   ; [c64_ir] Add
0004C5r 2                   ; 21
0004C5r 2  CA               dex
0004C6r 2  CA               dex
0004C7r 2  18               clc
0004C8r 2  B5 00            lda $00,x
0004CAr 2  75 02            adc $02,x
0004CCr 2  95 00            sta $00,x
0004CEr 2  B5 01            lda $01,x
0004D0r 2  75 03            adc $03,x
0004D2r 2  95 01            sta $01,x
0004D4r 2               
0004D4r 2               ; snake.fth:49:45 in `draw-index`
0004D4r 2               @OPCODE_3:   ; [c64_ir] Store8
0004D4r 2  CA               dex
0004D5r 2  CA               dex
0004D6r 2  CA               dex
0004D7r 2  CA               dex
0004D8r 2  B5 02            lda $02,x
0004DAr 2  81 04            sta ($04,x)
0004DCr 2                   ; TODO high byte
0004DCr 2               
0004DCr 2               ; snake.fth:49:48 in `draw-index`
0004DCr 2               @OPCODE_4:   ; [c64_ir] Exit
0004DCr 2  60               rts
0004DDr 2               .endproc
0004DDr 2               
0004DDr 2               
0004DDr 2               
0004DDr 2               
0004DDr 2               
0004DDr 2               ; function start
0004DDr 2               
0004DDr 2               .proc PAX_FN_draw
0004DDr 2               @target_0:
0004DDr 2               
0004DDr 2               ; snake.fth:50:26 in `draw`
0004DDr 2               @OPCODE_1:   ; [c64_ir] Call("convert-x-y")
0004DDr 2  20 rr rr             jsr PAX_FN_convert2Dx2Dy
0004E0r 2               
0004E0r 2               @target_1:
0004E0r 2               
0004E0r 2               ; snake.fth:50:38 in `draw`
0004E0r 2               @OPCODE_3:   ; [c64_ir] Call("draw-index")
0004E0r 2  20 rr rr             jsr PAX_FN_draw2Dindex
0004E3r 2               
0004E3r 2               @target_2:
0004E3r 2               
0004E3r 2               ; snake.fth:50:49 in `draw`
0004E3r 2               @OPCODE_5:   ; [c64_ir] Exit
0004E3r 2  60               rts
0004E4r 2               .endproc
0004E4r 2               
0004E4r 2               
0004E4r 2               
0004E4r 2               
0004E4r 2               
0004E4r 2               ; function start
0004E4r 2               
0004E4r 2               .proc PAX_FN_draw2Dwhite
0004E4r 2               @target_0:
0004E4r 2               
0004E4r 2               ; snake.fth:51:26 in `draw-white`
0004E4r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(32)
0004E4r 2  E8               inx
0004E5r 2  E8               inx
0004E6r 2  A9 20            lda #32
0004E8r 2  95 00            sta $00,x
0004EAr 2  A9 00            lda #0
0004ECr 2  95 01            sta $01,x
0004EEr 2               
0004EEr 2               ; snake.fth:51:38 in `draw-white`
0004EEr 2               @OPCODE_2:   ; [c64_ir] Call("rot")
0004EEr 2  20 rr rr             jsr PAX_FN_rot
0004F1r 2               
0004F1r 2               @target_1:
0004F1r 2               
0004F1r 2               ; snake.fth:51:42 in `draw-white`
0004F1r 2               @OPCODE_4:   ; [c64_ir] Call("rot")
0004F1r 2  20 rr rr             jsr PAX_FN_rot
0004F4r 2               
0004F4r 2               @target_2:
0004F4r 2               
0004F4r 2               ; snake.fth:51:46 in `draw-white`
0004F4r 2               @OPCODE_6:   ; [c64_ir] Call("draw")
0004F4r 2  20 rr rr             jsr PAX_FN_draw
0004F7r 2               
0004F7r 2               @target_3:
0004F7r 2               
0004F7r 2               ; snake.fth:51:51 in `draw-white`
0004F7r 2               @OPCODE_8:   ; [c64_ir] Exit
0004F7r 2  60               rts
0004F8r 2               .endproc
0004F8r 2               
0004F8r 2               
0004F8r 2               
0004F8r 2               
0004F8r 2               
0004F8r 2               ; function start
0004F8r 2               
0004F8r 2               .proc PAX_FN_draw2Dsnake2Dtile
0004F8r 2               @target_0:
0004F8r 2               
0004F8r 2               ; snake.fth:53:31 in `draw-snake-tile`
0004F8r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(232)
0004F8r 2  E8               inx
0004F9r 2  E8               inx
0004FAr 2  A9 E8            lda #232
0004FCr 2  95 00            sta $00,x
0004FEr 2  A9 00            lda #0
000500r 2  95 01            sta $01,x
000502r 2               
000502r 2               ; snake.fth:53:36 in `draw-snake-tile`
000502r 2               @OPCODE_2:   ; [c64_ir] Call("rot")
000502r 2  20 rr rr             jsr PAX_FN_rot
000505r 2               
000505r 2               @target_1:
000505r 2               
000505r 2               ; snake.fth:53:40 in `draw-snake-tile`
000505r 2               @OPCODE_4:   ; [c64_ir] Call("rot")
000505r 2  20 rr rr             jsr PAX_FN_rot
000508r 2               
000508r 2               @target_2:
000508r 2               
000508r 2               ; snake.fth:53:44 in `draw-snake-tile`
000508r 2               @OPCODE_6:   ; [c64_ir] Call("draw")
000508r 2  20 rr rr             jsr PAX_FN_draw
00050Br 2               
00050Br 2               @target_3:
00050Br 2               
00050Br 2               ; snake.fth:53:49 in `draw-snake-tile`
00050Br 2               @OPCODE_8:   ; [c64_ir] Exit
00050Br 2  60               rts
00050Cr 2               .endproc
00050Cr 2               
00050Cr 2               
00050Cr 2               
00050Cr 2               
00050Cr 2               
00050Cr 2               ; function start
00050Cr 2               
00050Cr 2               .proc PAX_FN_draw2Dapple2Dtile
00050Cr 2               @target_0:
00050Cr 2               
00050Cr 2               ; snake.fth:54:31 in `draw-apple-tile`
00050Cr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(233)
00050Cr 2  E8               inx
00050Dr 2  E8               inx
00050Er 2  A9 E9            lda #233
000510r 2  95 00            sta $00,x
000512r 2  A9 00            lda #0
000514r 2  95 01            sta $01,x
000516r 2               
000516r 2               ; snake.fth:54:36 in `draw-apple-tile`
000516r 2               @OPCODE_2:   ; [c64_ir] Call("rot")
000516r 2  20 rr rr             jsr PAX_FN_rot
000519r 2               
000519r 2               @target_1:
000519r 2               
000519r 2               ; snake.fth:54:40 in `draw-apple-tile`
000519r 2               @OPCODE_4:   ; [c64_ir] Call("rot")
000519r 2  20 rr rr             jsr PAX_FN_rot
00051Cr 2               
00051Cr 2               @target_2:
00051Cr 2               
00051Cr 2               ; snake.fth:54:44 in `draw-apple-tile`
00051Cr 2               @OPCODE_6:   ; [c64_ir] Call("draw")
00051Cr 2  20 rr rr             jsr PAX_FN_draw
00051Fr 2               
00051Fr 2               @target_3:
00051Fr 2               
00051Fr 2               ; snake.fth:54:49 in `draw-apple-tile`
00051Fr 2               @OPCODE_8:   ; [c64_ir] Exit
00051Fr 2  60               rts
000520r 2               .endproc
000520r 2               
000520r 2               
000520r 2               
000520r 2               
000520r 2               
000520r 2               ; function start
000520r 2               
000520r 2               .proc PAX_FN_draw2Dbackground
000520r 2               @target_0:
000520r 2               
000520r 2               ; snake.fth:57:5 in `draw-background`
000520r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(0)
000520r 2  E8               inx
000521r 2  E8               inx
000522r 2  A9 00            lda #0
000524r 2  95 00            sta $00,x
000526r 2  A9 00            lda #0
000528r 2  95 01            sta $01,x
00052Ar 2               
00052Ar 2               ; snake.fth:58:5 in `draw-background`
00052Ar 2               @OPCODE_2:   ; [c64_ir] PushLiteral(25)
00052Ar 2  E8               inx
00052Br 2  E8               inx
00052Cr 2  A9 19            lda #25
00052Er 2  95 00            sta $00,x
000530r 2  A9 00            lda #0
000532r 2  95 01            sta $01,x
000534r 2               
000534r 2               ; snake.fth:58:12 in `draw-background`
000534r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(0)
000534r 2  E8               inx
000535r 2  E8               inx
000536r 2  A9 00            lda #0
000538r 2  95 00            sta $00,x
00053Ar 2  A9 00            lda #0
00053Cr 2  95 01            sta $01,x
00053Er 2               
00053Er 2               ; snake.fth:58:14 in `draw-background`
00053Er 2               @OPCODE_4:   ; [c64_ir] AltPush
00053Er 2  CA               dex
00053Fr 2  CA               dex
000540r 2  B5 03            lda $03,x
000542r 2  48               pha
000543r 2  B5 02            lda $02,x
000545r 2  48               pha
000546r 2               
000546r 2               ; snake.fth:58:14 in `draw-background`
000546r 2               @OPCODE_5:   ; [c64_ir] AltPush
000546r 2  CA               dex
000547r 2  CA               dex
000548r 2  B5 03            lda $03,x
00054Ar 2  48               pha
00054Br 2  B5 02            lda $02,x
00054Dr 2  48               pha
00054Er 2               
00054Er 2               ; snake.fth:58:14 in `draw-background`
00054Er 2               @OPCODE_6:   ; [c64_ir] LoopTarget(0)
00054Er 2               
00054Er 2               @target_1:
00054Er 2               
00054Er 2               ; snake.fth:59:9 in `draw-background`
00054Er 2               @OPCODE_8:   ; [c64_ir] PushLiteral(40)
00054Er 2  E8               inx
00054Fr 2  E8               inx
000550r 2  A9 28            lda #40
000552r 2  95 00            sta $00,x
000554r 2  A9 00            lda #0
000556r 2  95 01            sta $01,x
000558r 2               
000558r 2               ; snake.fth:59:15 in `draw-background`
000558r 2               @OPCODE_9:   ; [c64_ir] PushLiteral(0)
000558r 2  E8               inx
000559r 2  E8               inx
00055Ar 2  A9 00            lda #0
00055Cr 2  95 00            sta $00,x
00055Er 2  A9 00            lda #0
000560r 2  95 01            sta $01,x
000562r 2               
000562r 2               ; snake.fth:59:17 in `draw-background`
000562r 2               @OPCODE_10:   ; [c64_ir] AltPush
000562r 2  CA               dex
000563r 2  CA               dex
000564r 2  B5 03            lda $03,x
000566r 2  48               pha
000567r 2  B5 02            lda $02,x
000569r 2  48               pha
00056Ar 2               
00056Ar 2               ; snake.fth:59:17 in `draw-background`
00056Ar 2               @OPCODE_11:   ; [c64_ir] AltPush
00056Ar 2  CA               dex
00056Br 2  CA               dex
00056Cr 2  B5 03            lda $03,x
00056Er 2  48               pha
00056Fr 2  B5 02            lda $02,x
000571r 2  48               pha
000572r 2               
000572r 2               ; snake.fth:59:17 in `draw-background`
000572r 2               @OPCODE_12:   ; [c64_ir] LoopTarget(1)
000572r 2               
000572r 2               @target_2:
000572r 2               
000572r 2               ; snake.fth:60:13 in `draw-background`
000572r 2               @OPCODE_14:   ; [c64_ir] PushLiteral(32)
000572r 2  E8               inx
000573r 2  E8               inx
000574r 2  A9 20            lda #32
000576r 2  95 00            sta $00,x
000578r 2  A9 00            lda #0
00057Ar 2  95 01            sta $01,x
00057Cr 2               
00057Cr 2               ; snake.fth:60:25 in `draw-background`
00057Cr 2               @OPCODE_15:   ; [c64_ir] Call("over")
00057Cr 2  20 rr rr             jsr PAX_FN_over
00057Fr 2               
00057Fr 2               @target_3:
00057Fr 2               
00057Fr 2               ; snake.fth:60:30 in `draw-background`
00057Fr 2               @OPCODE_17:   ; [c64_ir] Call("i")
00057Fr 2  20 rr rr             jsr PAX_FN_i
000582r 2               
000582r 2               @target_4:
000582r 2               
000582r 2               ; snake.fth:60:32 in `draw-background`
000582r 2               @OPCODE_19:   ; [c64_ir] Add
000582r 2                   ; 21
000582r 2  CA               dex
000583r 2  CA               dex
000584r 2  18               clc
000585r 2  B5 00            lda $00,x
000587r 2  75 02            adc $02,x
000589r 2  95 00            sta $00,x
00058Br 2  B5 01            lda $01,x
00058Dr 2  75 03            adc $03,x
00058Fr 2  95 01            sta $01,x
000591r 2               
000591r 2               ; snake.fth:60:34 in `draw-background`
000591r 2               @OPCODE_20:   ; [c64_ir] Call("draw-index")
000591r 2  20 rr rr             jsr PAX_FN_draw2Dindex
000594r 2               
000594r 2               @target_5:
000594r 2               
000594r 2               ; snake.fth:61:9 in `draw-background`
000594r 2               @OPCODE_22:   ; [c64_ir] Call("loopimpl")
000594r 2  20 rr rr             jsr PAX_FN_loopimpl
000597r 2               
000597r 2               @target_6:
000597r 2               
000597r 2               ; snake.fth:61:9 in `draw-background`
000597r 2               @OPCODE_24:   ; [c64_ir] LoopIf0(2)
000597r 2  CA               dex
000598r 2  CA               dex
000599r 2  B5 02            lda $02,x
00059Br 2  15 03            ora $03,x
00059Dr 2  D0 03            bne *+5
00059Fr 2  4C rr rr         jmp @target_2
0005A2r 2               
0005A2r 2               @target_7:
0005A2r 2               
0005A2r 2               ; snake.fth:61:9 in `draw-background`
0005A2r 2               @OPCODE_26:   ; [c64_ir] AltPop
0005A2r 2  E8               inx
0005A3r 2  E8               inx
0005A4r 2  68               pla
0005A5r 2  95 00            sta $00,x
0005A7r 2  68               pla
0005A8r 2  95 01            sta $01,x
0005AAr 2               
0005AAr 2               ; snake.fth:61:9 in `draw-background`
0005AAr 2               @OPCODE_27:   ; [c64_ir] Drop
0005AAr 2  CA               dex
0005ABr 2  CA               dex
0005ACr 2               
0005ACr 2               ; snake.fth:61:9 in `draw-background`
0005ACr 2               @OPCODE_28:   ; [c64_ir] AltPop
0005ACr 2  E8               inx
0005ADr 2  E8               inx
0005AEr 2  68               pla
0005AFr 2  95 00            sta $00,x
0005B1r 2  68               pla
0005B2r 2  95 01            sta $01,x
0005B4r 2               
0005B4r 2               ; snake.fth:61:9 in `draw-background`
0005B4r 2               @OPCODE_29:   ; [c64_ir] Drop
0005B4r 2  CA               dex
0005B5r 2  CA               dex
0005B6r 2               
0005B6r 2               ; snake.fth:62:9 in `draw-background`
0005B6r 2               @OPCODE_30:   ; [c64_ir] PushLiteral(40)
0005B6r 2  E8               inx
0005B7r 2  E8               inx
0005B8r 2  A9 28            lda #40
0005BAr 2  95 00            sta $00,x
0005BCr 2  A9 00            lda #0
0005BEr 2  95 01            sta $01,x
0005C0r 2               
0005C0r 2               ; snake.fth:62:15 in `draw-background`
0005C0r 2               @OPCODE_31:   ; [c64_ir] Add
0005C0r 2                   ; 21
0005C0r 2  CA               dex
0005C1r 2  CA               dex
0005C2r 2  18               clc
0005C3r 2  B5 00            lda $00,x
0005C5r 2  75 02            adc $02,x
0005C7r 2  95 00            sta $00,x
0005C9r 2  B5 01            lda $01,x
0005CBr 2  75 03            adc $03,x
0005CDr 2  95 01            sta $01,x
0005CFr 2               
0005CFr 2               ; snake.fth:63:4 in `draw-background`
0005CFr 2               @OPCODE_32:   ; [c64_ir] Call("loopimpl")
0005CFr 2  20 rr rr             jsr PAX_FN_loopimpl
0005D2r 2               
0005D2r 2               @target_8:
0005D2r 2               
0005D2r 2               ; snake.fth:63:4 in `draw-background`
0005D2r 2               @OPCODE_34:   ; [c64_ir] LoopIf0(1)
0005D2r 2  CA               dex
0005D3r 2  CA               dex
0005D4r 2  B5 02            lda $02,x
0005D6r 2  15 03            ora $03,x
0005D8r 2  D0 03            bne *+5
0005DAr 2  4C rr rr         jmp @target_1
0005DDr 2               
0005DDr 2               @target_9:
0005DDr 2               
0005DDr 2               ; snake.fth:63:4 in `draw-background`
0005DDr 2               @OPCODE_36:   ; [c64_ir] AltPop
0005DDr 2  E8               inx
0005DEr 2  E8               inx
0005DFr 2  68               pla
0005E0r 2  95 00            sta $00,x
0005E2r 2  68               pla
0005E3r 2  95 01            sta $01,x
0005E5r 2               
0005E5r 2               ; snake.fth:63:4 in `draw-background`
0005E5r 2               @OPCODE_37:   ; [c64_ir] Drop
0005E5r 2  CA               dex
0005E6r 2  CA               dex
0005E7r 2               
0005E7r 2               ; snake.fth:63:4 in `draw-background`
0005E7r 2               @OPCODE_38:   ; [c64_ir] AltPop
0005E7r 2  E8               inx
0005E8r 2  E8               inx
0005E9r 2  68               pla
0005EAr 2  95 00            sta $00,x
0005ECr 2  68               pla
0005EDr 2  95 01            sta $01,x
0005EFr 2               
0005EFr 2               ; snake.fth:63:4 in `draw-background`
0005EFr 2               @OPCODE_39:   ; [c64_ir] Drop
0005EFr 2  CA               dex
0005F0r 2  CA               dex
0005F1r 2               
0005F1r 2               ; snake.fth:64:4 in `draw-background`
0005F1r 2               @OPCODE_40:   ; [c64_ir] Drop
0005F1r 2  CA               dex
0005F2r 2  CA               dex
0005F3r 2               
0005F3r 2               ; snake.fth:65:4 in `draw-background`
0005F3r 2               @OPCODE_41:   ; [c64_ir] Exit
0005F3r 2  60               rts
0005F4r 2               .endproc
0005F4r 2               
0005F4r 2               
0005F4r 2               
0005F4r 2               
0005F4r 2               
0005F4r 2               ; function start
0005F4r 2               
0005F4r 2               .proc PAX_FN_draw2Dwalls
0005F4r 2               @target_0:
0005F4r 2               
0005F4r 2               ; snake.fth:69:5 in `draw-walls`
0005F4r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(40)
0005F4r 2  E8               inx
0005F5r 2  E8               inx
0005F6r 2  A9 28            lda #40
0005F8r 2  95 00            sta $00,x
0005FAr 2  A9 00            lda #0
0005FCr 2  95 01            sta $01,x
0005FEr 2               
0005FEr 2               ; snake.fth:69:11 in `draw-walls`
0005FEr 2               @OPCODE_2:   ; [c64_ir] PushLiteral(25)
0005FEr 2  E8               inx
0005FFr 2  E8               inx
000600r 2  A9 19            lda #25
000602r 2  95 00            sta $00,x
000604r 2  A9 00            lda #0
000606r 2  95 01            sta $01,x
000608r 2               
000608r 2               ; snake.fth:69:18 in `draw-walls`
000608r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(1)
000608r 2  E8               inx
000609r 2  E8               inx
00060Ar 2  A9 01            lda #1
00060Cr 2  95 00            sta $00,x
00060Er 2  A9 00            lda #0
000610r 2  95 01            sta $01,x
000612r 2               
000612r 2               ; snake.fth:69:20 in `draw-walls`
000612r 2               @OPCODE_4:   ; [c64_ir] Call("-")
000612r 2                   ; http://www.obelisk.me.uk/6502/algorithms.html
000612r 2  CA               dex
000613r 2  CA               dex
000614r 2  38               sec
000615r 2  B5 00            lda $00,x
000617r 2  F5 02            sbc $02,x
000619r 2  95 00            sta $00,x
00061Br 2  B5 01            lda $01,x
00061Dr 2  F5 03            sbc $03,x
00061Fr 2  95 01            sta $01,x
000621r 2               
000621r 2               @target_1:
000621r 2               
000621r 2               ; snake.fth:69:22 in `draw-walls`
000621r 2               @OPCODE_6:   ; [c64_ir] Call("*")
000621r 2  20 rr rr             jsr replace_PAX_FN_2A
000624r 2               
000624r 2               @target_2:
000624r 2               
000624r 2               ; snake.fth:70:5 in `draw-walls`
000624r 2               @OPCODE_8:   ; [c64_ir] PushLiteral(40)
000624r 2  E8               inx
000625r 2  E8               inx
000626r 2  A9 28            lda #40
000628r 2  95 00            sta $00,x
00062Ar 2  A9 00            lda #0
00062Cr 2  95 01            sta $01,x
00062Er 2               
00062Er 2               ; snake.fth:70:11 in `draw-walls`
00062Er 2               @OPCODE_9:   ; [c64_ir] PushLiteral(0)
00062Er 2  E8               inx
00062Fr 2  E8               inx
000630r 2  A9 00            lda #0
000632r 2  95 00            sta $00,x
000634r 2  A9 00            lda #0
000636r 2  95 01            sta $01,x
000638r 2               
000638r 2               ; snake.fth:70:13 in `draw-walls`
000638r 2               @OPCODE_10:   ; [c64_ir] AltPush
000638r 2  CA               dex
000639r 2  CA               dex
00063Ar 2  B5 03            lda $03,x
00063Cr 2  48               pha
00063Dr 2  B5 02            lda $02,x
00063Fr 2  48               pha
000640r 2               
000640r 2               ; snake.fth:70:13 in `draw-walls`
000640r 2               @OPCODE_11:   ; [c64_ir] AltPush
000640r 2  CA               dex
000641r 2  CA               dex
000642r 2  B5 03            lda $03,x
000644r 2  48               pha
000645r 2  B5 02            lda $02,x
000647r 2  48               pha
000648r 2               
000648r 2               ; snake.fth:70:13 in `draw-walls`
000648r 2               @OPCODE_12:   ; [c64_ir] LoopTarget(2)
000648r 2               
000648r 2               @target_3:
000648r 2               
000648r 2               ; snake.fth:71:9 in `draw-walls`
000648r 2               @OPCODE_14:   ; [c64_ir] PushLiteral(230)
000648r 2  E8               inx
000649r 2  E8               inx
00064Ar 2  A9 E6            lda #230
00064Cr 2  95 00            sta $00,x
00064Er 2  A9 00            lda #0
000650r 2  95 01            sta $01,x
000652r 2               
000652r 2               ; snake.fth:71:14 in `draw-walls`
000652r 2               @OPCODE_15:   ; [c64_ir] Call("over")
000652r 2  20 rr rr             jsr PAX_FN_over
000655r 2               
000655r 2               @target_4:
000655r 2               
000655r 2               ; snake.fth:71:19 in `draw-walls`
000655r 2               @OPCODE_17:   ; [c64_ir] Call("i")
000655r 2  20 rr rr             jsr PAX_FN_i
000658r 2               
000658r 2               @target_5:
000658r 2               
000658r 2               ; snake.fth:71:21 in `draw-walls`
000658r 2               @OPCODE_19:   ; [c64_ir] Add
000658r 2                   ; 21
000658r 2  CA               dex
000659r 2  CA               dex
00065Ar 2  18               clc
00065Br 2  B5 00            lda $00,x
00065Dr 2  75 02            adc $02,x
00065Fr 2  95 00            sta $00,x
000661r 2  B5 01            lda $01,x
000663r 2  75 03            adc $03,x
000665r 2  95 01            sta $01,x
000667r 2               
000667r 2               ; snake.fth:71:23 in `draw-walls`
000667r 2               @OPCODE_20:   ; [c64_ir] Call("draw-index")
000667r 2  20 rr rr             jsr PAX_FN_draw2Dindex
00066Ar 2               
00066Ar 2               @target_6:
00066Ar 2               
00066Ar 2               ; snake.fth:72:5 in `draw-walls`
00066Ar 2               @OPCODE_22:   ; [c64_ir] Call("loopimpl")
00066Ar 2  20 rr rr             jsr PAX_FN_loopimpl
00066Dr 2               
00066Dr 2               @target_7:
00066Dr 2               
00066Dr 2               ; snake.fth:72:5 in `draw-walls`
00066Dr 2               @OPCODE_24:   ; [c64_ir] LoopIf0(3)
00066Dr 2  CA               dex
00066Er 2  CA               dex
00066Fr 2  B5 02            lda $02,x
000671r 2  15 03            ora $03,x
000673r 2  D0 03            bne *+5
000675r 2  4C rr rr         jmp @target_3
000678r 2               
000678r 2               @target_8:
000678r 2               
000678r 2               ; snake.fth:72:5 in `draw-walls`
000678r 2               @OPCODE_26:   ; [c64_ir] AltPop
000678r 2  E8               inx
000679r 2  E8               inx
00067Ar 2  68               pla
00067Br 2  95 00            sta $00,x
00067Dr 2  68               pla
00067Er 2  95 01            sta $01,x
000680r 2               
000680r 2               ; snake.fth:72:5 in `draw-walls`
000680r 2               @OPCODE_27:   ; [c64_ir] Drop
000680r 2  CA               dex
000681r 2  CA               dex
000682r 2               
000682r 2               ; snake.fth:72:5 in `draw-walls`
000682r 2               @OPCODE_28:   ; [c64_ir] AltPop
000682r 2  E8               inx
000683r 2  E8               inx
000684r 2  68               pla
000685r 2  95 00            sta $00,x
000687r 2  68               pla
000688r 2  95 01            sta $01,x
00068Ar 2               
00068Ar 2               ; snake.fth:72:5 in `draw-walls`
00068Ar 2               @OPCODE_29:   ; [c64_ir] Drop
00068Ar 2  CA               dex
00068Br 2  CA               dex
00068Cr 2               
00068Cr 2               ; snake.fth:73:5 in `draw-walls`
00068Cr 2               @OPCODE_30:   ; [c64_ir] Drop
00068Cr 2  CA               dex
00068Dr 2  CA               dex
00068Er 2               
00068Er 2               ; snake.fth:76:5 in `draw-walls`
00068Er 2               @OPCODE_31:   ; [c64_ir] PushLiteral(40)
00068Er 2  E8               inx
00068Fr 2  E8               inx
000690r 2  A9 28            lda #40
000692r 2  95 00            sta $00,x
000694r 2  A9 00            lda #0
000696r 2  95 01            sta $01,x
000698r 2               
000698r 2               ; snake.fth:76:11 in `draw-walls`
000698r 2               @OPCODE_32:   ; [c64_ir] PushLiteral(0)
000698r 2  E8               inx
000699r 2  E8               inx
00069Ar 2  A9 00            lda #0
00069Cr 2  95 00            sta $00,x
00069Er 2  A9 00            lda #0
0006A0r 2  95 01            sta $01,x
0006A2r 2               
0006A2r 2               ; snake.fth:76:13 in `draw-walls`
0006A2r 2               @OPCODE_33:   ; [c64_ir] AltPush
0006A2r 2  CA               dex
0006A3r 2  CA               dex
0006A4r 2  B5 03            lda $03,x
0006A6r 2  48               pha
0006A7r 2  B5 02            lda $02,x
0006A9r 2  48               pha
0006AAr 2               
0006AAr 2               ; snake.fth:76:13 in `draw-walls`
0006AAr 2               @OPCODE_34:   ; [c64_ir] AltPush
0006AAr 2  CA               dex
0006ABr 2  CA               dex
0006ACr 2  B5 03            lda $03,x
0006AEr 2  48               pha
0006AFr 2  B5 02            lda $02,x
0006B1r 2  48               pha
0006B2r 2               
0006B2r 2               ; snake.fth:76:13 in `draw-walls`
0006B2r 2               @OPCODE_35:   ; [c64_ir] LoopTarget(8)
0006B2r 2               
0006B2r 2               @target_9:
0006B2r 2               
0006B2r 2               ; snake.fth:77:9 in `draw-walls`
0006B2r 2               @OPCODE_37:   ; [c64_ir] PushLiteral(230)
0006B2r 2  E8               inx
0006B3r 2  E8               inx
0006B4r 2  A9 E6            lda #230
0006B6r 2  95 00            sta $00,x
0006B8r 2  A9 00            lda #0
0006BAr 2  95 01            sta $01,x
0006BCr 2               
0006BCr 2               ; snake.fth:77:14 in `draw-walls`
0006BCr 2               @OPCODE_38:   ; [c64_ir] Call("i")
0006BCr 2  20 rr rr             jsr PAX_FN_i
0006BFr 2               
0006BFr 2               @target_10:
0006BFr 2               
0006BFr 2               ; snake.fth:77:16 in `draw-walls`
0006BFr 2               @OPCODE_40:   ; [c64_ir] Call("draw-index")
0006BFr 2  20 rr rr             jsr PAX_FN_draw2Dindex
0006C2r 2               
0006C2r 2               @target_11:
0006C2r 2               
0006C2r 2               ; snake.fth:78:5 in `draw-walls`
0006C2r 2               @OPCODE_42:   ; [c64_ir] Call("loopimpl")
0006C2r 2  20 rr rr             jsr PAX_FN_loopimpl
0006C5r 2               
0006C5r 2               @target_12:
0006C5r 2               
0006C5r 2               ; snake.fth:78:5 in `draw-walls`
0006C5r 2               @OPCODE_44:   ; [c64_ir] LoopIf0(9)
0006C5r 2  CA               dex
0006C6r 2  CA               dex
0006C7r 2  B5 02            lda $02,x
0006C9r 2  15 03            ora $03,x
0006CBr 2  D0 03            bne *+5
0006CDr 2  4C rr rr         jmp @target_9
0006D0r 2               
0006D0r 2               @target_13:
0006D0r 2               
0006D0r 2               ; snake.fth:78:5 in `draw-walls`
0006D0r 2               @OPCODE_46:   ; [c64_ir] AltPop
0006D0r 2  E8               inx
0006D1r 2  E8               inx
0006D2r 2  68               pla
0006D3r 2  95 00            sta $00,x
0006D5r 2  68               pla
0006D6r 2  95 01            sta $01,x
0006D8r 2               
0006D8r 2               ; snake.fth:78:5 in `draw-walls`
0006D8r 2               @OPCODE_47:   ; [c64_ir] Drop
0006D8r 2  CA               dex
0006D9r 2  CA               dex
0006DAr 2               
0006DAr 2               ; snake.fth:78:5 in `draw-walls`
0006DAr 2               @OPCODE_48:   ; [c64_ir] AltPop
0006DAr 2  E8               inx
0006DBr 2  E8               inx
0006DCr 2  68               pla
0006DDr 2  95 00            sta $00,x
0006DFr 2  68               pla
0006E0r 2  95 01            sta $01,x
0006E2r 2               
0006E2r 2               ; snake.fth:78:5 in `draw-walls`
0006E2r 2               @OPCODE_49:   ; [c64_ir] Drop
0006E2r 2  CA               dex
0006E3r 2  CA               dex
0006E4r 2               
0006E4r 2               ; snake.fth:81:5 in `draw-walls`
0006E4r 2               @OPCODE_50:   ; [c64_ir] PushLiteral(40)
0006E4r 2  E8               inx
0006E5r 2  E8               inx
0006E6r 2  A9 28            lda #40
0006E8r 2  95 00            sta $00,x
0006EAr 2  A9 00            lda #0
0006ECr 2  95 01            sta $01,x
0006EEr 2               
0006EEr 2               ; snake.fth:81:11 in `draw-walls`
0006EEr 2               @OPCODE_51:   ; [c64_ir] PushLiteral(1)
0006EEr 2  E8               inx
0006EFr 2  E8               inx
0006F0r 2  A9 01            lda #1
0006F2r 2  95 00            sta $00,x
0006F4r 2  A9 00            lda #0
0006F6r 2  95 01            sta $01,x
0006F8r 2               
0006F8r 2               ; snake.fth:81:13 in `draw-walls`
0006F8r 2               @OPCODE_52:   ; [c64_ir] Call("-")
0006F8r 2                   ; http://www.obelisk.me.uk/6502/algorithms.html
0006F8r 2  CA               dex
0006F9r 2  CA               dex
0006FAr 2  38               sec
0006FBr 2  B5 00            lda $00,x
0006FDr 2  F5 02            sbc $02,x
0006FFr 2  95 00            sta $00,x
000701r 2  B5 01            lda $01,x
000703r 2  F5 03            sbc $03,x
000705r 2  95 01            sta $01,x
000707r 2               
000707r 2               @target_14:
000707r 2               
000707r 2               ; snake.fth:82:5 in `draw-walls`
000707r 2               @OPCODE_54:   ; [c64_ir] PushLiteral(25)
000707r 2  E8               inx
000708r 2  E8               inx
000709r 2  A9 19            lda #25
00070Br 2  95 00            sta $00,x
00070Dr 2  A9 00            lda #0
00070Fr 2  95 01            sta $01,x
000711r 2               
000711r 2               ; snake.fth:82:12 in `draw-walls`
000711r 2               @OPCODE_55:   ; [c64_ir] PushLiteral(0)
000711r 2  E8               inx
000712r 2  E8               inx
000713r 2  A9 00            lda #0
000715r 2  95 00            sta $00,x
000717r 2  A9 00            lda #0
000719r 2  95 01            sta $01,x
00071Br 2               
00071Br 2               ; snake.fth:82:14 in `draw-walls`
00071Br 2               @OPCODE_56:   ; [c64_ir] AltPush
00071Br 2  CA               dex
00071Cr 2  CA               dex
00071Dr 2  B5 03            lda $03,x
00071Fr 2  48               pha
000720r 2  B5 02            lda $02,x
000722r 2  48               pha
000723r 2               
000723r 2               ; snake.fth:82:14 in `draw-walls`
000723r 2               @OPCODE_57:   ; [c64_ir] AltPush
000723r 2  CA               dex
000724r 2  CA               dex
000725r 2  B5 03            lda $03,x
000727r 2  48               pha
000728r 2  B5 02            lda $02,x
00072Ar 2  48               pha
00072Br 2               
00072Br 2               ; snake.fth:82:14 in `draw-walls`
00072Br 2               @OPCODE_58:   ; [c64_ir] LoopTarget(14)
00072Br 2               
00072Br 2               @target_15:
00072Br 2               
00072Br 2               ; snake.fth:83:9 in `draw-walls`
00072Br 2               @OPCODE_60:   ; [c64_ir] PushLiteral(230)
00072Br 2  E8               inx
00072Cr 2  E8               inx
00072Dr 2  A9 E6            lda #230
00072Fr 2  95 00            sta $00,x
000731r 2  A9 00            lda #0
000733r 2  95 01            sta $01,x
000735r 2               
000735r 2               ; snake.fth:83:14 in `draw-walls`
000735r 2               @OPCODE_61:   ; [c64_ir] Call("over")
000735r 2  20 rr rr             jsr PAX_FN_over
000738r 2               
000738r 2               @target_16:
000738r 2               
000738r 2               ; snake.fth:83:19 in `draw-walls`
000738r 2               @OPCODE_63:   ; [c64_ir] Call("draw-index")
000738r 2  20 rr rr             jsr PAX_FN_draw2Dindex
00073Br 2               
00073Br 2               @target_17:
00073Br 2               
00073Br 2               ; snake.fth:84:9 in `draw-walls`
00073Br 2               @OPCODE_65:   ; [c64_ir] PushLiteral(40)
00073Br 2  E8               inx
00073Cr 2  E8               inx
00073Dr 2  A9 28            lda #40
00073Fr 2  95 00            sta $00,x
000741r 2  A9 00            lda #0
000743r 2  95 01            sta $01,x
000745r 2               
000745r 2               ; snake.fth:84:15 in `draw-walls`
000745r 2               @OPCODE_66:   ; [c64_ir] Add
000745r 2                   ; 21
000745r 2  CA               dex
000746r 2  CA               dex
000747r 2  18               clc
000748r 2  B5 00            lda $00,x
00074Ar 2  75 02            adc $02,x
00074Cr 2  95 00            sta $00,x
00074Er 2  B5 01            lda $01,x
000750r 2  75 03            adc $03,x
000752r 2  95 01            sta $01,x
000754r 2               
000754r 2               ; snake.fth:85:5 in `draw-walls`
000754r 2               @OPCODE_67:   ; [c64_ir] Call("loopimpl")
000754r 2  20 rr rr             jsr PAX_FN_loopimpl
000757r 2               
000757r 2               @target_18:
000757r 2               
000757r 2               ; snake.fth:85:5 in `draw-walls`
000757r 2               @OPCODE_69:   ; [c64_ir] LoopIf0(15)
000757r 2  CA               dex
000758r 2  CA               dex
000759r 2  B5 02            lda $02,x
00075Br 2  15 03            ora $03,x
00075Dr 2  D0 03            bne *+5
00075Fr 2  4C rr rr         jmp @target_15
000762r 2               
000762r 2               @target_19:
000762r 2               
000762r 2               ; snake.fth:85:5 in `draw-walls`
000762r 2               @OPCODE_71:   ; [c64_ir] AltPop
000762r 2  E8               inx
000763r 2  E8               inx
000764r 2  68               pla
000765r 2  95 00            sta $00,x
000767r 2  68               pla
000768r 2  95 01            sta $01,x
00076Ar 2               
00076Ar 2               ; snake.fth:85:5 in `draw-walls`
00076Ar 2               @OPCODE_72:   ; [c64_ir] Drop
00076Ar 2  CA               dex
00076Br 2  CA               dex
00076Cr 2               
00076Cr 2               ; snake.fth:85:5 in `draw-walls`
00076Cr 2               @OPCODE_73:   ; [c64_ir] AltPop
00076Cr 2  E8               inx
00076Dr 2  E8               inx
00076Er 2  68               pla
00076Fr 2  95 00            sta $00,x
000771r 2  68               pla
000772r 2  95 01            sta $01,x
000774r 2               
000774r 2               ; snake.fth:85:5 in `draw-walls`
000774r 2               @OPCODE_74:   ; [c64_ir] Drop
000774r 2  CA               dex
000775r 2  CA               dex
000776r 2               
000776r 2               ; snake.fth:86:5 in `draw-walls`
000776r 2               @OPCODE_75:   ; [c64_ir] Drop
000776r 2  CA               dex
000777r 2  CA               dex
000778r 2               
000778r 2               ; snake.fth:89:5 in `draw-walls`
000778r 2               @OPCODE_76:   ; [c64_ir] PushLiteral(0)
000778r 2  E8               inx
000779r 2  E8               inx
00077Ar 2  A9 00            lda #0
00077Cr 2  95 00            sta $00,x
00077Er 2  A9 00            lda #0
000780r 2  95 01            sta $01,x
000782r 2               
000782r 2               ; snake.fth:90:5 in `draw-walls`
000782r 2               @OPCODE_77:   ; [c64_ir] PushLiteral(25)
000782r 2  E8               inx
000783r 2  E8               inx
000784r 2  A9 19            lda #25
000786r 2  95 00            sta $00,x
000788r 2  A9 00            lda #0
00078Ar 2  95 01            sta $01,x
00078Cr 2               
00078Cr 2               ; snake.fth:90:12 in `draw-walls`
00078Cr 2               @OPCODE_78:   ; [c64_ir] PushLiteral(0)
00078Cr 2  E8               inx
00078Dr 2  E8               inx
00078Er 2  A9 00            lda #0
000790r 2  95 00            sta $00,x
000792r 2  A9 00            lda #0
000794r 2  95 01            sta $01,x
000796r 2               
000796r 2               ; snake.fth:90:14 in `draw-walls`
000796r 2               @OPCODE_79:   ; [c64_ir] AltPush
000796r 2  CA               dex
000797r 2  CA               dex
000798r 2  B5 03            lda $03,x
00079Ar 2  48               pha
00079Br 2  B5 02            lda $02,x
00079Dr 2  48               pha
00079Er 2               
00079Er 2               ; snake.fth:90:14 in `draw-walls`
00079Er 2               @OPCODE_80:   ; [c64_ir] AltPush
00079Er 2  CA               dex
00079Fr 2  CA               dex
0007A0r 2  B5 03            lda $03,x
0007A2r 2  48               pha
0007A3r 2  B5 02            lda $02,x
0007A5r 2  48               pha
0007A6r 2               
0007A6r 2               ; snake.fth:90:14 in `draw-walls`
0007A6r 2               @OPCODE_81:   ; [c64_ir] LoopTarget(19)
0007A6r 2               
0007A6r 2               @target_20:
0007A6r 2               
0007A6r 2               ; snake.fth:91:9 in `draw-walls`
0007A6r 2               @OPCODE_83:   ; [c64_ir] PushLiteral(230)
0007A6r 2  E8               inx
0007A7r 2  E8               inx
0007A8r 2  A9 E6            lda #230
0007AAr 2  95 00            sta $00,x
0007ACr 2  A9 00            lda #0
0007AEr 2  95 01            sta $01,x
0007B0r 2               
0007B0r 2               ; snake.fth:91:14 in `draw-walls`
0007B0r 2               @OPCODE_84:   ; [c64_ir] Call("over")
0007B0r 2  20 rr rr             jsr PAX_FN_over
0007B3r 2               
0007B3r 2               @target_21:
0007B3r 2               
0007B3r 2               ; snake.fth:91:19 in `draw-walls`
0007B3r 2               @OPCODE_86:   ; [c64_ir] Call("draw-index")
0007B3r 2  20 rr rr             jsr PAX_FN_draw2Dindex
0007B6r 2               
0007B6r 2               @target_22:
0007B6r 2               
0007B6r 2               ; snake.fth:92:9 in `draw-walls`
0007B6r 2               @OPCODE_88:   ; [c64_ir] PushLiteral(40)
0007B6r 2  E8               inx
0007B7r 2  E8               inx
0007B8r 2  A9 28            lda #40
0007BAr 2  95 00            sta $00,x
0007BCr 2  A9 00            lda #0
0007BEr 2  95 01            sta $01,x
0007C0r 2               
0007C0r 2               ; snake.fth:92:15 in `draw-walls`
0007C0r 2               @OPCODE_89:   ; [c64_ir] Add
0007C0r 2                   ; 21
0007C0r 2  CA               dex
0007C1r 2  CA               dex
0007C2r 2  18               clc
0007C3r 2  B5 00            lda $00,x
0007C5r 2  75 02            adc $02,x
0007C7r 2  95 00            sta $00,x
0007C9r 2  B5 01            lda $01,x
0007CBr 2  75 03            adc $03,x
0007CDr 2  95 01            sta $01,x
0007CFr 2               
0007CFr 2               ; snake.fth:93:5 in `draw-walls`
0007CFr 2               @OPCODE_90:   ; [c64_ir] Call("loopimpl")
0007CFr 2  20 rr rr             jsr PAX_FN_loopimpl
0007D2r 2               
0007D2r 2               @target_23:
0007D2r 2               
0007D2r 2               ; snake.fth:93:5 in `draw-walls`
0007D2r 2               @OPCODE_92:   ; [c64_ir] LoopIf0(20)
0007D2r 2  CA               dex
0007D3r 2  CA               dex
0007D4r 2  B5 02            lda $02,x
0007D6r 2  15 03            ora $03,x
0007D8r 2  D0 03            bne *+5
0007DAr 2  4C rr rr         jmp @target_20
0007DDr 2               
0007DDr 2               @target_24:
0007DDr 2               
0007DDr 2               ; snake.fth:93:5 in `draw-walls`
0007DDr 2               @OPCODE_94:   ; [c64_ir] AltPop
0007DDr 2  E8               inx
0007DEr 2  E8               inx
0007DFr 2  68               pla
0007E0r 2  95 00            sta $00,x
0007E2r 2  68               pla
0007E3r 2  95 01            sta $01,x
0007E5r 2               
0007E5r 2               ; snake.fth:93:5 in `draw-walls`
0007E5r 2               @OPCODE_95:   ; [c64_ir] Drop
0007E5r 2  CA               dex
0007E6r 2  CA               dex
0007E7r 2               
0007E7r 2               ; snake.fth:93:5 in `draw-walls`
0007E7r 2               @OPCODE_96:   ; [c64_ir] AltPop
0007E7r 2  E8               inx
0007E8r 2  E8               inx
0007E9r 2  68               pla
0007EAr 2  95 00            sta $00,x
0007ECr 2  68               pla
0007EDr 2  95 01            sta $01,x
0007EFr 2               
0007EFr 2               ; snake.fth:93:5 in `draw-walls`
0007EFr 2               @OPCODE_97:   ; [c64_ir] Drop
0007EFr 2  CA               dex
0007F0r 2  CA               dex
0007F1r 2               
0007F1r 2               ; snake.fth:94:5 in `draw-walls`
0007F1r 2               @OPCODE_98:   ; [c64_ir] Drop
0007F1r 2  CA               dex
0007F2r 2  CA               dex
0007F3r 2               
0007F3r 2               ; snake.fth:95:5 in `draw-walls`
0007F3r 2               @OPCODE_99:   ; [c64_ir] Exit
0007F3r 2  60               rts
0007F4r 2               .endproc
0007F4r 2               
0007F4r 2               
0007F4r 2               
0007F4r 2               
0007F4r 2               
0007F4r 2               ; function start
0007F4r 2               
0007F4r 2               .proc PAX_FN_initialize2Dsnake
0007F4r 2               @target_0:
0007F4r 2               
0007F4r 2               ; snake.fth:98:3 in `initialize-snake`
0007F4r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(16)
0007F4r 2  E8               inx
0007F5r 2  E8               inx
0007F6r 2  A9 10            lda #16
0007F8r 2  95 00            sta $00,x
0007FAr 2  A9 00            lda #0
0007FCr 2  95 01            sta $01,x
0007FEr 2               
0007FEr 2               ; snake.fth:98:6 in `initialize-snake`
0007FEr 2               @OPCODE_2:   ; [c64_ir] PushLiteral(-26658)
0007FEr 2  E8               inx
0007FFr 2  E8               inx
000800r 2  A9 DE            lda #222
000802r 2  95 00            sta $00,x
000804r 2  A9 97            lda #151
000806r 2  95 01            sta $01,x
000808r 2               
000808r 2               ; snake.fth:98:13 in `initialize-snake`
000808r 2               @OPCODE_3:   ; [c64_ir] Store
000808r 2  CA               dex
000809r 2  CA               dex
00080Ar 2  CA               dex
00080Br 2  CA               dex
00080Cr 2  B5 02            lda $02,x
00080Er 2  81 04            sta ($04,x)
000810r 2                   ; TODO high byte
000810r 2               
000810r 2               ; snake.fth:99:3 in `initialize-snake`
000810r 2               @OPCODE_4:   ; [c64_ir] PushLiteral(-26658)
000810r 2  E8               inx
000811r 2  E8               inx
000812r 2  A9 DE            lda #222
000814r 2  95 00            sta $00,x
000816r 2  A9 97            lda #151
000818r 2  95 01            sta $01,x
00081Ar 2               
00081Ar 2               ; snake.fth:99:10 in `initialize-snake`
00081Ar 2               @OPCODE_5:   ; [c64_ir] Load
00081Ar 2  A1 00            lda ($00,x)
00081Cr 2  95 00            sta $00,x
00081Er 2  A9 00            lda #0
000820r 2  95 01            sta $01,x
000822r 2               
000822r 2               ; snake.fth:99:12 in `initialize-snake`
000822r 2               @OPCODE_6:   ; [c64_ir] PushLiteral(1)
000822r 2  E8               inx
000823r 2  E8               inx
000824r 2  A9 01            lda #1
000826r 2  95 00            sta $00,x
000828r 2  A9 00            lda #0
00082Ar 2  95 01            sta $01,x
00082Cr 2               
00082Cr 2               ; snake.fth:99:14 in `initialize-snake`
00082Cr 2               @OPCODE_7:   ; [c64_ir] Add
00082Cr 2                   ; 21
00082Cr 2  CA               dex
00082Dr 2  CA               dex
00082Er 2  18               clc
00082Fr 2  B5 00            lda $00,x
000831r 2  75 02            adc $02,x
000833r 2  95 00            sta $00,x
000835r 2  B5 01            lda $01,x
000837r 2  75 03            adc $03,x
000839r 2  95 01            sta $01,x
00083Br 2               
00083Br 2               ; snake.fth:99:16 in `initialize-snake`
00083Br 2               @OPCODE_8:   ; [c64_ir] PushLiteral(0)
00083Br 2  E8               inx
00083Cr 2  E8               inx
00083Dr 2  A9 00            lda #0
00083Fr 2  95 00            sta $00,x
000841r 2  A9 00            lda #0
000843r 2  95 01            sta $01,x
000845r 2               
000845r 2               ; snake.fth:99:18 in `initialize-snake`
000845r 2               @OPCODE_9:   ; [c64_ir] AltPush
000845r 2  CA               dex
000846r 2  CA               dex
000847r 2  B5 03            lda $03,x
000849r 2  48               pha
00084Ar 2  B5 02            lda $02,x
00084Cr 2  48               pha
00084Dr 2               
00084Dr 2               ; snake.fth:99:18 in `initialize-snake`
00084Dr 2               @OPCODE_10:   ; [c64_ir] AltPush
00084Dr 2  CA               dex
00084Er 2  CA               dex
00084Fr 2  B5 03            lda $03,x
000851r 2  48               pha
000852r 2  B5 02            lda $02,x
000854r 2  48               pha
000855r 2               
000855r 2               ; snake.fth:99:18 in `initialize-snake`
000855r 2               @OPCODE_11:   ; [c64_ir] LoopTarget(0)
000855r 2               
000855r 2               @target_1:
000855r 2               
000855r 2               ; snake.fth:100:5 in `initialize-snake`
000855r 2               @OPCODE_13:   ; [c64_ir] PushLiteral(8)
000855r 2  E8               inx
000856r 2  E8               inx
000857r 2  A9 08            lda #8
000859r 2  95 00            sta $00,x
00085Br 2  A9 00            lda #0
00085Dr 2  95 01            sta $01,x
00085Fr 2               
00085Fr 2               ; snake.fth:100:7 in `initialize-snake`
00085Fr 2               @OPCODE_14:   ; [c64_ir] Call("i")
00085Fr 2  20 rr rr             jsr PAX_FN_i
000862r 2               
000862r 2               @target_2:
000862r 2               
000862r 2               ; snake.fth:100:9 in `initialize-snake`
000862r 2               @OPCODE_16:   ; [c64_ir] Call("-")
000862r 2                   ; http://www.obelisk.me.uk/6502/algorithms.html
000862r 2  CA               dex
000863r 2  CA               dex
000864r 2  38               sec
000865r 2  B5 00            lda $00,x
000867r 2  F5 02            sbc $02,x
000869r 2  95 00            sta $00,x
00086Br 2  B5 01            lda $01,x
00086Dr 2  F5 03            sbc $03,x
00086Fr 2  95 01            sta $01,x
000871r 2               
000871r 2               @target_3:
000871r 2               
000871r 2               ; snake.fth:100:11 in `initialize-snake`
000871r 2               @OPCODE_18:   ; [c64_ir] Call("i")
000871r 2  20 rr rr             jsr PAX_FN_i
000874r 2               
000874r 2               @target_4:
000874r 2               
000874r 2               ; snake.fth:100:13 in `initialize-snake`
000874r 2               @OPCODE_20:   ; [c64_ir] Call("snake-x")
000874r 2  20 rr rr             jsr PAX_FN_snake2Dx
000877r 2               
000877r 2               @target_5:
000877r 2               
000877r 2               ; snake.fth:100:21 in `initialize-snake`
000877r 2               @OPCODE_22:   ; [c64_ir] Store
000877r 2  CA               dex
000878r 2  CA               dex
000879r 2  CA               dex
00087Ar 2  CA               dex
00087Br 2  B5 02            lda $02,x
00087Dr 2  81 04            sta ($04,x)
00087Fr 2                   ; TODO high byte
00087Fr 2               
00087Fr 2               ; snake.fth:101:5 in `initialize-snake`
00087Fr 2               @OPCODE_23:   ; [c64_ir] PushLiteral(8)
00087Fr 2  E8               inx
000880r 2  E8               inx
000881r 2  A9 08            lda #8
000883r 2  95 00            sta $00,x
000885r 2  A9 00            lda #0
000887r 2  95 01            sta $01,x
000889r 2               
000889r 2               ; snake.fth:101:7 in `initialize-snake`
000889r 2               @OPCODE_24:   ; [c64_ir] Call("i")
000889r 2  20 rr rr             jsr PAX_FN_i
00088Cr 2               
00088Cr 2               @target_6:
00088Cr 2               
00088Cr 2               ; snake.fth:101:9 in `initialize-snake`
00088Cr 2               @OPCODE_26:   ; [c64_ir] Call("snake-y")
00088Cr 2  20 rr rr             jsr PAX_FN_snake2Dy
00088Fr 2               
00088Fr 2               @target_7:
00088Fr 2               
00088Fr 2               ; snake.fth:101:17 in `initialize-snake`
00088Fr 2               @OPCODE_28:   ; [c64_ir] Store
00088Fr 2  CA               dex
000890r 2  CA               dex
000891r 2  CA               dex
000892r 2  CA               dex
000893r 2  B5 02            lda $02,x
000895r 2  81 04            sta ($04,x)
000897r 2                   ; TODO high byte
000897r 2               
000897r 2               ; snake.fth:102:3 in `initialize-snake`
000897r 2               @OPCODE_29:   ; [c64_ir] Call("loopimpl")
000897r 2  20 rr rr             jsr PAX_FN_loopimpl
00089Ar 2               
00089Ar 2               @target_8:
00089Ar 2               
00089Ar 2               ; snake.fth:102:3 in `initialize-snake`
00089Ar 2               @OPCODE_31:   ; [c64_ir] LoopIf0(1)
00089Ar 2  CA               dex
00089Br 2  CA               dex
00089Cr 2  B5 02            lda $02,x
00089Er 2  15 03            ora $03,x
0008A0r 2  D0 03            bne *+5
0008A2r 2  4C rr rr         jmp @target_1
0008A5r 2               
0008A5r 2               @target_9:
0008A5r 2               
0008A5r 2               ; snake.fth:102:3 in `initialize-snake`
0008A5r 2               @OPCODE_33:   ; [c64_ir] AltPop
0008A5r 2  E8               inx
0008A6r 2  E8               inx
0008A7r 2  68               pla
0008A8r 2  95 00            sta $00,x
0008AAr 2  68               pla
0008ABr 2  95 01            sta $01,x
0008ADr 2               
0008ADr 2               ; snake.fth:102:3 in `initialize-snake`
0008ADr 2               @OPCODE_34:   ; [c64_ir] Drop
0008ADr 2  CA               dex
0008AEr 2  CA               dex
0008AFr 2               
0008AFr 2               ; snake.fth:102:3 in `initialize-snake`
0008AFr 2               @OPCODE_35:   ; [c64_ir] AltPop
0008AFr 2  E8               inx
0008B0r 2  E8               inx
0008B1r 2  68               pla
0008B2r 2  95 00            sta $00,x
0008B4r 2  68               pla
0008B5r 2  95 01            sta $01,x
0008B7r 2               
0008B7r 2               ; snake.fth:102:3 in `initialize-snake`
0008B7r 2               @OPCODE_36:   ; [c64_ir] Drop
0008B7r 2  CA               dex
0008B8r 2  CA               dex
0008B9r 2               
0008B9r 2               ; snake.fth:103:3 in `initialize-snake`
0008B9r 2               @OPCODE_37:   ; [c64_ir] PushLiteral(39)
0008B9r 2  E8               inx
0008BAr 2  E8               inx
0008BBr 2  A9 27            lda #39
0008BDr 2  95 00            sta $00,x
0008BFr 2  A9 00            lda #0
0008C1r 2  95 01            sta $01,x
0008C3r 2               
0008C3r 2               ; snake.fth:103:9 in `initialize-snake`
0008C3r 2               @OPCODE_38:   ; [c64_ir] PushLiteral(-26660)
0008C3r 2  E8               inx
0008C4r 2  E8               inx
0008C5r 2  A9 DC            lda #220
0008C7r 2  95 00            sta $00,x
0008C9r 2  A9 97            lda #151
0008CBr 2  95 01            sta $01,x
0008CDr 2               
0008CDr 2               ; snake.fth:103:19 in `initialize-snake`
0008CDr 2               @OPCODE_39:   ; [c64_ir] Store
0008CDr 2  CA               dex
0008CEr 2  CA               dex
0008CFr 2  CA               dex
0008D0r 2  CA               dex
0008D1r 2  B5 02            lda $02,x
0008D3r 2  81 04            sta ($04,x)
0008D5r 2                   ; TODO high byte
0008D5r 2               
0008D5r 2               ; snake.fth:103:21 in `initialize-snake`
0008D5r 2               @OPCODE_40:   ; [c64_ir] Exit
0008D5r 2  60               rts
0008D6r 2               .endproc
0008D6r 2               
0008D6r 2               
0008D6r 2               
0008D6r 2               
0008D6r 2               
0008D6r 2               ; function start
0008D6r 2               
0008D6r 2               .proc PAX_FN_set2Dapple2Dposition
0008D6r 2               @target_0:
0008D6r 2               
0008D6r 2               ; snake.fth:105:22 in `set-apple-position`
0008D6r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-26664)
0008D6r 2  E8               inx
0008D7r 2  E8               inx
0008D8r 2  A9 D8            lda #216
0008DAr 2  95 00            sta $00,x
0008DCr 2  A9 97            lda #151
0008DEr 2  95 01            sta $01,x
0008E0r 2               
0008E0r 2               ; snake.fth:105:30 in `set-apple-position`
0008E0r 2               @OPCODE_2:   ; [c64_ir] Store
0008E0r 2  CA               dex
0008E1r 2  CA               dex
0008E2r 2  CA               dex
0008E3r 2  CA               dex
0008E4r 2  B5 02            lda $02,x
0008E6r 2  81 04            sta ($04,x)
0008E8r 2                   ; TODO high byte
0008E8r 2               
0008E8r 2               ; snake.fth:105:32 in `set-apple-position`
0008E8r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(-26662)
0008E8r 2  E8               inx
0008E9r 2  E8               inx
0008EAr 2  A9 DA            lda #218
0008ECr 2  95 00            sta $00,x
0008EEr 2  A9 97            lda #151
0008F0r 2  95 01            sta $01,x
0008F2r 2               
0008F2r 2               ; snake.fth:105:40 in `set-apple-position`
0008F2r 2               @OPCODE_4:   ; [c64_ir] Store
0008F2r 2  CA               dex
0008F3r 2  CA               dex
0008F4r 2  CA               dex
0008F5r 2  CA               dex
0008F6r 2  B5 02            lda $02,x
0008F8r 2  81 04            sta ($04,x)
0008FAr 2                   ; TODO high byte
0008FAr 2               
0008FAr 2               ; snake.fth:105:42 in `set-apple-position`
0008FAr 2               @OPCODE_5:   ; [c64_ir] Exit
0008FAr 2  60               rts
0008FBr 2               .endproc
0008FBr 2               
0008FBr 2               
0008FBr 2               
0008FBr 2               
0008FBr 2               
0008FBr 2               ; function start
0008FBr 2               
0008FBr 2               .proc PAX_FN_initialize2Dapple
0008FBr 2               @target_0:
0008FBr 2               
0008FBr 2               ; snake.fth:107:21 in `initialize-apple`
0008FBr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(8)
0008FBr 2  E8               inx
0008FCr 2  E8               inx
0008FDr 2  A9 08            lda #8
0008FFr 2  95 00            sta $00,x
000901r 2  A9 00            lda #0
000903r 2  95 01            sta $01,x
000905r 2               
000905r 2               ; snake.fth:107:23 in `initialize-apple`
000905r 2               @OPCODE_2:   ; [c64_ir] PushLiteral(13)
000905r 2  E8               inx
000906r 2  E8               inx
000907r 2  A9 0D            lda #13
000909r 2  95 00            sta $00,x
00090Br 2  A9 00            lda #0
00090Dr 2  95 01            sta $01,x
00090Fr 2               
00090Fr 2               ; snake.fth:107:26 in `initialize-apple`
00090Fr 2               @OPCODE_3:   ; [c64_ir] Call("set-apple-position")
00090Fr 2  20 rr rr             jsr PAX_FN_set2Dapple2Dposition
000912r 2               
000912r 2               @target_1:
000912r 2               
000912r 2               ; snake.fth:107:45 in `initialize-apple`
000912r 2               @OPCODE_5:   ; [c64_ir] Exit
000912r 2  60               rts
000913r 2               .endproc
000913r 2               
000913r 2               
000913r 2               
000913r 2               
000913r 2               
000913r 2               ; function start
000913r 2               
000913r 2               .proc PAX_FN_draw2Dfull2Dsnake
000913r 2               @target_0:
000913r 2               
000913r 2               ; snake.fth:110:3 in `draw-full-snake`
000913r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-26658)
000913r 2  E8               inx
000914r 2  E8               inx
000915r 2  A9 DE            lda #222
000917r 2  95 00            sta $00,x
000919r 2  A9 97            lda #151
00091Br 2  95 01            sta $01,x
00091Dr 2               
00091Dr 2               ; snake.fth:110:10 in `draw-full-snake`
00091Dr 2               @OPCODE_2:   ; [c64_ir] Load
00091Dr 2  A1 00            lda ($00,x)
00091Fr 2  95 00            sta $00,x
000921r 2  A9 00            lda #0
000923r 2  95 01            sta $01,x
000925r 2               
000925r 2               ; snake.fth:110:12 in `draw-full-snake`
000925r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(0)
000925r 2  E8               inx
000926r 2  E8               inx
000927r 2  A9 00            lda #0
000929r 2  95 00            sta $00,x
00092Br 2  A9 00            lda #0
00092Dr 2  95 01            sta $01,x
00092Fr 2               
00092Fr 2               ; snake.fth:110:14 in `draw-full-snake`
00092Fr 2               @OPCODE_4:   ; [c64_ir] AltPush
00092Fr 2  CA               dex
000930r 2  CA               dex
000931r 2  B5 03            lda $03,x
000933r 2  48               pha
000934r 2  B5 02            lda $02,x
000936r 2  48               pha
000937r 2               
000937r 2               ; snake.fth:110:14 in `draw-full-snake`
000937r 2               @OPCODE_5:   ; [c64_ir] AltPush
000937r 2  CA               dex
000938r 2  CA               dex
000939r 2  B5 03            lda $03,x
00093Br 2  48               pha
00093Cr 2  B5 02            lda $02,x
00093Er 2  48               pha
00093Fr 2               
00093Fr 2               ; snake.fth:110:14 in `draw-full-snake`
00093Fr 2               @OPCODE_6:   ; [c64_ir] LoopTarget(0)
00093Fr 2               
00093Fr 2               @target_1:
00093Fr 2               
00093Fr 2               ; snake.fth:111:5 in `draw-full-snake`
00093Fr 2               @OPCODE_8:   ; [c64_ir] Call("i")
00093Fr 2  20 rr rr             jsr PAX_FN_i
000942r 2               
000942r 2               @target_2:
000942r 2               
000942r 2               ; snake.fth:111:7 in `draw-full-snake`
000942r 2               @OPCODE_10:   ; [c64_ir] Call("snake-x")
000942r 2  20 rr rr             jsr PAX_FN_snake2Dx
000945r 2               
000945r 2               @target_3:
000945r 2               
000945r 2               ; snake.fth:111:15 in `draw-full-snake`
000945r 2               @OPCODE_12:   ; [c64_ir] Load
000945r 2  A1 00            lda ($00,x)
000947r 2  95 00            sta $00,x
000949r 2  A9 00            lda #0
00094Br 2  95 01            sta $01,x
00094Dr 2               
00094Dr 2               ; snake.fth:111:17 in `draw-full-snake`
00094Dr 2               @OPCODE_13:   ; [c64_ir] Call("i")
00094Dr 2  20 rr rr             jsr PAX_FN_i
000950r 2               
000950r 2               @target_4:
000950r 2               
000950r 2               ; snake.fth:111:19 in `draw-full-snake`
000950r 2               @OPCODE_15:   ; [c64_ir] Call("snake-y")
000950r 2  20 rr rr             jsr PAX_FN_snake2Dy
000953r 2               
000953r 2               @target_5:
000953r 2               
000953r 2               ; snake.fth:111:27 in `draw-full-snake`
000953r 2               @OPCODE_17:   ; [c64_ir] Load
000953r 2  A1 00            lda ($00,x)
000955r 2  95 00            sta $00,x
000957r 2  A9 00            lda #0
000959r 2  95 01            sta $01,x
00095Br 2               
00095Br 2               ; snake.fth:111:29 in `draw-full-snake`
00095Br 2               @OPCODE_18:   ; [c64_ir] Call("draw-snake-tile")
00095Br 2  20 rr rr             jsr PAX_FN_draw2Dsnake2Dtile
00095Er 2               
00095Er 2               @target_6:
00095Er 2               
00095Er 2               ; snake.fth:112:3 in `draw-full-snake`
00095Er 2               @OPCODE_20:   ; [c64_ir] Call("loopimpl")
00095Er 2  20 rr rr             jsr PAX_FN_loopimpl
000961r 2               
000961r 2               @target_7:
000961r 2               
000961r 2               ; snake.fth:112:3 in `draw-full-snake`
000961r 2               @OPCODE_22:   ; [c64_ir] LoopIf0(1)
000961r 2  CA               dex
000962r 2  CA               dex
000963r 2  B5 02            lda $02,x
000965r 2  15 03            ora $03,x
000967r 2  D0 03            bne *+5
000969r 2  4C rr rr         jmp @target_1
00096Cr 2               
00096Cr 2               @target_8:
00096Cr 2               
00096Cr 2               ; snake.fth:112:3 in `draw-full-snake`
00096Cr 2               @OPCODE_24:   ; [c64_ir] AltPop
00096Cr 2  E8               inx
00096Dr 2  E8               inx
00096Er 2  68               pla
00096Fr 2  95 00            sta $00,x
000971r 2  68               pla
000972r 2  95 01            sta $01,x
000974r 2               
000974r 2               ; snake.fth:112:3 in `draw-full-snake`
000974r 2               @OPCODE_25:   ; [c64_ir] Drop
000974r 2  CA               dex
000975r 2  CA               dex
000976r 2               
000976r 2               ; snake.fth:112:3 in `draw-full-snake`
000976r 2               @OPCODE_26:   ; [c64_ir] AltPop
000976r 2  E8               inx
000977r 2  E8               inx
000978r 2  68               pla
000979r 2  95 00            sta $00,x
00097Br 2  68               pla
00097Cr 2  95 01            sta $01,x
00097Er 2               
00097Er 2               ; snake.fth:112:3 in `draw-full-snake`
00097Er 2               @OPCODE_27:   ; [c64_ir] Drop
00097Er 2  CA               dex
00097Fr 2  CA               dex
000980r 2               
000980r 2               ; snake.fth:113:3 in `draw-full-snake`
000980r 2               @OPCODE_28:   ; [c64_ir] Exit
000980r 2  60               rts
000981r 2               .endproc
000981r 2               
000981r 2               
000981r 2               
000981r 2               
000981r 2               
000981r 2               ; function start
000981r 2               
000981r 2               .proc PAX_FN_initialize
000981r 2               @target_0:
000981r 2               
000981r 2               ; snake.fth:116:3 in `initialize`
000981r 2               @OPCODE_1:   ; [c64_ir] Call("draw-background")
000981r 2  20 rr rr             jsr PAX_FN_draw2Dbackground
000984r 2               
000984r 2               @target_1:
000984r 2               
000984r 2               ; snake.fth:117:3 in `initialize`
000984r 2               @OPCODE_3:   ; [c64_ir] Call("draw-walls")
000984r 2  20 rr rr             jsr PAX_FN_draw2Dwalls
000987r 2               
000987r 2               @target_2:
000987r 2               
000987r 2               ; snake.fth:118:3 in `initialize`
000987r 2               @OPCODE_5:   ; [c64_ir] Call("initialize-snake")
000987r 2  20 rr rr             jsr PAX_FN_initialize2Dsnake
00098Ar 2               
00098Ar 2               @target_3:
00098Ar 2               
00098Ar 2               ; snake.fth:119:3 in `initialize`
00098Ar 2               @OPCODE_7:   ; [c64_ir] Call("initialize-apple")
00098Ar 2  20 rr rr             jsr PAX_FN_initialize2Dapple
00098Dr 2               
00098Dr 2               @target_4:
00098Dr 2               
00098Dr 2               ; snake.fth:120:3 in `initialize`
00098Dr 2               @OPCODE_9:   ; [c64_ir] Call("draw-full-snake")
00098Dr 2  20 rr rr             jsr PAX_FN_draw2Dfull2Dsnake
000990r 2               
000990r 2               @target_5:
000990r 2               
000990r 2               ; snake.fth:121:3 in `initialize`
000990r 2               @OPCODE_11:   ; [c64_ir] Exit
000990r 2  60               rts
000991r 2               .endproc
000991r 2               
000991r 2               
000991r 2               
000991r 2               
000991r 2               
000991r 2               ; function start
000991r 2               
000991r 2               .proc PAX_FN_move2Dup
000991r 2               @target_0:
000991r 2               
000991r 2               ; snake.fth:126:12 in `move-up`
000991r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-1)
000991r 2  E8               inx
000992r 2  E8               inx
000993r 2  A9 FF            lda #255
000995r 2  95 00            sta $00,x
000997r 2  A9 FF            lda #255
000999r 2  95 01            sta $01,x
00099Br 2               
00099Br 2               ; snake.fth:126:15 in `move-up`
00099Br 2               @OPCODE_2:   ; [c64_ir] PushLiteral(-27666)
00099Br 2  E8               inx
00099Cr 2  E8               inx
00099Dr 2  A9 EE            lda #238
00099Fr 2  95 00            sta $00,x
0009A1r 2  A9 93            lda #147
0009A3r 2  95 01            sta $01,x
0009A5r 2               
0009A5r 2               ; snake.fth:126:28 in `move-up`
0009A5r 2               @OPCODE_3:   ; [c64_ir] Call("+!")
0009A5r 2  20 rr rr             jsr PAX_FN_2B21
0009A8r 2               
0009A8r 2               @target_1:
0009A8r 2               
0009A8r 2               ; snake.fth:126:31 in `move-up`
0009A8r 2               @OPCODE_5:   ; [c64_ir] Exit
0009A8r 2  60               rts
0009A9r 2               .endproc
0009A9r 2               
0009A9r 2               
0009A9r 2               
0009A9r 2               
0009A9r 2               
0009A9r 2               ; function start
0009A9r 2               
0009A9r 2               .proc PAX_FN_move2Dleft
0009A9r 2               @target_0:
0009A9r 2               
0009A9r 2               ; snake.fth:127:14 in `move-left`
0009A9r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-1)
0009A9r 2  E8               inx
0009AAr 2  E8               inx
0009ABr 2  A9 FF            lda #255
0009ADr 2  95 00            sta $00,x
0009AFr 2  A9 FF            lda #255
0009B1r 2  95 01            sta $01,x
0009B3r 2               
0009B3r 2               ; snake.fth:127:17 in `move-left`
0009B3r 2               @OPCODE_2:   ; [c64_ir] PushLiteral(-28668)
0009B3r 2  E8               inx
0009B4r 2  E8               inx
0009B5r 2  A9 04            lda #4
0009B7r 2  95 00            sta $00,x
0009B9r 2  A9 90            lda #144
0009BBr 2  95 01            sta $01,x
0009BDr 2               
0009BDr 2               ; snake.fth:127:30 in `move-left`
0009BDr 2               @OPCODE_3:   ; [c64_ir] Call("+!")
0009BDr 2  20 rr rr             jsr PAX_FN_2B21
0009C0r 2               
0009C0r 2               @target_1:
0009C0r 2               
0009C0r 2               ; snake.fth:127:33 in `move-left`
0009C0r 2               @OPCODE_5:   ; [c64_ir] Exit
0009C0r 2  60               rts
0009C1r 2               .endproc
0009C1r 2               
0009C1r 2               
0009C1r 2               
0009C1r 2               
0009C1r 2               
0009C1r 2               ; function start
0009C1r 2               
0009C1r 2               .proc PAX_FN_move2Ddown
0009C1r 2               @target_0:
0009C1r 2               
0009C1r 2               ; snake.fth:128:14 in `move-down`
0009C1r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(1)
0009C1r 2  E8               inx
0009C2r 2  E8               inx
0009C3r 2  A9 01            lda #1
0009C5r 2  95 00            sta $00,x
0009C7r 2  A9 00            lda #0
0009C9r 2  95 01            sta $01,x
0009CBr 2               
0009CBr 2               ; snake.fth:128:16 in `move-down`
0009CBr 2               @OPCODE_2:   ; [c64_ir] PushLiteral(-27666)
0009CBr 2  E8               inx
0009CCr 2  E8               inx
0009CDr 2  A9 EE            lda #238
0009CFr 2  95 00            sta $00,x
0009D1r 2  A9 93            lda #147
0009D3r 2  95 01            sta $01,x
0009D5r 2               
0009D5r 2               ; snake.fth:128:29 in `move-down`
0009D5r 2               @OPCODE_3:   ; [c64_ir] Call("+!")
0009D5r 2  20 rr rr             jsr PAX_FN_2B21
0009D8r 2               
0009D8r 2               @target_1:
0009D8r 2               
0009D8r 2               ; snake.fth:128:32 in `move-down`
0009D8r 2               @OPCODE_5:   ; [c64_ir] Exit
0009D8r 2  60               rts
0009D9r 2               .endproc
0009D9r 2               
0009D9r 2               
0009D9r 2               
0009D9r 2               
0009D9r 2               
0009D9r 2               ; function start
0009D9r 2               
0009D9r 2               .proc PAX_FN_move2Dright
0009D9r 2               @target_0:
0009D9r 2               
0009D9r 2               ; snake.fth:129:15 in `move-right`
0009D9r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(1)
0009D9r 2  E8               inx
0009DAr 2  E8               inx
0009DBr 2  A9 01            lda #1
0009DDr 2  95 00            sta $00,x
0009DFr 2  A9 00            lda #0
0009E1r 2  95 01            sta $01,x
0009E3r 2               
0009E3r 2               ; snake.fth:129:17 in `move-right`
0009E3r 2               @OPCODE_2:   ; [c64_ir] PushLiteral(-28668)
0009E3r 2  E8               inx
0009E4r 2  E8               inx
0009E5r 2  A9 04            lda #4
0009E7r 2  95 00            sta $00,x
0009E9r 2  A9 90            lda #144
0009EBr 2  95 01            sta $01,x
0009EDr 2               
0009EDr 2               ; snake.fth:129:30 in `move-right`
0009EDr 2               @OPCODE_3:   ; [c64_ir] Call("+!")
0009EDr 2  20 rr rr             jsr PAX_FN_2B21
0009F0r 2               
0009F0r 2               @target_1:
0009F0r 2               
0009F0r 2               ; snake.fth:129:33 in `move-right`
0009F0r 2               @OPCODE_5:   ; [c64_ir] Exit
0009F0r 2  60               rts
0009F1r 2               .endproc
0009F1r 2               
0009F1r 2               
0009F1r 2               
0009F1r 2               
0009F1r 2               
0009F1r 2               ; function start
0009F1r 2               
0009F1r 2               .proc PAX_FN_move2Dsnake2Dhead
0009F1r 2               @target_0:
0009F1r 2               
0009F1r 2               ; snake.fth:131:20 in `move-snake-head`
0009F1r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-26660)
0009F1r 2  E8               inx
0009F2r 2  E8               inx
0009F3r 2  A9 DC            lda #220
0009F5r 2  95 00            sta $00,x
0009F7r 2  A9 97            lda #151
0009F9r 2  95 01            sta $01,x
0009FBr 2               
0009FBr 2               ; snake.fth:131:30 in `move-snake-head`
0009FBr 2               @OPCODE_2:   ; [c64_ir] Load
0009FBr 2  A1 00            lda ($00,x)
0009FDr 2  95 00            sta $00,x
0009FFr 2  A9 00            lda #0
000A01r 2  95 01            sta $01,x
000A03r 2               
000A03r 2               ; snake.fth:132:3 in `move-snake-head`
000A03r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(37)
000A03r 2  E8               inx
000A04r 2  E8               inx
000A05r 2  A9 25            lda #37
000A07r 2  95 00            sta $00,x
000A09r 2  A9 00            lda #0
000A0Br 2  95 01            sta $01,x
000A0Dr 2               
000A0Dr 2               ; snake.fth:132:8 in `move-snake-head`
000A0Dr 2               @OPCODE_4:   ; [c64_ir] Call("over")
000A0Dr 2  20 rr rr             jsr PAX_FN_over
000A10r 2               
000A10r 2               @target_1:
000A10r 2               
000A10r 2               ; snake.fth:132:14 in `move-snake-head`
000A10r 2               @OPCODE_6:   ; [c64_ir] Call("=")
000A10r 2  20 rr rr             jsr PAX_FN_3D
000A13r 2               
000A13r 2               @target_2:
000A13r 2               
000A13r 2               ; snake.fth:132:16 in `move-snake-head`
000A13r 2               @OPCODE_8:   ; [c64_ir] JumpIf0(5)
000A13r 2  CA               dex
000A14r 2  CA               dex
000A15r 2  B5 02            lda $02,x
000A17r 2  15 03            ora $03,x
000A19r 2  D0 03            bne *+5
000A1Br 2  4C rr rr         jmp @target_5
000A1Er 2               
000A1Er 2               @target_3:
000A1Er 2               
000A1Er 2               ; snake.fth:132:19 in `move-snake-head`
000A1Er 2               @OPCODE_10:   ; [c64_ir] Call("move-left")
000A1Er 2  20 rr rr             jsr PAX_FN_move2Dleft
000A21r 2               
000A21r 2               @target_4:
000A21r 2               
000A21r 2               ; snake.fth:132:29 in `move-snake-head`
000A21r 2               @OPCODE_12:   ; [c64_ir] JumpElse(23)
000A21r 2  4C rr rr         jmp @target_23
000A24r 2               
000A24r 2               @target_5:
000A24r 2               
000A24r 2               ; snake.fth:133:3 in `move-snake-head`
000A24r 2               @OPCODE_14:   ; [c64_ir] PushLiteral(38)
000A24r 2  E8               inx
000A25r 2  E8               inx
000A26r 2  A9 26            lda #38
000A28r 2  95 00            sta $00,x
000A2Ar 2  A9 00            lda #0
000A2Cr 2  95 01            sta $01,x
000A2Er 2               
000A2Er 2               ; snake.fth:133:6 in `move-snake-head`
000A2Er 2               @OPCODE_15:   ; [c64_ir] Call("over")
000A2Er 2  20 rr rr             jsr PAX_FN_over
000A31r 2               
000A31r 2               @target_6:
000A31r 2               
000A31r 2               ; snake.fth:133:14 in `move-snake-head`
000A31r 2               @OPCODE_17:   ; [c64_ir] Call("=")
000A31r 2  20 rr rr             jsr PAX_FN_3D
000A34r 2               
000A34r 2               @target_7:
000A34r 2               
000A34r 2               ; snake.fth:133:16 in `move-snake-head`
000A34r 2               @OPCODE_19:   ; [c64_ir] JumpIf0(10)
000A34r 2  CA               dex
000A35r 2  CA               dex
000A36r 2  B5 02            lda $02,x
000A38r 2  15 03            ora $03,x
000A3Ar 2  D0 03            bne *+5
000A3Cr 2  4C rr rr         jmp @target_10
000A3Fr 2               
000A3Fr 2               @target_8:
000A3Fr 2               
000A3Fr 2               ; snake.fth:133:19 in `move-snake-head`
000A3Fr 2               @OPCODE_21:   ; [c64_ir] Call("move-up")
000A3Fr 2  20 rr rr             jsr PAX_FN_move2Dup
000A42r 2               
000A42r 2               @target_9:
000A42r 2               
000A42r 2               ; snake.fth:133:27 in `move-snake-head`
000A42r 2               @OPCODE_23:   ; [c64_ir] JumpElse(22)
000A42r 2  4C rr rr         jmp @target_22
000A45r 2               
000A45r 2               @target_10:
000A45r 2               
000A45r 2               ; snake.fth:134:3 in `move-snake-head`
000A45r 2               @OPCODE_25:   ; [c64_ir] PushLiteral(39)
000A45r 2  E8               inx
000A46r 2  E8               inx
000A47r 2  A9 27            lda #39
000A49r 2  95 00            sta $00,x
000A4Br 2  A9 00            lda #0
000A4Dr 2  95 01            sta $01,x
000A4Fr 2               
000A4Fr 2               ; snake.fth:134:9 in `move-snake-head`
000A4Fr 2               @OPCODE_26:   ; [c64_ir] Call("over")
000A4Fr 2  20 rr rr             jsr PAX_FN_over
000A52r 2               
000A52r 2               @target_11:
000A52r 2               
000A52r 2               ; snake.fth:134:14 in `move-snake-head`
000A52r 2               @OPCODE_28:   ; [c64_ir] Call("=")
000A52r 2  20 rr rr             jsr PAX_FN_3D
000A55r 2               
000A55r 2               @target_12:
000A55r 2               
000A55r 2               ; snake.fth:134:16 in `move-snake-head`
000A55r 2               @OPCODE_30:   ; [c64_ir] JumpIf0(15)
000A55r 2  CA               dex
000A56r 2  CA               dex
000A57r 2  B5 02            lda $02,x
000A59r 2  15 03            ora $03,x
000A5Br 2  D0 03            bne *+5
000A5Dr 2  4C rr rr         jmp @target_15
000A60r 2               
000A60r 2               @target_13:
000A60r 2               
000A60r 2               ; snake.fth:134:19 in `move-snake-head`
000A60r 2               @OPCODE_32:   ; [c64_ir] Call("move-right")
000A60r 2  20 rr rr             jsr PAX_FN_move2Dright
000A63r 2               
000A63r 2               @target_14:
000A63r 2               
000A63r 2               ; snake.fth:134:30 in `move-snake-head`
000A63r 2               @OPCODE_34:   ; [c64_ir] JumpElse(21)
000A63r 2  4C rr rr         jmp @target_21
000A66r 2               
000A66r 2               @target_15:
000A66r 2               
000A66r 2               ; snake.fth:135:3 in `move-snake-head`
000A66r 2               @OPCODE_36:   ; [c64_ir] PushLiteral(40)
000A66r 2  E8               inx
000A67r 2  E8               inx
000A68r 2  A9 28            lda #40
000A6Ar 2  95 00            sta $00,x
000A6Cr 2  A9 00            lda #0
000A6Er 2  95 01            sta $01,x
000A70r 2               
000A70r 2               ; snake.fth:135:8 in `move-snake-head`
000A70r 2               @OPCODE_37:   ; [c64_ir] Call("over")
000A70r 2  20 rr rr             jsr PAX_FN_over
000A73r 2               
000A73r 2               @target_16:
000A73r 2               
000A73r 2               ; snake.fth:135:14 in `move-snake-head`
000A73r 2               @OPCODE_39:   ; [c64_ir] Call("=")
000A73r 2  20 rr rr             jsr PAX_FN_3D
000A76r 2               
000A76r 2               @target_17:
000A76r 2               
000A76r 2               ; snake.fth:135:16 in `move-snake-head`
000A76r 2               @OPCODE_41:   ; [c64_ir] JumpIf0(20)
000A76r 2  CA               dex
000A77r 2  CA               dex
000A78r 2  B5 02            lda $02,x
000A7Ar 2  15 03            ora $03,x
000A7Cr 2  D0 03            bne *+5
000A7Er 2  4C rr rr         jmp @target_20
000A81r 2               
000A81r 2               @target_18:
000A81r 2               
000A81r 2               ; snake.fth:135:19 in `move-snake-head`
000A81r 2               @OPCODE_43:   ; [c64_ir] Call("move-down")
000A81r 2  20 rr rr             jsr PAX_FN_move2Ddown
000A84r 2               
000A84r 2               @target_19:
000A84r 2               
000A84r 2               ; snake.fth:136:3 in `move-snake-head`
000A84r 2               @OPCODE_45:   ; [c64_ir] JumpTarget(19)
000A84r 2               
000A84r 2               @target_20:
000A84r 2               
000A84r 2               ; snake.fth:136:8 in `move-snake-head`
000A84r 2               @OPCODE_47:   ; [c64_ir] JumpTarget(20)
000A84r 2               
000A84r 2               @target_21:
000A84r 2               
000A84r 2               ; snake.fth:136:13 in `move-snake-head`
000A84r 2               @OPCODE_49:   ; [c64_ir] JumpTarget(21)
000A84r 2               
000A84r 2               @target_22:
000A84r 2               
000A84r 2               ; snake.fth:136:18 in `move-snake-head`
000A84r 2               @OPCODE_51:   ; [c64_ir] JumpTarget(22)
000A84r 2               
000A84r 2               @target_23:
000A84r 2               
000A84r 2               ; snake.fth:136:23 in `move-snake-head`
000A84r 2               @OPCODE_53:   ; [c64_ir] Drop
000A84r 2  CA               dex
000A85r 2  CA               dex
000A86r 2               
000A86r 2               ; snake.fth:136:28 in `move-snake-head`
000A86r 2               @OPCODE_54:   ; [c64_ir] Exit
000A86r 2  60               rts
000A87r 2               .endproc
000A87r 2               
000A87r 2               
000A87r 2               
000A87r 2               
000A87r 2               
000A87r 2               ; function start
000A87r 2               
000A87r 2               .proc PAX_FN_move2Dsnake2Dtail
000A87r 2               @target_0:
000A87r 2               
000A87r 2               ; snake.fth:140:3 in `move-snake-tail`
000A87r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-1)
000A87r 2  E8               inx
000A88r 2  E8               inx
000A89r 2  A9 FF            lda #255
000A8Br 2  95 00            sta $00,x
000A8Dr 2  A9 FF            lda #255
000A8Fr 2  95 01            sta $01,x
000A91r 2               
000A91r 2               ; snake.fth:140:6 in `move-snake-tail`
000A91r 2               @OPCODE_2:   ; [c64_ir] PushLiteral(-26658)
000A91r 2  E8               inx
000A92r 2  E8               inx
000A93r 2  A9 DE            lda #222
000A95r 2  95 00            sta $00,x
000A97r 2  A9 97            lda #151
000A99r 2  95 01            sta $01,x
000A9Br 2               
000A9Br 2               ; snake.fth:140:13 in `move-snake-tail`
000A9Br 2               @OPCODE_3:   ; [c64_ir] Load
000A9Br 2  A1 00            lda ($00,x)
000A9Dr 2  95 00            sta $00,x
000A9Fr 2  A9 00            lda #0
000AA1r 2  95 01            sta $01,x
000AA3r 2               
000AA3r 2               ; snake.fth:140:15 in `move-snake-tail`
000AA3r 2               @OPCODE_4:   ; [c64_ir] AltPush
000AA3r 2  CA               dex
000AA4r 2  CA               dex
000AA5r 2  B5 03            lda $03,x
000AA7r 2  48               pha
000AA8r 2  B5 02            lda $02,x
000AAAr 2  48               pha
000AABr 2               
000AABr 2               ; snake.fth:140:15 in `move-snake-tail`
000AABr 2               @OPCODE_5:   ; [c64_ir] AltPush
000AABr 2  CA               dex
000AACr 2  CA               dex
000AADr 2  B5 03            lda $03,x
000AAFr 2  48               pha
000AB0r 2  B5 02            lda $02,x
000AB2r 2  48               pha
000AB3r 2               
000AB3r 2               ; snake.fth:140:15 in `move-snake-tail`
000AB3r 2               @OPCODE_6:   ; [c64_ir] LoopTarget(0)
000AB3r 2               
000AB3r 2               @target_1:
000AB3r 2               
000AB3r 2               ; snake.fth:141:7 in `move-snake-tail`
000AB3r 2               @OPCODE_8:   ; [c64_ir] Call("i")
000AB3r 2  20 rr rr             jsr PAX_FN_i
000AB6r 2               
000AB6r 2               @target_2:
000AB6r 2               
000AB6r 2               ; snake.fth:141:9 in `move-snake-tail`
000AB6r 2               @OPCODE_10:   ; [c64_ir] Drop
000AB6r 2  CA               dex
000AB7r 2  CA               dex
000AB8r 2               
000AB8r 2               ; snake.fth:141:14 in `move-snake-tail`
000AB8r 2               @OPCODE_11:   ; [c64_ir] Call("i")
000AB8r 2  20 rr rr             jsr PAX_FN_i
000ABBr 2               
000ABBr 2               @target_3:
000ABBr 2               
000ABBr 2               ; snake.fth:141:16 in `move-snake-tail`
000ABBr 2               @OPCODE_13:   ; [c64_ir] Call("snake-x")
000ABBr 2  20 rr rr             jsr PAX_FN_snake2Dx
000ABEr 2               
000ABEr 2               @target_4:
000ABEr 2               
000ABEr 2               ; snake.fth:141:24 in `move-snake-tail`
000ABEr 2               @OPCODE_15:   ; [c64_ir] Load
000ABEr 2  A1 00            lda ($00,x)
000AC0r 2  95 00            sta $00,x
000AC2r 2  A9 00            lda #0
000AC4r 2  95 01            sta $01,x
000AC6r 2               
000AC6r 2               ; snake.fth:141:26 in `move-snake-tail`
000AC6r 2               @OPCODE_16:   ; [c64_ir] Call("i")
000AC6r 2  20 rr rr             jsr PAX_FN_i
000AC9r 2               
000AC9r 2               @target_5:
000AC9r 2               
000AC9r 2               ; snake.fth:141:28 in `move-snake-tail`
000AC9r 2               @OPCODE_18:   ; [c64_ir] PushLiteral(1)
000AC9r 2  E8               inx
000ACAr 2  E8               inx
000ACBr 2  A9 01            lda #1
000ACDr 2  95 00            sta $00,x
000ACFr 2  A9 00            lda #0
000AD1r 2  95 01            sta $01,x
000AD3r 2               
000AD3r 2               ; snake.fth:141:30 in `move-snake-tail`
000AD3r 2               @OPCODE_19:   ; [c64_ir] Add
000AD3r 2                   ; 21
000AD3r 2  CA               dex
000AD4r 2  CA               dex
000AD5r 2  18               clc
000AD6r 2  B5 00            lda $00,x
000AD8r 2  75 02            adc $02,x
000ADAr 2  95 00            sta $00,x
000ADCr 2  B5 01            lda $01,x
000ADEr 2  75 03            adc $03,x
000AE0r 2  95 01            sta $01,x
000AE2r 2               
000AE2r 2               ; snake.fth:141:32 in `move-snake-tail`
000AE2r 2               @OPCODE_20:   ; [c64_ir] Call("snake-x")
000AE2r 2  20 rr rr             jsr PAX_FN_snake2Dx
000AE5r 2               
000AE5r 2               @target_6:
000AE5r 2               
000AE5r 2               ; snake.fth:141:40 in `move-snake-tail`
000AE5r 2               @OPCODE_22:   ; [c64_ir] Store
000AE5r 2  CA               dex
000AE6r 2  CA               dex
000AE7r 2  CA               dex
000AE8r 2  CA               dex
000AE9r 2  B5 02            lda $02,x
000AEBr 2  81 04            sta ($04,x)
000AEDr 2                   ; TODO high byte
000AEDr 2               
000AEDr 2               ; snake.fth:142:7 in `move-snake-tail`
000AEDr 2               @OPCODE_23:   ; [c64_ir] Call("i")
000AEDr 2  20 rr rr             jsr PAX_FN_i
000AF0r 2               
000AF0r 2               @target_7:
000AF0r 2               
000AF0r 2               ; snake.fth:142:9 in `move-snake-tail`
000AF0r 2               @OPCODE_25:   ; [c64_ir] Call("snake-y")
000AF0r 2  20 rr rr             jsr PAX_FN_snake2Dy
000AF3r 2               
000AF3r 2               @target_8:
000AF3r 2               
000AF3r 2               ; snake.fth:142:17 in `move-snake-tail`
000AF3r 2               @OPCODE_27:   ; [c64_ir] Load
000AF3r 2  A1 00            lda ($00,x)
000AF5r 2  95 00            sta $00,x
000AF7r 2  A9 00            lda #0
000AF9r 2  95 01            sta $01,x
000AFBr 2               
000AFBr 2               ; snake.fth:142:19 in `move-snake-tail`
000AFBr 2               @OPCODE_28:   ; [c64_ir] Call("i")
000AFBr 2  20 rr rr             jsr PAX_FN_i
000AFEr 2               
000AFEr 2               @target_9:
000AFEr 2               
000AFEr 2               ; snake.fth:142:21 in `move-snake-tail`
000AFEr 2               @OPCODE_30:   ; [c64_ir] PushLiteral(1)
000AFEr 2  E8               inx
000AFFr 2  E8               inx
000B00r 2  A9 01            lda #1
000B02r 2  95 00            sta $00,x
000B04r 2  A9 00            lda #0
000B06r 2  95 01            sta $01,x
000B08r 2               
000B08r 2               ; snake.fth:142:23 in `move-snake-tail`
000B08r 2               @OPCODE_31:   ; [c64_ir] Add
000B08r 2                   ; 21
000B08r 2  CA               dex
000B09r 2  CA               dex
000B0Ar 2  18               clc
000B0Br 2  B5 00            lda $00,x
000B0Dr 2  75 02            adc $02,x
000B0Fr 2  95 00            sta $00,x
000B11r 2  B5 01            lda $01,x
000B13r 2  75 03            adc $03,x
000B15r 2  95 01            sta $01,x
000B17r 2               
000B17r 2               ; snake.fth:142:25 in `move-snake-tail`
000B17r 2               @OPCODE_32:   ; [c64_ir] Call("snake-y")
000B17r 2  20 rr rr             jsr PAX_FN_snake2Dy
000B1Ar 2               
000B1Ar 2               @target_10:
000B1Ar 2               
000B1Ar 2               ; snake.fth:142:33 in `move-snake-tail`
000B1Ar 2               @OPCODE_34:   ; [c64_ir] Store
000B1Ar 2  CA               dex
000B1Br 2  CA               dex
000B1Cr 2  CA               dex
000B1Dr 2  CA               dex
000B1Er 2  B5 02            lda $02,x
000B20r 2  81 04            sta ($04,x)
000B22r 2                   ; TODO high byte
000B22r 2               
000B22r 2               ; snake.fth:143:3 in `move-snake-tail`
000B22r 2               @OPCODE_35:   ; [c64_ir] PushLiteral(1)
000B22r 2  E8               inx
000B23r 2  E8               inx
000B24r 2  A9 01            lda #1
000B26r 2  95 00            sta $00,x
000B28r 2  A9 00            lda #0
000B2Ar 2  95 01            sta $01,x
000B2Cr 2               
000B2Cr 2               ; snake.fth:143:5 in `move-snake-tail`
000B2Cr 2               @OPCODE_36:   ; [c64_ir] Call("-loopimpl")
000B2Cr 2  20 rr rr             jsr PAX_FN_2Dloopimpl
000B2Fr 2               
000B2Fr 2               @target_11:
000B2Fr 2               
000B2Fr 2               ; snake.fth:143:5 in `move-snake-tail`
000B2Fr 2               @OPCODE_38:   ; [c64_ir] LoopIf0(1)
000B2Fr 2  CA               dex
000B30r 2  CA               dex
000B31r 2  B5 02            lda $02,x
000B33r 2  15 03            ora $03,x
000B35r 2  D0 03            bne *+5
000B37r 2  4C rr rr         jmp @target_1
000B3Ar 2               
000B3Ar 2               @target_12:
000B3Ar 2               
000B3Ar 2               ; snake.fth:143:5 in `move-snake-tail`
000B3Ar 2               @OPCODE_40:   ; [c64_ir] AltPop
000B3Ar 2  E8               inx
000B3Br 2  E8               inx
000B3Cr 2  68               pla
000B3Dr 2  95 00            sta $00,x
000B3Fr 2  68               pla
000B40r 2  95 01            sta $01,x
000B42r 2               
000B42r 2               ; snake.fth:143:5 in `move-snake-tail`
000B42r 2               @OPCODE_41:   ; [c64_ir] Drop
000B42r 2  CA               dex
000B43r 2  CA               dex
000B44r 2               
000B44r 2               ; snake.fth:143:5 in `move-snake-tail`
000B44r 2               @OPCODE_42:   ; [c64_ir] AltPop
000B44r 2  E8               inx
000B45r 2  E8               inx
000B46r 2  68               pla
000B47r 2  95 00            sta $00,x
000B49r 2  68               pla
000B4Ar 2  95 01            sta $01,x
000B4Cr 2               
000B4Cr 2               ; snake.fth:143:5 in `move-snake-tail`
000B4Cr 2               @OPCODE_43:   ; [c64_ir] Drop
000B4Cr 2  CA               dex
000B4Dr 2  CA               dex
000B4Er 2               
000B4Er 2               ; snake.fth:144:3 in `move-snake-tail`
000B4Er 2               @OPCODE_44:   ; [c64_ir] Exit
000B4Er 2  60               rts
000B4Fr 2               .endproc
000B4Fr 2               
000B4Fr 2               
000B4Fr 2               
000B4Fr 2               
000B4Fr 2               
000B4Fr 2               ; function start
000B4Fr 2               
000B4Fr 2               .proc PAX_FN_is2Dhorizontal
000B4Fr 2               @target_0:
000B4Fr 2               
000B4Fr 2               ; snake.fth:146:18 in `is-horizontal`
000B4Fr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-26660)
000B4Fr 2  E8               inx
000B50r 2  E8               inx
000B51r 2  A9 DC            lda #220
000B53r 2  95 00            sta $00,x
000B55r 2  A9 97            lda #151
000B57r 2  95 01            sta $01,x
000B59r 2               
000B59r 2               ; snake.fth:146:28 in `is-horizontal`
000B59r 2               @OPCODE_2:   ; [c64_ir] Load
000B59r 2  A1 00            lda ($00,x)
000B5Br 2  95 00            sta $00,x
000B5Dr 2  A9 00            lda #0
000B5Fr 2  95 01            sta $01,x
000B61r 2               
000B61r 2               ; snake.fth:146:30 in `is-horizontal`
000B61r 2               @OPCODE_3:   ; [c64_ir] Call("dup")
000B61r 2  20 rr rr             jsr PAX_FN_dup
000B64r 2               
000B64r 2               @target_1:
000B64r 2               
000B64r 2               ; snake.fth:147:3 in `is-horizontal`
000B64r 2               @OPCODE_5:   ; [c64_ir] PushLiteral(37)
000B64r 2  E8               inx
000B65r 2  E8               inx
000B66r 2  A9 25            lda #37
000B68r 2  95 00            sta $00,x
000B6Ar 2  A9 00            lda #0
000B6Cr 2  95 01            sta $01,x
000B6Er 2               
000B6Er 2               ; snake.fth:147:8 in `is-horizontal`
000B6Er 2               @OPCODE_6:   ; [c64_ir] Call("=")
000B6Er 2  20 rr rr             jsr PAX_FN_3D
000B71r 2               
000B71r 2               @target_2:
000B71r 2               
000B71r 2               ; snake.fth:147:10 in `is-horizontal`
000B71r 2               @OPCODE_8:   ; [c64_ir] Call("swap")
000B71r 2  20 rr rr             jsr PAX_FN_swap
000B74r 2               
000B74r 2               @target_3:
000B74r 2               
000B74r 2               ; snake.fth:148:3 in `is-horizontal`
000B74r 2               @OPCODE_10:   ; [c64_ir] PushLiteral(39)
000B74r 2  E8               inx
000B75r 2  E8               inx
000B76r 2  A9 27            lda #39
000B78r 2  95 00            sta $00,x
000B7Ar 2  A9 00            lda #0
000B7Cr 2  95 01            sta $01,x
000B7Er 2               
000B7Er 2               ; snake.fth:148:9 in `is-horizontal`
000B7Er 2               @OPCODE_11:   ; [c64_ir] Call("=")
000B7Er 2  20 rr rr             jsr PAX_FN_3D
000B81r 2               
000B81r 2               @target_4:
000B81r 2               
000B81r 2               ; snake.fth:148:11 in `is-horizontal`
000B81r 2               @OPCODE_13:   ; [c64_ir] Call("or")
000B81r 2  20 rr rr             jsr PAX_FN_or
000B84r 2               
000B84r 2               @target_5:
000B84r 2               
000B84r 2               ; snake.fth:148:14 in `is-horizontal`
000B84r 2               @OPCODE_15:   ; [c64_ir] Exit
000B84r 2  60               rts
000B85r 2               .endproc
000B85r 2               
000B85r 2               
000B85r 2               
000B85r 2               
000B85r 2               
000B85r 2               ; function start
000B85r 2               
000B85r 2               .proc PAX_FN_is2Dvertical
000B85r 2               @target_0:
000B85r 2               
000B85r 2               ; snake.fth:150:16 in `is-vertical`
000B85r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-26660)
000B85r 2  E8               inx
000B86r 2  E8               inx
000B87r 2  A9 DC            lda #220
000B89r 2  95 00            sta $00,x
000B8Br 2  A9 97            lda #151
000B8Dr 2  95 01            sta $01,x
000B8Fr 2               
000B8Fr 2               ; snake.fth:150:26 in `is-vertical`
000B8Fr 2               @OPCODE_2:   ; [c64_ir] Load
000B8Fr 2  A1 00            lda ($00,x)
000B91r 2  95 00            sta $00,x
000B93r 2  A9 00            lda #0
000B95r 2  95 01            sta $01,x
000B97r 2               
000B97r 2               ; snake.fth:150:28 in `is-vertical`
000B97r 2               @OPCODE_3:   ; [c64_ir] Call("dup")
000B97r 2  20 rr rr             jsr PAX_FN_dup
000B9Ar 2               
000B9Ar 2               @target_1:
000B9Ar 2               
000B9Ar 2               ; snake.fth:151:3 in `is-vertical`
000B9Ar 2               @OPCODE_5:   ; [c64_ir] PushLiteral(38)
000B9Ar 2  E8               inx
000B9Br 2  E8               inx
000B9Cr 2  A9 26            lda #38
000B9Er 2  95 00            sta $00,x
000BA0r 2  A9 00            lda #0
000BA2r 2  95 01            sta $01,x
000BA4r 2               
000BA4r 2               ; snake.fth:151:6 in `is-vertical`
000BA4r 2               @OPCODE_6:   ; [c64_ir] Call("=")
000BA4r 2  20 rr rr             jsr PAX_FN_3D
000BA7r 2               
000BA7r 2               @target_2:
000BA7r 2               
000BA7r 2               ; snake.fth:151:8 in `is-vertical`
000BA7r 2               @OPCODE_8:   ; [c64_ir] Call("swap")
000BA7r 2  20 rr rr             jsr PAX_FN_swap
000BAAr 2               
000BAAr 2               @target_3:
000BAAr 2               
000BAAr 2               ; snake.fth:152:3 in `is-vertical`
000BAAr 2               @OPCODE_10:   ; [c64_ir] PushLiteral(40)
000BAAr 2  E8               inx
000BABr 2  E8               inx
000BACr 2  A9 28            lda #40
000BAEr 2  95 00            sta $00,x
000BB0r 2  A9 00            lda #0
000BB2r 2  95 01            sta $01,x
000BB4r 2               
000BB4r 2               ; snake.fth:152:8 in `is-vertical`
000BB4r 2               @OPCODE_11:   ; [c64_ir] Call("=")
000BB4r 2  20 rr rr             jsr PAX_FN_3D
000BB7r 2               
000BB7r 2               @target_4:
000BB7r 2               
000BB7r 2               ; snake.fth:152:10 in `is-vertical`
000BB7r 2               @OPCODE_13:   ; [c64_ir] Call("or")
000BB7r 2  20 rr rr             jsr PAX_FN_or
000BBAr 2               
000BBAr 2               @target_5:
000BBAr 2               
000BBAr 2               ; snake.fth:152:13 in `is-vertical`
000BBAr 2               @OPCODE_15:   ; [c64_ir] Exit
000BBAr 2  60               rts
000BBBr 2               .endproc
000BBBr 2               
000BBBr 2               
000BBBr 2               
000BBBr 2               
000BBBr 2               
000BBBr 2               ; function start
000BBBr 2               
000BBBr 2               .proc PAX_FN_turn2Dup
000BBBr 2               @target_0:
000BBBr 2               
000BBBr 2               ; snake.fth:154:15 in `turn-up`
000BBBr 2               @OPCODE_1:   ; [c64_ir] Call("is-horizontal")
000BBBr 2  20 rr rr             jsr PAX_FN_is2Dhorizontal
000BBEr 2               
000BBEr 2               @target_1:
000BBEr 2               
000BBEr 2               ; snake.fth:154:29 in `turn-up`
000BBEr 2               @OPCODE_3:   ; [c64_ir] JumpIf0(3)
000BBEr 2  CA               dex
000BBFr 2  CA               dex
000BC0r 2  B5 02            lda $02,x
000BC2r 2  15 03            ora $03,x
000BC4r 2  D0 03            bne *+5
000BC6r 2  4C rr rr         jmp @target_3
000BC9r 2               
000BC9r 2               @target_2:
000BC9r 2               
000BC9r 2               ; snake.fth:154:32 in `turn-up`
000BC9r 2               @OPCODE_5:   ; [c64_ir] PushLiteral(38)
000BC9r 2  E8               inx
000BCAr 2  E8               inx
000BCBr 2  A9 26            lda #38
000BCDr 2  95 00            sta $00,x
000BCFr 2  A9 00            lda #0
000BD1r 2  95 01            sta $01,x
000BD3r 2               
000BD3r 2               ; snake.fth:154:35 in `turn-up`
000BD3r 2               @OPCODE_6:   ; [c64_ir] PushLiteral(-26660)
000BD3r 2  E8               inx
000BD4r 2  E8               inx
000BD5r 2  A9 DC            lda #220
000BD7r 2  95 00            sta $00,x
000BD9r 2  A9 97            lda #151
000BDBr 2  95 01            sta $01,x
000BDDr 2               
000BDDr 2               ; snake.fth:154:45 in `turn-up`
000BDDr 2               @OPCODE_7:   ; [c64_ir] Store
000BDDr 2  CA               dex
000BDEr 2  CA               dex
000BDFr 2  CA               dex
000BE0r 2  CA               dex
000BE1r 2  B5 02            lda $02,x
000BE3r 2  81 04            sta ($04,x)
000BE5r 2                   ; TODO high byte
000BE5r 2               
000BE5r 2               ; snake.fth:154:47 in `turn-up`
000BE5r 2               @OPCODE_8:   ; [c64_ir] JumpTarget(2)
000BE5r 2               
000BE5r 2               @target_3:
000BE5r 2               
000BE5r 2               ; snake.fth:154:52 in `turn-up`
000BE5r 2               @OPCODE_10:   ; [c64_ir] Exit
000BE5r 2  60               rts
000BE6r 2               .endproc
000BE6r 2               
000BE6r 2               
000BE6r 2               
000BE6r 2               
000BE6r 2               
000BE6r 2               ; function start
000BE6r 2               
000BE6r 2               .proc PAX_FN_turn2Dleft
000BE6r 2               @target_0:
000BE6r 2               
000BE6r 2               ; snake.fth:155:15 in `turn-left`
000BE6r 2               @OPCODE_1:   ; [c64_ir] Call("is-vertical")
000BE6r 2  20 rr rr             jsr PAX_FN_is2Dvertical
000BE9r 2               
000BE9r 2               @target_1:
000BE9r 2               
000BE9r 2               ; snake.fth:155:27 in `turn-left`
000BE9r 2               @OPCODE_3:   ; [c64_ir] JumpIf0(3)
000BE9r 2  CA               dex
000BEAr 2  CA               dex
000BEBr 2  B5 02            lda $02,x
000BEDr 2  15 03            ora $03,x
000BEFr 2  D0 03            bne *+5
000BF1r 2  4C rr rr         jmp @target_3
000BF4r 2               
000BF4r 2               @target_2:
000BF4r 2               
000BF4r 2               ; snake.fth:155:30 in `turn-left`
000BF4r 2               @OPCODE_5:   ; [c64_ir] PushLiteral(37)
000BF4r 2  E8               inx
000BF5r 2  E8               inx
000BF6r 2  A9 25            lda #37
000BF8r 2  95 00            sta $00,x
000BFAr 2  A9 00            lda #0
000BFCr 2  95 01            sta $01,x
000BFEr 2               
000BFEr 2               ; snake.fth:155:35 in `turn-left`
000BFEr 2               @OPCODE_6:   ; [c64_ir] PushLiteral(-26660)
000BFEr 2  E8               inx
000BFFr 2  E8               inx
000C00r 2  A9 DC            lda #220
000C02r 2  95 00            sta $00,x
000C04r 2  A9 97            lda #151
000C06r 2  95 01            sta $01,x
000C08r 2               
000C08r 2               ; snake.fth:155:45 in `turn-left`
000C08r 2               @OPCODE_7:   ; [c64_ir] Store
000C08r 2  CA               dex
000C09r 2  CA               dex
000C0Ar 2  CA               dex
000C0Br 2  CA               dex
000C0Cr 2  B5 02            lda $02,x
000C0Er 2  81 04            sta ($04,x)
000C10r 2                   ; TODO high byte
000C10r 2               
000C10r 2               ; snake.fth:155:47 in `turn-left`
000C10r 2               @OPCODE_8:   ; [c64_ir] JumpTarget(2)
000C10r 2               
000C10r 2               @target_3:
000C10r 2               
000C10r 2               ; snake.fth:155:52 in `turn-left`
000C10r 2               @OPCODE_10:   ; [c64_ir] Exit
000C10r 2  60               rts
000C11r 2               .endproc
000C11r 2               
000C11r 2               
000C11r 2               
000C11r 2               
000C11r 2               
000C11r 2               ; function start
000C11r 2               
000C11r 2               .proc PAX_FN_turn2Ddown
000C11r 2               @target_0:
000C11r 2               
000C11r 2               ; snake.fth:156:15 in `turn-down`
000C11r 2               @OPCODE_1:   ; [c64_ir] Call("is-horizontal")
000C11r 2  20 rr rr             jsr PAX_FN_is2Dhorizontal
000C14r 2               
000C14r 2               @target_1:
000C14r 2               
000C14r 2               ; snake.fth:156:29 in `turn-down`
000C14r 2               @OPCODE_3:   ; [c64_ir] JumpIf0(3)
000C14r 2  CA               dex
000C15r 2  CA               dex
000C16r 2  B5 02            lda $02,x
000C18r 2  15 03            ora $03,x
000C1Ar 2  D0 03            bne *+5
000C1Cr 2  4C rr rr         jmp @target_3
000C1Fr 2               
000C1Fr 2               @target_2:
000C1Fr 2               
000C1Fr 2               ; snake.fth:156:32 in `turn-down`
000C1Fr 2               @OPCODE_5:   ; [c64_ir] PushLiteral(40)
000C1Fr 2  E8               inx
000C20r 2  E8               inx
000C21r 2  A9 28            lda #40
000C23r 2  95 00            sta $00,x
000C25r 2  A9 00            lda #0
000C27r 2  95 01            sta $01,x
000C29r 2               
000C29r 2               ; snake.fth:156:37 in `turn-down`
000C29r 2               @OPCODE_6:   ; [c64_ir] PushLiteral(-26660)
000C29r 2  E8               inx
000C2Ar 2  E8               inx
000C2Br 2  A9 DC            lda #220
000C2Dr 2  95 00            sta $00,x
000C2Fr 2  A9 97            lda #151
000C31r 2  95 01            sta $01,x
000C33r 2               
000C33r 2               ; snake.fth:156:47 in `turn-down`
000C33r 2               @OPCODE_7:   ; [c64_ir] Store
000C33r 2  CA               dex
000C34r 2  CA               dex
000C35r 2  CA               dex
000C36r 2  CA               dex
000C37r 2  B5 02            lda $02,x
000C39r 2  81 04            sta ($04,x)
000C3Br 2                   ; TODO high byte
000C3Br 2               
000C3Br 2               ; snake.fth:156:49 in `turn-down`
000C3Br 2               @OPCODE_8:   ; [c64_ir] JumpTarget(2)
000C3Br 2               
000C3Br 2               @target_3:
000C3Br 2               
000C3Br 2               ; snake.fth:156:54 in `turn-down`
000C3Br 2               @OPCODE_10:   ; [c64_ir] Exit
000C3Br 2  60               rts
000C3Cr 2               .endproc
000C3Cr 2               
000C3Cr 2               
000C3Cr 2               
000C3Cr 2               
000C3Cr 2               
000C3Cr 2               ; function start
000C3Cr 2               
000C3Cr 2               .proc PAX_FN_turn2Dright
000C3Cr 2               @target_0:
000C3Cr 2               
000C3Cr 2               ; snake.fth:157:15 in `turn-right`
000C3Cr 2               @OPCODE_1:   ; [c64_ir] Call("is-vertical")
000C3Cr 2  20 rr rr             jsr PAX_FN_is2Dvertical
000C3Fr 2               
000C3Fr 2               @target_1:
000C3Fr 2               
000C3Fr 2               ; snake.fth:157:27 in `turn-right`
000C3Fr 2               @OPCODE_3:   ; [c64_ir] JumpIf0(3)
000C3Fr 2  CA               dex
000C40r 2  CA               dex
000C41r 2  B5 02            lda $02,x
000C43r 2  15 03            ora $03,x
000C45r 2  D0 03            bne *+5
000C47r 2  4C rr rr         jmp @target_3
000C4Ar 2               
000C4Ar 2               @target_2:
000C4Ar 2               
000C4Ar 2               ; snake.fth:157:30 in `turn-right`
000C4Ar 2               @OPCODE_5:   ; [c64_ir] PushLiteral(39)
000C4Ar 2  E8               inx
000C4Br 2  E8               inx
000C4Cr 2  A9 27            lda #39
000C4Er 2  95 00            sta $00,x
000C50r 2  A9 00            lda #0
000C52r 2  95 01            sta $01,x
000C54r 2               
000C54r 2               ; snake.fth:157:36 in `turn-right`
000C54r 2               @OPCODE_6:   ; [c64_ir] PushLiteral(-26660)
000C54r 2  E8               inx
000C55r 2  E8               inx
000C56r 2  A9 DC            lda #220
000C58r 2  95 00            sta $00,x
000C5Ar 2  A9 97            lda #151
000C5Cr 2  95 01            sta $01,x
000C5Er 2               
000C5Er 2               ; snake.fth:157:46 in `turn-right`
000C5Er 2               @OPCODE_7:   ; [c64_ir] Store
000C5Er 2  CA               dex
000C5Fr 2  CA               dex
000C60r 2  CA               dex
000C61r 2  CA               dex
000C62r 2  B5 02            lda $02,x
000C64r 2  81 04            sta ($04,x)
000C66r 2                   ; TODO high byte
000C66r 2               
000C66r 2               ; snake.fth:157:48 in `turn-right`
000C66r 2               @OPCODE_8:   ; [c64_ir] JumpTarget(2)
000C66r 2               
000C66r 2               @target_3:
000C66r 2               
000C66r 2               ; snake.fth:157:53 in `turn-right`
000C66r 2               @OPCODE_10:   ; [c64_ir] Exit
000C66r 2  60               rts
000C67r 2               .endproc
000C67r 2               
000C67r 2               
000C67r 2               
000C67r 2               
000C67r 2               
000C67r 2               ; function start
000C67r 2               
000C67r 2               .proc PAX_FN_change2Ddirection
000C67r 2               @target_0:
000C67r 2               
000C67r 2               ; snake.fth:160:3 in `change-direction`
000C67r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(37)
000C67r 2  E8               inx
000C68r 2  E8               inx
000C69r 2  A9 25            lda #37
000C6Br 2  95 00            sta $00,x
000C6Dr 2  A9 00            lda #0
000C6Fr 2  95 01            sta $01,x
000C71r 2               
000C71r 2               ; snake.fth:160:8 in `change-direction`
000C71r 2               @OPCODE_2:   ; [c64_ir] Call("over")
000C71r 2  20 rr rr             jsr PAX_FN_over
000C74r 2               
000C74r 2               @target_1:
000C74r 2               
000C74r 2               ; snake.fth:160:13 in `change-direction`
000C74r 2               @OPCODE_4:   ; [c64_ir] Call("=")
000C74r 2  20 rr rr             jsr PAX_FN_3D
000C77r 2               
000C77r 2               @target_2:
000C77r 2               
000C77r 2               ; snake.fth:160:15 in `change-direction`
000C77r 2               @OPCODE_6:   ; [c64_ir] JumpIf0(5)
000C77r 2  CA               dex
000C78r 2  CA               dex
000C79r 2  B5 02            lda $02,x
000C7Br 2  15 03            ora $03,x
000C7Dr 2  D0 03            bne *+5
000C7Fr 2  4C rr rr         jmp @target_5
000C82r 2               
000C82r 2               @target_3:
000C82r 2               
000C82r 2               ; snake.fth:160:18 in `change-direction`
000C82r 2               @OPCODE_8:   ; [c64_ir] Call("turn-left")
000C82r 2  20 rr rr             jsr PAX_FN_turn2Dleft
000C85r 2               
000C85r 2               @target_4:
000C85r 2               
000C85r 2               ; snake.fth:160:28 in `change-direction`
000C85r 2               @OPCODE_10:   ; [c64_ir] JumpElse(23)
000C85r 2  4C rr rr         jmp @target_23
000C88r 2               
000C88r 2               @target_5:
000C88r 2               
000C88r 2               ; snake.fth:161:3 in `change-direction`
000C88r 2               @OPCODE_12:   ; [c64_ir] PushLiteral(38)
000C88r 2  E8               inx
000C89r 2  E8               inx
000C8Ar 2  A9 26            lda #38
000C8Cr 2  95 00            sta $00,x
000C8Er 2  A9 00            lda #0
000C90r 2  95 01            sta $01,x
000C92r 2               
000C92r 2               ; snake.fth:161:6 in `change-direction`
000C92r 2               @OPCODE_13:   ; [c64_ir] Call("over")
000C92r 2  20 rr rr             jsr PAX_FN_over
000C95r 2               
000C95r 2               @target_6:
000C95r 2               
000C95r 2               ; snake.fth:161:11 in `change-direction`
000C95r 2               @OPCODE_15:   ; [c64_ir] Call("=")
000C95r 2  20 rr rr             jsr PAX_FN_3D
000C98r 2               
000C98r 2               @target_7:
000C98r 2               
000C98r 2               ; snake.fth:161:13 in `change-direction`
000C98r 2               @OPCODE_17:   ; [c64_ir] JumpIf0(10)
000C98r 2  CA               dex
000C99r 2  CA               dex
000C9Ar 2  B5 02            lda $02,x
000C9Cr 2  15 03            ora $03,x
000C9Er 2  D0 03            bne *+5
000CA0r 2  4C rr rr         jmp @target_10
000CA3r 2               
000CA3r 2               @target_8:
000CA3r 2               
000CA3r 2               ; snake.fth:161:16 in `change-direction`
000CA3r 2               @OPCODE_19:   ; [c64_ir] Call("turn-up")
000CA3r 2  20 rr rr             jsr PAX_FN_turn2Dup
000CA6r 2               
000CA6r 2               @target_9:
000CA6r 2               
000CA6r 2               ; snake.fth:161:24 in `change-direction`
000CA6r 2               @OPCODE_21:   ; [c64_ir] JumpElse(22)
000CA6r 2  4C rr rr         jmp @target_22
000CA9r 2               
000CA9r 2               @target_10:
000CA9r 2               
000CA9r 2               ; snake.fth:162:3 in `change-direction`
000CA9r 2               @OPCODE_23:   ; [c64_ir] PushLiteral(39)
000CA9r 2  E8               inx
000CAAr 2  E8               inx
000CABr 2  A9 27            lda #39
000CADr 2  95 00            sta $00,x
000CAFr 2  A9 00            lda #0
000CB1r 2  95 01            sta $01,x
000CB3r 2               
000CB3r 2               ; snake.fth:162:9 in `change-direction`
000CB3r 2               @OPCODE_24:   ; [c64_ir] Call("over")
000CB3r 2  20 rr rr             jsr PAX_FN_over
000CB6r 2               
000CB6r 2               @target_11:
000CB6r 2               
000CB6r 2               ; snake.fth:162:14 in `change-direction`
000CB6r 2               @OPCODE_26:   ; [c64_ir] Call("=")
000CB6r 2  20 rr rr             jsr PAX_FN_3D
000CB9r 2               
000CB9r 2               @target_12:
000CB9r 2               
000CB9r 2               ; snake.fth:162:16 in `change-direction`
000CB9r 2               @OPCODE_28:   ; [c64_ir] JumpIf0(15)
000CB9r 2  CA               dex
000CBAr 2  CA               dex
000CBBr 2  B5 02            lda $02,x
000CBDr 2  15 03            ora $03,x
000CBFr 2  D0 03            bne *+5
000CC1r 2  4C rr rr         jmp @target_15
000CC4r 2               
000CC4r 2               @target_13:
000CC4r 2               
000CC4r 2               ; snake.fth:162:19 in `change-direction`
000CC4r 2               @OPCODE_30:   ; [c64_ir] Call("turn-right")
000CC4r 2  20 rr rr             jsr PAX_FN_turn2Dright
000CC7r 2               
000CC7r 2               @target_14:
000CC7r 2               
000CC7r 2               ; snake.fth:162:30 in `change-direction`
000CC7r 2               @OPCODE_32:   ; [c64_ir] JumpElse(21)
000CC7r 2  4C rr rr         jmp @target_21
000CCAr 2               
000CCAr 2               @target_15:
000CCAr 2               
000CCAr 2               ; snake.fth:163:3 in `change-direction`
000CCAr 2               @OPCODE_34:   ; [c64_ir] PushLiteral(40)
000CCAr 2  E8               inx
000CCBr 2  E8               inx
000CCCr 2  A9 28            lda #40
000CCEr 2  95 00            sta $00,x
000CD0r 2  A9 00            lda #0
000CD2r 2  95 01            sta $01,x
000CD4r 2               
000CD4r 2               ; snake.fth:163:8 in `change-direction`
000CD4r 2               @OPCODE_35:   ; [c64_ir] Call("over")
000CD4r 2  20 rr rr             jsr PAX_FN_over
000CD7r 2               
000CD7r 2               @target_16:
000CD7r 2               
000CD7r 2               ; snake.fth:163:13 in `change-direction`
000CD7r 2               @OPCODE_37:   ; [c64_ir] Call("=")
000CD7r 2  20 rr rr             jsr PAX_FN_3D
000CDAr 2               
000CDAr 2               @target_17:
000CDAr 2               
000CDAr 2               ; snake.fth:163:15 in `change-direction`
000CDAr 2               @OPCODE_39:   ; [c64_ir] JumpIf0(20)
000CDAr 2  CA               dex
000CDBr 2  CA               dex
000CDCr 2  B5 02            lda $02,x
000CDEr 2  15 03            ora $03,x
000CE0r 2  D0 03            bne *+5
000CE2r 2  4C rr rr         jmp @target_20
000CE5r 2               
000CE5r 2               @target_18:
000CE5r 2               
000CE5r 2               ; snake.fth:163:18 in `change-direction`
000CE5r 2               @OPCODE_41:   ; [c64_ir] Call("turn-down")
000CE5r 2  20 rr rr             jsr PAX_FN_turn2Ddown
000CE8r 2               
000CE8r 2               @target_19:
000CE8r 2               
000CE8r 2               ; snake.fth:164:3 in `change-direction`
000CE8r 2               @OPCODE_43:   ; [c64_ir] JumpTarget(19)
000CE8r 2               
000CE8r 2               @target_20:
000CE8r 2               
000CE8r 2               ; snake.fth:164:8 in `change-direction`
000CE8r 2               @OPCODE_45:   ; [c64_ir] JumpTarget(20)
000CE8r 2               
000CE8r 2               @target_21:
000CE8r 2               
000CE8r 2               ; snake.fth:164:13 in `change-direction`
000CE8r 2               @OPCODE_47:   ; [c64_ir] JumpTarget(21)
000CE8r 2               
000CE8r 2               @target_22:
000CE8r 2               
000CE8r 2               ; snake.fth:164:18 in `change-direction`
000CE8r 2               @OPCODE_49:   ; [c64_ir] JumpTarget(22)
000CE8r 2               
000CE8r 2               @target_23:
000CE8r 2               
000CE8r 2               ; snake.fth:164:23 in `change-direction`
000CE8r 2               @OPCODE_51:   ; [c64_ir] Drop
000CE8r 2  CA               dex
000CE9r 2  CA               dex
000CEAr 2               
000CEAr 2               ; snake.fth:164:28 in `change-direction`
000CEAr 2               @OPCODE_52:   ; [c64_ir] Exit
000CEAr 2  60               rts
000CEBr 2               .endproc
000CEBr 2               
000CEBr 2               
000CEBr 2               
000CEBr 2               
000CEBr 2               
000CEBr 2               ; function start
000CEBr 2               
000CEBr 2               .proc PAX_FN_check2Dinput
000CEBr 2               @target_0:
000CEBr 2               
000CEBr 2               ; snake.fth:167:3 in `check-input`
000CEBr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(126)
000CEBr 2  E8               inx
000CECr 2  E8               inx
000CEDr 2  A9 7E            lda #126
000CEFr 2  95 00            sta $00,x
000CF1r 2  A9 00            lda #0
000CF3r 2  95 01            sta $01,x
000CF5r 2               
000CF5r 2               ; snake.fth:167:12 in `check-input`
000CF5r 2               @OPCODE_2:   ; [c64_ir] Load
000CF5r 2  A1 00            lda ($00,x)
000CF7r 2  95 00            sta $00,x
000CF9r 2  A9 00            lda #0
000CFBr 2  95 01            sta $01,x
000CFDr 2               
000CFDr 2               ; snake.fth:167:14 in `check-input`
000CFDr 2               @OPCODE_3:   ; [c64_ir] Call("change-direction")
000CFDr 2  20 rr rr             jsr PAX_FN_change2Ddirection
000D00r 2               
000D00r 2               @target_1:
000D00r 2               
000D00r 2               ; snake.fth:168:3 in `check-input`
000D00r 2               @OPCODE_5:   ; [c64_ir] PushLiteral(0)
000D00r 2  E8               inx
000D01r 2  E8               inx
000D02r 2  A9 00            lda #0
000D04r 2  95 00            sta $00,x
000D06r 2  A9 00            lda #0
000D08r 2  95 01            sta $01,x
000D0Ar 2               
000D0Ar 2               ; snake.fth:168:5 in `check-input`
000D0Ar 2               @OPCODE_6:   ; [c64_ir] PushLiteral(126)
000D0Ar 2  E8               inx
000D0Br 2  E8               inx
000D0Cr 2  A9 7E            lda #126
000D0Er 2  95 00            sta $00,x
000D10r 2  A9 00            lda #0
000D12r 2  95 01            sta $01,x
000D14r 2               
000D14r 2               ; snake.fth:168:14 in `check-input`
000D14r 2               @OPCODE_7:   ; [c64_ir] Store
000D14r 2  CA               dex
000D15r 2  CA               dex
000D16r 2  CA               dex
000D17r 2  CA               dex
000D18r 2  B5 02            lda $02,x
000D1Ar 2  81 04            sta ($04,x)
000D1Cr 2                   ; TODO high byte
000D1Cr 2               
000D1Cr 2               ; snake.fth:168:16 in `check-input`
000D1Cr 2               @OPCODE_8:   ; [c64_ir] Exit
000D1Cr 2  60               rts
000D1Dr 2               .endproc
000D1Dr 2               
000D1Dr 2               
000D1Dr 2               
000D1Dr 2               
000D1Dr 2               
000D1Dr 2               ; function start
000D1Dr 2               
000D1Dr 2               .proc PAX_FN_random2Dx2Dposition
000D1Dr 2               @target_0:
000D1Dr 2               
000D1Dr 2               ; snake.fth:172:3 in `random-x-position`
000D1Dr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(40)
000D1Dr 2  E8               inx
000D1Er 2  E8               inx
000D1Fr 2  A9 28            lda #40
000D21r 2  95 00            sta $00,x
000D23r 2  A9 00            lda #0
000D25r 2  95 01            sta $01,x
000D27r 2               
000D27r 2               ; snake.fth:172:9 in `random-x-position`
000D27r 2               @OPCODE_2:   ; [c64_ir] PushLiteral(4)
000D27r 2  E8               inx
000D28r 2  E8               inx
000D29r 2  A9 04            lda #4
000D2Br 2  95 00            sta $00,x
000D2Dr 2  A9 00            lda #0
000D2Fr 2  95 01            sta $01,x
000D31r 2               
000D31r 2               ; snake.fth:172:11 in `random-x-position`
000D31r 2               @OPCODE_3:   ; [c64_ir] Call("-")
000D31r 2                   ; http://www.obelisk.me.uk/6502/algorithms.html
000D31r 2  CA               dex
000D32r 2  CA               dex
000D33r 2  38               sec
000D34r 2  B5 00            lda $00,x
000D36r 2  F5 02            sbc $02,x
000D38r 2  95 00            sta $00,x
000D3Ar 2  B5 01            lda $01,x
000D3Cr 2  F5 03            sbc $03,x
000D3Er 2  95 01            sta $01,x
000D40r 2               
000D40r 2               @target_1:
000D40r 2               
000D40r 2               ; snake.fth:172:13 in `random-x-position`
000D40r 2               @OPCODE_5:   ; [c64_ir] Call("random")
000D40r 2  20 rr rr             jsr PAX_FN_random
000D43r 2               
000D43r 2               @target_2:
000D43r 2               
000D43r 2               ; snake.fth:172:20 in `random-x-position`
000D43r 2               @OPCODE_7:   ; [c64_ir] PushLiteral(2)
000D43r 2  E8               inx
000D44r 2  E8               inx
000D45r 2  A9 02            lda #2
000D47r 2  95 00            sta $00,x
000D49r 2  A9 00            lda #0
000D4Br 2  95 01            sta $01,x
000D4Dr 2               
000D4Dr 2               ; snake.fth:172:22 in `random-x-position`
000D4Dr 2               @OPCODE_8:   ; [c64_ir] Add
000D4Dr 2                   ; 21
000D4Dr 2  CA               dex
000D4Er 2  CA               dex
000D4Fr 2  18               clc
000D50r 2  B5 00            lda $00,x
000D52r 2  75 02            adc $02,x
000D54r 2  95 00            sta $00,x
000D56r 2  B5 01            lda $01,x
000D58r 2  75 03            adc $03,x
000D5Ar 2  95 01            sta $01,x
000D5Cr 2               
000D5Cr 2               ; snake.fth:172:24 in `random-x-position`
000D5Cr 2               @OPCODE_9:   ; [c64_ir] Exit
000D5Cr 2  60               rts
000D5Dr 2               .endproc
000D5Dr 2               
000D5Dr 2               
000D5Dr 2               
000D5Dr 2               
000D5Dr 2               
000D5Dr 2               ; function start
000D5Dr 2               
000D5Dr 2               .proc PAX_FN_random2Dy2Dposition
000D5Dr 2               @target_0:
000D5Dr 2               
000D5Dr 2               ; snake.fth:174:3 in `random-y-position`
000D5Dr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(25)
000D5Dr 2  E8               inx
000D5Er 2  E8               inx
000D5Fr 2  A9 19            lda #25
000D61r 2  95 00            sta $00,x
000D63r 2  A9 00            lda #0
000D65r 2  95 01            sta $01,x
000D67r 2               
000D67r 2               ; snake.fth:174:10 in `random-y-position`
000D67r 2               @OPCODE_2:   ; [c64_ir] PushLiteral(4)
000D67r 2  E8               inx
000D68r 2  E8               inx
000D69r 2  A9 04            lda #4
000D6Br 2  95 00            sta $00,x
000D6Dr 2  A9 00            lda #0
000D6Fr 2  95 01            sta $01,x
000D71r 2               
000D71r 2               ; snake.fth:174:12 in `random-y-position`
000D71r 2               @OPCODE_3:   ; [c64_ir] Call("-")
000D71r 2                   ; http://www.obelisk.me.uk/6502/algorithms.html
000D71r 2  CA               dex
000D72r 2  CA               dex
000D73r 2  38               sec
000D74r 2  B5 00            lda $00,x
000D76r 2  F5 02            sbc $02,x
000D78r 2  95 00            sta $00,x
000D7Ar 2  B5 01            lda $01,x
000D7Cr 2  F5 03            sbc $03,x
000D7Er 2  95 01            sta $01,x
000D80r 2               
000D80r 2               @target_1:
000D80r 2               
000D80r 2               ; snake.fth:174:14 in `random-y-position`
000D80r 2               @OPCODE_5:   ; [c64_ir] Call("random")
000D80r 2  20 rr rr             jsr PAX_FN_random
000D83r 2               
000D83r 2               @target_2:
000D83r 2               
000D83r 2               ; snake.fth:174:21 in `random-y-position`
000D83r 2               @OPCODE_7:   ; [c64_ir] PushLiteral(2)
000D83r 2  E8               inx
000D84r 2  E8               inx
000D85r 2  A9 02            lda #2
000D87r 2  95 00            sta $00,x
000D89r 2  A9 00            lda #0
000D8Br 2  95 01            sta $01,x
000D8Dr 2               
000D8Dr 2               ; snake.fth:174:23 in `random-y-position`
000D8Dr 2               @OPCODE_8:   ; [c64_ir] Add
000D8Dr 2                   ; 21
000D8Dr 2  CA               dex
000D8Er 2  CA               dex
000D8Fr 2  18               clc
000D90r 2  B5 00            lda $00,x
000D92r 2  75 02            adc $02,x
000D94r 2  95 00            sta $00,x
000D96r 2  B5 01            lda $01,x
000D98r 2  75 03            adc $03,x
000D9Ar 2  95 01            sta $01,x
000D9Cr 2               
000D9Cr 2               ; snake.fth:174:25 in `random-y-position`
000D9Cr 2               @OPCODE_9:   ; [c64_ir] Exit
000D9Cr 2  60               rts
000D9Dr 2               .endproc
000D9Dr 2               
000D9Dr 2               
000D9Dr 2               
000D9Dr 2               
000D9Dr 2               
000D9Dr 2               ; function start
000D9Dr 2               
000D9Dr 2               .proc PAX_FN_move2Dapple
000D9Dr 2               @target_0:
000D9Dr 2               
000D9Dr 2               ; snake.fth:177:3 in `move-apple`
000D9Dr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-26664)
000D9Dr 2  E8               inx
000D9Er 2  E8               inx
000D9Fr 2  A9 D8            lda #216
000DA1r 2  95 00            sta $00,x
000DA3r 2  A9 97            lda #151
000DA5r 2  95 01            sta $01,x
000DA7r 2               
000DA7r 2               ; snake.fth:177:11 in `move-apple`
000DA7r 2               @OPCODE_2:   ; [c64_ir] Load
000DA7r 2  A1 00            lda ($00,x)
000DA9r 2  95 00            sta $00,x
000DABr 2  A9 00            lda #0
000DADr 2  95 01            sta $01,x
000DAFr 2               
000DAFr 2               ; snake.fth:177:13 in `move-apple`
000DAFr 2               @OPCODE_3:   ; [c64_ir] PushLiteral(-26662)
000DAFr 2  E8               inx
000DB0r 2  E8               inx
000DB1r 2  A9 DA            lda #218
000DB3r 2  95 00            sta $00,x
000DB5r 2  A9 97            lda #151
000DB7r 2  95 01            sta $01,x
000DB9r 2               
000DB9r 2               ; snake.fth:177:21 in `move-apple`
000DB9r 2               @OPCODE_4:   ; [c64_ir] Load
000DB9r 2  A1 00            lda ($00,x)
000DBBr 2  95 00            sta $00,x
000DBDr 2  A9 00            lda #0
000DBFr 2  95 01            sta $01,x
000DC1r 2               
000DC1r 2               ; snake.fth:177:23 in `move-apple`
000DC1r 2               @OPCODE_5:   ; [c64_ir] Call("draw-white")
000DC1r 2  20 rr rr             jsr PAX_FN_draw2Dwhite
000DC4r 2               
000DC4r 2               @target_1:
000DC4r 2               
000DC4r 2               ; snake.fth:178:3 in `move-apple`
000DC4r 2               @OPCODE_7:   ; [c64_ir] Call("random-x-position")
000DC4r 2  20 rr rr             jsr PAX_FN_random2Dx2Dposition
000DC7r 2               
000DC7r 2               @target_2:
000DC7r 2               
000DC7r 2               ; snake.fth:178:21 in `move-apple`
000DC7r 2               @OPCODE_9:   ; [c64_ir] Call("random-y-position")
000DC7r 2  20 rr rr             jsr PAX_FN_random2Dy2Dposition
000DCAr 2               
000DCAr 2               @target_3:
000DCAr 2               
000DCAr 2               ; snake.fth:179:3 in `move-apple`
000DCAr 2               @OPCODE_11:   ; [c64_ir] Call("set-apple-position")
000DCAr 2  20 rr rr             jsr PAX_FN_set2Dapple2Dposition
000DCDr 2               
000DCDr 2               @target_4:
000DCDr 2               
000DCDr 2               ; snake.fth:179:22 in `move-apple`
000DCDr 2               @OPCODE_13:   ; [c64_ir] Exit
000DCDr 2  60               rts
000DCEr 2               .endproc
000DCEr 2               
000DCEr 2               
000DCEr 2               
000DCEr 2               
000DCEr 2               
000DCEr 2               ; function start
000DCEr 2               
000DCEr 2               .proc PAX_FN_grow2Dsnake
000DCEr 2               @target_0:
000DCEr 2               
000DCEr 2               ; snake.fth:181:15 in `grow-snake`
000DCEr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(1)
000DCEr 2  E8               inx
000DCFr 2  E8               inx
000DD0r 2  A9 01            lda #1
000DD2r 2  95 00            sta $00,x
000DD4r 2  A9 00            lda #0
000DD6r 2  95 01            sta $01,x
000DD8r 2               
000DD8r 2               ; snake.fth:181:17 in `grow-snake`
000DD8r 2               @OPCODE_2:   ; [c64_ir] PushLiteral(-26658)
000DD8r 2  E8               inx
000DD9r 2  E8               inx
000DDAr 2  A9 DE            lda #222
000DDCr 2  95 00            sta $00,x
000DDEr 2  A9 97            lda #151
000DE0r 2  95 01            sta $01,x
000DE2r 2               
000DE2r 2               ; snake.fth:181:24 in `grow-snake`
000DE2r 2               @OPCODE_3:   ; [c64_ir] Call("+!")
000DE2r 2  20 rr rr             jsr PAX_FN_2B21
000DE5r 2               
000DE5r 2               @target_1:
000DE5r 2               
000DE5r 2               ; snake.fth:181:27 in `grow-snake`
000DE5r 2               @OPCODE_5:   ; [c64_ir] Exit
000DE5r 2  60               rts
000DE6r 2               .endproc
000DE6r 2               
000DE6r 2               
000DE6r 2               
000DE6r 2               
000DE6r 2               
000DE6r 2               ; function start
000DE6r 2               
000DE6r 2               .proc PAX_FN_check2Dapple
000DE6r 2               @target_0:
000DE6r 2               
000DE6r 2               ; snake.fth:184:3 in `check-apple`
000DE6r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-28668)
000DE6r 2  E8               inx
000DE7r 2  E8               inx
000DE8r 2  A9 04            lda #4
000DEAr 2  95 00            sta $00,x
000DECr 2  A9 90            lda #144
000DEEr 2  95 01            sta $01,x
000DF0r 2               
000DF0r 2               ; snake.fth:184:16 in `check-apple`
000DF0r 2               @OPCODE_2:   ; [c64_ir] Load
000DF0r 2  A1 00            lda ($00,x)
000DF2r 2  95 00            sta $00,x
000DF4r 2  A9 00            lda #0
000DF6r 2  95 01            sta $01,x
000DF8r 2               
000DF8r 2               ; snake.fth:184:18 in `check-apple`
000DF8r 2               @OPCODE_3:   ; [c64_ir] PushLiteral(-26664)
000DF8r 2  E8               inx
000DF9r 2  E8               inx
000DFAr 2  A9 D8            lda #216
000DFCr 2  95 00            sta $00,x
000DFEr 2  A9 97            lda #151
000E00r 2  95 01            sta $01,x
000E02r 2               
000E02r 2               ; snake.fth:184:26 in `check-apple`
000E02r 2               @OPCODE_4:   ; [c64_ir] Load
000E02r 2  A1 00            lda ($00,x)
000E04r 2  95 00            sta $00,x
000E06r 2  A9 00            lda #0
000E08r 2  95 01            sta $01,x
000E0Ar 2               
000E0Ar 2               ; snake.fth:184:28 in `check-apple`
000E0Ar 2               @OPCODE_5:   ; [c64_ir] Call("=")
000E0Ar 2  20 rr rr             jsr PAX_FN_3D
000E0Dr 2               
000E0Dr 2               @target_1:
000E0Dr 2               
000E0Dr 2               ; snake.fth:185:3 in `check-apple`
000E0Dr 2               @OPCODE_7:   ; [c64_ir] PushLiteral(-27666)
000E0Dr 2  E8               inx
000E0Er 2  E8               inx
000E0Fr 2  A9 EE            lda #238
000E11r 2  95 00            sta $00,x
000E13r 2  A9 93            lda #147
000E15r 2  95 01            sta $01,x
000E17r 2               
000E17r 2               ; snake.fth:185:16 in `check-apple`
000E17r 2               @OPCODE_8:   ; [c64_ir] Load
000E17r 2  A1 00            lda ($00,x)
000E19r 2  95 00            sta $00,x
000E1Br 2  A9 00            lda #0
000E1Dr 2  95 01            sta $01,x
000E1Fr 2               
000E1Fr 2               ; snake.fth:185:18 in `check-apple`
000E1Fr 2               @OPCODE_9:   ; [c64_ir] PushLiteral(-26662)
000E1Fr 2  E8               inx
000E20r 2  E8               inx
000E21r 2  A9 DA            lda #218
000E23r 2  95 00            sta $00,x
000E25r 2  A9 97            lda #151
000E27r 2  95 01            sta $01,x
000E29r 2               
000E29r 2               ; snake.fth:185:26 in `check-apple`
000E29r 2               @OPCODE_10:   ; [c64_ir] Load
000E29r 2  A1 00            lda ($00,x)
000E2Br 2  95 00            sta $00,x
000E2Dr 2  A9 00            lda #0
000E2Fr 2  95 01            sta $01,x
000E31r 2               
000E31r 2               ; snake.fth:185:28 in `check-apple`
000E31r 2               @OPCODE_11:   ; [c64_ir] Call("=")
000E31r 2  20 rr rr             jsr PAX_FN_3D
000E34r 2               
000E34r 2               @target_2:
000E34r 2               
000E34r 2               ; snake.fth:186:3 in `check-apple`
000E34r 2               @OPCODE_13:   ; [c64_ir] Call("and")
000E34r 2  20 rr rr             jsr PAX_FN_and
000E37r 2               
000E37r 2               @target_3:
000E37r 2               
000E37r 2               ; snake.fth:186:7 in `check-apple`
000E37r 2               @OPCODE_15:   ; [c64_ir] JumpIf0(7)
000E37r 2  CA               dex
000E38r 2  CA               dex
000E39r 2  B5 02            lda $02,x
000E3Br 2  15 03            ora $03,x
000E3Dr 2  D0 03            bne *+5
000E3Fr 2  4C rr rr         jmp @target_7
000E42r 2               
000E42r 2               @target_4:
000E42r 2               
000E42r 2               ; snake.fth:187:5 in `check-apple`
000E42r 2               @OPCODE_17:   ; [c64_ir] Call("move-apple")
000E42r 2  20 rr rr             jsr PAX_FN_move2Dapple
000E45r 2               
000E45r 2               @target_5:
000E45r 2               
000E45r 2               ; snake.fth:188:5 in `check-apple`
000E45r 2               @OPCODE_19:   ; [c64_ir] Call("grow-snake")
000E45r 2  20 rr rr             jsr PAX_FN_grow2Dsnake
000E48r 2               
000E48r 2               @target_6:
000E48r 2               
000E48r 2               ; snake.fth:189:3 in `check-apple`
000E48r 2               @OPCODE_21:   ; [c64_ir] JumpTarget(6)
000E48r 2               
000E48r 2               @target_7:
000E48r 2               
000E48r 2               ; snake.fth:189:8 in `check-apple`
000E48r 2               @OPCODE_23:   ; [c64_ir] Exit
000E48r 2  60               rts
000E49r 2               .endproc
000E49r 2               
000E49r 2               
000E49r 2               
000E49r 2               
000E49r 2               
000E49r 2               ; function start
000E49r 2               
000E49r 2               .proc PAX_FN_check2Dcollision
000E49r 2               @target_0:
000E49r 2               
000E49r 2               ; snake.fth:193:3 in `check-collision`
000E49r 2               @OPCODE_1:   ; [c64_ir] PushLiteral(-28668)
000E49r 2  E8               inx
000E4Ar 2  E8               inx
000E4Br 2  A9 04            lda #4
000E4Dr 2  95 00            sta $00,x
000E4Fr 2  A9 90            lda #144
000E51r 2  95 01            sta $01,x
000E53r 2               
000E53r 2               ; snake.fth:193:16 in `check-collision`
000E53r 2               @OPCODE_2:   ; [c64_ir] Load
000E53r 2  A1 00            lda ($00,x)
000E55r 2  95 00            sta $00,x
000E57r 2  A9 00            lda #0
000E59r 2  95 01            sta $01,x
000E5Br 2               
000E5Br 2               ; snake.fth:193:18 in `check-collision`
000E5Br 2               @OPCODE_3:   ; [c64_ir] PushLiteral(-27666)
000E5Br 2  E8               inx
000E5Cr 2  E8               inx
000E5Dr 2  A9 EE            lda #238
000E5Fr 2  95 00            sta $00,x
000E61r 2  A9 93            lda #147
000E63r 2  95 01            sta $01,x
000E65r 2               
000E65r 2               ; snake.fth:193:31 in `check-collision`
000E65r 2               @OPCODE_4:   ; [c64_ir] Load
000E65r 2  A1 00            lda ($00,x)
000E67r 2  95 00            sta $00,x
000E69r 2  A9 00            lda #0
000E6Br 2  95 01            sta $01,x
000E6Dr 2               
000E6Dr 2               ; snake.fth:196:3 in `check-collision`
000E6Dr 2               @OPCODE_5:   ; [c64_ir] Call("convert-x-y")
000E6Dr 2  20 rr rr             jsr PAX_FN_convert2Dx2Dy
000E70r 2               
000E70r 2               @target_1:
000E70r 2               
000E70r 2               ; snake.fth:196:15 in `check-collision`
000E70r 2               @OPCODE_7:   ; [c64_ir] PushLiteral(1024)
000E70r 2  E8               inx
000E71r 2  E8               inx
000E72r 2  A9 00            lda #0
000E74r 2  95 00            sta $00,x
000E76r 2  A9 04            lda #4
000E78r 2  95 01            sta $01,x
000E7Ar 2               
000E7Ar 2               ; snake.fth:196:24 in `check-collision`
000E7Ar 2               @OPCODE_8:   ; [c64_ir] Add
000E7Ar 2                   ; 21
000E7Ar 2  CA               dex
000E7Br 2  CA               dex
000E7Cr 2  18               clc
000E7Dr 2  B5 00            lda $00,x
000E7Fr 2  75 02            adc $02,x
000E81r 2  95 00            sta $00,x
000E83r 2  B5 01            lda $01,x
000E85r 2  75 03            adc $03,x
000E87r 2  95 01            sta $01,x
000E89r 2               
000E89r 2               ; snake.fth:196:26 in `check-collision`
000E89r 2               @OPCODE_9:   ; [c64_ir] Load8
000E89r 2  A1 00            lda ($00,x)
000E8Br 2  95 00            sta $00,x
000E8Dr 2  A9 00            lda #0
000E8Fr 2  95 01            sta $01,x
000E91r 2               
000E91r 2               ; snake.fth:199:3 in `check-collision`
000E91r 2               @OPCODE_10:   ; [c64_ir] PushLiteral(32)
000E91r 2  E8               inx
000E92r 2  E8               inx
000E93r 2  A9 20            lda #32
000E95r 2  95 00            sta $00,x
000E97r 2  A9 00            lda #0
000E99r 2  95 01            sta $01,x
000E9Br 2               
000E9Br 2               ; snake.fth:199:15 in `check-collision`
000E9Br 2               @OPCODE_11:   ; [c64_ir] Call("=")
000E9Br 2  20 rr rr             jsr PAX_FN_3D
000E9Er 2               
000E9Er 2               @target_2:
000E9Er 2               
000E9Er 2               ; snake.fth:199:17 in `check-collision`
000E9Er 2               @OPCODE_13:   ; [c64_ir] Exit
000E9Er 2  60               rts
000E9Fr 2               .endproc
000E9Fr 2               
000E9Fr 2               
000E9Fr 2               
000E9Fr 2               
000E9Fr 2               
000E9Fr 2               ; function start
000E9Fr 2               
000E9Fr 2               .proc PAX_FN_draw2Dsnake2Dhead2Dtail
000E9Fr 2               @target_0:
000E9Fr 2               
000E9Fr 2               ; snake.fth:202:3 in `draw-snake-head-tail`
000E9Fr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(0)
000E9Fr 2  E8               inx
000EA0r 2  E8               inx
000EA1r 2  A9 00            lda #0
000EA3r 2  95 00            sta $00,x
000EA5r 2  A9 00            lda #0
000EA7r 2  95 01            sta $01,x
000EA9r 2               
000EA9r 2               ; snake.fth:202:5 in `draw-snake-head-tail`
000EA9r 2               @OPCODE_2:   ; [c64_ir] Call("snake-x")
000EA9r 2  20 rr rr             jsr PAX_FN_snake2Dx
000EACr 2               
000EACr 2               @target_1:
000EACr 2               
000EACr 2               ; snake.fth:202:13 in `draw-snake-head-tail`
000EACr 2               @OPCODE_4:   ; [c64_ir] Load
000EACr 2  A1 00            lda ($00,x)
000EAEr 2  95 00            sta $00,x
000EB0r 2  A9 00            lda #0
000EB2r 2  95 01            sta $01,x
000EB4r 2               
000EB4r 2               ; snake.fth:202:15 in `draw-snake-head-tail`
000EB4r 2               @OPCODE_5:   ; [c64_ir] PushLiteral(0)
000EB4r 2  E8               inx
000EB5r 2  E8               inx
000EB6r 2  A9 00            lda #0
000EB8r 2  95 00            sta $00,x
000EBAr 2  A9 00            lda #0
000EBCr 2  95 01            sta $01,x
000EBEr 2               
000EBEr 2               ; snake.fth:202:17 in `draw-snake-head-tail`
000EBEr 2               @OPCODE_6:   ; [c64_ir] Call("snake-y")
000EBEr 2  20 rr rr             jsr PAX_FN_snake2Dy
000EC1r 2               
000EC1r 2               @target_2:
000EC1r 2               
000EC1r 2               ; snake.fth:202:25 in `draw-snake-head-tail`
000EC1r 2               @OPCODE_8:   ; [c64_ir] Load
000EC1r 2  A1 00            lda ($00,x)
000EC3r 2  95 00            sta $00,x
000EC5r 2  A9 00            lda #0
000EC7r 2  95 01            sta $01,x
000EC9r 2               
000EC9r 2               ; snake.fth:202:27 in `draw-snake-head-tail`
000EC9r 2               @OPCODE_9:   ; [c64_ir] Call("draw-snake-tile")
000EC9r 2  20 rr rr             jsr PAX_FN_draw2Dsnake2Dtile
000ECCr 2               
000ECCr 2               @target_3:
000ECCr 2               
000ECCr 2               ; snake.fth:203:3 in `draw-snake-head-tail`
000ECCr 2               @OPCODE_11:   ; [c64_ir] PushLiteral(-26658)
000ECCr 2  E8               inx
000ECDr 2  E8               inx
000ECEr 2  A9 DE            lda #222
000ED0r 2  95 00            sta $00,x
000ED2r 2  A9 97            lda #151
000ED4r 2  95 01            sta $01,x
000ED6r 2               
000ED6r 2               ; snake.fth:203:10 in `draw-snake-head-tail`
000ED6r 2               @OPCODE_12:   ; [c64_ir] Load
000ED6r 2  A1 00            lda ($00,x)
000ED8r 2  95 00            sta $00,x
000EDAr 2  A9 00            lda #0
000EDCr 2  95 01            sta $01,x
000EDEr 2               
000EDEr 2               ; snake.fth:203:12 in `draw-snake-head-tail`
000EDEr 2               @OPCODE_13:   ; [c64_ir] Call("snake-x")
000EDEr 2  20 rr rr             jsr PAX_FN_snake2Dx
000EE1r 2               
000EE1r 2               @target_4:
000EE1r 2               
000EE1r 2               ; snake.fth:203:20 in `draw-snake-head-tail`
000EE1r 2               @OPCODE_15:   ; [c64_ir] Load
000EE1r 2  A1 00            lda ($00,x)
000EE3r 2  95 00            sta $00,x
000EE5r 2  A9 00            lda #0
000EE7r 2  95 01            sta $01,x
000EE9r 2               
000EE9r 2               ; snake.fth:204:3 in `draw-snake-head-tail`
000EE9r 2               @OPCODE_16:   ; [c64_ir] PushLiteral(-26658)
000EE9r 2  E8               inx
000EEAr 2  E8               inx
000EEBr 2  A9 DE            lda #222
000EEDr 2  95 00            sta $00,x
000EEFr 2  A9 97            lda #151
000EF1r 2  95 01            sta $01,x
000EF3r 2               
000EF3r 2               ; snake.fth:204:10 in `draw-snake-head-tail`
000EF3r 2               @OPCODE_17:   ; [c64_ir] Load
000EF3r 2  A1 00            lda ($00,x)
000EF5r 2  95 00            sta $00,x
000EF7r 2  A9 00            lda #0
000EF9r 2  95 01            sta $01,x
000EFBr 2               
000EFBr 2               ; snake.fth:204:12 in `draw-snake-head-tail`
000EFBr 2               @OPCODE_18:   ; [c64_ir] Call("snake-y")
000EFBr 2  20 rr rr             jsr PAX_FN_snake2Dy
000EFEr 2               
000EFEr 2               @target_5:
000EFEr 2               
000EFEr 2               ; snake.fth:204:20 in `draw-snake-head-tail`
000EFEr 2               @OPCODE_20:   ; [c64_ir] Load
000EFEr 2  A1 00            lda ($00,x)
000F00r 2  95 00            sta $00,x
000F02r 2  A9 00            lda #0
000F04r 2  95 01            sta $01,x
000F06r 2               
000F06r 2               ; snake.fth:205:3 in `draw-snake-head-tail`
000F06r 2               @OPCODE_21:   ; [c64_ir] Call("draw-white")
000F06r 2  20 rr rr             jsr PAX_FN_draw2Dwhite
000F09r 2               
000F09r 2               @target_6:
000F09r 2               
000F09r 2               ; snake.fth:205:14 in `draw-snake-head-tail`
000F09r 2               @OPCODE_23:   ; [c64_ir] Exit
000F09r 2  60               rts
000F0Ar 2               .endproc
000F0Ar 2               
000F0Ar 2               
000F0Ar 2               
000F0Ar 2               
000F0Ar 2               
000F0Ar 2               ; function start
000F0Ar 2               
000F0Ar 2               .proc PAX_FN_main
000F0Ar 2               @target_0:
000F0Ar 2               
000F0Ar 2               ; snake.fth:23:1 in `main`
000F0Ar 2               @OPCODE_1:   ; [c64_ir] PushLiteral(500)
000F0Ar 2  E8               inx
000F0Br 2  E8               inx
000F0Cr 2  A9 F4            lda #244
000F0Er 2  95 00            sta $00,x
000F10r 2  A9 01            lda #1
000F12r 2  95 01            sta $01,x
000F14r 2               
000F14r 2               ; snake.fth:23:5 in `main`
000F14r 2               @OPCODE_2:   ; [c64_ir] Call("cells")
000F14r 2  20 rr rr             jsr PAX_FN_cells
000F17r 2               
000F17r 2               @target_1:
000F17r 2               
000F17r 2               ; snake.fth:23:11 in `main`
000F17r 2               @OPCODE_4:   ; [c64_ir] Drop
000F17r 2  CA               dex
000F18r 2  CA               dex
000F19r 2               
000F19r 2               ; snake.fth:26:1 in `main`
000F19r 2               @OPCODE_5:   ; [c64_ir] PushLiteral(500)
000F19r 2  E8               inx
000F1Ar 2  E8               inx
000F1Br 2  A9 F4            lda #244
000F1Dr 2  95 00            sta $00,x
000F1Fr 2  A9 01            lda #1
000F21r 2  95 01            sta $01,x
000F23r 2               
000F23r 2               ; snake.fth:26:5 in `main`
000F23r 2               @OPCODE_6:   ; [c64_ir] Call("cells")
000F23r 2  20 rr rr             jsr PAX_FN_cells
000F26r 2               
000F26r 2               @target_2:
000F26r 2               
000F26r 2               ; snake.fth:26:11 in `main`
000F26r 2               @OPCODE_8:   ; [c64_ir] Drop
000F26r 2  CA               dex
000F27r 2  CA               dex
000F28r 2               
000F28r 2               ; snake.fth:212:1 in `main`
000F28r 2               @OPCODE_9:   ; [c64_ir] PushLiteral(-28672)
000F28r 2  E8               inx
000F29r 2  E8               inx
000F2Ar 2  A9 00            lda #0
000F2Cr 2  95 00            sta $00,x
000F2Er 2  A9 90            lda #144
000F30r 2  95 01            sta $01,x
000F32r 2               
000F32r 2               ; snake.fth:212:13 in `main`
000F32r 2               @OPCODE_10:   ; [c64_ir] Load
000F32r 2  A1 00            lda ($00,x)
000F34r 2  95 00            sta $00,x
000F36r 2  A9 00            lda #0
000F38r 2  95 01            sta $01,x
000F3Ar 2               
000F3Ar 2               ; snake.fth:212:15 in `main`
000F3Ar 2               @OPCODE_11:   ; [c64_ir] Call("0=")
000F3Ar 2  20 rr rr             jsr PAX_FN_03D
000F3Dr 2               
000F3Dr 2               @target_3:
000F3Dr 2               
000F3Dr 2               ; snake.fth:212:18 in `main`
000F3Dr 2               @OPCODE_13:   ; [c64_ir] JumpIf0(6)
000F3Dr 2  CA               dex
000F3Er 2  CA               dex
000F3Fr 2  B5 02            lda $02,x
000F41r 2  15 03            ora $03,x
000F43r 2  D0 03            bne *+5
000F45r 2  4C rr rr         jmp @target_6
000F48r 2               
000F48r 2               @target_4:
000F48r 2               
000F48r 2               ; snake.fth:212:21 in `main`
000F48r 2               @OPCODE_15:   ; [c64_ir] Call("initialize")
000F48r 2  20 rr rr             jsr PAX_FN_initialize
000F4Br 2               
000F4Br 2               @target_5:
000F4Br 2               
000F4Br 2               ; snake.fth:212:32 in `main`
000F4Br 2               @OPCODE_17:   ; [c64_ir] JumpTarget(5)
000F4Br 2               
000F4Br 2               @target_6:
000F4Br 2               
000F4Br 2               ; snake.fth:213:1 in `main`
000F4Br 2               @OPCODE_19:   ; [c64_ir] PushLiteral(1)
000F4Br 2  E8               inx
000F4Cr 2  E8               inx
000F4Dr 2  A9 01            lda #1
000F4Fr 2  95 00            sta $00,x
000F51r 2  A9 00            lda #0
000F53r 2  95 01            sta $01,x
000F55r 2               
000F55r 2               ; snake.fth:213:3 in `main`
000F55r 2               @OPCODE_20:   ; [c64_ir] PushLiteral(-28672)
000F55r 2  E8               inx
000F56r 2  E8               inx
000F57r 2  A9 00            lda #0
000F59r 2  95 00            sta $00,x
000F5Br 2  A9 90            lda #144
000F5Dr 2  95 01            sta $01,x
000F5Fr 2               
000F5Fr 2               ; snake.fth:213:15 in `main`
000F5Fr 2               @OPCODE_21:   ; [c64_ir] Store
000F5Fr 2  CA               dex
000F60r 2  CA               dex
000F61r 2  CA               dex
000F62r 2  CA               dex
000F63r 2  B5 02            lda $02,x
000F65r 2  81 04            sta ($04,x)
000F67r 2                   ; TODO high byte
000F67r 2               
000F67r 2               ; snake.fth:216:1 in `main`
000F67r 2               @OPCODE_22:   ; [c64_ir] Call("draw-snake-head-tail")
000F67r 2  20 rr rr             jsr PAX_FN_draw2Dsnake2Dhead2Dtail
000F6Ar 2               
000F6Ar 2               @target_7:
000F6Ar 2               
000F6Ar 2               ; snake.fth:217:1 in `main`
000F6Ar 2               @OPCODE_24:   ; [c64_ir] Call("draw-apple")
000F6Ar 2  20 rr rr             jsr PAX_FN_draw2Dapple
000F6Dr 2               
000F6Dr 2               @target_8:
000F6Dr 2               
000F6Dr 2               ; snake.fth:218:1 in `main`
000F6Dr 2               @OPCODE_26:   ; [c64_ir] Call("check-input")
000F6Dr 2  20 rr rr             jsr PAX_FN_check2Dinput
000F70r 2               
000F70r 2               @target_9:
000F70r 2               
000F70r 2               ; snake.fth:219:1 in `main`
000F70r 2               @OPCODE_28:   ; [c64_ir] Call("move-snake-tail")
000F70r 2  20 rr rr             jsr PAX_FN_move2Dsnake2Dtail
000F73r 2               
000F73r 2               @target_10:
000F73r 2               
000F73r 2               ; snake.fth:220:1 in `main`
000F73r 2               @OPCODE_30:   ; [c64_ir] Call("move-snake-head")
000F73r 2  20 rr rr             jsr PAX_FN_move2Dsnake2Dhead
000F76r 2               
000F76r 2               @target_11:
000F76r 2               
000F76r 2               ; snake.fth:221:1 in `main`
000F76r 2               @OPCODE_32:   ; [c64_ir] Call("check-apple")
000F76r 2  20 rr rr             jsr PAX_FN_check2Dapple
000F79r 2               
000F79r 2               @target_12:
000F79r 2               
000F79r 2               ; snake.fth:223:1 in `main`
000F79r 2               @OPCODE_34:   ; [c64_ir] Call("check-collision")
000F79r 2  20 rr rr             jsr PAX_FN_check2Dcollision
000F7Cr 2               
000F7Cr 2               @target_13:
000F7Cr 2               
000F7Cr 2               ; snake.fth:224:1 in `main`
000F7Cr 2               @OPCODE_36:   ; [c64_ir] JumpIf0(15)
000F7Cr 2  CA               dex
000F7Dr 2  CA               dex
000F7Er 2  B5 02            lda $02,x
000F80r 2  15 03            ora $03,x
000F82r 2  D0 03            bne *+5
000F84r 2  4C rr rr         jmp @target_15
000F87r 2               
000F87r 2               @target_14:
000F87r 2               
000F87r 2               ; snake.fth:224:4 in `main`
000F87r 2               @OPCODE_38:   ; [c64_ir] JumpElse(16)
000F87r 2  4C rr rr         jmp @target_16
000F8Ar 2               
000F8Ar 2               @target_15:
000F8Ar 2               
000F8Ar 2               ; snake.fth:224:9 in `main`
000F8Ar 2               @OPCODE_40:   ; [c64_ir] PushLiteral(0)
000F8Ar 2  E8               inx
000F8Br 2  E8               inx
000F8Cr 2  A9 00            lda #0
000F8Er 2  95 00            sta $00,x
000F90r 2  A9 00            lda #0
000F92r 2  95 01            sta $01,x
000F94r 2               
000F94r 2               ; snake.fth:224:11 in `main`
000F94r 2               @OPCODE_41:   ; [c64_ir] PushLiteral(-28672)
000F94r 2  E8               inx
000F95r 2  E8               inx
000F96r 2  A9 00            lda #0
000F98r 2  95 00            sta $00,x
000F9Ar 2  A9 90            lda #144
000F9Cr 2  95 01            sta $01,x
000F9Er 2               
000F9Er 2               ; snake.fth:224:23 in `main`
000F9Er 2               @OPCODE_42:   ; [c64_ir] Store
000F9Er 2  CA               dex
000F9Fr 2  CA               dex
000FA0r 2  CA               dex
000FA1r 2  CA               dex
000FA2r 2  B5 02            lda $02,x
000FA4r 2  81 04            sta ($04,x)
000FA6r 2                   ; TODO high byte
000FA6r 2               
000FA6r 2               ; snake.fth:224:25 in `main`
000FA6r 2               @OPCODE_43:   ; [c64_ir] JumpTarget(15)
000FA6r 2               
000FA6r 2               @target_16:
000FA6r 2               
000FA6r 2               ; :0:0 in ``
000FA6r 2               @OPCODE_45:   ; [c64_ir] Exit
000FA6r 2  60               rts
000FA7r 2               .endproc
000FA7r 2               
000FA7r 2               
000FA7r 2               
000FA7r 2               
000FA7r 2               
000FA7r 2               ; function start
000FA7r 2               
000FA7r 2               
000FA7r 2               
000FA7r 1               
