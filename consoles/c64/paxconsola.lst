ca65 V2.18 - Git N/A
Main file   : paxconsola.s
Current file: paxconsola.s

000000r 1               GFX = $0400
000000r 1               
000000r 1               ;helpful labels
000000r 1               ; https://gist.github.com/biomood/1001256
000000r 1               CLEAR = $E544
000000r 1               GETIN  =  $FFE4
000000r 1               SCNKEY =  $FF9F
000000r 1               
000000r 1               ; Override Datasette ram
000000r 1               TEMP = $92
000000r 1               TEMP2 = $93
000000r 1               TEMP3 = $94
000000r 1               
000000r 1               TEMP_PAX1 = $95
000000r 1               TEMP_PAX2 = $96
000000r 1               
000000r 1               STACK_RESERVE = $97
000000r 1               
000000r 1               ; Can override all BASIC values
000000r 1               ; https://csdb.dk/forums/index.php?roomid=11&topicid=3541&showallposts=1
000000r 1               X_START = $02
000000r 1               X_END = $7f
000000r 1               
000000r 1               .code
000000r 1                   ; Make screen black and text white
000000r 1  A9 00            lda #$00
000002r 1  8D 20 D0         sta $d020
000005r 1  8D 21 D0         sta $d021
000008r 1  A9 01            lda #$01
00000Ar 1  8D 86 02         sta $0286
00000Dr 1               
00000Dr 1                   ; Select charset
00000Dr 1  A9 17            lda #23
00000Fr 1  8D 18 D0         sta $d018
000012r 1               
000012r 1                   ; Clear the screen
000012r 1  20 44 E5         jsr $e544
000015r 1               
000015r 1                   ; draw some helpful text
000015r 1  20 rr rr         jsr draw_text
000018r 1               
000018r 1  A9 00            lda #00
00001Ar 1  A2 7D            ldx #(X_END-X_START)
00001Cr 1               ClearReturnStackLoop:
00001Cr 1  95 02            sta X_START,x
00001Er 1  CA               dex
00001Fr 1  10 FB            bpl ClearReturnStackLoop
000021r 1               
000021r 1  A9 00            lda #$00
000023r 1  A2 FF            ldx #$ff
000025r 1               ClearMemoryLoop:
000025r 1  9D 00 90         sta $9000,x
000028r 1  CA               dex
000029r 1  D0 FA            bne ClearMemoryLoop
00002Br 1               
00002Br 1               
00002Br 1               before_mainloop:
00002Br 1  EA               nop
00002Cr 1               mainloop:
00002Cr 1  AD 11 D0         lda $d011
00002Fr 1  10 FB            bpl mainloop ; no: go to mainloop
000031r 1               
000031r 1               pax_start:
000031r 1                   ; disable inerrupts
000031r 1  78               sei
000032r 1                   ; store stack pointer, since execution might not be clean
000032r 1  BA               tsx
000033r 1  86 97            stx STACK_RESERVE
000035r 1               
000035r 1                   ; Set up PAX registers for execution
000035r 1                   ; X=return stack pointer, Y = high byte of TOS, A = low byte of TOS
000035r 1  A2 02            ldx #X_START
000037r 1  A9 00            lda #0
000039r 1  A0 00            ldy #0
00003Br 1               
00003Br 1  20 rr rr         jsr PAX_FN_main
00003Er 1               
00003Er 1                   ; restore stack
00003Er 1  A6 97            ldx STACK_RESERVE
000040r 1  9A               txs
000041r 1                   ; re-enable interrupts
000041r 1  58               cli
000042r 1               
000042r 1               
000042r 1  A9 05            LDA #5
000044r 1  85 7F            STA $7f
000046r 1               
000046r 1  20 9F FF         JSR SCNKEY      ;SCAN KEYBOARD
000049r 1  20 E4 FF         JSR GETIN       ;GET CHARACTER
00004Cr 1  C9 00            CMP #0          ;IS IT NULL?
00004Er 1  F0 2F            BEQ pax_finished  ;no? skip
000050r 1               
000050r 1               
000050r 1               START	:
000050r 1  C9 57            CMP #87		;W - up
000052r 1  F0 0F            BEQ UP
000054r 1               
000054r 1  C9 53            CMP #83		;S - down
000056r 1  F0 12            BEQ DOWN
000058r 1               
000058r 1  C9 41            CMP #65		;A - left
00005Ar 1  F0 15            BEQ LEFT
00005Cr 1               
00005Cr 1  C9 44            CMP #68		;D - right
00005Er 1  F0 18            BEQ RIGHT
000060r 1               
000060r 1                   ;CMP ENTER	;end if enter clicked
000060r 1                   ;BEQ END
000060r 1               
000060r 1  4C rr rr         JMP pax_finished
000063r 1               
000063r 1               UP:
000063r 1  A9 26            LDA #38
000065r 1  85 7E            STA $7e
000067r 1  4C rr rr         JMP pax_finished
00006Ar 1               
00006Ar 1               DOWN:
00006Ar 1  A9 28            LDA #40
00006Cr 1  85 7E            STA $7e
00006Er 1  4C rr rr         JMP pax_finished
000071r 1               
000071r 1               LEFT:
000071r 1  A9 25            LDA #37
000073r 1  85 7E            STA $7e
000075r 1  4C rr rr         JMP pax_finished
000078r 1               
000078r 1               RIGHT:
000078r 1  A9 27            LDA #39
00007Ar 1  85 7E            STA $7e
00007Cr 1  4C rr rr         JMP pax_finished
00007Fr 1               
00007Fr 1               
00007Fr 1               pax_finished:
00007Fr 1  4C rr rr         jmp mainloop
000082r 1               
000082r 1               
000082r 1               msg:
000082r 1  20 20 20 20      .asciiz "              snake world!              "
000086r 1  20 20 20 20  
00008Ar 1  20 20 20 20  
0000ABr 1               
0000ABr 1               draw_text:
0000ABr 1  A2 00            ldx #$00
0000ADr 1               draw_loop:
0000ADr 1  BD rr rr         lda msg,x
0000B0r 1  9D 18 05         sta $0518,x
0000B3r 1  E8               inx
0000B4r 1  E0 28            cpx #$28
0000B6r 1  D0 F5            bne draw_loop
0000B8r 1  60               rts
0000B9r 1               
0000B9r 1               
0000B9r 1               ; http://forum.6502.org/viewtopic.php?f=9&t=689
0000B9r 1               .proc replace_PAX_FN_2A
0000B9r 1  CA               dex
0000BAr 1  CA               dex
0000BBr 1               
0000BBr 1  A0 00            LDY   #0
0000BDr 1  B5 00            LDA   0,X   ; Move NOS to N and then zero
0000BFr 1  85 92            STA   TEMP  ; (ie, erase) NOS (2 bytes).
0000C1r 1  94 00            STY   0,X   ; STZ can be replaced with STY
0000C3r 1                               ; here since NEXT left 0 in Y.
0000C3r 1  B5 01            LDA   1,X
0000C5r 1  85 93            STA   TEMP2
0000C7r 1  94 01            STY   1,X   ; STZ can be replaced with STY
0000C9r 1                               ; here since NEXT left 0 in Y.
0000C9r 1  A0 10            LDY   #$10  ; Go through the loop 16 times.
0000CBr 1               
0000CBr 1               @1:
0000CBr 1  16 00            ASL  0,X    ; Shift the 2 top stack cells
0000CDr 1  36 01            ROL  1,X    ; (ie, four bytes) left one bit.
0000CFr 1  36 02            ROL  2,X    ; The multiplier gets shifted out
0000D1r 1  36 03            ROL  3,X    ; as the product gets shifted in.
0000D3r 1  90 15            BCC  @2
0000D5r 1                               ; If the high bit shifted out was 1,
0000D5r 1  18               CLC         ; add the 2-byte value at N into NOS,
0000D6r 1  A5 92            LDA  TEMP
0000D8r 1  75 00            ADC  0,X    ; low byte,
0000DAr 1  95 00            STA  0,X
0000DCr 1               
0000DCr 1  A5 93            LDA  TEMP2
0000DEr 1  75 01            ADC  1,X    ; then high byte.
0000E0r 1  95 01            STA  1,X
0000E2r 1                               ; If there was a carry, then
0000E2r 1  90 06            BCC  @2     ; increment low byte of high cell.
0000E4r 1  F6 02            INC  2,X    ; Public-domain used LDA#0, ADC, STA.
0000E6r 1                               ; If incrementing the low byte of the
0000E6r 1  D0 02            BNE  @2     ; high cell made it 0, you must also
0000E8r 1  F6 03            INC  3,X    ; increment the high byte of the high
0000EAr 1                               ; cell!  Lacking this is where the
0000EAr 1                               ; bug lay in the public-domain UM*
0000EAr 1               @2:
0000EAr 1  88               DEY
0000EBr 1  D0 DE            BNE   @1    ; Loop again if not done.
0000EDr 1               
0000EDr 1  60               rts
0000EEr 1               .endproc
0000EEr 1               
0000EEr 1               
0000EEr 1               
0000EEr 1               ; Generated code
0000EEr 1               
0000EEr 1                   .include "generated.asm"
0000EEr 2               .proc PAX_FN_main
0000EEr 2               @target_0:
0000EEr 2               
0000EEr 2               ; snake.fth:23:1 in `main`
0000EEr 2               @OPCODE_1:   ; [c64_ir] PushLiteral(500)
0000EEr 2  E8               inx
0000EFr 2  E8               inx
0000F0r 2  A9 F4            lda #244
0000F2r 2  95 00            sta $00,x
0000F4r 2  A9 01            lda #1
0000F6r 2  95 01            sta $01,x
0000F8r 2               
0000F8r 2               ; snake.fth:23:5 in `main`
0000F8r 2               @OPCODE_2:   ; [c64_ir] InlineCall("cells")
0000F8r 2                   ; inline call(cells)
0000F8r 2  48               pha
0000F9r 2  48               pha
0000FAr 2               
0000FAr 2               @target_1:
0000FAr 2               
0000FAr 2               ; src/prelude.fth:41:9 in `cells`
0000FAr 2               @OPCODE_4:   ; [c64_ir] InlineCall("dup")
0000FAr 2                   ; inline call(dup)
0000FAr 2  48               pha
0000FBr 2  48               pha
0000FCr 2               
0000FCr 2               @target_2:
0000FCr 2               
0000FCr 2               ; src/prelude.fth:6:10 in `dup`
0000FCr 2               @OPCODE_6:   ; [c64_ir] TempStore
0000FCr 2  CA               dex
0000FDr 2  CA               dex
0000FEr 2  B5 03            lda $03,x
000100r 2  85 96            sta TEMP_PAX2
000102r 2  B5 02            lda $02,x
000104r 2  85 95            sta TEMP_PAX1
000106r 2               
000106r 2               ; src/prelude.fth:6:16 in `dup`
000106r 2               @OPCODE_7:   ; [c64_ir] TempLoad
000106r 2  E8               inx
000107r 2  E8               inx
000108r 2  A5 95            lda TEMP_PAX1
00010Ar 2  95 00            sta $00,x
00010Cr 2  A5 96            lda TEMP_PAX2
00010Er 2  95 01            sta $01,x
000110r 2               
000110r 2               ; src/prelude.fth:6:22 in `dup`
000110r 2               @OPCODE_8:   ; [c64_ir] TempLoad
000110r 2  E8               inx
000111r 2  E8               inx
000112r 2  A5 95            lda TEMP_PAX1
000114r 2  95 00            sta $00,x
000116r 2  A5 96            lda TEMP_PAX2
000118r 2  95 01            sta $01,x
00011Ar 2               
00011Ar 2               ; src/prelude.fth:6:28 in `dup`
00011Ar 2               @OPCODE_9:   ; [c64_ir] InlineExit
00011Ar 2                   ; inline exit
00011Ar 2  68               pla
00011Br 2  68               pla
00011Cr 2               
00011Cr 2               @target_3:
00011Cr 2               
00011Cr 2               ; src/prelude.fth:41:13 in `cells`
00011Cr 2               @OPCODE_11:   ; [c64_ir] Add
00011Cr 2                   ; 21
00011Cr 2  CA               dex
00011Dr 2  CA               dex
00011Er 2  18               clc
00011Fr 2  B5 00            lda $00,x
000121r 2  75 02            adc $02,x
000123r 2  95 00            sta $00,x
000125r 2  B5 01            lda $01,x
000127r 2  75 03            adc $03,x
000129r 2  95 01            sta $01,x
00012Br 2               
00012Br 2               ; src/prelude.fth:41:15 in `cells`
00012Br 2               @OPCODE_12:   ; [c64_ir] InlineExit
00012Br 2                   ; inline exit
00012Br 2  68               pla
00012Cr 2  68               pla
00012Dr 2               
00012Dr 2               @target_4:
00012Dr 2               
00012Dr 2               ; snake.fth:23:11 in `main`
00012Dr 2               @OPCODE_14:   ; [c64_ir] Drop
00012Dr 2  CA               dex
00012Er 2  CA               dex
00012Fr 2               
00012Fr 2               ; snake.fth:26:1 in `main`
00012Fr 2               @OPCODE_15:   ; [c64_ir] PushLiteral(500)
00012Fr 2  E8               inx
000130r 2  E8               inx
000131r 2  A9 F4            lda #244
000133r 2  95 00            sta $00,x
000135r 2  A9 01            lda #1
000137r 2  95 01            sta $01,x
000139r 2               
000139r 2               ; snake.fth:26:5 in `main`
000139r 2               @OPCODE_16:   ; [c64_ir] InlineCall("cells")
000139r 2                   ; inline call(cells)
000139r 2  48               pha
00013Ar 2  48               pha
00013Br 2               
00013Br 2               @target_5:
00013Br 2               
00013Br 2               ; src/prelude.fth:41:9 in `cells`
00013Br 2               @OPCODE_18:   ; [c64_ir] InlineCall("dup")
00013Br 2                   ; inline call(dup)
00013Br 2  48               pha
00013Cr 2  48               pha
00013Dr 2               
00013Dr 2               @target_6:
00013Dr 2               
00013Dr 2               ; src/prelude.fth:6:10 in `dup`
00013Dr 2               @OPCODE_20:   ; [c64_ir] TempStore
00013Dr 2  CA               dex
00013Er 2  CA               dex
00013Fr 2  B5 03            lda $03,x
000141r 2  85 96            sta TEMP_PAX2
000143r 2  B5 02            lda $02,x
000145r 2  85 95            sta TEMP_PAX1
000147r 2               
000147r 2               ; src/prelude.fth:6:16 in `dup`
000147r 2               @OPCODE_21:   ; [c64_ir] TempLoad
000147r 2  E8               inx
000148r 2  E8               inx
000149r 2  A5 95            lda TEMP_PAX1
00014Br 2  95 00            sta $00,x
00014Dr 2  A5 96            lda TEMP_PAX2
00014Fr 2  95 01            sta $01,x
000151r 2               
000151r 2               ; src/prelude.fth:6:22 in `dup`
000151r 2               @OPCODE_22:   ; [c64_ir] TempLoad
000151r 2  E8               inx
000152r 2  E8               inx
000153r 2  A5 95            lda TEMP_PAX1
000155r 2  95 00            sta $00,x
000157r 2  A5 96            lda TEMP_PAX2
000159r 2  95 01            sta $01,x
00015Br 2               
00015Br 2               ; src/prelude.fth:6:28 in `dup`
00015Br 2               @OPCODE_23:   ; [c64_ir] InlineExit
00015Br 2                   ; inline exit
00015Br 2  68               pla
00015Cr 2  68               pla
00015Dr 2               
00015Dr 2               @target_7:
00015Dr 2               
00015Dr 2               ; src/prelude.fth:41:13 in `cells`
00015Dr 2               @OPCODE_25:   ; [c64_ir] Add
00015Dr 2                   ; 21
00015Dr 2  CA               dex
00015Er 2  CA               dex
00015Fr 2  18               clc
000160r 2  B5 00            lda $00,x
000162r 2  75 02            adc $02,x
000164r 2  95 00            sta $00,x
000166r 2  B5 01            lda $01,x
000168r 2  75 03            adc $03,x
00016Ar 2  95 01            sta $01,x
00016Cr 2               
00016Cr 2               ; src/prelude.fth:41:15 in `cells`
00016Cr 2               @OPCODE_26:   ; [c64_ir] InlineExit
00016Cr 2                   ; inline exit
00016Cr 2  68               pla
00016Dr 2  68               pla
00016Er 2               
00016Er 2               @target_8:
00016Er 2               
00016Er 2               ; snake.fth:26:11 in `main`
00016Er 2               @OPCODE_28:   ; [c64_ir] Drop
00016Er 2  CA               dex
00016Fr 2  CA               dex
000170r 2               
000170r 2               ; snake.fth:212:1 in `main`
000170r 2               @OPCODE_29:   ; [c64_ir] PushLiteral(-28672)
000170r 2  E8               inx
000171r 2  E8               inx
000172r 2  A9 00            lda #0
000174r 2  95 00            sta $00,x
000176r 2  A9 90            lda #144
000178r 2  95 01            sta $01,x
00017Ar 2               
00017Ar 2               ; snake.fth:212:13 in `main`
00017Ar 2               @OPCODE_30:   ; [c64_ir] Load
00017Ar 2  A1 00            lda ($00,x)
00017Cr 2  95 00            sta $00,x
00017Er 2  A9 00            lda #0
000180r 2  95 01            sta $01,x
000182r 2               
000182r 2               ; snake.fth:212:15 in `main`
000182r 2               @OPCODE_31:   ; [c64_ir] InlineCall("0=")
000182r 2                   ; inline call(0=)
000182r 2  48               pha
000183r 2  48               pha
000184r 2               
000184r 2               @target_9:
000184r 2               
000184r 2               ; src/prelude.fth:21:8 in `0=`
000184r 2               @OPCODE_33:   ; [c64_ir] JumpIf0(11)
000184r 2  CA               dex
000185r 2  CA               dex
000186r 2  B5 02            lda $02,x
000188r 2  15 03            ora $03,x
00018Ar 2  D0 03            bne *+5
00018Cr 2  4C rr rr         jmp @target_11
00018Fr 2               
00018Fr 2               @target_10:
00018Fr 2               
00018Fr 2               ; src/prelude.fth:21:11 in `0=`
00018Fr 2               @OPCODE_35:   ; [c64_ir] PushLiteral(0)
00018Fr 2  E8               inx
000190r 2  E8               inx
000191r 2  A9 00            lda #0
000193r 2  95 00            sta $00,x
000195r 2  A9 00            lda #0
000197r 2  95 01            sta $01,x
000199r 2               
000199r 2               ; src/prelude.fth:21:13 in `0=`
000199r 2               @OPCODE_36:   ; [c64_ir] JumpElse(12)
000199r 2  4C rr rr         jmp @target_12
00019Cr 2               
00019Cr 2               @target_11:
00019Cr 2               
00019Cr 2               ; src/prelude.fth:21:18 in `0=`
00019Cr 2               @OPCODE_38:   ; [c64_ir] PushLiteral(-1)
00019Cr 2  E8               inx
00019Dr 2  E8               inx
00019Er 2  A9 FF            lda #255
0001A0r 2  95 00            sta $00,x
0001A2r 2  A9 FF            lda #255
0001A4r 2  95 01            sta $01,x
0001A6r 2               
0001A6r 2               ; src/prelude.fth:21:21 in `0=`
0001A6r 2               @OPCODE_39:   ; [c64_ir] JumpTarget(11)
0001A6r 2               
0001A6r 2               @target_12:
0001A6r 2               
0001A6r 2               ; src/prelude.fth:21:26 in `0=`
0001A6r 2               @OPCODE_41:   ; [c64_ir] InlineExit
0001A6r 2                   ; inline exit
0001A6r 2  68               pla
0001A7r 2  68               pla
0001A8r 2               
0001A8r 2               @target_13:
0001A8r 2               
0001A8r 2               ; snake.fth:212:18 in `main`
0001A8r 2               @OPCODE_43:   ; [c64_ir] JumpIf0(407)
0001A8r 2  CA               dex
0001A9r 2  CA               dex
0001AAr 2  B5 02            lda $02,x
0001ACr 2  15 03            ora $03,x
0001AEr 2  D0 03            bne *+5
0001B0r 2  4C rr rr         jmp @target_407
0001B3r 2               
0001B3r 2               @target_14:
0001B3r 2               
0001B3r 2               ; snake.fth:212:21 in `main`
0001B3r 2               @OPCODE_45:   ; [c64_ir] InlineCall("initialize")
0001B3r 2                   ; inline call(initialize)
0001B3r 2  48               pha
0001B4r 2  48               pha
0001B5r 2               
0001B5r 2               @target_15:
0001B5r 2               
0001B5r 2               ; snake.fth:116:3 in `initialize`
0001B5r 2               @OPCODE_47:   ; [c64_ir] InlineCall("draw-background")
0001B5r 2                   ; inline call(draw-background)
0001B5r 2  48               pha
0001B6r 2  48               pha
0001B7r 2               
0001B7r 2               @target_16:
0001B7r 2               
0001B7r 2               ; snake.fth:57:5 in `draw-background`
0001B7r 2               @OPCODE_49:   ; [c64_ir] PushLiteral(0)
0001B7r 2  E8               inx
0001B8r 2  E8               inx
0001B9r 2  A9 00            lda #0
0001BBr 2  95 00            sta $00,x
0001BDr 2  A9 00            lda #0
0001BFr 2  95 01            sta $01,x
0001C1r 2               
0001C1r 2               ; snake.fth:58:5 in `draw-background`
0001C1r 2               @OPCODE_50:   ; [c64_ir] PushLiteral(25)
0001C1r 2  E8               inx
0001C2r 2  E8               inx
0001C3r 2  A9 19            lda #25
0001C5r 2  95 00            sta $00,x
0001C7r 2  A9 00            lda #0
0001C9r 2  95 01            sta $01,x
0001CBr 2               
0001CBr 2               ; snake.fth:58:12 in `draw-background`
0001CBr 2               @OPCODE_51:   ; [c64_ir] PushLiteral(0)
0001CBr 2  E8               inx
0001CCr 2  E8               inx
0001CDr 2  A9 00            lda #0
0001CFr 2  95 00            sta $00,x
0001D1r 2  A9 00            lda #0
0001D3r 2  95 01            sta $01,x
0001D5r 2               
0001D5r 2               ; snake.fth:58:14 in `draw-background`
0001D5r 2               @OPCODE_52:   ; [c64_ir] AltPush
0001D5r 2  CA               dex
0001D6r 2  CA               dex
0001D7r 2  B5 03            lda $03,x
0001D9r 2  48               pha
0001DAr 2  B5 02            lda $02,x
0001DCr 2  48               pha
0001DDr 2               
0001DDr 2               ; snake.fth:58:14 in `draw-background`
0001DDr 2               @OPCODE_53:   ; [c64_ir] AltPush
0001DDr 2  CA               dex
0001DEr 2  CA               dex
0001DFr 2  B5 03            lda $03,x
0001E1r 2  48               pha
0001E2r 2  B5 02            lda $02,x
0001E4r 2  48               pha
0001E5r 2               
0001E5r 2               ; snake.fth:58:14 in `draw-background`
0001E5r 2               @OPCODE_54:   ; [c64_ir] LoopTarget(16)
0001E5r 2               
0001E5r 2               @target_17:
0001E5r 2               
0001E5r 2               ; snake.fth:59:9 in `draw-background`
0001E5r 2               @OPCODE_56:   ; [c64_ir] PushLiteral(40)
0001E5r 2  E8               inx
0001E6r 2  E8               inx
0001E7r 2  A9 28            lda #40
0001E9r 2  95 00            sta $00,x
0001EBr 2  A9 00            lda #0
0001EDr 2  95 01            sta $01,x
0001EFr 2               
0001EFr 2               ; snake.fth:59:15 in `draw-background`
0001EFr 2               @OPCODE_57:   ; [c64_ir] PushLiteral(0)
0001EFr 2  E8               inx
0001F0r 2  E8               inx
0001F1r 2  A9 00            lda #0
0001F3r 2  95 00            sta $00,x
0001F5r 2  A9 00            lda #0
0001F7r 2  95 01            sta $01,x
0001F9r 2               
0001F9r 2               ; snake.fth:59:17 in `draw-background`
0001F9r 2               @OPCODE_58:   ; [c64_ir] AltPush
0001F9r 2  CA               dex
0001FAr 2  CA               dex
0001FBr 2  B5 03            lda $03,x
0001FDr 2  48               pha
0001FEr 2  B5 02            lda $02,x
000200r 2  48               pha
000201r 2               
000201r 2               ; snake.fth:59:17 in `draw-background`
000201r 2               @OPCODE_59:   ; [c64_ir] AltPush
000201r 2  CA               dex
000202r 2  CA               dex
000203r 2  B5 03            lda $03,x
000205r 2  48               pha
000206r 2  B5 02            lda $02,x
000208r 2  48               pha
000209r 2               
000209r 2               ; snake.fth:59:17 in `draw-background`
000209r 2               @OPCODE_60:   ; [c64_ir] LoopTarget(17)
000209r 2               
000209r 2               @target_18:
000209r 2               
000209r 2               ; snake.fth:60:13 in `draw-background`
000209r 2               @OPCODE_62:   ; [c64_ir] PushLiteral(32)
000209r 2  E8               inx
00020Ar 2  E8               inx
00020Br 2  A9 20            lda #32
00020Dr 2  95 00            sta $00,x
00020Fr 2  A9 00            lda #0
000211r 2  95 01            sta $01,x
000213r 2               
000213r 2               ; snake.fth:60:25 in `draw-background`
000213r 2               @OPCODE_63:   ; [c64_ir] InlineCall("over")
000213r 2                   ; inline call(over)
000213r 2  48               pha
000214r 2  48               pha
000215r 2               
000215r 2               @target_19:
000215r 2               
000215r 2               ; src/prelude.fth:4:10 in `over`
000215r 2               @OPCODE_65:   ; [c64_ir] AltPush
000215r 2  CA               dex
000216r 2  CA               dex
000217r 2  B5 03            lda $03,x
000219r 2  48               pha
00021Ar 2  B5 02            lda $02,x
00021Cr 2  48               pha
00021Dr 2               
00021Dr 2               ; src/prelude.fth:4:13 in `over`
00021Dr 2               @OPCODE_66:   ; [c64_ir] TempStore
00021Dr 2  CA               dex
00021Er 2  CA               dex
00021Fr 2  B5 03            lda $03,x
000221r 2  85 96            sta TEMP_PAX2
000223r 2  B5 02            lda $02,x
000225r 2  85 95            sta TEMP_PAX1
000227r 2               
000227r 2               ; src/prelude.fth:4:19 in `over`
000227r 2               @OPCODE_67:   ; [c64_ir] TempLoad
000227r 2  E8               inx
000228r 2  E8               inx
000229r 2  A5 95            lda TEMP_PAX1
00022Br 2  95 00            sta $00,x
00022Dr 2  A5 96            lda TEMP_PAX2
00022Fr 2  95 01            sta $01,x
000231r 2               
000231r 2               ; src/prelude.fth:4:25 in `over`
000231r 2               @OPCODE_68:   ; [c64_ir] AltPop
000231r 2  E8               inx
000232r 2  E8               inx
000233r 2  68               pla
000234r 2  95 00            sta $00,x
000236r 2  68               pla
000237r 2  95 01            sta $01,x
000239r 2               
000239r 2               ; src/prelude.fth:4:28 in `over`
000239r 2               @OPCODE_69:   ; [c64_ir] TempLoad
000239r 2  E8               inx
00023Ar 2  E8               inx
00023Br 2  A5 95            lda TEMP_PAX1
00023Dr 2  95 00            sta $00,x
00023Fr 2  A5 96            lda TEMP_PAX2
000241r 2  95 01            sta $01,x
000243r 2               
000243r 2               ; src/prelude.fth:4:34 in `over`
000243r 2               @OPCODE_70:   ; [c64_ir] InlineExit
000243r 2                   ; inline exit
000243r 2  68               pla
000244r 2  68               pla
000245r 2               
000245r 2               @target_20:
000245r 2               
000245r 2               ; snake.fth:60:30 in `draw-background`
000245r 2               @OPCODE_72:   ; [c64_ir] InlineCall("i")
000245r 2                   ; inline call(i)
000245r 2  48               pha
000246r 2  48               pha
000247r 2               
000247r 2               @target_21:
000247r 2               
000247r 2               ; src/prelude.fth:38:5 in `i`
000247r 2               @OPCODE_74:   ; [c64_ir] AltPop
000247r 2  E8               inx
000248r 2  E8               inx
000249r 2  68               pla
00024Ar 2  95 00            sta $00,x
00024Cr 2  68               pla
00024Dr 2  95 01            sta $01,x
00024Fr 2               
00024Fr 2               ; src/prelude.fth:38:8 in `i`
00024Fr 2               @OPCODE_75:   ; [c64_ir] AltPop
00024Fr 2  E8               inx
000250r 2  E8               inx
000251r 2  68               pla
000252r 2  95 00            sta $00,x
000254r 2  68               pla
000255r 2  95 01            sta $01,x
000257r 2               
000257r 2               ; src/prelude.fth:38:11 in `i`
000257r 2               @OPCODE_76:   ; [c64_ir] AltPop
000257r 2  E8               inx
000258r 2  E8               inx
000259r 2  68               pla
00025Ar 2  95 00            sta $00,x
00025Cr 2  68               pla
00025Dr 2  95 01            sta $01,x
00025Fr 2               
00025Fr 2               ; src/prelude.fth:38:14 in `i`
00025Fr 2               @OPCODE_77:   ; [c64_ir] TempStore
00025Fr 2  CA               dex
000260r 2  CA               dex
000261r 2  B5 03            lda $03,x
000263r 2  85 96            sta TEMP_PAX2
000265r 2  B5 02            lda $02,x
000267r 2  85 95            sta TEMP_PAX1
000269r 2               
000269r 2               ; src/prelude.fth:38:20 in `i`
000269r 2               @OPCODE_78:   ; [c64_ir] TempLoad
000269r 2  E8               inx
00026Ar 2  E8               inx
00026Br 2  A5 95            lda TEMP_PAX1
00026Dr 2  95 00            sta $00,x
00026Fr 2  A5 96            lda TEMP_PAX2
000271r 2  95 01            sta $01,x
000273r 2               
000273r 2               ; src/prelude.fth:38:26 in `i`
000273r 2               @OPCODE_79:   ; [c64_ir] AltPush
000273r 2  CA               dex
000274r 2  CA               dex
000275r 2  B5 03            lda $03,x
000277r 2  48               pha
000278r 2  B5 02            lda $02,x
00027Ar 2  48               pha
00027Br 2               
00027Br 2               ; src/prelude.fth:38:29 in `i`
00027Br 2               @OPCODE_80:   ; [c64_ir] AltPush
00027Br 2  CA               dex
00027Cr 2  CA               dex
00027Dr 2  B5 03            lda $03,x
00027Fr 2  48               pha
000280r 2  B5 02            lda $02,x
000282r 2  48               pha
000283r 2               
000283r 2               ; src/prelude.fth:38:32 in `i`
000283r 2               @OPCODE_81:   ; [c64_ir] AltPush
000283r 2  CA               dex
000284r 2  CA               dex
000285r 2  B5 03            lda $03,x
000287r 2  48               pha
000288r 2  B5 02            lda $02,x
00028Ar 2  48               pha
00028Br 2               
00028Br 2               ; src/prelude.fth:38:35 in `i`
00028Br 2               @OPCODE_82:   ; [c64_ir] TempLoad
00028Br 2  E8               inx
00028Cr 2  E8               inx
00028Dr 2  A5 95            lda TEMP_PAX1
00028Fr 2  95 00            sta $00,x
000291r 2  A5 96            lda TEMP_PAX2
000293r 2  95 01            sta $01,x
000295r 2               
000295r 2               ; src/prelude.fth:38:41 in `i`
000295r 2               @OPCODE_83:   ; [c64_ir] InlineExit
000295r 2                   ; inline exit
000295r 2  68               pla
000296r 2  68               pla
000297r 2               
000297r 2               @target_22:
000297r 2               
000297r 2               ; snake.fth:60:32 in `draw-background`
000297r 2               @OPCODE_85:   ; [c64_ir] Add
000297r 2                   ; 21
000297r 2  CA               dex
000298r 2  CA               dex
000299r 2  18               clc
00029Ar 2  B5 00            lda $00,x
00029Cr 2  75 02            adc $02,x
00029Er 2  95 00            sta $00,x
0002A0r 2  B5 01            lda $01,x
0002A2r 2  75 03            adc $03,x
0002A4r 2  95 01            sta $01,x
0002A6r 2               
0002A6r 2               ; snake.fth:60:34 in `draw-background`
0002A6r 2               @OPCODE_86:   ; [c64_ir] InlineCall("draw-index")
0002A6r 2                   ; inline call(draw-index)
0002A6r 2  48               pha
0002A7r 2  48               pha
0002A8r 2               
0002A8r 2               @target_23:
0002A8r 2               
0002A8r 2               ; snake.fth:49:34 in `draw-index`
0002A8r 2               @OPCODE_88:   ; [c64_ir] PushLiteral(1024)
0002A8r 2  E8               inx
0002A9r 2  E8               inx
0002AAr 2  A9 00            lda #0
0002ACr 2  95 00            sta $00,x
0002AEr 2  A9 04            lda #4
0002B0r 2  95 01            sta $01,x
0002B2r 2               
0002B2r 2               ; snake.fth:49:43 in `draw-index`
0002B2r 2               @OPCODE_89:   ; [c64_ir] Add
0002B2r 2                   ; 21
0002B2r 2  CA               dex
0002B3r 2  CA               dex
0002B4r 2  18               clc
0002B5r 2  B5 00            lda $00,x
0002B7r 2  75 02            adc $02,x
0002B9r 2  95 00            sta $00,x
0002BBr 2  B5 01            lda $01,x
0002BDr 2  75 03            adc $03,x
0002BFr 2  95 01            sta $01,x
0002C1r 2               
0002C1r 2               ; snake.fth:49:45 in `draw-index`
0002C1r 2               @OPCODE_90:   ; [c64_ir] Store8
0002C1r 2  CA               dex
0002C2r 2  CA               dex
0002C3r 2  CA               dex
0002C4r 2  CA               dex
0002C5r 2  B5 02            lda $02,x
0002C7r 2  81 04            sta ($04,x)
0002C9r 2                   ; TODO high byte
0002C9r 2               
0002C9r 2               ; snake.fth:49:48 in `draw-index`
0002C9r 2               @OPCODE_91:   ; [c64_ir] InlineExit
0002C9r 2                   ; inline exit
0002C9r 2  68               pla
0002CAr 2  68               pla
0002CBr 2               
0002CBr 2               @target_24:
0002CBr 2               
0002CBr 2               ; snake.fth:61:9 in `draw-background`
0002CBr 2               @OPCODE_93:   ; [c64_ir] InlineCall("loopimpl")
0002CBr 2                   ; inline call(loopimpl)
0002CBr 2  48               pha
0002CCr 2  48               pha
0002CDr 2               
0002CDr 2               @target_25:
0002CDr 2               
0002CDr 2               ; src/prelude.fth:33:12 in `loopimpl`
0002CDr 2               @OPCODE_95:   ; [c64_ir] AltPop
0002CDr 2  E8               inx
0002CEr 2  E8               inx
0002CFr 2  68               pla
0002D0r 2  95 00            sta $00,x
0002D2r 2  68               pla
0002D3r 2  95 01            sta $01,x
0002D5r 2               
0002D5r 2               ; src/prelude.fth:33:15 in `loopimpl`
0002D5r 2               @OPCODE_96:   ; [c64_ir] AltPop
0002D5r 2  E8               inx
0002D6r 2  E8               inx
0002D7r 2  68               pla
0002D8r 2  95 00            sta $00,x
0002DAr 2  68               pla
0002DBr 2  95 01            sta $01,x
0002DDr 2               
0002DDr 2               ; src/prelude.fth:33:18 in `loopimpl`
0002DDr 2               @OPCODE_97:   ; [c64_ir] AltPop
0002DDr 2  E8               inx
0002DEr 2  E8               inx
0002DFr 2  68               pla
0002E0r 2  95 00            sta $00,x
0002E2r 2  68               pla
0002E3r 2  95 01            sta $01,x
0002E5r 2               
0002E5r 2               ; src/prelude.fth:33:21 in `loopimpl`
0002E5r 2               @OPCODE_98:   ; [c64_ir] InlineCall("1+")
0002E5r 2                   ; inline call(1+)
0002E5r 2  48               pha
0002E6r 2  48               pha
0002E7r 2               
0002E7r 2               @target_26:
0002E7r 2               
0002E7r 2               ; src/prelude.fth:18:8 in `1+`
0002E7r 2               @OPCODE_100:   ; [c64_ir] PushLiteral(1)
0002E7r 2  E8               inx
0002E8r 2  E8               inx
0002E9r 2  A9 01            lda #1
0002EBr 2  95 00            sta $00,x
0002EDr 2  A9 00            lda #0
0002EFr 2  95 01            sta $01,x
0002F1r 2               
0002F1r 2               ; src/prelude.fth:18:10 in `1+`
0002F1r 2               @OPCODE_101:   ; [c64_ir] Add
0002F1r 2                   ; 21
0002F1r 2  CA               dex
0002F2r 2  CA               dex
0002F3r 2  18               clc
0002F4r 2  B5 00            lda $00,x
0002F6r 2  75 02            adc $02,x
0002F8r 2  95 00            sta $00,x
0002FAr 2  B5 01            lda $01,x
0002FCr 2  75 03            adc $03,x
0002FEr 2  95 01            sta $01,x
000300r 2               
000300r 2               ; src/prelude.fth:18:12 in `1+`
000300r 2               @OPCODE_102:   ; [c64_ir] InlineExit
000300r 2                   ; inline exit
000300r 2  68               pla
000301r 2  68               pla
000302r 2               
000302r 2               @target_27:
000302r 2               
000302r 2               ; src/prelude.fth:33:24 in `loopimpl`
000302r 2               @OPCODE_104:   ; [c64_ir] InlineCall("2dup")
000302r 2                   ; inline call(2dup)
000302r 2  48               pha
000303r 2  48               pha
000304r 2               
000304r 2               @target_28:
000304r 2               
000304r 2               ; src/prelude.fth:8:10 in `2dup`
000304r 2               @OPCODE_106:   ; [c64_ir] InlineCall("over")
000304r 2                   ; inline call(over)
000304r 2  48               pha
000305r 2  48               pha
000306r 2               
000306r 2               @target_29:
000306r 2               
000306r 2               ; src/prelude.fth:4:10 in `over`
000306r 2               @OPCODE_108:   ; [c64_ir] AltPush
000306r 2  CA               dex
000307r 2  CA               dex
000308r 2  B5 03            lda $03,x
00030Ar 2  48               pha
00030Br 2  B5 02            lda $02,x
00030Dr 2  48               pha
00030Er 2               
00030Er 2               ; src/prelude.fth:4:13 in `over`
00030Er 2               @OPCODE_109:   ; [c64_ir] TempStore
00030Er 2  CA               dex
00030Fr 2  CA               dex
000310r 2  B5 03            lda $03,x
000312r 2  85 96            sta TEMP_PAX2
000314r 2  B5 02            lda $02,x
000316r 2  85 95            sta TEMP_PAX1
000318r 2               
000318r 2               ; src/prelude.fth:4:19 in `over`
000318r 2               @OPCODE_110:   ; [c64_ir] TempLoad
000318r 2  E8               inx
000319r 2  E8               inx
00031Ar 2  A5 95            lda TEMP_PAX1
00031Cr 2  95 00            sta $00,x
00031Er 2  A5 96            lda TEMP_PAX2
000320r 2  95 01            sta $01,x
000322r 2               
000322r 2               ; src/prelude.fth:4:25 in `over`
000322r 2               @OPCODE_111:   ; [c64_ir] AltPop
000322r 2  E8               inx
000323r 2  E8               inx
000324r 2  68               pla
000325r 2  95 00            sta $00,x
000327r 2  68               pla
000328r 2  95 01            sta $01,x
00032Ar 2               
00032Ar 2               ; src/prelude.fth:4:28 in `over`
00032Ar 2               @OPCODE_112:   ; [c64_ir] TempLoad
00032Ar 2  E8               inx
00032Br 2  E8               inx
00032Cr 2  A5 95            lda TEMP_PAX1
00032Er 2  95 00            sta $00,x
000330r 2  A5 96            lda TEMP_PAX2
000332r 2  95 01            sta $01,x
000334r 2               
000334r 2               ; src/prelude.fth:4:34 in `over`
000334r 2               @OPCODE_113:   ; [c64_ir] InlineExit
000334r 2                   ; inline exit
000334r 2  68               pla
000335r 2  68               pla
000336r 2               
000336r 2               @target_30:
000336r 2               
000336r 2               ; src/prelude.fth:8:15 in `2dup`
000336r 2               @OPCODE_115:   ; [c64_ir] InlineCall("over")
000336r 2                   ; inline call(over)
000336r 2  48               pha
000337r 2  48               pha
000338r 2               
000338r 2               @target_31:
000338r 2               
000338r 2               ; src/prelude.fth:4:10 in `over`
000338r 2               @OPCODE_117:   ; [c64_ir] AltPush
000338r 2  CA               dex
000339r 2  CA               dex
00033Ar 2  B5 03            lda $03,x
00033Cr 2  48               pha
00033Dr 2  B5 02            lda $02,x
00033Fr 2  48               pha
000340r 2               
000340r 2               ; src/prelude.fth:4:13 in `over`
000340r 2               @OPCODE_118:   ; [c64_ir] TempStore
000340r 2  CA               dex
000341r 2  CA               dex
000342r 2  B5 03            lda $03,x
000344r 2  85 96            sta TEMP_PAX2
000346r 2  B5 02            lda $02,x
000348r 2  85 95            sta TEMP_PAX1
00034Ar 2               
00034Ar 2               ; src/prelude.fth:4:19 in `over`
00034Ar 2               @OPCODE_119:   ; [c64_ir] TempLoad
00034Ar 2  E8               inx
00034Br 2  E8               inx
00034Cr 2  A5 95            lda TEMP_PAX1
00034Er 2  95 00            sta $00,x
000350r 2  A5 96            lda TEMP_PAX2
000352r 2  95 01            sta $01,x
000354r 2               
000354r 2               ; src/prelude.fth:4:25 in `over`
000354r 2               @OPCODE_120:   ; [c64_ir] AltPop
000354r 2  E8               inx
000355r 2  E8               inx
000356r 2  68               pla
000357r 2  95 00            sta $00,x
000359r 2  68               pla
00035Ar 2  95 01            sta $01,x
00035Cr 2               
00035Cr 2               ; src/prelude.fth:4:28 in `over`
00035Cr 2               @OPCODE_121:   ; [c64_ir] TempLoad
00035Cr 2  E8               inx
00035Dr 2  E8               inx
00035Er 2  A5 95            lda TEMP_PAX1
000360r 2  95 00            sta $00,x
000362r 2  A5 96            lda TEMP_PAX2
000364r 2  95 01            sta $01,x
000366r 2               
000366r 2               ; src/prelude.fth:4:34 in `over`
000366r 2               @OPCODE_122:   ; [c64_ir] InlineExit
000366r 2                   ; inline exit
000366r 2  68               pla
000367r 2  68               pla
000368r 2               
000368r 2               @target_32:
000368r 2               
000368r 2               ; src/prelude.fth:8:20 in `2dup`
000368r 2               @OPCODE_124:   ; [c64_ir] InlineExit
000368r 2                   ; inline exit
000368r 2  68               pla
000369r 2  68               pla
00036Ar 2               
00036Ar 2               @target_33:
00036Ar 2               
00036Ar 2               ; src/prelude.fth:33:29 in `loopimpl`
00036Ar 2               @OPCODE_126:   ; [c64_ir] AltPush
00036Ar 2  CA               dex
00036Br 2  CA               dex
00036Cr 2  B5 03            lda $03,x
00036Er 2  48               pha
00036Fr 2  B5 02            lda $02,x
000371r 2  48               pha
000372r 2               
000372r 2               ; src/prelude.fth:33:32 in `loopimpl`
000372r 2               @OPCODE_127:   ; [c64_ir] AltPush
000372r 2  CA               dex
000373r 2  CA               dex
000374r 2  B5 03            lda $03,x
000376r 2  48               pha
000377r 2  B5 02            lda $02,x
000379r 2  48               pha
00037Ar 2               
00037Ar 2               ; src/prelude.fth:33:35 in `loopimpl`
00037Ar 2               @OPCODE_128:   ; [c64_ir] InlineCall("=")
00037Ar 2                   ; inline call(=)
00037Ar 2  48               pha
00037Br 2  48               pha
00037Cr 2               
00037Cr 2               @target_34:
00037Cr 2               
00037Cr 2               ; src/prelude.fth:22:8 in `=`
00037Cr 2               @OPCODE_130:   ; [c64_ir] InlineCall("-")
00037Cr 2                   ; inline call(-)
00037Cr 2  48               pha
00037Dr 2  48               pha
00037Er 2               
00037Er 2               @target_35:
00037Er 2               
00037Er 2               ; src/prelude.fth:16:12 in `-`
00037Er 2               @OPCODE_132:   ; [c64_ir] InlineCall("negate")
00037Er 2                   ; inline call(negate)
00037Er 2  48               pha
00037Fr 2  48               pha
000380r 2               
000380r 2               @target_36:
000380r 2               
000380r 2               ; src/prelude.fth:15:12 in `negate`
000380r 2               @OPCODE_134:   ; [c64_ir] InlineCall("invert")
000380r 2                   ; inline call(invert)
000380r 2  48               pha
000381r 2  48               pha
000382r 2               
000382r 2               @target_37:
000382r 2               
000382r 2               ; src/prelude.fth:14:12 in `invert`
000382r 2               @OPCODE_136:   ; [c64_ir] PushLiteral(-1)
000382r 2  E8               inx
000383r 2  E8               inx
000384r 2  A9 FF            lda #255
000386r 2  95 00            sta $00,x
000388r 2  A9 FF            lda #255
00038Ar 2  95 01            sta $01,x
00038Cr 2               
00038Cr 2               ; src/prelude.fth:14:15 in `invert`
00038Cr 2               @OPCODE_137:   ; [c64_ir] Nand
00038Cr 2                   ; 26
00038Cr 2  CA               dex
00038Dr 2  CA               dex
00038Er 2  B5 00            lda $00,x
000390r 2  35 02            and $02,x
000392r 2  49 FF            eor #$ff
000394r 2  95 00            sta $00,x
000396r 2  B5 01            lda $01,x
000398r 2  35 03            and $03,x
00039Ar 2  49 FF            eor #$ff
00039Cr 2  95 01            sta $01,x
00039Er 2               
00039Er 2               ; src/prelude.fth:14:20 in `invert`
00039Er 2               @OPCODE_138:   ; [c64_ir] InlineExit
00039Er 2                   ; inline exit
00039Er 2  68               pla
00039Fr 2  68               pla
0003A0r 2               
0003A0r 2               @target_38:
0003A0r 2               
0003A0r 2               ; src/prelude.fth:15:19 in `negate`
0003A0r 2               @OPCODE_140:   ; [c64_ir] PushLiteral(1)
0003A0r 2  E8               inx
0003A1r 2  E8               inx
0003A2r 2  A9 01            lda #1
0003A4r 2  95 00            sta $00,x
0003A6r 2  A9 00            lda #0
0003A8r 2  95 01            sta $01,x
0003AAr 2               
0003AAr 2               ; src/prelude.fth:15:21 in `negate`
0003AAr 2               @OPCODE_141:   ; [c64_ir] Add
0003AAr 2                   ; 21
0003AAr 2  CA               dex
0003ABr 2  CA               dex
0003ACr 2  18               clc
0003ADr 2  B5 00            lda $00,x
0003AFr 2  75 02            adc $02,x
0003B1r 2  95 00            sta $00,x
0003B3r 2  B5 01            lda $01,x
0003B5r 2  75 03            adc $03,x
0003B7r 2  95 01            sta $01,x
0003B9r 2               
0003B9r 2               ; src/prelude.fth:15:23 in `negate`
0003B9r 2               @OPCODE_142:   ; [c64_ir] InlineExit
0003B9r 2                   ; inline exit
0003B9r 2  68               pla
0003BAr 2  68               pla
0003BBr 2               
0003BBr 2               @target_39:
0003BBr 2               
0003BBr 2               ; src/prelude.fth:16:19 in `-`
0003BBr 2               @OPCODE_144:   ; [c64_ir] Add
0003BBr 2                   ; 21
0003BBr 2  CA               dex
0003BCr 2  CA               dex
0003BDr 2  18               clc
0003BEr 2  B5 00            lda $00,x
0003C0r 2  75 02            adc $02,x
0003C2r 2  95 00            sta $00,x
0003C4r 2  B5 01            lda $01,x
0003C6r 2  75 03            adc $03,x
0003C8r 2  95 01            sta $01,x
0003CAr 2               
0003CAr 2               ; src/prelude.fth:16:21 in `-`
0003CAr 2               @OPCODE_145:   ; [c64_ir] InlineExit
0003CAr 2                   ; inline exit
0003CAr 2  68               pla
0003CBr 2  68               pla
0003CCr 2               
0003CCr 2               @target_40:
0003CCr 2               
0003CCr 2               ; src/prelude.fth:22:10 in `=`
0003CCr 2               @OPCODE_147:   ; [c64_ir] InlineCall("0=")
0003CCr 2                   ; inline call(0=)
0003CCr 2  48               pha
0003CDr 2  48               pha
0003CEr 2               
0003CEr 2               @target_41:
0003CEr 2               
0003CEr 2               ; src/prelude.fth:21:8 in `0=`
0003CEr 2               @OPCODE_149:   ; [c64_ir] JumpIf0(43)
0003CEr 2  CA               dex
0003CFr 2  CA               dex
0003D0r 2  B5 02            lda $02,x
0003D2r 2  15 03            ora $03,x
0003D4r 2  D0 03            bne *+5
0003D6r 2  4C rr rr         jmp @target_43
0003D9r 2               
0003D9r 2               @target_42:
0003D9r 2               
0003D9r 2               ; src/prelude.fth:21:11 in `0=`
0003D9r 2               @OPCODE_151:   ; [c64_ir] PushLiteral(0)
0003D9r 2  E8               inx
0003DAr 2  E8               inx
0003DBr 2  A9 00            lda #0
0003DDr 2  95 00            sta $00,x
0003DFr 2  A9 00            lda #0
0003E1r 2  95 01            sta $01,x
0003E3r 2               
0003E3r 2               ; src/prelude.fth:21:13 in `0=`
0003E3r 2               @OPCODE_152:   ; [c64_ir] JumpElse(44)
0003E3r 2  4C rr rr         jmp @target_44
0003E6r 2               
0003E6r 2               @target_43:
0003E6r 2               
0003E6r 2               ; src/prelude.fth:21:18 in `0=`
0003E6r 2               @OPCODE_154:   ; [c64_ir] PushLiteral(-1)
0003E6r 2  E8               inx
0003E7r 2  E8               inx
0003E8r 2  A9 FF            lda #255
0003EAr 2  95 00            sta $00,x
0003ECr 2  A9 FF            lda #255
0003EEr 2  95 01            sta $01,x
0003F0r 2               
0003F0r 2               ; src/prelude.fth:21:21 in `0=`
0003F0r 2               @OPCODE_155:   ; [c64_ir] JumpTarget(43)
0003F0r 2               
0003F0r 2               @target_44:
0003F0r 2               
0003F0r 2               ; src/prelude.fth:21:26 in `0=`
0003F0r 2               @OPCODE_157:   ; [c64_ir] InlineExit
0003F0r 2                   ; inline exit
0003F0r 2  68               pla
0003F1r 2  68               pla
0003F2r 2               
0003F2r 2               @target_45:
0003F2r 2               
0003F2r 2               ; src/prelude.fth:22:13 in `=`
0003F2r 2               @OPCODE_159:   ; [c64_ir] InlineExit
0003F2r 2                   ; inline exit
0003F2r 2  68               pla
0003F3r 2  68               pla
0003F4r 2               
0003F4r 2               @target_46:
0003F4r 2               
0003F4r 2               ; src/prelude.fth:33:37 in `loopimpl`
0003F4r 2               @OPCODE_161:   ; [c64_ir] InlineCall("swap")
0003F4r 2                   ; inline call(swap)
0003F4r 2  48               pha
0003F5r 2  48               pha
0003F6r 2               
0003F6r 2               @target_47:
0003F6r 2               
0003F6r 2               ; src/prelude.fth:3:10 in `swap`
0003F6r 2               @OPCODE_163:   ; [c64_ir] AltPush
0003F6r 2  CA               dex
0003F7r 2  CA               dex
0003F8r 2  B5 03            lda $03,x
0003FAr 2  48               pha
0003FBr 2  B5 02            lda $02,x
0003FDr 2  48               pha
0003FEr 2               
0003FEr 2               ; src/prelude.fth:3:13 in `swap`
0003FEr 2               @OPCODE_164:   ; [c64_ir] TempStore
0003FEr 2  CA               dex
0003FFr 2  CA               dex
000400r 2  B5 03            lda $03,x
000402r 2  85 96            sta TEMP_PAX2
000404r 2  B5 02            lda $02,x
000406r 2  85 95            sta TEMP_PAX1
000408r 2               
000408r 2               ; src/prelude.fth:3:19 in `swap`
000408r 2               @OPCODE_165:   ; [c64_ir] AltPop
000408r 2  E8               inx
000409r 2  E8               inx
00040Ar 2  68               pla
00040Br 2  95 00            sta $00,x
00040Dr 2  68               pla
00040Er 2  95 01            sta $01,x
000410r 2               
000410r 2               ; src/prelude.fth:3:22 in `swap`
000410r 2               @OPCODE_166:   ; [c64_ir] TempLoad
000410r 2  E8               inx
000411r 2  E8               inx
000412r 2  A5 95            lda TEMP_PAX1
000414r 2  95 00            sta $00,x
000416r 2  A5 96            lda TEMP_PAX2
000418r 2  95 01            sta $01,x
00041Ar 2               
00041Ar 2               ; src/prelude.fth:3:28 in `swap`
00041Ar 2               @OPCODE_167:   ; [c64_ir] InlineExit
00041Ar 2                   ; inline exit
00041Ar 2  68               pla
00041Br 2  68               pla
00041Cr 2               
00041Cr 2               @target_48:
00041Cr 2               
00041Cr 2               ; src/prelude.fth:33:42 in `loopimpl`
00041Cr 2               @OPCODE_169:   ; [c64_ir] AltPush
00041Cr 2  CA               dex
00041Dr 2  CA               dex
00041Er 2  B5 03            lda $03,x
000420r 2  48               pha
000421r 2  B5 02            lda $02,x
000423r 2  48               pha
000424r 2               
000424r 2               ; src/prelude.fth:33:45 in `loopimpl`
000424r 2               @OPCODE_170:   ; [c64_ir] InlineExit
000424r 2                   ; inline exit
000424r 2  68               pla
000425r 2  68               pla
000426r 2               
000426r 2               @target_49:
000426r 2               
000426r 2               ; snake.fth:61:9 in `draw-background`
000426r 2               @OPCODE_172:   ; [c64_ir] LoopIf0(18)
000426r 2  CA               dex
000427r 2  CA               dex
000428r 2  B5 02            lda $02,x
00042Ar 2  15 03            ora $03,x
00042Cr 2  D0 03            bne *+5
00042Er 2  4C rr rr         jmp @target_18
000431r 2               
000431r 2               @target_50:
000431r 2               
000431r 2               ; snake.fth:61:9 in `draw-background`
000431r 2               @OPCODE_174:   ; [c64_ir] AltPop
000431r 2  E8               inx
000432r 2  E8               inx
000433r 2  68               pla
000434r 2  95 00            sta $00,x
000436r 2  68               pla
000437r 2  95 01            sta $01,x
000439r 2               
000439r 2               ; snake.fth:61:9 in `draw-background`
000439r 2               @OPCODE_175:   ; [c64_ir] Drop
000439r 2  CA               dex
00043Ar 2  CA               dex
00043Br 2               
00043Br 2               ; snake.fth:61:9 in `draw-background`
00043Br 2               @OPCODE_176:   ; [c64_ir] AltPop
00043Br 2  E8               inx
00043Cr 2  E8               inx
00043Dr 2  68               pla
00043Er 2  95 00            sta $00,x
000440r 2  68               pla
000441r 2  95 01            sta $01,x
000443r 2               
000443r 2               ; snake.fth:61:9 in `draw-background`
000443r 2               @OPCODE_177:   ; [c64_ir] Drop
000443r 2  CA               dex
000444r 2  CA               dex
000445r 2               
000445r 2               ; snake.fth:62:9 in `draw-background`
000445r 2               @OPCODE_178:   ; [c64_ir] PushLiteral(40)
000445r 2  E8               inx
000446r 2  E8               inx
000447r 2  A9 28            lda #40
000449r 2  95 00            sta $00,x
00044Br 2  A9 00            lda #0
00044Dr 2  95 01            sta $01,x
00044Fr 2               
00044Fr 2               ; snake.fth:62:15 in `draw-background`
00044Fr 2               @OPCODE_179:   ; [c64_ir] Add
00044Fr 2                   ; 21
00044Fr 2  CA               dex
000450r 2  CA               dex
000451r 2  18               clc
000452r 2  B5 00            lda $00,x
000454r 2  75 02            adc $02,x
000456r 2  95 00            sta $00,x
000458r 2  B5 01            lda $01,x
00045Ar 2  75 03            adc $03,x
00045Cr 2  95 01            sta $01,x
00045Er 2               
00045Er 2               ; snake.fth:63:4 in `draw-background`
00045Er 2               @OPCODE_180:   ; [c64_ir] InlineCall("loopimpl")
00045Er 2                   ; inline call(loopimpl)
00045Er 2  48               pha
00045Fr 2  48               pha
000460r 2               
000460r 2               @target_51:
000460r 2               
000460r 2               ; src/prelude.fth:33:12 in `loopimpl`
000460r 2               @OPCODE_182:   ; [c64_ir] AltPop
000460r 2  E8               inx
000461r 2  E8               inx
000462r 2  68               pla
000463r 2  95 00            sta $00,x
000465r 2  68               pla
000466r 2  95 01            sta $01,x
000468r 2               
000468r 2               ; src/prelude.fth:33:15 in `loopimpl`
000468r 2               @OPCODE_183:   ; [c64_ir] AltPop
000468r 2  E8               inx
000469r 2  E8               inx
00046Ar 2  68               pla
00046Br 2  95 00            sta $00,x
00046Dr 2  68               pla
00046Er 2  95 01            sta $01,x
000470r 2               
000470r 2               ; src/prelude.fth:33:18 in `loopimpl`
000470r 2               @OPCODE_184:   ; [c64_ir] AltPop
000470r 2  E8               inx
000471r 2  E8               inx
000472r 2  68               pla
000473r 2  95 00            sta $00,x
000475r 2  68               pla
000476r 2  95 01            sta $01,x
000478r 2               
000478r 2               ; src/prelude.fth:33:21 in `loopimpl`
000478r 2               @OPCODE_185:   ; [c64_ir] InlineCall("1+")
000478r 2                   ; inline call(1+)
000478r 2  48               pha
000479r 2  48               pha
00047Ar 2               
00047Ar 2               @target_52:
00047Ar 2               
00047Ar 2               ; src/prelude.fth:18:8 in `1+`
00047Ar 2               @OPCODE_187:   ; [c64_ir] PushLiteral(1)
00047Ar 2  E8               inx
00047Br 2  E8               inx
00047Cr 2  A9 01            lda #1
00047Er 2  95 00            sta $00,x
000480r 2  A9 00            lda #0
000482r 2  95 01            sta $01,x
000484r 2               
000484r 2               ; src/prelude.fth:18:10 in `1+`
000484r 2               @OPCODE_188:   ; [c64_ir] Add
000484r 2                   ; 21
000484r 2  CA               dex
000485r 2  CA               dex
000486r 2  18               clc
000487r 2  B5 00            lda $00,x
000489r 2  75 02            adc $02,x
00048Br 2  95 00            sta $00,x
00048Dr 2  B5 01            lda $01,x
00048Fr 2  75 03            adc $03,x
000491r 2  95 01            sta $01,x
000493r 2               
000493r 2               ; src/prelude.fth:18:12 in `1+`
000493r 2               @OPCODE_189:   ; [c64_ir] InlineExit
000493r 2                   ; inline exit
000493r 2  68               pla
000494r 2  68               pla
000495r 2               
000495r 2               @target_53:
000495r 2               
000495r 2               ; src/prelude.fth:33:24 in `loopimpl`
000495r 2               @OPCODE_191:   ; [c64_ir] InlineCall("2dup")
000495r 2                   ; inline call(2dup)
000495r 2  48               pha
000496r 2  48               pha
000497r 2               
000497r 2               @target_54:
000497r 2               
000497r 2               ; src/prelude.fth:8:10 in `2dup`
000497r 2               @OPCODE_193:   ; [c64_ir] InlineCall("over")
000497r 2                   ; inline call(over)
000497r 2  48               pha
000498r 2  48               pha
000499r 2               
000499r 2               @target_55:
000499r 2               
000499r 2               ; src/prelude.fth:4:10 in `over`
000499r 2               @OPCODE_195:   ; [c64_ir] AltPush
000499r 2  CA               dex
00049Ar 2  CA               dex
00049Br 2  B5 03            lda $03,x
00049Dr 2  48               pha
00049Er 2  B5 02            lda $02,x
0004A0r 2  48               pha
0004A1r 2               
0004A1r 2               ; src/prelude.fth:4:13 in `over`
0004A1r 2               @OPCODE_196:   ; [c64_ir] TempStore
0004A1r 2  CA               dex
0004A2r 2  CA               dex
0004A3r 2  B5 03            lda $03,x
0004A5r 2  85 96            sta TEMP_PAX2
0004A7r 2  B5 02            lda $02,x
0004A9r 2  85 95            sta TEMP_PAX1
0004ABr 2               
0004ABr 2               ; src/prelude.fth:4:19 in `over`
0004ABr 2               @OPCODE_197:   ; [c64_ir] TempLoad
0004ABr 2  E8               inx
0004ACr 2  E8               inx
0004ADr 2  A5 95            lda TEMP_PAX1
0004AFr 2  95 00            sta $00,x
0004B1r 2  A5 96            lda TEMP_PAX2
0004B3r 2  95 01            sta $01,x
0004B5r 2               
0004B5r 2               ; src/prelude.fth:4:25 in `over`
0004B5r 2               @OPCODE_198:   ; [c64_ir] AltPop
0004B5r 2  E8               inx
0004B6r 2  E8               inx
0004B7r 2  68               pla
0004B8r 2  95 00            sta $00,x
0004BAr 2  68               pla
0004BBr 2  95 01            sta $01,x
0004BDr 2               
0004BDr 2               ; src/prelude.fth:4:28 in `over`
0004BDr 2               @OPCODE_199:   ; [c64_ir] TempLoad
0004BDr 2  E8               inx
0004BEr 2  E8               inx
0004BFr 2  A5 95            lda TEMP_PAX1
0004C1r 2  95 00            sta $00,x
0004C3r 2  A5 96            lda TEMP_PAX2
0004C5r 2  95 01            sta $01,x
0004C7r 2               
0004C7r 2               ; src/prelude.fth:4:34 in `over`
0004C7r 2               @OPCODE_200:   ; [c64_ir] InlineExit
0004C7r 2                   ; inline exit
0004C7r 2  68               pla
0004C8r 2  68               pla
0004C9r 2               
0004C9r 2               @target_56:
0004C9r 2               
0004C9r 2               ; src/prelude.fth:8:15 in `2dup`
0004C9r 2               @OPCODE_202:   ; [c64_ir] InlineCall("over")
0004C9r 2                   ; inline call(over)
0004C9r 2  48               pha
0004CAr 2  48               pha
0004CBr 2               
0004CBr 2               @target_57:
0004CBr 2               
0004CBr 2               ; src/prelude.fth:4:10 in `over`
0004CBr 2               @OPCODE_204:   ; [c64_ir] AltPush
0004CBr 2  CA               dex
0004CCr 2  CA               dex
0004CDr 2  B5 03            lda $03,x
0004CFr 2  48               pha
0004D0r 2  B5 02            lda $02,x
0004D2r 2  48               pha
0004D3r 2               
0004D3r 2               ; src/prelude.fth:4:13 in `over`
0004D3r 2               @OPCODE_205:   ; [c64_ir] TempStore
0004D3r 2  CA               dex
0004D4r 2  CA               dex
0004D5r 2  B5 03            lda $03,x
0004D7r 2  85 96            sta TEMP_PAX2
0004D9r 2  B5 02            lda $02,x
0004DBr 2  85 95            sta TEMP_PAX1
0004DDr 2               
0004DDr 2               ; src/prelude.fth:4:19 in `over`
0004DDr 2               @OPCODE_206:   ; [c64_ir] TempLoad
0004DDr 2  E8               inx
0004DEr 2  E8               inx
0004DFr 2  A5 95            lda TEMP_PAX1
0004E1r 2  95 00            sta $00,x
0004E3r 2  A5 96            lda TEMP_PAX2
0004E5r 2  95 01            sta $01,x
0004E7r 2               
0004E7r 2               ; src/prelude.fth:4:25 in `over`
0004E7r 2               @OPCODE_207:   ; [c64_ir] AltPop
0004E7r 2  E8               inx
0004E8r 2  E8               inx
0004E9r 2  68               pla
0004EAr 2  95 00            sta $00,x
0004ECr 2  68               pla
0004EDr 2  95 01            sta $01,x
0004EFr 2               
0004EFr 2               ; src/prelude.fth:4:28 in `over`
0004EFr 2               @OPCODE_208:   ; [c64_ir] TempLoad
0004EFr 2  E8               inx
0004F0r 2  E8               inx
0004F1r 2  A5 95            lda TEMP_PAX1
0004F3r 2  95 00            sta $00,x
0004F5r 2  A5 96            lda TEMP_PAX2
0004F7r 2  95 01            sta $01,x
0004F9r 2               
0004F9r 2               ; src/prelude.fth:4:34 in `over`
0004F9r 2               @OPCODE_209:   ; [c64_ir] InlineExit
0004F9r 2                   ; inline exit
0004F9r 2  68               pla
0004FAr 2  68               pla
0004FBr 2               
0004FBr 2               @target_58:
0004FBr 2               
0004FBr 2               ; src/prelude.fth:8:20 in `2dup`
0004FBr 2               @OPCODE_211:   ; [c64_ir] InlineExit
0004FBr 2                   ; inline exit
0004FBr 2  68               pla
0004FCr 2  68               pla
0004FDr 2               
0004FDr 2               @target_59:
0004FDr 2               
0004FDr 2               ; src/prelude.fth:33:29 in `loopimpl`
0004FDr 2               @OPCODE_213:   ; [c64_ir] AltPush
0004FDr 2  CA               dex
0004FEr 2  CA               dex
0004FFr 2  B5 03            lda $03,x
000501r 2  48               pha
000502r 2  B5 02            lda $02,x
000504r 2  48               pha
000505r 2               
000505r 2               ; src/prelude.fth:33:32 in `loopimpl`
000505r 2               @OPCODE_214:   ; [c64_ir] AltPush
000505r 2  CA               dex
000506r 2  CA               dex
000507r 2  B5 03            lda $03,x
000509r 2  48               pha
00050Ar 2  B5 02            lda $02,x
00050Cr 2  48               pha
00050Dr 2               
00050Dr 2               ; src/prelude.fth:33:35 in `loopimpl`
00050Dr 2               @OPCODE_215:   ; [c64_ir] InlineCall("=")
00050Dr 2                   ; inline call(=)
00050Dr 2  48               pha
00050Er 2  48               pha
00050Fr 2               
00050Fr 2               @target_60:
00050Fr 2               
00050Fr 2               ; src/prelude.fth:22:8 in `=`
00050Fr 2               @OPCODE_217:   ; [c64_ir] InlineCall("-")
00050Fr 2                   ; inline call(-)
00050Fr 2  48               pha
000510r 2  48               pha
000511r 2               
000511r 2               @target_61:
000511r 2               
000511r 2               ; src/prelude.fth:16:12 in `-`
000511r 2               @OPCODE_219:   ; [c64_ir] InlineCall("negate")
000511r 2                   ; inline call(negate)
000511r 2  48               pha
000512r 2  48               pha
000513r 2               
000513r 2               @target_62:
000513r 2               
000513r 2               ; src/prelude.fth:15:12 in `negate`
000513r 2               @OPCODE_221:   ; [c64_ir] InlineCall("invert")
000513r 2                   ; inline call(invert)
000513r 2  48               pha
000514r 2  48               pha
000515r 2               
000515r 2               @target_63:
000515r 2               
000515r 2               ; src/prelude.fth:14:12 in `invert`
000515r 2               @OPCODE_223:   ; [c64_ir] PushLiteral(-1)
000515r 2  E8               inx
000516r 2  E8               inx
000517r 2  A9 FF            lda #255
000519r 2  95 00            sta $00,x
00051Br 2  A9 FF            lda #255
00051Dr 2  95 01            sta $01,x
00051Fr 2               
00051Fr 2               ; src/prelude.fth:14:15 in `invert`
00051Fr 2               @OPCODE_224:   ; [c64_ir] Nand
00051Fr 2                   ; 26
00051Fr 2  CA               dex
000520r 2  CA               dex
000521r 2  B5 00            lda $00,x
000523r 2  35 02            and $02,x
000525r 2  49 FF            eor #$ff
000527r 2  95 00            sta $00,x
000529r 2  B5 01            lda $01,x
00052Br 2  35 03            and $03,x
00052Dr 2  49 FF            eor #$ff
00052Fr 2  95 01            sta $01,x
000531r 2               
000531r 2               ; src/prelude.fth:14:20 in `invert`
000531r 2               @OPCODE_225:   ; [c64_ir] InlineExit
000531r 2                   ; inline exit
000531r 2  68               pla
000532r 2  68               pla
000533r 2               
000533r 2               @target_64:
000533r 2               
000533r 2               ; src/prelude.fth:15:19 in `negate`
000533r 2               @OPCODE_227:   ; [c64_ir] PushLiteral(1)
000533r 2  E8               inx
000534r 2  E8               inx
000535r 2  A9 01            lda #1
000537r 2  95 00            sta $00,x
000539r 2  A9 00            lda #0
00053Br 2  95 01            sta $01,x
00053Dr 2               
00053Dr 2               ; src/prelude.fth:15:21 in `negate`
00053Dr 2               @OPCODE_228:   ; [c64_ir] Add
00053Dr 2                   ; 21
00053Dr 2  CA               dex
00053Er 2  CA               dex
00053Fr 2  18               clc
000540r 2  B5 00            lda $00,x
000542r 2  75 02            adc $02,x
000544r 2  95 00            sta $00,x
000546r 2  B5 01            lda $01,x
000548r 2  75 03            adc $03,x
00054Ar 2  95 01            sta $01,x
00054Cr 2               
00054Cr 2               ; src/prelude.fth:15:23 in `negate`
00054Cr 2               @OPCODE_229:   ; [c64_ir] InlineExit
00054Cr 2                   ; inline exit
00054Cr 2  68               pla
00054Dr 2  68               pla
00054Er 2               
00054Er 2               @target_65:
00054Er 2               
00054Er 2               ; src/prelude.fth:16:19 in `-`
00054Er 2               @OPCODE_231:   ; [c64_ir] Add
00054Er 2                   ; 21
00054Er 2  CA               dex
00054Fr 2  CA               dex
000550r 2  18               clc
000551r 2  B5 00            lda $00,x
000553r 2  75 02            adc $02,x
000555r 2  95 00            sta $00,x
000557r 2  B5 01            lda $01,x
000559r 2  75 03            adc $03,x
00055Br 2  95 01            sta $01,x
00055Dr 2               
00055Dr 2               ; src/prelude.fth:16:21 in `-`
00055Dr 2               @OPCODE_232:   ; [c64_ir] InlineExit
00055Dr 2                   ; inline exit
00055Dr 2  68               pla
00055Er 2  68               pla
00055Fr 2               
00055Fr 2               @target_66:
00055Fr 2               
00055Fr 2               ; src/prelude.fth:22:10 in `=`
00055Fr 2               @OPCODE_234:   ; [c64_ir] InlineCall("0=")
00055Fr 2                   ; inline call(0=)
00055Fr 2  48               pha
000560r 2  48               pha
000561r 2               
000561r 2               @target_67:
000561r 2               
000561r 2               ; src/prelude.fth:21:8 in `0=`
000561r 2               @OPCODE_236:   ; [c64_ir] JumpIf0(69)
000561r 2  CA               dex
000562r 2  CA               dex
000563r 2  B5 02            lda $02,x
000565r 2  15 03            ora $03,x
000567r 2  D0 03            bne *+5
000569r 2  4C rr rr         jmp @target_69
00056Cr 2               
00056Cr 2               @target_68:
00056Cr 2               
00056Cr 2               ; src/prelude.fth:21:11 in `0=`
00056Cr 2               @OPCODE_238:   ; [c64_ir] PushLiteral(0)
00056Cr 2  E8               inx
00056Dr 2  E8               inx
00056Er 2  A9 00            lda #0
000570r 2  95 00            sta $00,x
000572r 2  A9 00            lda #0
000574r 2  95 01            sta $01,x
000576r 2               
000576r 2               ; src/prelude.fth:21:13 in `0=`
000576r 2               @OPCODE_239:   ; [c64_ir] JumpElse(70)
000576r 2  4C rr rr         jmp @target_70
000579r 2               
000579r 2               @target_69:
000579r 2               
000579r 2               ; src/prelude.fth:21:18 in `0=`
000579r 2               @OPCODE_241:   ; [c64_ir] PushLiteral(-1)
000579r 2  E8               inx
00057Ar 2  E8               inx
00057Br 2  A9 FF            lda #255
00057Dr 2  95 00            sta $00,x
00057Fr 2  A9 FF            lda #255
000581r 2  95 01            sta $01,x
000583r 2               
000583r 2               ; src/prelude.fth:21:21 in `0=`
000583r 2               @OPCODE_242:   ; [c64_ir] JumpTarget(69)
000583r 2               
000583r 2               @target_70:
000583r 2               
000583r 2               ; src/prelude.fth:21:26 in `0=`
000583r 2               @OPCODE_244:   ; [c64_ir] InlineExit
000583r 2                   ; inline exit
000583r 2  68               pla
000584r 2  68               pla
000585r 2               
000585r 2               @target_71:
000585r 2               
000585r 2               ; src/prelude.fth:22:13 in `=`
000585r 2               @OPCODE_246:   ; [c64_ir] InlineExit
000585r 2                   ; inline exit
000585r 2  68               pla
000586r 2  68               pla
000587r 2               
000587r 2               @target_72:
000587r 2               
000587r 2               ; src/prelude.fth:33:37 in `loopimpl`
000587r 2               @OPCODE_248:   ; [c64_ir] InlineCall("swap")
000587r 2                   ; inline call(swap)
000587r 2  48               pha
000588r 2  48               pha
000589r 2               
000589r 2               @target_73:
000589r 2               
000589r 2               ; src/prelude.fth:3:10 in `swap`
000589r 2               @OPCODE_250:   ; [c64_ir] AltPush
000589r 2  CA               dex
00058Ar 2  CA               dex
00058Br 2  B5 03            lda $03,x
00058Dr 2  48               pha
00058Er 2  B5 02            lda $02,x
000590r 2  48               pha
000591r 2               
000591r 2               ; src/prelude.fth:3:13 in `swap`
000591r 2               @OPCODE_251:   ; [c64_ir] TempStore
000591r 2  CA               dex
000592r 2  CA               dex
000593r 2  B5 03            lda $03,x
000595r 2  85 96            sta TEMP_PAX2
000597r 2  B5 02            lda $02,x
000599r 2  85 95            sta TEMP_PAX1
00059Br 2               
00059Br 2               ; src/prelude.fth:3:19 in `swap`
00059Br 2               @OPCODE_252:   ; [c64_ir] AltPop
00059Br 2  E8               inx
00059Cr 2  E8               inx
00059Dr 2  68               pla
00059Er 2  95 00            sta $00,x
0005A0r 2  68               pla
0005A1r 2  95 01            sta $01,x
0005A3r 2               
0005A3r 2               ; src/prelude.fth:3:22 in `swap`
0005A3r 2               @OPCODE_253:   ; [c64_ir] TempLoad
0005A3r 2  E8               inx
0005A4r 2  E8               inx
0005A5r 2  A5 95            lda TEMP_PAX1
0005A7r 2  95 00            sta $00,x
0005A9r 2  A5 96            lda TEMP_PAX2
0005ABr 2  95 01            sta $01,x
0005ADr 2               
0005ADr 2               ; src/prelude.fth:3:28 in `swap`
0005ADr 2               @OPCODE_254:   ; [c64_ir] InlineExit
0005ADr 2                   ; inline exit
0005ADr 2  68               pla
0005AEr 2  68               pla
0005AFr 2               
0005AFr 2               @target_74:
0005AFr 2               
0005AFr 2               ; src/prelude.fth:33:42 in `loopimpl`
0005AFr 2               @OPCODE_256:   ; [c64_ir] AltPush
0005AFr 2  CA               dex
0005B0r 2  CA               dex
0005B1r 2  B5 03            lda $03,x
0005B3r 2  48               pha
0005B4r 2  B5 02            lda $02,x
0005B6r 2  48               pha
0005B7r 2               
0005B7r 2               ; src/prelude.fth:33:45 in `loopimpl`
0005B7r 2               @OPCODE_257:   ; [c64_ir] InlineExit
0005B7r 2                   ; inline exit
0005B7r 2  68               pla
0005B8r 2  68               pla
0005B9r 2               
0005B9r 2               @target_75:
0005B9r 2               
0005B9r 2               ; snake.fth:63:4 in `draw-background`
0005B9r 2               @OPCODE_259:   ; [c64_ir] LoopIf0(17)
0005B9r 2  CA               dex
0005BAr 2  CA               dex
0005BBr 2  B5 02            lda $02,x
0005BDr 2  15 03            ora $03,x
0005BFr 2  D0 03            bne *+5
0005C1r 2  4C rr rr         jmp @target_17
0005C4r 2               
0005C4r 2               @target_76:
0005C4r 2               
0005C4r 2               ; snake.fth:63:4 in `draw-background`
0005C4r 2               @OPCODE_261:   ; [c64_ir] AltPop
0005C4r 2  E8               inx
0005C5r 2  E8               inx
0005C6r 2  68               pla
0005C7r 2  95 00            sta $00,x
0005C9r 2  68               pla
0005CAr 2  95 01            sta $01,x
0005CCr 2               
0005CCr 2               ; snake.fth:63:4 in `draw-background`
0005CCr 2               @OPCODE_262:   ; [c64_ir] Drop
0005CCr 2  CA               dex
0005CDr 2  CA               dex
0005CEr 2               
0005CEr 2               ; snake.fth:63:4 in `draw-background`
0005CEr 2               @OPCODE_263:   ; [c64_ir] AltPop
0005CEr 2  E8               inx
0005CFr 2  E8               inx
0005D0r 2  68               pla
0005D1r 2  95 00            sta $00,x
0005D3r 2  68               pla
0005D4r 2  95 01            sta $01,x
0005D6r 2               
0005D6r 2               ; snake.fth:63:4 in `draw-background`
0005D6r 2               @OPCODE_264:   ; [c64_ir] Drop
0005D6r 2  CA               dex
0005D7r 2  CA               dex
0005D8r 2               
0005D8r 2               ; snake.fth:64:4 in `draw-background`
0005D8r 2               @OPCODE_265:   ; [c64_ir] Drop
0005D8r 2  CA               dex
0005D9r 2  CA               dex
0005DAr 2               
0005DAr 2               ; snake.fth:65:4 in `draw-background`
0005DAr 2               @OPCODE_266:   ; [c64_ir] InlineExit
0005DAr 2                   ; inline exit
0005DAr 2  68               pla
0005DBr 2  68               pla
0005DCr 2               
0005DCr 2               @target_77:
0005DCr 2               
0005DCr 2               ; snake.fth:117:3 in `initialize`
0005DCr 2               @OPCODE_268:   ; [c64_ir] InlineCall("draw-walls")
0005DCr 2                   ; inline call(draw-walls)
0005DCr 2  48               pha
0005DDr 2  48               pha
0005DEr 2               
0005DEr 2               @target_78:
0005DEr 2               
0005DEr 2               ; snake.fth:69:5 in `draw-walls`
0005DEr 2               @OPCODE_270:   ; [c64_ir] PushLiteral(40)
0005DEr 2  E8               inx
0005DFr 2  E8               inx
0005E0r 2  A9 28            lda #40
0005E2r 2  95 00            sta $00,x
0005E4r 2  A9 00            lda #0
0005E6r 2  95 01            sta $01,x
0005E8r 2               
0005E8r 2               ; snake.fth:69:11 in `draw-walls`
0005E8r 2               @OPCODE_271:   ; [c64_ir] PushLiteral(25)
0005E8r 2  E8               inx
0005E9r 2  E8               inx
0005EAr 2  A9 19            lda #25
0005ECr 2  95 00            sta $00,x
0005EEr 2  A9 00            lda #0
0005F0r 2  95 01            sta $01,x
0005F2r 2               
0005F2r 2               ; snake.fth:69:18 in `draw-walls`
0005F2r 2               @OPCODE_272:   ; [c64_ir] PushLiteral(1)
0005F2r 2  E8               inx
0005F3r 2  E8               inx
0005F4r 2  A9 01            lda #1
0005F6r 2  95 00            sta $00,x
0005F8r 2  A9 00            lda #0
0005FAr 2  95 01            sta $01,x
0005FCr 2               
0005FCr 2               ; snake.fth:69:20 in `draw-walls`
0005FCr 2               @OPCODE_273:   ; [c64_ir] InlineCall("-")
0005FCr 2                   ; inline call(-)
0005FCr 2  48               pha
0005FDr 2  48               pha
0005FEr 2               
0005FEr 2               @target_79:
0005FEr 2               
0005FEr 2               ; src/prelude.fth:16:12 in `-`
0005FEr 2               @OPCODE_275:   ; [c64_ir] InlineCall("negate")
0005FEr 2                   ; inline call(negate)
0005FEr 2  48               pha
0005FFr 2  48               pha
000600r 2               
000600r 2               @target_80:
000600r 2               
000600r 2               ; src/prelude.fth:15:12 in `negate`
000600r 2               @OPCODE_277:   ; [c64_ir] InlineCall("invert")
000600r 2                   ; inline call(invert)
000600r 2  48               pha
000601r 2  48               pha
000602r 2               
000602r 2               @target_81:
000602r 2               
000602r 2               ; src/prelude.fth:14:12 in `invert`
000602r 2               @OPCODE_279:   ; [c64_ir] PushLiteral(-1)
000602r 2  E8               inx
000603r 2  E8               inx
000604r 2  A9 FF            lda #255
000606r 2  95 00            sta $00,x
000608r 2  A9 FF            lda #255
00060Ar 2  95 01            sta $01,x
00060Cr 2               
00060Cr 2               ; src/prelude.fth:14:15 in `invert`
00060Cr 2               @OPCODE_280:   ; [c64_ir] Nand
00060Cr 2                   ; 26
00060Cr 2  CA               dex
00060Dr 2  CA               dex
00060Er 2  B5 00            lda $00,x
000610r 2  35 02            and $02,x
000612r 2  49 FF            eor #$ff
000614r 2  95 00            sta $00,x
000616r 2  B5 01            lda $01,x
000618r 2  35 03            and $03,x
00061Ar 2  49 FF            eor #$ff
00061Cr 2  95 01            sta $01,x
00061Er 2               
00061Er 2               ; src/prelude.fth:14:20 in `invert`
00061Er 2               @OPCODE_281:   ; [c64_ir] InlineExit
00061Er 2                   ; inline exit
00061Er 2  68               pla
00061Fr 2  68               pla
000620r 2               
000620r 2               @target_82:
000620r 2               
000620r 2               ; src/prelude.fth:15:19 in `negate`
000620r 2               @OPCODE_283:   ; [c64_ir] PushLiteral(1)
000620r 2  E8               inx
000621r 2  E8               inx
000622r 2  A9 01            lda #1
000624r 2  95 00            sta $00,x
000626r 2  A9 00            lda #0
000628r 2  95 01            sta $01,x
00062Ar 2               
00062Ar 2               ; src/prelude.fth:15:21 in `negate`
00062Ar 2               @OPCODE_284:   ; [c64_ir] Add
00062Ar 2                   ; 21
00062Ar 2  CA               dex
00062Br 2  CA               dex
00062Cr 2  18               clc
00062Dr 2  B5 00            lda $00,x
00062Fr 2  75 02            adc $02,x
000631r 2  95 00            sta $00,x
000633r 2  B5 01            lda $01,x
000635r 2  75 03            adc $03,x
000637r 2  95 01            sta $01,x
000639r 2               
000639r 2               ; src/prelude.fth:15:23 in `negate`
000639r 2               @OPCODE_285:   ; [c64_ir] InlineExit
000639r 2                   ; inline exit
000639r 2  68               pla
00063Ar 2  68               pla
00063Br 2               
00063Br 2               @target_83:
00063Br 2               
00063Br 2               ; src/prelude.fth:16:19 in `-`
00063Br 2               @OPCODE_287:   ; [c64_ir] Add
00063Br 2                   ; 21
00063Br 2  CA               dex
00063Cr 2  CA               dex
00063Dr 2  18               clc
00063Er 2  B5 00            lda $00,x
000640r 2  75 02            adc $02,x
000642r 2  95 00            sta $00,x
000644r 2  B5 01            lda $01,x
000646r 2  75 03            adc $03,x
000648r 2  95 01            sta $01,x
00064Ar 2               
00064Ar 2               ; src/prelude.fth:16:21 in `-`
00064Ar 2               @OPCODE_288:   ; [c64_ir] InlineExit
00064Ar 2                   ; inline exit
00064Ar 2  68               pla
00064Br 2  68               pla
00064Cr 2               
00064Cr 2               @target_84:
00064Cr 2               
00064Cr 2               ; snake.fth:69:22 in `draw-walls`
00064Cr 2               @OPCODE_290:   ; [c64_ir] InlineCall("*")
00064Cr 2                   ; inline call(*)
00064Cr 2  48               pha
00064Dr 2  48               pha
00064Er 2               
00064Er 2               @target_85:
00064Er 2               
00064Er 2               ; src/prelude.fth:44:5 in `*`
00064Er 2               @OPCODE_292:   ; [c64_ir] AltPush
00064Er 2  CA               dex
00064Fr 2  CA               dex
000650r 2  B5 03            lda $03,x
000652r 2  48               pha
000653r 2  B5 02            lda $02,x
000655r 2  48               pha
000656r 2               
000656r 2               ; src/prelude.fth:44:8 in `*`
000656r 2               @OPCODE_293:   ; [c64_ir] PushLiteral(0)
000656r 2  E8               inx
000657r 2  E8               inx
000658r 2  A9 00            lda #0
00065Ar 2  95 00            sta $00,x
00065Cr 2  A9 00            lda #0
00065Er 2  95 01            sta $01,x
000660r 2               
000660r 2               ; src/prelude.fth:44:10 in `*`
000660r 2               @OPCODE_294:   ; [c64_ir] AltPop
000660r 2  E8               inx
000661r 2  E8               inx
000662r 2  68               pla
000663r 2  95 00            sta $00,x
000665r 2  68               pla
000666r 2  95 01            sta $01,x
000668r 2               
000668r 2               ; src/prelude.fth:44:13 in `*`
000668r 2               @OPCODE_295:   ; [c64_ir] PushLiteral(0)
000668r 2  E8               inx
000669r 2  E8               inx
00066Ar 2  A9 00            lda #0
00066Cr 2  95 00            sta $00,x
00066Er 2  A9 00            lda #0
000670r 2  95 01            sta $01,x
000672r 2               
000672r 2               ; src/prelude.fth:44:15 in `*`
000672r 2               @OPCODE_296:   ; [c64_ir] AltPush
000672r 2  CA               dex
000673r 2  CA               dex
000674r 2  B5 03            lda $03,x
000676r 2  48               pha
000677r 2  B5 02            lda $02,x
000679r 2  48               pha
00067Ar 2               
00067Ar 2               ; src/prelude.fth:44:15 in `*`
00067Ar 2               @OPCODE_297:   ; [c64_ir] AltPush
00067Ar 2  CA               dex
00067Br 2  CA               dex
00067Cr 2  B5 03            lda $03,x
00067Er 2  48               pha
00067Fr 2  B5 02            lda $02,x
000681r 2  48               pha
000682r 2               
000682r 2               ; src/prelude.fth:44:15 in `*`
000682r 2               @OPCODE_298:   ; [c64_ir] LoopTarget(85)
000682r 2               
000682r 2               @target_86:
000682r 2               
000682r 2               ; src/prelude.fth:44:18 in `*`
000682r 2               @OPCODE_300:   ; [c64_ir] InlineCall("over")
000682r 2                   ; inline call(over)
000682r 2  48               pha
000683r 2  48               pha
000684r 2               
000684r 2               @target_87:
000684r 2               
000684r 2               ; src/prelude.fth:4:10 in `over`
000684r 2               @OPCODE_302:   ; [c64_ir] AltPush
000684r 2  CA               dex
000685r 2  CA               dex
000686r 2  B5 03            lda $03,x
000688r 2  48               pha
000689r 2  B5 02            lda $02,x
00068Br 2  48               pha
00068Cr 2               
00068Cr 2               ; src/prelude.fth:4:13 in `over`
00068Cr 2               @OPCODE_303:   ; [c64_ir] TempStore
00068Cr 2  CA               dex
00068Dr 2  CA               dex
00068Er 2  B5 03            lda $03,x
000690r 2  85 96            sta TEMP_PAX2
000692r 2  B5 02            lda $02,x
000694r 2  85 95            sta TEMP_PAX1
000696r 2               
000696r 2               ; src/prelude.fth:4:19 in `over`
000696r 2               @OPCODE_304:   ; [c64_ir] TempLoad
000696r 2  E8               inx
000697r 2  E8               inx
000698r 2  A5 95            lda TEMP_PAX1
00069Ar 2  95 00            sta $00,x
00069Cr 2  A5 96            lda TEMP_PAX2
00069Er 2  95 01            sta $01,x
0006A0r 2               
0006A0r 2               ; src/prelude.fth:4:25 in `over`
0006A0r 2               @OPCODE_305:   ; [c64_ir] AltPop
0006A0r 2  E8               inx
0006A1r 2  E8               inx
0006A2r 2  68               pla
0006A3r 2  95 00            sta $00,x
0006A5r 2  68               pla
0006A6r 2  95 01            sta $01,x
0006A8r 2               
0006A8r 2               ; src/prelude.fth:4:28 in `over`
0006A8r 2               @OPCODE_306:   ; [c64_ir] TempLoad
0006A8r 2  E8               inx
0006A9r 2  E8               inx
0006AAr 2  A5 95            lda TEMP_PAX1
0006ACr 2  95 00            sta $00,x
0006AEr 2  A5 96            lda TEMP_PAX2
0006B0r 2  95 01            sta $01,x
0006B2r 2               
0006B2r 2               ; src/prelude.fth:4:34 in `over`
0006B2r 2               @OPCODE_307:   ; [c64_ir] InlineExit
0006B2r 2                   ; inline exit
0006B2r 2  68               pla
0006B3r 2  68               pla
0006B4r 2               
0006B4r 2               @target_88:
0006B4r 2               
0006B4r 2               ; src/prelude.fth:44:23 in `*`
0006B4r 2               @OPCODE_309:   ; [c64_ir] Add
0006B4r 2                   ; 21
0006B4r 2  CA               dex
0006B5r 2  CA               dex
0006B6r 2  18               clc
0006B7r 2  B5 00            lda $00,x
0006B9r 2  75 02            adc $02,x
0006BBr 2  95 00            sta $00,x
0006BDr 2  B5 01            lda $01,x
0006BFr 2  75 03            adc $03,x
0006C1r 2  95 01            sta $01,x
0006C3r 2               
0006C3r 2               ; src/prelude.fth:44:25 in `*`
0006C3r 2               @OPCODE_310:   ; [c64_ir] InlineCall("loopimpl")
0006C3r 2                   ; inline call(loopimpl)
0006C3r 2  48               pha
0006C4r 2  48               pha
0006C5r 2               
0006C5r 2               @target_89:
0006C5r 2               
0006C5r 2               ; src/prelude.fth:33:12 in `loopimpl`
0006C5r 2               @OPCODE_312:   ; [c64_ir] AltPop
0006C5r 2  E8               inx
0006C6r 2  E8               inx
0006C7r 2  68               pla
0006C8r 2  95 00            sta $00,x
0006CAr 2  68               pla
0006CBr 2  95 01            sta $01,x
0006CDr 2               
0006CDr 2               ; src/prelude.fth:33:15 in `loopimpl`
0006CDr 2               @OPCODE_313:   ; [c64_ir] AltPop
0006CDr 2  E8               inx
0006CEr 2  E8               inx
0006CFr 2  68               pla
0006D0r 2  95 00            sta $00,x
0006D2r 2  68               pla
0006D3r 2  95 01            sta $01,x
0006D5r 2               
0006D5r 2               ; src/prelude.fth:33:18 in `loopimpl`
0006D5r 2               @OPCODE_314:   ; [c64_ir] AltPop
0006D5r 2  E8               inx
0006D6r 2  E8               inx
0006D7r 2  68               pla
0006D8r 2  95 00            sta $00,x
0006DAr 2  68               pla
0006DBr 2  95 01            sta $01,x
0006DDr 2               
0006DDr 2               ; src/prelude.fth:33:21 in `loopimpl`
0006DDr 2               @OPCODE_315:   ; [c64_ir] InlineCall("1+")
0006DDr 2                   ; inline call(1+)
0006DDr 2  48               pha
0006DEr 2  48               pha
0006DFr 2               
0006DFr 2               @target_90:
0006DFr 2               
0006DFr 2               ; src/prelude.fth:18:8 in `1+`
0006DFr 2               @OPCODE_317:   ; [c64_ir] PushLiteral(1)
0006DFr 2  E8               inx
0006E0r 2  E8               inx
0006E1r 2  A9 01            lda #1
0006E3r 2  95 00            sta $00,x
0006E5r 2  A9 00            lda #0
0006E7r 2  95 01            sta $01,x
0006E9r 2               
0006E9r 2               ; src/prelude.fth:18:10 in `1+`
0006E9r 2               @OPCODE_318:   ; [c64_ir] Add
0006E9r 2                   ; 21
0006E9r 2  CA               dex
0006EAr 2  CA               dex
0006EBr 2  18               clc
0006ECr 2  B5 00            lda $00,x
0006EEr 2  75 02            adc $02,x
0006F0r 2  95 00            sta $00,x
0006F2r 2  B5 01            lda $01,x
0006F4r 2  75 03            adc $03,x
0006F6r 2  95 01            sta $01,x
0006F8r 2               
0006F8r 2               ; src/prelude.fth:18:12 in `1+`
0006F8r 2               @OPCODE_319:   ; [c64_ir] InlineExit
0006F8r 2                   ; inline exit
0006F8r 2  68               pla
0006F9r 2  68               pla
0006FAr 2               
0006FAr 2               @target_91:
0006FAr 2               
0006FAr 2               ; src/prelude.fth:33:24 in `loopimpl`
0006FAr 2               @OPCODE_321:   ; [c64_ir] InlineCall("2dup")
0006FAr 2                   ; inline call(2dup)
0006FAr 2  48               pha
0006FBr 2  48               pha
0006FCr 2               
0006FCr 2               @target_92:
0006FCr 2               
0006FCr 2               ; src/prelude.fth:8:10 in `2dup`
0006FCr 2               @OPCODE_323:   ; [c64_ir] InlineCall("over")
0006FCr 2                   ; inline call(over)
0006FCr 2  48               pha
0006FDr 2  48               pha
0006FEr 2               
0006FEr 2               @target_93:
0006FEr 2               
0006FEr 2               ; src/prelude.fth:4:10 in `over`
0006FEr 2               @OPCODE_325:   ; [c64_ir] AltPush
0006FEr 2  CA               dex
0006FFr 2  CA               dex
000700r 2  B5 03            lda $03,x
000702r 2  48               pha
000703r 2  B5 02            lda $02,x
000705r 2  48               pha
000706r 2               
000706r 2               ; src/prelude.fth:4:13 in `over`
000706r 2               @OPCODE_326:   ; [c64_ir] TempStore
000706r 2  CA               dex
000707r 2  CA               dex
000708r 2  B5 03            lda $03,x
00070Ar 2  85 96            sta TEMP_PAX2
00070Cr 2  B5 02            lda $02,x
00070Er 2  85 95            sta TEMP_PAX1
000710r 2               
000710r 2               ; src/prelude.fth:4:19 in `over`
000710r 2               @OPCODE_327:   ; [c64_ir] TempLoad
000710r 2  E8               inx
000711r 2  E8               inx
000712r 2  A5 95            lda TEMP_PAX1
000714r 2  95 00            sta $00,x
000716r 2  A5 96            lda TEMP_PAX2
000718r 2  95 01            sta $01,x
00071Ar 2               
00071Ar 2               ; src/prelude.fth:4:25 in `over`
00071Ar 2               @OPCODE_328:   ; [c64_ir] AltPop
00071Ar 2  E8               inx
00071Br 2  E8               inx
00071Cr 2  68               pla
00071Dr 2  95 00            sta $00,x
00071Fr 2  68               pla
000720r 2  95 01            sta $01,x
000722r 2               
000722r 2               ; src/prelude.fth:4:28 in `over`
000722r 2               @OPCODE_329:   ; [c64_ir] TempLoad
000722r 2  E8               inx
000723r 2  E8               inx
000724r 2  A5 95            lda TEMP_PAX1
000726r 2  95 00            sta $00,x
000728r 2  A5 96            lda TEMP_PAX2
00072Ar 2  95 01            sta $01,x
00072Cr 2               
00072Cr 2               ; src/prelude.fth:4:34 in `over`
00072Cr 2               @OPCODE_330:   ; [c64_ir] InlineExit
00072Cr 2                   ; inline exit
00072Cr 2  68               pla
00072Dr 2  68               pla
00072Er 2               
00072Er 2               @target_94:
00072Er 2               
00072Er 2               ; src/prelude.fth:8:15 in `2dup`
00072Er 2               @OPCODE_332:   ; [c64_ir] InlineCall("over")
00072Er 2                   ; inline call(over)
00072Er 2  48               pha
00072Fr 2  48               pha
000730r 2               
000730r 2               @target_95:
000730r 2               
000730r 2               ; src/prelude.fth:4:10 in `over`
000730r 2               @OPCODE_334:   ; [c64_ir] AltPush
000730r 2  CA               dex
000731r 2  CA               dex
000732r 2  B5 03            lda $03,x
000734r 2  48               pha
000735r 2  B5 02            lda $02,x
000737r 2  48               pha
000738r 2               
000738r 2               ; src/prelude.fth:4:13 in `over`
000738r 2               @OPCODE_335:   ; [c64_ir] TempStore
000738r 2  CA               dex
000739r 2  CA               dex
00073Ar 2  B5 03            lda $03,x
00073Cr 2  85 96            sta TEMP_PAX2
00073Er 2  B5 02            lda $02,x
000740r 2  85 95            sta TEMP_PAX1
000742r 2               
000742r 2               ; src/prelude.fth:4:19 in `over`
000742r 2               @OPCODE_336:   ; [c64_ir] TempLoad
000742r 2  E8               inx
000743r 2  E8               inx
000744r 2  A5 95            lda TEMP_PAX1
000746r 2  95 00            sta $00,x
000748r 2  A5 96            lda TEMP_PAX2
00074Ar 2  95 01            sta $01,x
00074Cr 2               
00074Cr 2               ; src/prelude.fth:4:25 in `over`
00074Cr 2               @OPCODE_337:   ; [c64_ir] AltPop
00074Cr 2  E8               inx
00074Dr 2  E8               inx
00074Er 2  68               pla
00074Fr 2  95 00            sta $00,x
000751r 2  68               pla
000752r 2  95 01            sta $01,x
000754r 2               
000754r 2               ; src/prelude.fth:4:28 in `over`
000754r 2               @OPCODE_338:   ; [c64_ir] TempLoad
000754r 2  E8               inx
000755r 2  E8               inx
000756r 2  A5 95            lda TEMP_PAX1
000758r 2  95 00            sta $00,x
00075Ar 2  A5 96            lda TEMP_PAX2
00075Cr 2  95 01            sta $01,x
00075Er 2               
00075Er 2               ; src/prelude.fth:4:34 in `over`
00075Er 2               @OPCODE_339:   ; [c64_ir] InlineExit
00075Er 2                   ; inline exit
00075Er 2  68               pla
00075Fr 2  68               pla
000760r 2               
000760r 2               @target_96:
000760r 2               
000760r 2               ; src/prelude.fth:8:20 in `2dup`
000760r 2               @OPCODE_341:   ; [c64_ir] InlineExit
000760r 2                   ; inline exit
000760r 2  68               pla
000761r 2  68               pla
000762r 2               
000762r 2               @target_97:
000762r 2               
000762r 2               ; src/prelude.fth:33:29 in `loopimpl`
000762r 2               @OPCODE_343:   ; [c64_ir] AltPush
000762r 2  CA               dex
000763r 2  CA               dex
000764r 2  B5 03            lda $03,x
000766r 2  48               pha
000767r 2  B5 02            lda $02,x
000769r 2  48               pha
00076Ar 2               
00076Ar 2               ; src/prelude.fth:33:32 in `loopimpl`
00076Ar 2               @OPCODE_344:   ; [c64_ir] AltPush
00076Ar 2  CA               dex
00076Br 2  CA               dex
00076Cr 2  B5 03            lda $03,x
00076Er 2  48               pha
00076Fr 2  B5 02            lda $02,x
000771r 2  48               pha
000772r 2               
000772r 2               ; src/prelude.fth:33:35 in `loopimpl`
000772r 2               @OPCODE_345:   ; [c64_ir] InlineCall("=")
000772r 2                   ; inline call(=)
000772r 2  48               pha
000773r 2  48               pha
000774r 2               
000774r 2               @target_98:
000774r 2               
000774r 2               ; src/prelude.fth:22:8 in `=`
000774r 2               @OPCODE_347:   ; [c64_ir] InlineCall("-")
000774r 2                   ; inline call(-)
000774r 2  48               pha
000775r 2  48               pha
000776r 2               
000776r 2               @target_99:
000776r 2               
000776r 2               ; src/prelude.fth:16:12 in `-`
000776r 2               @OPCODE_349:   ; [c64_ir] InlineCall("negate")
000776r 2                   ; inline call(negate)
000776r 2  48               pha
000777r 2  48               pha
000778r 2               
000778r 2               @target_100:
000778r 2               
000778r 2               ; src/prelude.fth:15:12 in `negate`
000778r 2               @OPCODE_351:   ; [c64_ir] InlineCall("invert")
000778r 2                   ; inline call(invert)
000778r 2  48               pha
000779r 2  48               pha
00077Ar 2               
00077Ar 2               @target_101:
00077Ar 2               
00077Ar 2               ; src/prelude.fth:14:12 in `invert`
00077Ar 2               @OPCODE_353:   ; [c64_ir] PushLiteral(-1)
00077Ar 2  E8               inx
00077Br 2  E8               inx
00077Cr 2  A9 FF            lda #255
00077Er 2  95 00            sta $00,x
000780r 2  A9 FF            lda #255
000782r 2  95 01            sta $01,x
000784r 2               
000784r 2               ; src/prelude.fth:14:15 in `invert`
000784r 2               @OPCODE_354:   ; [c64_ir] Nand
000784r 2                   ; 26
000784r 2  CA               dex
000785r 2  CA               dex
000786r 2  B5 00            lda $00,x
000788r 2  35 02            and $02,x
00078Ar 2  49 FF            eor #$ff
00078Cr 2  95 00            sta $00,x
00078Er 2  B5 01            lda $01,x
000790r 2  35 03            and $03,x
000792r 2  49 FF            eor #$ff
000794r 2  95 01            sta $01,x
000796r 2               
000796r 2               ; src/prelude.fth:14:20 in `invert`
000796r 2               @OPCODE_355:   ; [c64_ir] InlineExit
000796r 2                   ; inline exit
000796r 2  68               pla
000797r 2  68               pla
000798r 2               
000798r 2               @target_102:
000798r 2               
000798r 2               ; src/prelude.fth:15:19 in `negate`
000798r 2               @OPCODE_357:   ; [c64_ir] PushLiteral(1)
000798r 2  E8               inx
000799r 2  E8               inx
00079Ar 2  A9 01            lda #1
00079Cr 2  95 00            sta $00,x
00079Er 2  A9 00            lda #0
0007A0r 2  95 01            sta $01,x
0007A2r 2               
0007A2r 2               ; src/prelude.fth:15:21 in `negate`
0007A2r 2               @OPCODE_358:   ; [c64_ir] Add
0007A2r 2                   ; 21
0007A2r 2  CA               dex
0007A3r 2  CA               dex
0007A4r 2  18               clc
0007A5r 2  B5 00            lda $00,x
0007A7r 2  75 02            adc $02,x
0007A9r 2  95 00            sta $00,x
0007ABr 2  B5 01            lda $01,x
0007ADr 2  75 03            adc $03,x
0007AFr 2  95 01            sta $01,x
0007B1r 2               
0007B1r 2               ; src/prelude.fth:15:23 in `negate`
0007B1r 2               @OPCODE_359:   ; [c64_ir] InlineExit
0007B1r 2                   ; inline exit
0007B1r 2  68               pla
0007B2r 2  68               pla
0007B3r 2               
0007B3r 2               @target_103:
0007B3r 2               
0007B3r 2               ; src/prelude.fth:16:19 in `-`
0007B3r 2               @OPCODE_361:   ; [c64_ir] Add
0007B3r 2                   ; 21
0007B3r 2  CA               dex
0007B4r 2  CA               dex
0007B5r 2  18               clc
0007B6r 2  B5 00            lda $00,x
0007B8r 2  75 02            adc $02,x
0007BAr 2  95 00            sta $00,x
0007BCr 2  B5 01            lda $01,x
0007BEr 2  75 03            adc $03,x
0007C0r 2  95 01            sta $01,x
0007C2r 2               
0007C2r 2               ; src/prelude.fth:16:21 in `-`
0007C2r 2               @OPCODE_362:   ; [c64_ir] InlineExit
0007C2r 2                   ; inline exit
0007C2r 2  68               pla
0007C3r 2  68               pla
0007C4r 2               
0007C4r 2               @target_104:
0007C4r 2               
0007C4r 2               ; src/prelude.fth:22:10 in `=`
0007C4r 2               @OPCODE_364:   ; [c64_ir] InlineCall("0=")
0007C4r 2                   ; inline call(0=)
0007C4r 2  48               pha
0007C5r 2  48               pha
0007C6r 2               
0007C6r 2               @target_105:
0007C6r 2               
0007C6r 2               ; src/prelude.fth:21:8 in `0=`
0007C6r 2               @OPCODE_366:   ; [c64_ir] JumpIf0(107)
0007C6r 2  CA               dex
0007C7r 2  CA               dex
0007C8r 2  B5 02            lda $02,x
0007CAr 2  15 03            ora $03,x
0007CCr 2  D0 03            bne *+5
0007CEr 2  4C rr rr         jmp @target_107
0007D1r 2               
0007D1r 2               @target_106:
0007D1r 2               
0007D1r 2               ; src/prelude.fth:21:11 in `0=`
0007D1r 2               @OPCODE_368:   ; [c64_ir] PushLiteral(0)
0007D1r 2  E8               inx
0007D2r 2  E8               inx
0007D3r 2  A9 00            lda #0
0007D5r 2  95 00            sta $00,x
0007D7r 2  A9 00            lda #0
0007D9r 2  95 01            sta $01,x
0007DBr 2               
0007DBr 2               ; src/prelude.fth:21:13 in `0=`
0007DBr 2               @OPCODE_369:   ; [c64_ir] JumpElse(108)
0007DBr 2  4C rr rr         jmp @target_108
0007DEr 2               
0007DEr 2               @target_107:
0007DEr 2               
0007DEr 2               ; src/prelude.fth:21:18 in `0=`
0007DEr 2               @OPCODE_371:   ; [c64_ir] PushLiteral(-1)
0007DEr 2  E8               inx
0007DFr 2  E8               inx
0007E0r 2  A9 FF            lda #255
0007E2r 2  95 00            sta $00,x
0007E4r 2  A9 FF            lda #255
0007E6r 2  95 01            sta $01,x
0007E8r 2               
0007E8r 2               ; src/prelude.fth:21:21 in `0=`
0007E8r 2               @OPCODE_372:   ; [c64_ir] JumpTarget(107)
0007E8r 2               
0007E8r 2               @target_108:
0007E8r 2               
0007E8r 2               ; src/prelude.fth:21:26 in `0=`
0007E8r 2               @OPCODE_374:   ; [c64_ir] InlineExit
0007E8r 2                   ; inline exit
0007E8r 2  68               pla
0007E9r 2  68               pla
0007EAr 2               
0007EAr 2               @target_109:
0007EAr 2               
0007EAr 2               ; src/prelude.fth:22:13 in `=`
0007EAr 2               @OPCODE_376:   ; [c64_ir] InlineExit
0007EAr 2                   ; inline exit
0007EAr 2  68               pla
0007EBr 2  68               pla
0007ECr 2               
0007ECr 2               @target_110:
0007ECr 2               
0007ECr 2               ; src/prelude.fth:33:37 in `loopimpl`
0007ECr 2               @OPCODE_378:   ; [c64_ir] InlineCall("swap")
0007ECr 2                   ; inline call(swap)
0007ECr 2  48               pha
0007EDr 2  48               pha
0007EEr 2               
0007EEr 2               @target_111:
0007EEr 2               
0007EEr 2               ; src/prelude.fth:3:10 in `swap`
0007EEr 2               @OPCODE_380:   ; [c64_ir] AltPush
0007EEr 2  CA               dex
0007EFr 2  CA               dex
0007F0r 2  B5 03            lda $03,x
0007F2r 2  48               pha
0007F3r 2  B5 02            lda $02,x
0007F5r 2  48               pha
0007F6r 2               
0007F6r 2               ; src/prelude.fth:3:13 in `swap`
0007F6r 2               @OPCODE_381:   ; [c64_ir] TempStore
0007F6r 2  CA               dex
0007F7r 2  CA               dex
0007F8r 2  B5 03            lda $03,x
0007FAr 2  85 96            sta TEMP_PAX2
0007FCr 2  B5 02            lda $02,x
0007FEr 2  85 95            sta TEMP_PAX1
000800r 2               
000800r 2               ; src/prelude.fth:3:19 in `swap`
000800r 2               @OPCODE_382:   ; [c64_ir] AltPop
000800r 2  E8               inx
000801r 2  E8               inx
000802r 2  68               pla
000803r 2  95 00            sta $00,x
000805r 2  68               pla
000806r 2  95 01            sta $01,x
000808r 2               
000808r 2               ; src/prelude.fth:3:22 in `swap`
000808r 2               @OPCODE_383:   ; [c64_ir] TempLoad
000808r 2  E8               inx
000809r 2  E8               inx
00080Ar 2  A5 95            lda TEMP_PAX1
00080Cr 2  95 00            sta $00,x
00080Er 2  A5 96            lda TEMP_PAX2
000810r 2  95 01            sta $01,x
000812r 2               
000812r 2               ; src/prelude.fth:3:28 in `swap`
000812r 2               @OPCODE_384:   ; [c64_ir] InlineExit
000812r 2                   ; inline exit
000812r 2  68               pla
000813r 2  68               pla
000814r 2               
000814r 2               @target_112:
000814r 2               
000814r 2               ; src/prelude.fth:33:42 in `loopimpl`
000814r 2               @OPCODE_386:   ; [c64_ir] AltPush
000814r 2  CA               dex
000815r 2  CA               dex
000816r 2  B5 03            lda $03,x
000818r 2  48               pha
000819r 2  B5 02            lda $02,x
00081Br 2  48               pha
00081Cr 2               
00081Cr 2               ; src/prelude.fth:33:45 in `loopimpl`
00081Cr 2               @OPCODE_387:   ; [c64_ir] InlineExit
00081Cr 2                   ; inline exit
00081Cr 2  68               pla
00081Dr 2  68               pla
00081Er 2               
00081Er 2               @target_113:
00081Er 2               
00081Er 2               ; src/prelude.fth:44:25 in `*`
00081Er 2               @OPCODE_389:   ; [c64_ir] LoopIf0(86)
00081Er 2  CA               dex
00081Fr 2  CA               dex
000820r 2  B5 02            lda $02,x
000822r 2  15 03            ora $03,x
000824r 2  D0 03            bne *+5
000826r 2  4C rr rr         jmp @target_86
000829r 2               
000829r 2               @target_114:
000829r 2               
000829r 2               ; src/prelude.fth:44:25 in `*`
000829r 2               @OPCODE_391:   ; [c64_ir] AltPop
000829r 2  E8               inx
00082Ar 2  E8               inx
00082Br 2  68               pla
00082Cr 2  95 00            sta $00,x
00082Er 2  68               pla
00082Fr 2  95 01            sta $01,x
000831r 2               
000831r 2               ; src/prelude.fth:44:25 in `*`
000831r 2               @OPCODE_392:   ; [c64_ir] Drop
000831r 2  CA               dex
000832r 2  CA               dex
000833r 2               
000833r 2               ; src/prelude.fth:44:25 in `*`
000833r 2               @OPCODE_393:   ; [c64_ir] AltPop
000833r 2  E8               inx
000834r 2  E8               inx
000835r 2  68               pla
000836r 2  95 00            sta $00,x
000838r 2  68               pla
000839r 2  95 01            sta $01,x
00083Br 2               
00083Br 2               ; src/prelude.fth:44:25 in `*`
00083Br 2               @OPCODE_394:   ; [c64_ir] Drop
00083Br 2  CA               dex
00083Cr 2  CA               dex
00083Dr 2               
00083Dr 2               ; src/prelude.fth:44:30 in `*`
00083Dr 2               @OPCODE_395:   ; [c64_ir] InlineCall("swap")
00083Dr 2                   ; inline call(swap)
00083Dr 2  48               pha
00083Er 2  48               pha
00083Fr 2               
00083Fr 2               @target_115:
00083Fr 2               
00083Fr 2               ; src/prelude.fth:3:10 in `swap`
00083Fr 2               @OPCODE_397:   ; [c64_ir] AltPush
00083Fr 2  CA               dex
000840r 2  CA               dex
000841r 2  B5 03            lda $03,x
000843r 2  48               pha
000844r 2  B5 02            lda $02,x
000846r 2  48               pha
000847r 2               
000847r 2               ; src/prelude.fth:3:13 in `swap`
000847r 2               @OPCODE_398:   ; [c64_ir] TempStore
000847r 2  CA               dex
000848r 2  CA               dex
000849r 2  B5 03            lda $03,x
00084Br 2  85 96            sta TEMP_PAX2
00084Dr 2  B5 02            lda $02,x
00084Fr 2  85 95            sta TEMP_PAX1
000851r 2               
000851r 2               ; src/prelude.fth:3:19 in `swap`
000851r 2               @OPCODE_399:   ; [c64_ir] AltPop
000851r 2  E8               inx
000852r 2  E8               inx
000853r 2  68               pla
000854r 2  95 00            sta $00,x
000856r 2  68               pla
000857r 2  95 01            sta $01,x
000859r 2               
000859r 2               ; src/prelude.fth:3:22 in `swap`
000859r 2               @OPCODE_400:   ; [c64_ir] TempLoad
000859r 2  E8               inx
00085Ar 2  E8               inx
00085Br 2  A5 95            lda TEMP_PAX1
00085Dr 2  95 00            sta $00,x
00085Fr 2  A5 96            lda TEMP_PAX2
000861r 2  95 01            sta $01,x
000863r 2               
000863r 2               ; src/prelude.fth:3:28 in `swap`
000863r 2               @OPCODE_401:   ; [c64_ir] InlineExit
000863r 2                   ; inline exit
000863r 2  68               pla
000864r 2  68               pla
000865r 2               
000865r 2               @target_116:
000865r 2               
000865r 2               ; src/prelude.fth:44:35 in `*`
000865r 2               @OPCODE_403:   ; [c64_ir] Drop
000865r 2  CA               dex
000866r 2  CA               dex
000867r 2               
000867r 2               ; src/prelude.fth:44:40 in `*`
000867r 2               @OPCODE_404:   ; [c64_ir] InlineExit
000867r 2                   ; inline exit
000867r 2  68               pla
000868r 2  68               pla
000869r 2               
000869r 2               @target_117:
000869r 2               
000869r 2               ; snake.fth:70:5 in `draw-walls`
000869r 2               @OPCODE_406:   ; [c64_ir] PushLiteral(40)
000869r 2  E8               inx
00086Ar 2  E8               inx
00086Br 2  A9 28            lda #40
00086Dr 2  95 00            sta $00,x
00086Fr 2  A9 00            lda #0
000871r 2  95 01            sta $01,x
000873r 2               
000873r 2               ; snake.fth:70:11 in `draw-walls`
000873r 2               @OPCODE_407:   ; [c64_ir] PushLiteral(0)
000873r 2  E8               inx
000874r 2  E8               inx
000875r 2  A9 00            lda #0
000877r 2  95 00            sta $00,x
000879r 2  A9 00            lda #0
00087Br 2  95 01            sta $01,x
00087Dr 2               
00087Dr 2               ; snake.fth:70:13 in `draw-walls`
00087Dr 2               @OPCODE_408:   ; [c64_ir] AltPush
00087Dr 2  CA               dex
00087Er 2  CA               dex
00087Fr 2  B5 03            lda $03,x
000881r 2  48               pha
000882r 2  B5 02            lda $02,x
000884r 2  48               pha
000885r 2               
000885r 2               ; snake.fth:70:13 in `draw-walls`
000885r 2               @OPCODE_409:   ; [c64_ir] AltPush
000885r 2  CA               dex
000886r 2  CA               dex
000887r 2  B5 03            lda $03,x
000889r 2  48               pha
00088Ar 2  B5 02            lda $02,x
00088Cr 2  48               pha
00088Dr 2               
00088Dr 2               ; snake.fth:70:13 in `draw-walls`
00088Dr 2               @OPCODE_410:   ; [c64_ir] LoopTarget(117)
00088Dr 2               
00088Dr 2               @target_118:
00088Dr 2               
00088Dr 2               ; snake.fth:71:9 in `draw-walls`
00088Dr 2               @OPCODE_412:   ; [c64_ir] PushLiteral(230)
00088Dr 2  E8               inx
00088Er 2  E8               inx
00088Fr 2  A9 E6            lda #230
000891r 2  95 00            sta $00,x
000893r 2  A9 00            lda #0
000895r 2  95 01            sta $01,x
000897r 2               
000897r 2               ; snake.fth:71:14 in `draw-walls`
000897r 2               @OPCODE_413:   ; [c64_ir] InlineCall("over")
000897r 2                   ; inline call(over)
000897r 2  48               pha
000898r 2  48               pha
000899r 2               
000899r 2               @target_119:
000899r 2               
000899r 2               ; src/prelude.fth:4:10 in `over`
000899r 2               @OPCODE_415:   ; [c64_ir] AltPush
000899r 2  CA               dex
00089Ar 2  CA               dex
00089Br 2  B5 03            lda $03,x
00089Dr 2  48               pha
00089Er 2  B5 02            lda $02,x
0008A0r 2  48               pha
0008A1r 2               
0008A1r 2               ; src/prelude.fth:4:13 in `over`
0008A1r 2               @OPCODE_416:   ; [c64_ir] TempStore
0008A1r 2  CA               dex
0008A2r 2  CA               dex
0008A3r 2  B5 03            lda $03,x
0008A5r 2  85 96            sta TEMP_PAX2
0008A7r 2  B5 02            lda $02,x
0008A9r 2  85 95            sta TEMP_PAX1
0008ABr 2               
0008ABr 2               ; src/prelude.fth:4:19 in `over`
0008ABr 2               @OPCODE_417:   ; [c64_ir] TempLoad
0008ABr 2  E8               inx
0008ACr 2  E8               inx
0008ADr 2  A5 95            lda TEMP_PAX1
0008AFr 2  95 00            sta $00,x
0008B1r 2  A5 96            lda TEMP_PAX2
0008B3r 2  95 01            sta $01,x
0008B5r 2               
0008B5r 2               ; src/prelude.fth:4:25 in `over`
0008B5r 2               @OPCODE_418:   ; [c64_ir] AltPop
0008B5r 2  E8               inx
0008B6r 2  E8               inx
0008B7r 2  68               pla
0008B8r 2  95 00            sta $00,x
0008BAr 2  68               pla
0008BBr 2  95 01            sta $01,x
0008BDr 2               
0008BDr 2               ; src/prelude.fth:4:28 in `over`
0008BDr 2               @OPCODE_419:   ; [c64_ir] TempLoad
0008BDr 2  E8               inx
0008BEr 2  E8               inx
0008BFr 2  A5 95            lda TEMP_PAX1
0008C1r 2  95 00            sta $00,x
0008C3r 2  A5 96            lda TEMP_PAX2
0008C5r 2  95 01            sta $01,x
0008C7r 2               
0008C7r 2               ; src/prelude.fth:4:34 in `over`
0008C7r 2               @OPCODE_420:   ; [c64_ir] InlineExit
0008C7r 2                   ; inline exit
0008C7r 2  68               pla
0008C8r 2  68               pla
0008C9r 2               
0008C9r 2               @target_120:
0008C9r 2               
0008C9r 2               ; snake.fth:71:19 in `draw-walls`
0008C9r 2               @OPCODE_422:   ; [c64_ir] InlineCall("i")
0008C9r 2                   ; inline call(i)
0008C9r 2  48               pha
0008CAr 2  48               pha
0008CBr 2               
0008CBr 2               @target_121:
0008CBr 2               
0008CBr 2               ; src/prelude.fth:38:5 in `i`
0008CBr 2               @OPCODE_424:   ; [c64_ir] AltPop
0008CBr 2  E8               inx
0008CCr 2  E8               inx
0008CDr 2  68               pla
0008CEr 2  95 00            sta $00,x
0008D0r 2  68               pla
0008D1r 2  95 01            sta $01,x
0008D3r 2               
0008D3r 2               ; src/prelude.fth:38:8 in `i`
0008D3r 2               @OPCODE_425:   ; [c64_ir] AltPop
0008D3r 2  E8               inx
0008D4r 2  E8               inx
0008D5r 2  68               pla
0008D6r 2  95 00            sta $00,x
0008D8r 2  68               pla
0008D9r 2  95 01            sta $01,x
0008DBr 2               
0008DBr 2               ; src/prelude.fth:38:11 in `i`
0008DBr 2               @OPCODE_426:   ; [c64_ir] AltPop
0008DBr 2  E8               inx
0008DCr 2  E8               inx
0008DDr 2  68               pla
0008DEr 2  95 00            sta $00,x
0008E0r 2  68               pla
0008E1r 2  95 01            sta $01,x
0008E3r 2               
0008E3r 2               ; src/prelude.fth:38:14 in `i`
0008E3r 2               @OPCODE_427:   ; [c64_ir] TempStore
0008E3r 2  CA               dex
0008E4r 2  CA               dex
0008E5r 2  B5 03            lda $03,x
0008E7r 2  85 96            sta TEMP_PAX2
0008E9r 2  B5 02            lda $02,x
0008EBr 2  85 95            sta TEMP_PAX1
0008EDr 2               
0008EDr 2               ; src/prelude.fth:38:20 in `i`
0008EDr 2               @OPCODE_428:   ; [c64_ir] TempLoad
0008EDr 2  E8               inx
0008EEr 2  E8               inx
0008EFr 2  A5 95            lda TEMP_PAX1
0008F1r 2  95 00            sta $00,x
0008F3r 2  A5 96            lda TEMP_PAX2
0008F5r 2  95 01            sta $01,x
0008F7r 2               
0008F7r 2               ; src/prelude.fth:38:26 in `i`
0008F7r 2               @OPCODE_429:   ; [c64_ir] AltPush
0008F7r 2  CA               dex
0008F8r 2  CA               dex
0008F9r 2  B5 03            lda $03,x
0008FBr 2  48               pha
0008FCr 2  B5 02            lda $02,x
0008FEr 2  48               pha
0008FFr 2               
0008FFr 2               ; src/prelude.fth:38:29 in `i`
0008FFr 2               @OPCODE_430:   ; [c64_ir] AltPush
0008FFr 2  CA               dex
000900r 2  CA               dex
000901r 2  B5 03            lda $03,x
000903r 2  48               pha
000904r 2  B5 02            lda $02,x
000906r 2  48               pha
000907r 2               
000907r 2               ; src/prelude.fth:38:32 in `i`
000907r 2               @OPCODE_431:   ; [c64_ir] AltPush
000907r 2  CA               dex
000908r 2  CA               dex
000909r 2  B5 03            lda $03,x
00090Br 2  48               pha
00090Cr 2  B5 02            lda $02,x
00090Er 2  48               pha
00090Fr 2               
00090Fr 2               ; src/prelude.fth:38:35 in `i`
00090Fr 2               @OPCODE_432:   ; [c64_ir] TempLoad
00090Fr 2  E8               inx
000910r 2  E8               inx
000911r 2  A5 95            lda TEMP_PAX1
000913r 2  95 00            sta $00,x
000915r 2  A5 96            lda TEMP_PAX2
000917r 2  95 01            sta $01,x
000919r 2               
000919r 2               ; src/prelude.fth:38:41 in `i`
000919r 2               @OPCODE_433:   ; [c64_ir] InlineExit
000919r 2                   ; inline exit
000919r 2  68               pla
00091Ar 2  68               pla
00091Br 2               
00091Br 2               @target_122:
00091Br 2               
00091Br 2               ; snake.fth:71:21 in `draw-walls`
00091Br 2               @OPCODE_435:   ; [c64_ir] Add
00091Br 2                   ; 21
00091Br 2  CA               dex
00091Cr 2  CA               dex
00091Dr 2  18               clc
00091Er 2  B5 00            lda $00,x
000920r 2  75 02            adc $02,x
000922r 2  95 00            sta $00,x
000924r 2  B5 01            lda $01,x
000926r 2  75 03            adc $03,x
000928r 2  95 01            sta $01,x
00092Ar 2               
00092Ar 2               ; snake.fth:71:23 in `draw-walls`
00092Ar 2               @OPCODE_436:   ; [c64_ir] InlineCall("draw-index")
00092Ar 2                   ; inline call(draw-index)
00092Ar 2  48               pha
00092Br 2  48               pha
00092Cr 2               
00092Cr 2               @target_123:
00092Cr 2               
00092Cr 2               ; snake.fth:49:34 in `draw-index`
00092Cr 2               @OPCODE_438:   ; [c64_ir] PushLiteral(1024)
00092Cr 2  E8               inx
00092Dr 2  E8               inx
00092Er 2  A9 00            lda #0
000930r 2  95 00            sta $00,x
000932r 2  A9 04            lda #4
000934r 2  95 01            sta $01,x
000936r 2               
000936r 2               ; snake.fth:49:43 in `draw-index`
000936r 2               @OPCODE_439:   ; [c64_ir] Add
000936r 2                   ; 21
000936r 2  CA               dex
000937r 2  CA               dex
000938r 2  18               clc
000939r 2  B5 00            lda $00,x
00093Br 2  75 02            adc $02,x
00093Dr 2  95 00            sta $00,x
00093Fr 2  B5 01            lda $01,x
000941r 2  75 03            adc $03,x
000943r 2  95 01            sta $01,x
000945r 2               
000945r 2               ; snake.fth:49:45 in `draw-index`
000945r 2               @OPCODE_440:   ; [c64_ir] Store8
000945r 2  CA               dex
000946r 2  CA               dex
000947r 2  CA               dex
000948r 2  CA               dex
000949r 2  B5 02            lda $02,x
00094Br 2  81 04            sta ($04,x)
00094Dr 2                   ; TODO high byte
00094Dr 2               
00094Dr 2               ; snake.fth:49:48 in `draw-index`
00094Dr 2               @OPCODE_441:   ; [c64_ir] InlineExit
00094Dr 2                   ; inline exit
00094Dr 2  68               pla
00094Er 2  68               pla
00094Fr 2               
00094Fr 2               @target_124:
00094Fr 2               
00094Fr 2               ; snake.fth:72:5 in `draw-walls`
00094Fr 2               @OPCODE_443:   ; [c64_ir] InlineCall("loopimpl")
00094Fr 2                   ; inline call(loopimpl)
00094Fr 2  48               pha
000950r 2  48               pha
000951r 2               
000951r 2               @target_125:
000951r 2               
000951r 2               ; src/prelude.fth:33:12 in `loopimpl`
000951r 2               @OPCODE_445:   ; [c64_ir] AltPop
000951r 2  E8               inx
000952r 2  E8               inx
000953r 2  68               pla
000954r 2  95 00            sta $00,x
000956r 2  68               pla
000957r 2  95 01            sta $01,x
000959r 2               
000959r 2               ; src/prelude.fth:33:15 in `loopimpl`
000959r 2               @OPCODE_446:   ; [c64_ir] AltPop
000959r 2  E8               inx
00095Ar 2  E8               inx
00095Br 2  68               pla
00095Cr 2  95 00            sta $00,x
00095Er 2  68               pla
00095Fr 2  95 01            sta $01,x
000961r 2               
000961r 2               ; src/prelude.fth:33:18 in `loopimpl`
000961r 2               @OPCODE_447:   ; [c64_ir] AltPop
000961r 2  E8               inx
000962r 2  E8               inx
000963r 2  68               pla
000964r 2  95 00            sta $00,x
000966r 2  68               pla
000967r 2  95 01            sta $01,x
000969r 2               
000969r 2               ; src/prelude.fth:33:21 in `loopimpl`
000969r 2               @OPCODE_448:   ; [c64_ir] InlineCall("1+")
000969r 2                   ; inline call(1+)
000969r 2  48               pha
00096Ar 2  48               pha
00096Br 2               
00096Br 2               @target_126:
00096Br 2               
00096Br 2               ; src/prelude.fth:18:8 in `1+`
00096Br 2               @OPCODE_450:   ; [c64_ir] PushLiteral(1)
00096Br 2  E8               inx
00096Cr 2  E8               inx
00096Dr 2  A9 01            lda #1
00096Fr 2  95 00            sta $00,x
000971r 2  A9 00            lda #0
000973r 2  95 01            sta $01,x
000975r 2               
000975r 2               ; src/prelude.fth:18:10 in `1+`
000975r 2               @OPCODE_451:   ; [c64_ir] Add
000975r 2                   ; 21
000975r 2  CA               dex
000976r 2  CA               dex
000977r 2  18               clc
000978r 2  B5 00            lda $00,x
00097Ar 2  75 02            adc $02,x
00097Cr 2  95 00            sta $00,x
00097Er 2  B5 01            lda $01,x
000980r 2  75 03            adc $03,x
000982r 2  95 01            sta $01,x
000984r 2               
000984r 2               ; src/prelude.fth:18:12 in `1+`
000984r 2               @OPCODE_452:   ; [c64_ir] InlineExit
000984r 2                   ; inline exit
000984r 2  68               pla
000985r 2  68               pla
000986r 2               
000986r 2               @target_127:
000986r 2               
000986r 2               ; src/prelude.fth:33:24 in `loopimpl`
000986r 2               @OPCODE_454:   ; [c64_ir] InlineCall("2dup")
000986r 2                   ; inline call(2dup)
000986r 2  48               pha
000987r 2  48               pha
000988r 2               
000988r 2               @target_128:
000988r 2               
000988r 2               ; src/prelude.fth:8:10 in `2dup`
000988r 2               @OPCODE_456:   ; [c64_ir] InlineCall("over")
000988r 2                   ; inline call(over)
000988r 2  48               pha
000989r 2  48               pha
00098Ar 2               
00098Ar 2               @target_129:
00098Ar 2               
00098Ar 2               ; src/prelude.fth:4:10 in `over`
00098Ar 2               @OPCODE_458:   ; [c64_ir] AltPush
00098Ar 2  CA               dex
00098Br 2  CA               dex
00098Cr 2  B5 03            lda $03,x
00098Er 2  48               pha
00098Fr 2  B5 02            lda $02,x
000991r 2  48               pha
000992r 2               
000992r 2               ; src/prelude.fth:4:13 in `over`
000992r 2               @OPCODE_459:   ; [c64_ir] TempStore
000992r 2  CA               dex
000993r 2  CA               dex
000994r 2  B5 03            lda $03,x
000996r 2  85 96            sta TEMP_PAX2
000998r 2  B5 02            lda $02,x
00099Ar 2  85 95            sta TEMP_PAX1
00099Cr 2               
00099Cr 2               ; src/prelude.fth:4:19 in `over`
00099Cr 2               @OPCODE_460:   ; [c64_ir] TempLoad
00099Cr 2  E8               inx
00099Dr 2  E8               inx
00099Er 2  A5 95            lda TEMP_PAX1
0009A0r 2  95 00            sta $00,x
0009A2r 2  A5 96            lda TEMP_PAX2
0009A4r 2  95 01            sta $01,x
0009A6r 2               
0009A6r 2               ; src/prelude.fth:4:25 in `over`
0009A6r 2               @OPCODE_461:   ; [c64_ir] AltPop
0009A6r 2  E8               inx
0009A7r 2  E8               inx
0009A8r 2  68               pla
0009A9r 2  95 00            sta $00,x
0009ABr 2  68               pla
0009ACr 2  95 01            sta $01,x
0009AEr 2               
0009AEr 2               ; src/prelude.fth:4:28 in `over`
0009AEr 2               @OPCODE_462:   ; [c64_ir] TempLoad
0009AEr 2  E8               inx
0009AFr 2  E8               inx
0009B0r 2  A5 95            lda TEMP_PAX1
0009B2r 2  95 00            sta $00,x
0009B4r 2  A5 96            lda TEMP_PAX2
0009B6r 2  95 01            sta $01,x
0009B8r 2               
0009B8r 2               ; src/prelude.fth:4:34 in `over`
0009B8r 2               @OPCODE_463:   ; [c64_ir] InlineExit
0009B8r 2                   ; inline exit
0009B8r 2  68               pla
0009B9r 2  68               pla
0009BAr 2               
0009BAr 2               @target_130:
0009BAr 2               
0009BAr 2               ; src/prelude.fth:8:15 in `2dup`
0009BAr 2               @OPCODE_465:   ; [c64_ir] InlineCall("over")
0009BAr 2                   ; inline call(over)
0009BAr 2  48               pha
0009BBr 2  48               pha
0009BCr 2               
0009BCr 2               @target_131:
0009BCr 2               
0009BCr 2               ; src/prelude.fth:4:10 in `over`
0009BCr 2               @OPCODE_467:   ; [c64_ir] AltPush
0009BCr 2  CA               dex
0009BDr 2  CA               dex
0009BEr 2  B5 03            lda $03,x
0009C0r 2  48               pha
0009C1r 2  B5 02            lda $02,x
0009C3r 2  48               pha
0009C4r 2               
0009C4r 2               ; src/prelude.fth:4:13 in `over`
0009C4r 2               @OPCODE_468:   ; [c64_ir] TempStore
0009C4r 2  CA               dex
0009C5r 2  CA               dex
0009C6r 2  B5 03            lda $03,x
0009C8r 2  85 96            sta TEMP_PAX2
0009CAr 2  B5 02            lda $02,x
0009CCr 2  85 95            sta TEMP_PAX1
0009CEr 2               
0009CEr 2               ; src/prelude.fth:4:19 in `over`
0009CEr 2               @OPCODE_469:   ; [c64_ir] TempLoad
0009CEr 2  E8               inx
0009CFr 2  E8               inx
0009D0r 2  A5 95            lda TEMP_PAX1
0009D2r 2  95 00            sta $00,x
0009D4r 2  A5 96            lda TEMP_PAX2
0009D6r 2  95 01            sta $01,x
0009D8r 2               
0009D8r 2               ; src/prelude.fth:4:25 in `over`
0009D8r 2               @OPCODE_470:   ; [c64_ir] AltPop
0009D8r 2  E8               inx
0009D9r 2  E8               inx
0009DAr 2  68               pla
0009DBr 2  95 00            sta $00,x
0009DDr 2  68               pla
0009DEr 2  95 01            sta $01,x
0009E0r 2               
0009E0r 2               ; src/prelude.fth:4:28 in `over`
0009E0r 2               @OPCODE_471:   ; [c64_ir] TempLoad
0009E0r 2  E8               inx
0009E1r 2  E8               inx
0009E2r 2  A5 95            lda TEMP_PAX1
0009E4r 2  95 00            sta $00,x
0009E6r 2  A5 96            lda TEMP_PAX2
0009E8r 2  95 01            sta $01,x
0009EAr 2               
0009EAr 2               ; src/prelude.fth:4:34 in `over`
0009EAr 2               @OPCODE_472:   ; [c64_ir] InlineExit
0009EAr 2                   ; inline exit
0009EAr 2  68               pla
0009EBr 2  68               pla
0009ECr 2               
0009ECr 2               @target_132:
0009ECr 2               
0009ECr 2               ; src/prelude.fth:8:20 in `2dup`
0009ECr 2               @OPCODE_474:   ; [c64_ir] InlineExit
0009ECr 2                   ; inline exit
0009ECr 2  68               pla
0009EDr 2  68               pla
0009EEr 2               
0009EEr 2               @target_133:
0009EEr 2               
0009EEr 2               ; src/prelude.fth:33:29 in `loopimpl`
0009EEr 2               @OPCODE_476:   ; [c64_ir] AltPush
0009EEr 2  CA               dex
0009EFr 2  CA               dex
0009F0r 2  B5 03            lda $03,x
0009F2r 2  48               pha
0009F3r 2  B5 02            lda $02,x
0009F5r 2  48               pha
0009F6r 2               
0009F6r 2               ; src/prelude.fth:33:32 in `loopimpl`
0009F6r 2               @OPCODE_477:   ; [c64_ir] AltPush
0009F6r 2  CA               dex
0009F7r 2  CA               dex
0009F8r 2  B5 03            lda $03,x
0009FAr 2  48               pha
0009FBr 2  B5 02            lda $02,x
0009FDr 2  48               pha
0009FEr 2               
0009FEr 2               ; src/prelude.fth:33:35 in `loopimpl`
0009FEr 2               @OPCODE_478:   ; [c64_ir] InlineCall("=")
0009FEr 2                   ; inline call(=)
0009FEr 2  48               pha
0009FFr 2  48               pha
000A00r 2               
000A00r 2               @target_134:
000A00r 2               
000A00r 2               ; src/prelude.fth:22:8 in `=`
000A00r 2               @OPCODE_480:   ; [c64_ir] InlineCall("-")
000A00r 2                   ; inline call(-)
000A00r 2  48               pha
000A01r 2  48               pha
000A02r 2               
000A02r 2               @target_135:
000A02r 2               
000A02r 2               ; src/prelude.fth:16:12 in `-`
000A02r 2               @OPCODE_482:   ; [c64_ir] InlineCall("negate")
000A02r 2                   ; inline call(negate)
000A02r 2  48               pha
000A03r 2  48               pha
000A04r 2               
000A04r 2               @target_136:
000A04r 2               
000A04r 2               ; src/prelude.fth:15:12 in `negate`
000A04r 2               @OPCODE_484:   ; [c64_ir] InlineCall("invert")
000A04r 2                   ; inline call(invert)
000A04r 2  48               pha
000A05r 2  48               pha
000A06r 2               
000A06r 2               @target_137:
000A06r 2               
000A06r 2               ; src/prelude.fth:14:12 in `invert`
000A06r 2               @OPCODE_486:   ; [c64_ir] PushLiteral(-1)
000A06r 2  E8               inx
000A07r 2  E8               inx
000A08r 2  A9 FF            lda #255
000A0Ar 2  95 00            sta $00,x
000A0Cr 2  A9 FF            lda #255
000A0Er 2  95 01            sta $01,x
000A10r 2               
000A10r 2               ; src/prelude.fth:14:15 in `invert`
000A10r 2               @OPCODE_487:   ; [c64_ir] Nand
000A10r 2                   ; 26
000A10r 2  CA               dex
000A11r 2  CA               dex
000A12r 2  B5 00            lda $00,x
000A14r 2  35 02            and $02,x
000A16r 2  49 FF            eor #$ff
000A18r 2  95 00            sta $00,x
000A1Ar 2  B5 01            lda $01,x
000A1Cr 2  35 03            and $03,x
000A1Er 2  49 FF            eor #$ff
000A20r 2  95 01            sta $01,x
000A22r 2               
000A22r 2               ; src/prelude.fth:14:20 in `invert`
000A22r 2               @OPCODE_488:   ; [c64_ir] InlineExit
000A22r 2                   ; inline exit
000A22r 2  68               pla
000A23r 2  68               pla
000A24r 2               
000A24r 2               @target_138:
000A24r 2               
000A24r 2               ; src/prelude.fth:15:19 in `negate`
000A24r 2               @OPCODE_490:   ; [c64_ir] PushLiteral(1)
000A24r 2  E8               inx
000A25r 2  E8               inx
000A26r 2  A9 01            lda #1
000A28r 2  95 00            sta $00,x
000A2Ar 2  A9 00            lda #0
000A2Cr 2  95 01            sta $01,x
000A2Er 2               
000A2Er 2               ; src/prelude.fth:15:21 in `negate`
000A2Er 2               @OPCODE_491:   ; [c64_ir] Add
000A2Er 2                   ; 21
000A2Er 2  CA               dex
000A2Fr 2  CA               dex
000A30r 2  18               clc
000A31r 2  B5 00            lda $00,x
000A33r 2  75 02            adc $02,x
000A35r 2  95 00            sta $00,x
000A37r 2  B5 01            lda $01,x
000A39r 2  75 03            adc $03,x
000A3Br 2  95 01            sta $01,x
000A3Dr 2               
000A3Dr 2               ; src/prelude.fth:15:23 in `negate`
000A3Dr 2               @OPCODE_492:   ; [c64_ir] InlineExit
000A3Dr 2                   ; inline exit
000A3Dr 2  68               pla
000A3Er 2  68               pla
000A3Fr 2               
000A3Fr 2               @target_139:
000A3Fr 2               
000A3Fr 2               ; src/prelude.fth:16:19 in `-`
000A3Fr 2               @OPCODE_494:   ; [c64_ir] Add
000A3Fr 2                   ; 21
000A3Fr 2  CA               dex
000A40r 2  CA               dex
000A41r 2  18               clc
000A42r 2  B5 00            lda $00,x
000A44r 2  75 02            adc $02,x
000A46r 2  95 00            sta $00,x
000A48r 2  B5 01            lda $01,x
000A4Ar 2  75 03            adc $03,x
000A4Cr 2  95 01            sta $01,x
000A4Er 2               
000A4Er 2               ; src/prelude.fth:16:21 in `-`
000A4Er 2               @OPCODE_495:   ; [c64_ir] InlineExit
000A4Er 2                   ; inline exit
000A4Er 2  68               pla
000A4Fr 2  68               pla
000A50r 2               
000A50r 2               @target_140:
000A50r 2               
000A50r 2               ; src/prelude.fth:22:10 in `=`
000A50r 2               @OPCODE_497:   ; [c64_ir] InlineCall("0=")
000A50r 2                   ; inline call(0=)
000A50r 2  48               pha
000A51r 2  48               pha
000A52r 2               
000A52r 2               @target_141:
000A52r 2               
000A52r 2               ; src/prelude.fth:21:8 in `0=`
000A52r 2               @OPCODE_499:   ; [c64_ir] JumpIf0(143)
000A52r 2  CA               dex
000A53r 2  CA               dex
000A54r 2  B5 02            lda $02,x
000A56r 2  15 03            ora $03,x
000A58r 2  D0 03            bne *+5
000A5Ar 2  4C rr rr         jmp @target_143
000A5Dr 2               
000A5Dr 2               @target_142:
000A5Dr 2               
000A5Dr 2               ; src/prelude.fth:21:11 in `0=`
000A5Dr 2               @OPCODE_501:   ; [c64_ir] PushLiteral(0)
000A5Dr 2  E8               inx
000A5Er 2  E8               inx
000A5Fr 2  A9 00            lda #0
000A61r 2  95 00            sta $00,x
000A63r 2  A9 00            lda #0
000A65r 2  95 01            sta $01,x
000A67r 2               
000A67r 2               ; src/prelude.fth:21:13 in `0=`
000A67r 2               @OPCODE_502:   ; [c64_ir] JumpElse(144)
000A67r 2  4C rr rr         jmp @target_144
000A6Ar 2               
000A6Ar 2               @target_143:
000A6Ar 2               
000A6Ar 2               ; src/prelude.fth:21:18 in `0=`
000A6Ar 2               @OPCODE_504:   ; [c64_ir] PushLiteral(-1)
000A6Ar 2  E8               inx
000A6Br 2  E8               inx
000A6Cr 2  A9 FF            lda #255
000A6Er 2  95 00            sta $00,x
000A70r 2  A9 FF            lda #255
000A72r 2  95 01            sta $01,x
000A74r 2               
000A74r 2               ; src/prelude.fth:21:21 in `0=`
000A74r 2               @OPCODE_505:   ; [c64_ir] JumpTarget(143)
000A74r 2               
000A74r 2               @target_144:
000A74r 2               
000A74r 2               ; src/prelude.fth:21:26 in `0=`
000A74r 2               @OPCODE_507:   ; [c64_ir] InlineExit
000A74r 2                   ; inline exit
000A74r 2  68               pla
000A75r 2  68               pla
000A76r 2               
000A76r 2               @target_145:
000A76r 2               
000A76r 2               ; src/prelude.fth:22:13 in `=`
000A76r 2               @OPCODE_509:   ; [c64_ir] InlineExit
000A76r 2                   ; inline exit
000A76r 2  68               pla
000A77r 2  68               pla
000A78r 2               
000A78r 2               @target_146:
000A78r 2               
000A78r 2               ; src/prelude.fth:33:37 in `loopimpl`
000A78r 2               @OPCODE_511:   ; [c64_ir] InlineCall("swap")
000A78r 2                   ; inline call(swap)
000A78r 2  48               pha
000A79r 2  48               pha
000A7Ar 2               
000A7Ar 2               @target_147:
000A7Ar 2               
000A7Ar 2               ; src/prelude.fth:3:10 in `swap`
000A7Ar 2               @OPCODE_513:   ; [c64_ir] AltPush
000A7Ar 2  CA               dex
000A7Br 2  CA               dex
000A7Cr 2  B5 03            lda $03,x
000A7Er 2  48               pha
000A7Fr 2  B5 02            lda $02,x
000A81r 2  48               pha
000A82r 2               
000A82r 2               ; src/prelude.fth:3:13 in `swap`
000A82r 2               @OPCODE_514:   ; [c64_ir] TempStore
000A82r 2  CA               dex
000A83r 2  CA               dex
000A84r 2  B5 03            lda $03,x
000A86r 2  85 96            sta TEMP_PAX2
000A88r 2  B5 02            lda $02,x
000A8Ar 2  85 95            sta TEMP_PAX1
000A8Cr 2               
000A8Cr 2               ; src/prelude.fth:3:19 in `swap`
000A8Cr 2               @OPCODE_515:   ; [c64_ir] AltPop
000A8Cr 2  E8               inx
000A8Dr 2  E8               inx
000A8Er 2  68               pla
000A8Fr 2  95 00            sta $00,x
000A91r 2  68               pla
000A92r 2  95 01            sta $01,x
000A94r 2               
000A94r 2               ; src/prelude.fth:3:22 in `swap`
000A94r 2               @OPCODE_516:   ; [c64_ir] TempLoad
000A94r 2  E8               inx
000A95r 2  E8               inx
000A96r 2  A5 95            lda TEMP_PAX1
000A98r 2  95 00            sta $00,x
000A9Ar 2  A5 96            lda TEMP_PAX2
000A9Cr 2  95 01            sta $01,x
000A9Er 2               
000A9Er 2               ; src/prelude.fth:3:28 in `swap`
000A9Er 2               @OPCODE_517:   ; [c64_ir] InlineExit
000A9Er 2                   ; inline exit
000A9Er 2  68               pla
000A9Fr 2  68               pla
000AA0r 2               
000AA0r 2               @target_148:
000AA0r 2               
000AA0r 2               ; src/prelude.fth:33:42 in `loopimpl`
000AA0r 2               @OPCODE_519:   ; [c64_ir] AltPush
000AA0r 2  CA               dex
000AA1r 2  CA               dex
000AA2r 2  B5 03            lda $03,x
000AA4r 2  48               pha
000AA5r 2  B5 02            lda $02,x
000AA7r 2  48               pha
000AA8r 2               
000AA8r 2               ; src/prelude.fth:33:45 in `loopimpl`
000AA8r 2               @OPCODE_520:   ; [c64_ir] InlineExit
000AA8r 2                   ; inline exit
000AA8r 2  68               pla
000AA9r 2  68               pla
000AAAr 2               
000AAAr 2               @target_149:
000AAAr 2               
000AAAr 2               ; snake.fth:72:5 in `draw-walls`
000AAAr 2               @OPCODE_522:   ; [c64_ir] LoopIf0(118)
000AAAr 2  CA               dex
000AABr 2  CA               dex
000AACr 2  B5 02            lda $02,x
000AAEr 2  15 03            ora $03,x
000AB0r 2  D0 03            bne *+5
000AB2r 2  4C rr rr         jmp @target_118
000AB5r 2               
000AB5r 2               @target_150:
000AB5r 2               
000AB5r 2               ; snake.fth:72:5 in `draw-walls`
000AB5r 2               @OPCODE_524:   ; [c64_ir] AltPop
000AB5r 2  E8               inx
000AB6r 2  E8               inx
000AB7r 2  68               pla
000AB8r 2  95 00            sta $00,x
000ABAr 2  68               pla
000ABBr 2  95 01            sta $01,x
000ABDr 2               
000ABDr 2               ; snake.fth:72:5 in `draw-walls`
000ABDr 2               @OPCODE_525:   ; [c64_ir] Drop
000ABDr 2  CA               dex
000ABEr 2  CA               dex
000ABFr 2               
000ABFr 2               ; snake.fth:72:5 in `draw-walls`
000ABFr 2               @OPCODE_526:   ; [c64_ir] AltPop
000ABFr 2  E8               inx
000AC0r 2  E8               inx
000AC1r 2  68               pla
000AC2r 2  95 00            sta $00,x
000AC4r 2  68               pla
000AC5r 2  95 01            sta $01,x
000AC7r 2               
000AC7r 2               ; snake.fth:72:5 in `draw-walls`
000AC7r 2               @OPCODE_527:   ; [c64_ir] Drop
000AC7r 2  CA               dex
000AC8r 2  CA               dex
000AC9r 2               
000AC9r 2               ; snake.fth:73:5 in `draw-walls`
000AC9r 2               @OPCODE_528:   ; [c64_ir] Drop
000AC9r 2  CA               dex
000ACAr 2  CA               dex
000ACBr 2               
000ACBr 2               ; snake.fth:76:5 in `draw-walls`
000ACBr 2               @OPCODE_529:   ; [c64_ir] PushLiteral(40)
000ACBr 2  E8               inx
000ACCr 2  E8               inx
000ACDr 2  A9 28            lda #40
000ACFr 2  95 00            sta $00,x
000AD1r 2  A9 00            lda #0
000AD3r 2  95 01            sta $01,x
000AD5r 2               
000AD5r 2               ; snake.fth:76:11 in `draw-walls`
000AD5r 2               @OPCODE_530:   ; [c64_ir] PushLiteral(0)
000AD5r 2  E8               inx
000AD6r 2  E8               inx
000AD7r 2  A9 00            lda #0
000AD9r 2  95 00            sta $00,x
000ADBr 2  A9 00            lda #0
000ADDr 2  95 01            sta $01,x
000ADFr 2               
000ADFr 2               ; snake.fth:76:13 in `draw-walls`
000ADFr 2               @OPCODE_531:   ; [c64_ir] AltPush
000ADFr 2  CA               dex
000AE0r 2  CA               dex
000AE1r 2  B5 03            lda $03,x
000AE3r 2  48               pha
000AE4r 2  B5 02            lda $02,x
000AE6r 2  48               pha
000AE7r 2               
000AE7r 2               ; snake.fth:76:13 in `draw-walls`
000AE7r 2               @OPCODE_532:   ; [c64_ir] AltPush
000AE7r 2  CA               dex
000AE8r 2  CA               dex
000AE9r 2  B5 03            lda $03,x
000AEBr 2  48               pha
000AECr 2  B5 02            lda $02,x
000AEEr 2  48               pha
000AEFr 2               
000AEFr 2               ; snake.fth:76:13 in `draw-walls`
000AEFr 2               @OPCODE_533:   ; [c64_ir] LoopTarget(150)
000AEFr 2               
000AEFr 2               @target_151:
000AEFr 2               
000AEFr 2               ; snake.fth:77:9 in `draw-walls`
000AEFr 2               @OPCODE_535:   ; [c64_ir] PushLiteral(230)
000AEFr 2  E8               inx
000AF0r 2  E8               inx
000AF1r 2  A9 E6            lda #230
000AF3r 2  95 00            sta $00,x
000AF5r 2  A9 00            lda #0
000AF7r 2  95 01            sta $01,x
000AF9r 2               
000AF9r 2               ; snake.fth:77:14 in `draw-walls`
000AF9r 2               @OPCODE_536:   ; [c64_ir] InlineCall("i")
000AF9r 2                   ; inline call(i)
000AF9r 2  48               pha
000AFAr 2  48               pha
000AFBr 2               
000AFBr 2               @target_152:
000AFBr 2               
000AFBr 2               ; src/prelude.fth:38:5 in `i`
000AFBr 2               @OPCODE_538:   ; [c64_ir] AltPop
000AFBr 2  E8               inx
000AFCr 2  E8               inx
000AFDr 2  68               pla
000AFEr 2  95 00            sta $00,x
000B00r 2  68               pla
000B01r 2  95 01            sta $01,x
000B03r 2               
000B03r 2               ; src/prelude.fth:38:8 in `i`
000B03r 2               @OPCODE_539:   ; [c64_ir] AltPop
000B03r 2  E8               inx
000B04r 2  E8               inx
000B05r 2  68               pla
000B06r 2  95 00            sta $00,x
000B08r 2  68               pla
000B09r 2  95 01            sta $01,x
000B0Br 2               
000B0Br 2               ; src/prelude.fth:38:11 in `i`
000B0Br 2               @OPCODE_540:   ; [c64_ir] AltPop
000B0Br 2  E8               inx
000B0Cr 2  E8               inx
000B0Dr 2  68               pla
000B0Er 2  95 00            sta $00,x
000B10r 2  68               pla
000B11r 2  95 01            sta $01,x
000B13r 2               
000B13r 2               ; src/prelude.fth:38:14 in `i`
000B13r 2               @OPCODE_541:   ; [c64_ir] TempStore
000B13r 2  CA               dex
000B14r 2  CA               dex
000B15r 2  B5 03            lda $03,x
000B17r 2  85 96            sta TEMP_PAX2
000B19r 2  B5 02            lda $02,x
000B1Br 2  85 95            sta TEMP_PAX1
000B1Dr 2               
000B1Dr 2               ; src/prelude.fth:38:20 in `i`
000B1Dr 2               @OPCODE_542:   ; [c64_ir] TempLoad
000B1Dr 2  E8               inx
000B1Er 2  E8               inx
000B1Fr 2  A5 95            lda TEMP_PAX1
000B21r 2  95 00            sta $00,x
000B23r 2  A5 96            lda TEMP_PAX2
000B25r 2  95 01            sta $01,x
000B27r 2               
000B27r 2               ; src/prelude.fth:38:26 in `i`
000B27r 2               @OPCODE_543:   ; [c64_ir] AltPush
000B27r 2  CA               dex
000B28r 2  CA               dex
000B29r 2  B5 03            lda $03,x
000B2Br 2  48               pha
000B2Cr 2  B5 02            lda $02,x
000B2Er 2  48               pha
000B2Fr 2               
000B2Fr 2               ; src/prelude.fth:38:29 in `i`
000B2Fr 2               @OPCODE_544:   ; [c64_ir] AltPush
000B2Fr 2  CA               dex
000B30r 2  CA               dex
000B31r 2  B5 03            lda $03,x
000B33r 2  48               pha
000B34r 2  B5 02            lda $02,x
000B36r 2  48               pha
000B37r 2               
000B37r 2               ; src/prelude.fth:38:32 in `i`
000B37r 2               @OPCODE_545:   ; [c64_ir] AltPush
000B37r 2  CA               dex
000B38r 2  CA               dex
000B39r 2  B5 03            lda $03,x
000B3Br 2  48               pha
000B3Cr 2  B5 02            lda $02,x
000B3Er 2  48               pha
000B3Fr 2               
000B3Fr 2               ; src/prelude.fth:38:35 in `i`
000B3Fr 2               @OPCODE_546:   ; [c64_ir] TempLoad
000B3Fr 2  E8               inx
000B40r 2  E8               inx
000B41r 2  A5 95            lda TEMP_PAX1
000B43r 2  95 00            sta $00,x
000B45r 2  A5 96            lda TEMP_PAX2
000B47r 2  95 01            sta $01,x
000B49r 2               
000B49r 2               ; src/prelude.fth:38:41 in `i`
000B49r 2               @OPCODE_547:   ; [c64_ir] InlineExit
000B49r 2                   ; inline exit
000B49r 2  68               pla
000B4Ar 2  68               pla
000B4Br 2               
000B4Br 2               @target_153:
000B4Br 2               
000B4Br 2               ; snake.fth:77:16 in `draw-walls`
000B4Br 2               @OPCODE_549:   ; [c64_ir] InlineCall("draw-index")
000B4Br 2                   ; inline call(draw-index)
000B4Br 2  48               pha
000B4Cr 2  48               pha
000B4Dr 2               
000B4Dr 2               @target_154:
000B4Dr 2               
000B4Dr 2               ; snake.fth:49:34 in `draw-index`
000B4Dr 2               @OPCODE_551:   ; [c64_ir] PushLiteral(1024)
000B4Dr 2  E8               inx
000B4Er 2  E8               inx
000B4Fr 2  A9 00            lda #0
000B51r 2  95 00            sta $00,x
000B53r 2  A9 04            lda #4
000B55r 2  95 01            sta $01,x
000B57r 2               
000B57r 2               ; snake.fth:49:43 in `draw-index`
000B57r 2               @OPCODE_552:   ; [c64_ir] Add
000B57r 2                   ; 21
000B57r 2  CA               dex
000B58r 2  CA               dex
000B59r 2  18               clc
000B5Ar 2  B5 00            lda $00,x
000B5Cr 2  75 02            adc $02,x
000B5Er 2  95 00            sta $00,x
000B60r 2  B5 01            lda $01,x
000B62r 2  75 03            adc $03,x
000B64r 2  95 01            sta $01,x
000B66r 2               
000B66r 2               ; snake.fth:49:45 in `draw-index`
000B66r 2               @OPCODE_553:   ; [c64_ir] Store8
000B66r 2  CA               dex
000B67r 2  CA               dex
000B68r 2  CA               dex
000B69r 2  CA               dex
000B6Ar 2  B5 02            lda $02,x
000B6Cr 2  81 04            sta ($04,x)
000B6Er 2                   ; TODO high byte
000B6Er 2               
000B6Er 2               ; snake.fth:49:48 in `draw-index`
000B6Er 2               @OPCODE_554:   ; [c64_ir] InlineExit
000B6Er 2                   ; inline exit
000B6Er 2  68               pla
000B6Fr 2  68               pla
000B70r 2               
000B70r 2               @target_155:
000B70r 2               
000B70r 2               ; snake.fth:78:5 in `draw-walls`
000B70r 2               @OPCODE_556:   ; [c64_ir] InlineCall("loopimpl")
000B70r 2                   ; inline call(loopimpl)
000B70r 2  48               pha
000B71r 2  48               pha
000B72r 2               
000B72r 2               @target_156:
000B72r 2               
000B72r 2               ; src/prelude.fth:33:12 in `loopimpl`
000B72r 2               @OPCODE_558:   ; [c64_ir] AltPop
000B72r 2  E8               inx
000B73r 2  E8               inx
000B74r 2  68               pla
000B75r 2  95 00            sta $00,x
000B77r 2  68               pla
000B78r 2  95 01            sta $01,x
000B7Ar 2               
000B7Ar 2               ; src/prelude.fth:33:15 in `loopimpl`
000B7Ar 2               @OPCODE_559:   ; [c64_ir] AltPop
000B7Ar 2  E8               inx
000B7Br 2  E8               inx
000B7Cr 2  68               pla
000B7Dr 2  95 00            sta $00,x
000B7Fr 2  68               pla
000B80r 2  95 01            sta $01,x
000B82r 2               
000B82r 2               ; src/prelude.fth:33:18 in `loopimpl`
000B82r 2               @OPCODE_560:   ; [c64_ir] AltPop
000B82r 2  E8               inx
000B83r 2  E8               inx
000B84r 2  68               pla
000B85r 2  95 00            sta $00,x
000B87r 2  68               pla
000B88r 2  95 01            sta $01,x
000B8Ar 2               
000B8Ar 2               ; src/prelude.fth:33:21 in `loopimpl`
000B8Ar 2               @OPCODE_561:   ; [c64_ir] InlineCall("1+")
000B8Ar 2                   ; inline call(1+)
000B8Ar 2  48               pha
000B8Br 2  48               pha
000B8Cr 2               
000B8Cr 2               @target_157:
000B8Cr 2               
000B8Cr 2               ; src/prelude.fth:18:8 in `1+`
000B8Cr 2               @OPCODE_563:   ; [c64_ir] PushLiteral(1)
000B8Cr 2  E8               inx
000B8Dr 2  E8               inx
000B8Er 2  A9 01            lda #1
000B90r 2  95 00            sta $00,x
000B92r 2  A9 00            lda #0
000B94r 2  95 01            sta $01,x
000B96r 2               
000B96r 2               ; src/prelude.fth:18:10 in `1+`
000B96r 2               @OPCODE_564:   ; [c64_ir] Add
000B96r 2                   ; 21
000B96r 2  CA               dex
000B97r 2  CA               dex
000B98r 2  18               clc
000B99r 2  B5 00            lda $00,x
000B9Br 2  75 02            adc $02,x
000B9Dr 2  95 00            sta $00,x
000B9Fr 2  B5 01            lda $01,x
000BA1r 2  75 03            adc $03,x
000BA3r 2  95 01            sta $01,x
000BA5r 2               
000BA5r 2               ; src/prelude.fth:18:12 in `1+`
000BA5r 2               @OPCODE_565:   ; [c64_ir] InlineExit
000BA5r 2                   ; inline exit
000BA5r 2  68               pla
000BA6r 2  68               pla
000BA7r 2               
000BA7r 2               @target_158:
000BA7r 2               
000BA7r 2               ; src/prelude.fth:33:24 in `loopimpl`
000BA7r 2               @OPCODE_567:   ; [c64_ir] InlineCall("2dup")
000BA7r 2                   ; inline call(2dup)
000BA7r 2  48               pha
000BA8r 2  48               pha
000BA9r 2               
000BA9r 2               @target_159:
000BA9r 2               
000BA9r 2               ; src/prelude.fth:8:10 in `2dup`
000BA9r 2               @OPCODE_569:   ; [c64_ir] InlineCall("over")
000BA9r 2                   ; inline call(over)
000BA9r 2  48               pha
000BAAr 2  48               pha
000BABr 2               
000BABr 2               @target_160:
000BABr 2               
000BABr 2               ; src/prelude.fth:4:10 in `over`
000BABr 2               @OPCODE_571:   ; [c64_ir] AltPush
000BABr 2  CA               dex
000BACr 2  CA               dex
000BADr 2  B5 03            lda $03,x
000BAFr 2  48               pha
000BB0r 2  B5 02            lda $02,x
000BB2r 2  48               pha
000BB3r 2               
000BB3r 2               ; src/prelude.fth:4:13 in `over`
000BB3r 2               @OPCODE_572:   ; [c64_ir] TempStore
000BB3r 2  CA               dex
000BB4r 2  CA               dex
000BB5r 2  B5 03            lda $03,x
000BB7r 2  85 96            sta TEMP_PAX2
000BB9r 2  B5 02            lda $02,x
000BBBr 2  85 95            sta TEMP_PAX1
000BBDr 2               
000BBDr 2               ; src/prelude.fth:4:19 in `over`
000BBDr 2               @OPCODE_573:   ; [c64_ir] TempLoad
000BBDr 2  E8               inx
000BBEr 2  E8               inx
000BBFr 2  A5 95            lda TEMP_PAX1
000BC1r 2  95 00            sta $00,x
000BC3r 2  A5 96            lda TEMP_PAX2
000BC5r 2  95 01            sta $01,x
000BC7r 2               
000BC7r 2               ; src/prelude.fth:4:25 in `over`
000BC7r 2               @OPCODE_574:   ; [c64_ir] AltPop
000BC7r 2  E8               inx
000BC8r 2  E8               inx
000BC9r 2  68               pla
000BCAr 2  95 00            sta $00,x
000BCCr 2  68               pla
000BCDr 2  95 01            sta $01,x
000BCFr 2               
000BCFr 2               ; src/prelude.fth:4:28 in `over`
000BCFr 2               @OPCODE_575:   ; [c64_ir] TempLoad
000BCFr 2  E8               inx
000BD0r 2  E8               inx
000BD1r 2  A5 95            lda TEMP_PAX1
000BD3r 2  95 00            sta $00,x
000BD5r 2  A5 96            lda TEMP_PAX2
000BD7r 2  95 01            sta $01,x
000BD9r 2               
000BD9r 2               ; src/prelude.fth:4:34 in `over`
000BD9r 2               @OPCODE_576:   ; [c64_ir] InlineExit
000BD9r 2                   ; inline exit
000BD9r 2  68               pla
000BDAr 2  68               pla
000BDBr 2               
000BDBr 2               @target_161:
000BDBr 2               
000BDBr 2               ; src/prelude.fth:8:15 in `2dup`
000BDBr 2               @OPCODE_578:   ; [c64_ir] InlineCall("over")
000BDBr 2                   ; inline call(over)
000BDBr 2  48               pha
000BDCr 2  48               pha
000BDDr 2               
000BDDr 2               @target_162:
000BDDr 2               
000BDDr 2               ; src/prelude.fth:4:10 in `over`
000BDDr 2               @OPCODE_580:   ; [c64_ir] AltPush
000BDDr 2  CA               dex
000BDEr 2  CA               dex
000BDFr 2  B5 03            lda $03,x
000BE1r 2  48               pha
000BE2r 2  B5 02            lda $02,x
000BE4r 2  48               pha
000BE5r 2               
000BE5r 2               ; src/prelude.fth:4:13 in `over`
000BE5r 2               @OPCODE_581:   ; [c64_ir] TempStore
000BE5r 2  CA               dex
000BE6r 2  CA               dex
000BE7r 2  B5 03            lda $03,x
000BE9r 2  85 96            sta TEMP_PAX2
000BEBr 2  B5 02            lda $02,x
000BEDr 2  85 95            sta TEMP_PAX1
000BEFr 2               
000BEFr 2               ; src/prelude.fth:4:19 in `over`
000BEFr 2               @OPCODE_582:   ; [c64_ir] TempLoad
000BEFr 2  E8               inx
000BF0r 2  E8               inx
000BF1r 2  A5 95            lda TEMP_PAX1
000BF3r 2  95 00            sta $00,x
000BF5r 2  A5 96            lda TEMP_PAX2
000BF7r 2  95 01            sta $01,x
000BF9r 2               
000BF9r 2               ; src/prelude.fth:4:25 in `over`
000BF9r 2               @OPCODE_583:   ; [c64_ir] AltPop
000BF9r 2  E8               inx
000BFAr 2  E8               inx
000BFBr 2  68               pla
000BFCr 2  95 00            sta $00,x
000BFEr 2  68               pla
000BFFr 2  95 01            sta $01,x
000C01r 2               
000C01r 2               ; src/prelude.fth:4:28 in `over`
000C01r 2               @OPCODE_584:   ; [c64_ir] TempLoad
000C01r 2  E8               inx
000C02r 2  E8               inx
000C03r 2  A5 95            lda TEMP_PAX1
000C05r 2  95 00            sta $00,x
000C07r 2  A5 96            lda TEMP_PAX2
000C09r 2  95 01            sta $01,x
000C0Br 2               
000C0Br 2               ; src/prelude.fth:4:34 in `over`
000C0Br 2               @OPCODE_585:   ; [c64_ir] InlineExit
000C0Br 2                   ; inline exit
000C0Br 2  68               pla
000C0Cr 2  68               pla
000C0Dr 2               
000C0Dr 2               @target_163:
000C0Dr 2               
000C0Dr 2               ; src/prelude.fth:8:20 in `2dup`
000C0Dr 2               @OPCODE_587:   ; [c64_ir] InlineExit
000C0Dr 2                   ; inline exit
000C0Dr 2  68               pla
000C0Er 2  68               pla
000C0Fr 2               
000C0Fr 2               @target_164:
000C0Fr 2               
000C0Fr 2               ; src/prelude.fth:33:29 in `loopimpl`
000C0Fr 2               @OPCODE_589:   ; [c64_ir] AltPush
000C0Fr 2  CA               dex
000C10r 2  CA               dex
000C11r 2  B5 03            lda $03,x
000C13r 2  48               pha
000C14r 2  B5 02            lda $02,x
000C16r 2  48               pha
000C17r 2               
000C17r 2               ; src/prelude.fth:33:32 in `loopimpl`
000C17r 2               @OPCODE_590:   ; [c64_ir] AltPush
000C17r 2  CA               dex
000C18r 2  CA               dex
000C19r 2  B5 03            lda $03,x
000C1Br 2  48               pha
000C1Cr 2  B5 02            lda $02,x
000C1Er 2  48               pha
000C1Fr 2               
000C1Fr 2               ; src/prelude.fth:33:35 in `loopimpl`
000C1Fr 2               @OPCODE_591:   ; [c64_ir] InlineCall("=")
000C1Fr 2                   ; inline call(=)
000C1Fr 2  48               pha
000C20r 2  48               pha
000C21r 2               
000C21r 2               @target_165:
000C21r 2               
000C21r 2               ; src/prelude.fth:22:8 in `=`
000C21r 2               @OPCODE_593:   ; [c64_ir] InlineCall("-")
000C21r 2                   ; inline call(-)
000C21r 2  48               pha
000C22r 2  48               pha
000C23r 2               
000C23r 2               @target_166:
000C23r 2               
000C23r 2               ; src/prelude.fth:16:12 in `-`
000C23r 2               @OPCODE_595:   ; [c64_ir] InlineCall("negate")
000C23r 2                   ; inline call(negate)
000C23r 2  48               pha
000C24r 2  48               pha
000C25r 2               
000C25r 2               @target_167:
000C25r 2               
000C25r 2               ; src/prelude.fth:15:12 in `negate`
000C25r 2               @OPCODE_597:   ; [c64_ir] InlineCall("invert")
000C25r 2                   ; inline call(invert)
000C25r 2  48               pha
000C26r 2  48               pha
000C27r 2               
000C27r 2               @target_168:
000C27r 2               
000C27r 2               ; src/prelude.fth:14:12 in `invert`
000C27r 2               @OPCODE_599:   ; [c64_ir] PushLiteral(-1)
000C27r 2  E8               inx
000C28r 2  E8               inx
000C29r 2  A9 FF            lda #255
000C2Br 2  95 00            sta $00,x
000C2Dr 2  A9 FF            lda #255
000C2Fr 2  95 01            sta $01,x
000C31r 2               
000C31r 2               ; src/prelude.fth:14:15 in `invert`
000C31r 2               @OPCODE_600:   ; [c64_ir] Nand
000C31r 2                   ; 26
000C31r 2  CA               dex
000C32r 2  CA               dex
000C33r 2  B5 00            lda $00,x
000C35r 2  35 02            and $02,x
000C37r 2  49 FF            eor #$ff
000C39r 2  95 00            sta $00,x
000C3Br 2  B5 01            lda $01,x
000C3Dr 2  35 03            and $03,x
000C3Fr 2  49 FF            eor #$ff
000C41r 2  95 01            sta $01,x
000C43r 2               
000C43r 2               ; src/prelude.fth:14:20 in `invert`
000C43r 2               @OPCODE_601:   ; [c64_ir] InlineExit
000C43r 2                   ; inline exit
000C43r 2  68               pla
000C44r 2  68               pla
000C45r 2               
000C45r 2               @target_169:
000C45r 2               
000C45r 2               ; src/prelude.fth:15:19 in `negate`
000C45r 2               @OPCODE_603:   ; [c64_ir] PushLiteral(1)
000C45r 2  E8               inx
000C46r 2  E8               inx
000C47r 2  A9 01            lda #1
000C49r 2  95 00            sta $00,x
000C4Br 2  A9 00            lda #0
000C4Dr 2  95 01            sta $01,x
000C4Fr 2               
000C4Fr 2               ; src/prelude.fth:15:21 in `negate`
000C4Fr 2               @OPCODE_604:   ; [c64_ir] Add
000C4Fr 2                   ; 21
000C4Fr 2  CA               dex
000C50r 2  CA               dex
000C51r 2  18               clc
000C52r 2  B5 00            lda $00,x
000C54r 2  75 02            adc $02,x
000C56r 2  95 00            sta $00,x
000C58r 2  B5 01            lda $01,x
000C5Ar 2  75 03            adc $03,x
000C5Cr 2  95 01            sta $01,x
000C5Er 2               
000C5Er 2               ; src/prelude.fth:15:23 in `negate`
000C5Er 2               @OPCODE_605:   ; [c64_ir] InlineExit
000C5Er 2                   ; inline exit
000C5Er 2  68               pla
000C5Fr 2  68               pla
000C60r 2               
000C60r 2               @target_170:
000C60r 2               
000C60r 2               ; src/prelude.fth:16:19 in `-`
000C60r 2               @OPCODE_607:   ; [c64_ir] Add
000C60r 2                   ; 21
000C60r 2  CA               dex
000C61r 2  CA               dex
000C62r 2  18               clc
000C63r 2  B5 00            lda $00,x
000C65r 2  75 02            adc $02,x
000C67r 2  95 00            sta $00,x
000C69r 2  B5 01            lda $01,x
000C6Br 2  75 03            adc $03,x
000C6Dr 2  95 01            sta $01,x
000C6Fr 2               
000C6Fr 2               ; src/prelude.fth:16:21 in `-`
000C6Fr 2               @OPCODE_608:   ; [c64_ir] InlineExit
000C6Fr 2                   ; inline exit
000C6Fr 2  68               pla
000C70r 2  68               pla
000C71r 2               
000C71r 2               @target_171:
000C71r 2               
000C71r 2               ; src/prelude.fth:22:10 in `=`
000C71r 2               @OPCODE_610:   ; [c64_ir] InlineCall("0=")
000C71r 2                   ; inline call(0=)
000C71r 2  48               pha
000C72r 2  48               pha
000C73r 2               
000C73r 2               @target_172:
000C73r 2               
000C73r 2               ; src/prelude.fth:21:8 in `0=`
000C73r 2               @OPCODE_612:   ; [c64_ir] JumpIf0(174)
000C73r 2  CA               dex
000C74r 2  CA               dex
000C75r 2  B5 02            lda $02,x
000C77r 2  15 03            ora $03,x
000C79r 2  D0 03            bne *+5
000C7Br 2  4C rr rr         jmp @target_174
000C7Er 2               
000C7Er 2               @target_173:
000C7Er 2               
000C7Er 2               ; src/prelude.fth:21:11 in `0=`
000C7Er 2               @OPCODE_614:   ; [c64_ir] PushLiteral(0)
000C7Er 2  E8               inx
000C7Fr 2  E8               inx
000C80r 2  A9 00            lda #0
000C82r 2  95 00            sta $00,x
000C84r 2  A9 00            lda #0
000C86r 2  95 01            sta $01,x
000C88r 2               
000C88r 2               ; src/prelude.fth:21:13 in `0=`
000C88r 2               @OPCODE_615:   ; [c64_ir] JumpElse(175)
000C88r 2  4C rr rr         jmp @target_175
000C8Br 2               
000C8Br 2               @target_174:
000C8Br 2               
000C8Br 2               ; src/prelude.fth:21:18 in `0=`
000C8Br 2               @OPCODE_617:   ; [c64_ir] PushLiteral(-1)
000C8Br 2  E8               inx
000C8Cr 2  E8               inx
000C8Dr 2  A9 FF            lda #255
000C8Fr 2  95 00            sta $00,x
000C91r 2  A9 FF            lda #255
000C93r 2  95 01            sta $01,x
000C95r 2               
000C95r 2               ; src/prelude.fth:21:21 in `0=`
000C95r 2               @OPCODE_618:   ; [c64_ir] JumpTarget(174)
000C95r 2               
000C95r 2               @target_175:
000C95r 2               
000C95r 2               ; src/prelude.fth:21:26 in `0=`
000C95r 2               @OPCODE_620:   ; [c64_ir] InlineExit
000C95r 2                   ; inline exit
000C95r 2  68               pla
000C96r 2  68               pla
000C97r 2               
000C97r 2               @target_176:
000C97r 2               
000C97r 2               ; src/prelude.fth:22:13 in `=`
000C97r 2               @OPCODE_622:   ; [c64_ir] InlineExit
000C97r 2                   ; inline exit
000C97r 2  68               pla
000C98r 2  68               pla
000C99r 2               
000C99r 2               @target_177:
000C99r 2               
000C99r 2               ; src/prelude.fth:33:37 in `loopimpl`
000C99r 2               @OPCODE_624:   ; [c64_ir] InlineCall("swap")
000C99r 2                   ; inline call(swap)
000C99r 2  48               pha
000C9Ar 2  48               pha
000C9Br 2               
000C9Br 2               @target_178:
000C9Br 2               
000C9Br 2               ; src/prelude.fth:3:10 in `swap`
000C9Br 2               @OPCODE_626:   ; [c64_ir] AltPush
000C9Br 2  CA               dex
000C9Cr 2  CA               dex
000C9Dr 2  B5 03            lda $03,x
000C9Fr 2  48               pha
000CA0r 2  B5 02            lda $02,x
000CA2r 2  48               pha
000CA3r 2               
000CA3r 2               ; src/prelude.fth:3:13 in `swap`
000CA3r 2               @OPCODE_627:   ; [c64_ir] TempStore
000CA3r 2  CA               dex
000CA4r 2  CA               dex
000CA5r 2  B5 03            lda $03,x
000CA7r 2  85 96            sta TEMP_PAX2
000CA9r 2  B5 02            lda $02,x
000CABr 2  85 95            sta TEMP_PAX1
000CADr 2               
000CADr 2               ; src/prelude.fth:3:19 in `swap`
000CADr 2               @OPCODE_628:   ; [c64_ir] AltPop
000CADr 2  E8               inx
000CAEr 2  E8               inx
000CAFr 2  68               pla
000CB0r 2  95 00            sta $00,x
000CB2r 2  68               pla
000CB3r 2  95 01            sta $01,x
000CB5r 2               
000CB5r 2               ; src/prelude.fth:3:22 in `swap`
000CB5r 2               @OPCODE_629:   ; [c64_ir] TempLoad
000CB5r 2  E8               inx
000CB6r 2  E8               inx
000CB7r 2  A5 95            lda TEMP_PAX1
000CB9r 2  95 00            sta $00,x
000CBBr 2  A5 96            lda TEMP_PAX2
000CBDr 2  95 01            sta $01,x
000CBFr 2               
000CBFr 2               ; src/prelude.fth:3:28 in `swap`
000CBFr 2               @OPCODE_630:   ; [c64_ir] InlineExit
000CBFr 2                   ; inline exit
000CBFr 2  68               pla
000CC0r 2  68               pla
000CC1r 2               
000CC1r 2               @target_179:
000CC1r 2               
000CC1r 2               ; src/prelude.fth:33:42 in `loopimpl`
000CC1r 2               @OPCODE_632:   ; [c64_ir] AltPush
000CC1r 2  CA               dex
000CC2r 2  CA               dex
000CC3r 2  B5 03            lda $03,x
000CC5r 2  48               pha
000CC6r 2  B5 02            lda $02,x
000CC8r 2  48               pha
000CC9r 2               
000CC9r 2               ; src/prelude.fth:33:45 in `loopimpl`
000CC9r 2               @OPCODE_633:   ; [c64_ir] InlineExit
000CC9r 2                   ; inline exit
000CC9r 2  68               pla
000CCAr 2  68               pla
000CCBr 2               
000CCBr 2               @target_180:
000CCBr 2               
000CCBr 2               ; snake.fth:78:5 in `draw-walls`
000CCBr 2               @OPCODE_635:   ; [c64_ir] LoopIf0(151)
000CCBr 2  CA               dex
000CCCr 2  CA               dex
000CCDr 2  B5 02            lda $02,x
000CCFr 2  15 03            ora $03,x
000CD1r 2  D0 03            bne *+5
000CD3r 2  4C rr rr         jmp @target_151
000CD6r 2               
000CD6r 2               @target_181:
000CD6r 2               
000CD6r 2               ; snake.fth:78:5 in `draw-walls`
000CD6r 2               @OPCODE_637:   ; [c64_ir] AltPop
000CD6r 2  E8               inx
000CD7r 2  E8               inx
000CD8r 2  68               pla
000CD9r 2  95 00            sta $00,x
000CDBr 2  68               pla
000CDCr 2  95 01            sta $01,x
000CDEr 2               
000CDEr 2               ; snake.fth:78:5 in `draw-walls`
000CDEr 2               @OPCODE_638:   ; [c64_ir] Drop
000CDEr 2  CA               dex
000CDFr 2  CA               dex
000CE0r 2               
000CE0r 2               ; snake.fth:78:5 in `draw-walls`
000CE0r 2               @OPCODE_639:   ; [c64_ir] AltPop
000CE0r 2  E8               inx
000CE1r 2  E8               inx
000CE2r 2  68               pla
000CE3r 2  95 00            sta $00,x
000CE5r 2  68               pla
000CE6r 2  95 01            sta $01,x
000CE8r 2               
000CE8r 2               ; snake.fth:78:5 in `draw-walls`
000CE8r 2               @OPCODE_640:   ; [c64_ir] Drop
000CE8r 2  CA               dex
000CE9r 2  CA               dex
000CEAr 2               
000CEAr 2               ; snake.fth:81:5 in `draw-walls`
000CEAr 2               @OPCODE_641:   ; [c64_ir] PushLiteral(40)
000CEAr 2  E8               inx
000CEBr 2  E8               inx
000CECr 2  A9 28            lda #40
000CEEr 2  95 00            sta $00,x
000CF0r 2  A9 00            lda #0
000CF2r 2  95 01            sta $01,x
000CF4r 2               
000CF4r 2               ; snake.fth:81:11 in `draw-walls`
000CF4r 2               @OPCODE_642:   ; [c64_ir] PushLiteral(1)
000CF4r 2  E8               inx
000CF5r 2  E8               inx
000CF6r 2  A9 01            lda #1
000CF8r 2  95 00            sta $00,x
000CFAr 2  A9 00            lda #0
000CFCr 2  95 01            sta $01,x
000CFEr 2               
000CFEr 2               ; snake.fth:81:13 in `draw-walls`
000CFEr 2               @OPCODE_643:   ; [c64_ir] InlineCall("-")
000CFEr 2                   ; inline call(-)
000CFEr 2  48               pha
000CFFr 2  48               pha
000D00r 2               
000D00r 2               @target_182:
000D00r 2               
000D00r 2               ; src/prelude.fth:16:12 in `-`
000D00r 2               @OPCODE_645:   ; [c64_ir] InlineCall("negate")
000D00r 2                   ; inline call(negate)
000D00r 2  48               pha
000D01r 2  48               pha
000D02r 2               
000D02r 2               @target_183:
000D02r 2               
000D02r 2               ; src/prelude.fth:15:12 in `negate`
000D02r 2               @OPCODE_647:   ; [c64_ir] InlineCall("invert")
000D02r 2                   ; inline call(invert)
000D02r 2  48               pha
000D03r 2  48               pha
000D04r 2               
000D04r 2               @target_184:
000D04r 2               
000D04r 2               ; src/prelude.fth:14:12 in `invert`
000D04r 2               @OPCODE_649:   ; [c64_ir] PushLiteral(-1)
000D04r 2  E8               inx
000D05r 2  E8               inx
000D06r 2  A9 FF            lda #255
000D08r 2  95 00            sta $00,x
000D0Ar 2  A9 FF            lda #255
000D0Cr 2  95 01            sta $01,x
000D0Er 2               
000D0Er 2               ; src/prelude.fth:14:15 in `invert`
000D0Er 2               @OPCODE_650:   ; [c64_ir] Nand
000D0Er 2                   ; 26
000D0Er 2  CA               dex
000D0Fr 2  CA               dex
000D10r 2  B5 00            lda $00,x
000D12r 2  35 02            and $02,x
000D14r 2  49 FF            eor #$ff
000D16r 2  95 00            sta $00,x
000D18r 2  B5 01            lda $01,x
000D1Ar 2  35 03            and $03,x
000D1Cr 2  49 FF            eor #$ff
000D1Er 2  95 01            sta $01,x
000D20r 2               
000D20r 2               ; src/prelude.fth:14:20 in `invert`
000D20r 2               @OPCODE_651:   ; [c64_ir] InlineExit
000D20r 2                   ; inline exit
000D20r 2  68               pla
000D21r 2  68               pla
000D22r 2               
000D22r 2               @target_185:
000D22r 2               
000D22r 2               ; src/prelude.fth:15:19 in `negate`
000D22r 2               @OPCODE_653:   ; [c64_ir] PushLiteral(1)
000D22r 2  E8               inx
000D23r 2  E8               inx
000D24r 2  A9 01            lda #1
000D26r 2  95 00            sta $00,x
000D28r 2  A9 00            lda #0
000D2Ar 2  95 01            sta $01,x
000D2Cr 2               
000D2Cr 2               ; src/prelude.fth:15:21 in `negate`
000D2Cr 2               @OPCODE_654:   ; [c64_ir] Add
000D2Cr 2                   ; 21
000D2Cr 2  CA               dex
000D2Dr 2  CA               dex
000D2Er 2  18               clc
000D2Fr 2  B5 00            lda $00,x
000D31r 2  75 02            adc $02,x
000D33r 2  95 00            sta $00,x
000D35r 2  B5 01            lda $01,x
000D37r 2  75 03            adc $03,x
000D39r 2  95 01            sta $01,x
000D3Br 2               
000D3Br 2               ; src/prelude.fth:15:23 in `negate`
000D3Br 2               @OPCODE_655:   ; [c64_ir] InlineExit
000D3Br 2                   ; inline exit
000D3Br 2  68               pla
000D3Cr 2  68               pla
000D3Dr 2               
000D3Dr 2               @target_186:
000D3Dr 2               
000D3Dr 2               ; src/prelude.fth:16:19 in `-`
000D3Dr 2               @OPCODE_657:   ; [c64_ir] Add
000D3Dr 2                   ; 21
000D3Dr 2  CA               dex
000D3Er 2  CA               dex
000D3Fr 2  18               clc
000D40r 2  B5 00            lda $00,x
000D42r 2  75 02            adc $02,x
000D44r 2  95 00            sta $00,x
000D46r 2  B5 01            lda $01,x
000D48r 2  75 03            adc $03,x
000D4Ar 2  95 01            sta $01,x
000D4Cr 2               
000D4Cr 2               ; src/prelude.fth:16:21 in `-`
000D4Cr 2               @OPCODE_658:   ; [c64_ir] InlineExit
000D4Cr 2                   ; inline exit
000D4Cr 2  68               pla
000D4Dr 2  68               pla
000D4Er 2               
000D4Er 2               @target_187:
000D4Er 2               
000D4Er 2               ; snake.fth:82:5 in `draw-walls`
000D4Er 2               @OPCODE_660:   ; [c64_ir] PushLiteral(25)
000D4Er 2  E8               inx
000D4Fr 2  E8               inx
000D50r 2  A9 19            lda #25
000D52r 2  95 00            sta $00,x
000D54r 2  A9 00            lda #0
000D56r 2  95 01            sta $01,x
000D58r 2               
000D58r 2               ; snake.fth:82:12 in `draw-walls`
000D58r 2               @OPCODE_661:   ; [c64_ir] PushLiteral(0)
000D58r 2  E8               inx
000D59r 2  E8               inx
000D5Ar 2  A9 00            lda #0
000D5Cr 2  95 00            sta $00,x
000D5Er 2  A9 00            lda #0
000D60r 2  95 01            sta $01,x
000D62r 2               
000D62r 2               ; snake.fth:82:14 in `draw-walls`
000D62r 2               @OPCODE_662:   ; [c64_ir] AltPush
000D62r 2  CA               dex
000D63r 2  CA               dex
000D64r 2  B5 03            lda $03,x
000D66r 2  48               pha
000D67r 2  B5 02            lda $02,x
000D69r 2  48               pha
000D6Ar 2               
000D6Ar 2               ; snake.fth:82:14 in `draw-walls`
000D6Ar 2               @OPCODE_663:   ; [c64_ir] AltPush
000D6Ar 2  CA               dex
000D6Br 2  CA               dex
000D6Cr 2  B5 03            lda $03,x
000D6Er 2  48               pha
000D6Fr 2  B5 02            lda $02,x
000D71r 2  48               pha
000D72r 2               
000D72r 2               ; snake.fth:82:14 in `draw-walls`
000D72r 2               @OPCODE_664:   ; [c64_ir] LoopTarget(187)
000D72r 2               
000D72r 2               @target_188:
000D72r 2               
000D72r 2               ; snake.fth:83:9 in `draw-walls`
000D72r 2               @OPCODE_666:   ; [c64_ir] PushLiteral(230)
000D72r 2  E8               inx
000D73r 2  E8               inx
000D74r 2  A9 E6            lda #230
000D76r 2  95 00            sta $00,x
000D78r 2  A9 00            lda #0
000D7Ar 2  95 01            sta $01,x
000D7Cr 2               
000D7Cr 2               ; snake.fth:83:14 in `draw-walls`
000D7Cr 2               @OPCODE_667:   ; [c64_ir] InlineCall("over")
000D7Cr 2                   ; inline call(over)
000D7Cr 2  48               pha
000D7Dr 2  48               pha
000D7Er 2               
000D7Er 2               @target_189:
000D7Er 2               
000D7Er 2               ; src/prelude.fth:4:10 in `over`
000D7Er 2               @OPCODE_669:   ; [c64_ir] AltPush
000D7Er 2  CA               dex
000D7Fr 2  CA               dex
000D80r 2  B5 03            lda $03,x
000D82r 2  48               pha
000D83r 2  B5 02            lda $02,x
000D85r 2  48               pha
000D86r 2               
000D86r 2               ; src/prelude.fth:4:13 in `over`
000D86r 2               @OPCODE_670:   ; [c64_ir] TempStore
000D86r 2  CA               dex
000D87r 2  CA               dex
000D88r 2  B5 03            lda $03,x
000D8Ar 2  85 96            sta TEMP_PAX2
000D8Cr 2  B5 02            lda $02,x
000D8Er 2  85 95            sta TEMP_PAX1
000D90r 2               
000D90r 2               ; src/prelude.fth:4:19 in `over`
000D90r 2               @OPCODE_671:   ; [c64_ir] TempLoad
000D90r 2  E8               inx
000D91r 2  E8               inx
000D92r 2  A5 95            lda TEMP_PAX1
000D94r 2  95 00            sta $00,x
000D96r 2  A5 96            lda TEMP_PAX2
000D98r 2  95 01            sta $01,x
000D9Ar 2               
000D9Ar 2               ; src/prelude.fth:4:25 in `over`
000D9Ar 2               @OPCODE_672:   ; [c64_ir] AltPop
000D9Ar 2  E8               inx
000D9Br 2  E8               inx
000D9Cr 2  68               pla
000D9Dr 2  95 00            sta $00,x
000D9Fr 2  68               pla
000DA0r 2  95 01            sta $01,x
000DA2r 2               
000DA2r 2               ; src/prelude.fth:4:28 in `over`
000DA2r 2               @OPCODE_673:   ; [c64_ir] TempLoad
000DA2r 2  E8               inx
000DA3r 2  E8               inx
000DA4r 2  A5 95            lda TEMP_PAX1
000DA6r 2  95 00            sta $00,x
000DA8r 2  A5 96            lda TEMP_PAX2
000DAAr 2  95 01            sta $01,x
000DACr 2               
000DACr 2               ; src/prelude.fth:4:34 in `over`
000DACr 2               @OPCODE_674:   ; [c64_ir] InlineExit
000DACr 2                   ; inline exit
000DACr 2  68               pla
000DADr 2  68               pla
000DAEr 2               
000DAEr 2               @target_190:
000DAEr 2               
000DAEr 2               ; snake.fth:83:19 in `draw-walls`
000DAEr 2               @OPCODE_676:   ; [c64_ir] InlineCall("draw-index")
000DAEr 2                   ; inline call(draw-index)
000DAEr 2  48               pha
000DAFr 2  48               pha
000DB0r 2               
000DB0r 2               @target_191:
000DB0r 2               
000DB0r 2               ; snake.fth:49:34 in `draw-index`
000DB0r 2               @OPCODE_678:   ; [c64_ir] PushLiteral(1024)
000DB0r 2  E8               inx
000DB1r 2  E8               inx
000DB2r 2  A9 00            lda #0
000DB4r 2  95 00            sta $00,x
000DB6r 2  A9 04            lda #4
000DB8r 2  95 01            sta $01,x
000DBAr 2               
000DBAr 2               ; snake.fth:49:43 in `draw-index`
000DBAr 2               @OPCODE_679:   ; [c64_ir] Add
000DBAr 2                   ; 21
000DBAr 2  CA               dex
000DBBr 2  CA               dex
000DBCr 2  18               clc
000DBDr 2  B5 00            lda $00,x
000DBFr 2  75 02            adc $02,x
000DC1r 2  95 00            sta $00,x
000DC3r 2  B5 01            lda $01,x
000DC5r 2  75 03            adc $03,x
000DC7r 2  95 01            sta $01,x
000DC9r 2               
000DC9r 2               ; snake.fth:49:45 in `draw-index`
000DC9r 2               @OPCODE_680:   ; [c64_ir] Store8
000DC9r 2  CA               dex
000DCAr 2  CA               dex
000DCBr 2  CA               dex
000DCCr 2  CA               dex
000DCDr 2  B5 02            lda $02,x
000DCFr 2  81 04            sta ($04,x)
000DD1r 2                   ; TODO high byte
000DD1r 2               
000DD1r 2               ; snake.fth:49:48 in `draw-index`
000DD1r 2               @OPCODE_681:   ; [c64_ir] InlineExit
000DD1r 2                   ; inline exit
000DD1r 2  68               pla
000DD2r 2  68               pla
000DD3r 2               
000DD3r 2               @target_192:
000DD3r 2               
000DD3r 2               ; snake.fth:84:9 in `draw-walls`
000DD3r 2               @OPCODE_683:   ; [c64_ir] PushLiteral(40)
000DD3r 2  E8               inx
000DD4r 2  E8               inx
000DD5r 2  A9 28            lda #40
000DD7r 2  95 00            sta $00,x
000DD9r 2  A9 00            lda #0
000DDBr 2  95 01            sta $01,x
000DDDr 2               
000DDDr 2               ; snake.fth:84:15 in `draw-walls`
000DDDr 2               @OPCODE_684:   ; [c64_ir] Add
000DDDr 2                   ; 21
000DDDr 2  CA               dex
000DDEr 2  CA               dex
000DDFr 2  18               clc
000DE0r 2  B5 00            lda $00,x
000DE2r 2  75 02            adc $02,x
000DE4r 2  95 00            sta $00,x
000DE6r 2  B5 01            lda $01,x
000DE8r 2  75 03            adc $03,x
000DEAr 2  95 01            sta $01,x
000DECr 2               
000DECr 2               ; snake.fth:85:5 in `draw-walls`
000DECr 2               @OPCODE_685:   ; [c64_ir] InlineCall("loopimpl")
000DECr 2                   ; inline call(loopimpl)
000DECr 2  48               pha
000DEDr 2  48               pha
000DEEr 2               
000DEEr 2               @target_193:
000DEEr 2               
000DEEr 2               ; src/prelude.fth:33:12 in `loopimpl`
000DEEr 2               @OPCODE_687:   ; [c64_ir] AltPop
000DEEr 2  E8               inx
000DEFr 2  E8               inx
000DF0r 2  68               pla
000DF1r 2  95 00            sta $00,x
000DF3r 2  68               pla
000DF4r 2  95 01            sta $01,x
000DF6r 2               
000DF6r 2               ; src/prelude.fth:33:15 in `loopimpl`
000DF6r 2               @OPCODE_688:   ; [c64_ir] AltPop
000DF6r 2  E8               inx
000DF7r 2  E8               inx
000DF8r 2  68               pla
000DF9r 2  95 00            sta $00,x
000DFBr 2  68               pla
000DFCr 2  95 01            sta $01,x
000DFEr 2               
000DFEr 2               ; src/prelude.fth:33:18 in `loopimpl`
000DFEr 2               @OPCODE_689:   ; [c64_ir] AltPop
000DFEr 2  E8               inx
000DFFr 2  E8               inx
000E00r 2  68               pla
000E01r 2  95 00            sta $00,x
000E03r 2  68               pla
000E04r 2  95 01            sta $01,x
000E06r 2               
000E06r 2               ; src/prelude.fth:33:21 in `loopimpl`
000E06r 2               @OPCODE_690:   ; [c64_ir] InlineCall("1+")
000E06r 2                   ; inline call(1+)
000E06r 2  48               pha
000E07r 2  48               pha
000E08r 2               
000E08r 2               @target_194:
000E08r 2               
000E08r 2               ; src/prelude.fth:18:8 in `1+`
000E08r 2               @OPCODE_692:   ; [c64_ir] PushLiteral(1)
000E08r 2  E8               inx
000E09r 2  E8               inx
000E0Ar 2  A9 01            lda #1
000E0Cr 2  95 00            sta $00,x
000E0Er 2  A9 00            lda #0
000E10r 2  95 01            sta $01,x
000E12r 2               
000E12r 2               ; src/prelude.fth:18:10 in `1+`
000E12r 2               @OPCODE_693:   ; [c64_ir] Add
000E12r 2                   ; 21
000E12r 2  CA               dex
000E13r 2  CA               dex
000E14r 2  18               clc
000E15r 2  B5 00            lda $00,x
000E17r 2  75 02            adc $02,x
000E19r 2  95 00            sta $00,x
000E1Br 2  B5 01            lda $01,x
000E1Dr 2  75 03            adc $03,x
000E1Fr 2  95 01            sta $01,x
000E21r 2               
000E21r 2               ; src/prelude.fth:18:12 in `1+`
000E21r 2               @OPCODE_694:   ; [c64_ir] InlineExit
000E21r 2                   ; inline exit
000E21r 2  68               pla
000E22r 2  68               pla
000E23r 2               
000E23r 2               @target_195:
000E23r 2               
000E23r 2               ; src/prelude.fth:33:24 in `loopimpl`
000E23r 2               @OPCODE_696:   ; [c64_ir] InlineCall("2dup")
000E23r 2                   ; inline call(2dup)
000E23r 2  48               pha
000E24r 2  48               pha
000E25r 2               
000E25r 2               @target_196:
000E25r 2               
000E25r 2               ; src/prelude.fth:8:10 in `2dup`
000E25r 2               @OPCODE_698:   ; [c64_ir] InlineCall("over")
000E25r 2                   ; inline call(over)
000E25r 2  48               pha
000E26r 2  48               pha
000E27r 2               
000E27r 2               @target_197:
000E27r 2               
000E27r 2               ; src/prelude.fth:4:10 in `over`
000E27r 2               @OPCODE_700:   ; [c64_ir] AltPush
000E27r 2  CA               dex
000E28r 2  CA               dex
000E29r 2  B5 03            lda $03,x
000E2Br 2  48               pha
000E2Cr 2  B5 02            lda $02,x
000E2Er 2  48               pha
000E2Fr 2               
000E2Fr 2               ; src/prelude.fth:4:13 in `over`
000E2Fr 2               @OPCODE_701:   ; [c64_ir] TempStore
000E2Fr 2  CA               dex
000E30r 2  CA               dex
000E31r 2  B5 03            lda $03,x
000E33r 2  85 96            sta TEMP_PAX2
000E35r 2  B5 02            lda $02,x
000E37r 2  85 95            sta TEMP_PAX1
000E39r 2               
000E39r 2               ; src/prelude.fth:4:19 in `over`
000E39r 2               @OPCODE_702:   ; [c64_ir] TempLoad
000E39r 2  E8               inx
000E3Ar 2  E8               inx
000E3Br 2  A5 95            lda TEMP_PAX1
000E3Dr 2  95 00            sta $00,x
000E3Fr 2  A5 96            lda TEMP_PAX2
000E41r 2  95 01            sta $01,x
000E43r 2               
000E43r 2               ; src/prelude.fth:4:25 in `over`
000E43r 2               @OPCODE_703:   ; [c64_ir] AltPop
000E43r 2  E8               inx
000E44r 2  E8               inx
000E45r 2  68               pla
000E46r 2  95 00            sta $00,x
000E48r 2  68               pla
000E49r 2  95 01            sta $01,x
000E4Br 2               
000E4Br 2               ; src/prelude.fth:4:28 in `over`
000E4Br 2               @OPCODE_704:   ; [c64_ir] TempLoad
000E4Br 2  E8               inx
000E4Cr 2  E8               inx
000E4Dr 2  A5 95            lda TEMP_PAX1
000E4Fr 2  95 00            sta $00,x
000E51r 2  A5 96            lda TEMP_PAX2
000E53r 2  95 01            sta $01,x
000E55r 2               
000E55r 2               ; src/prelude.fth:4:34 in `over`
000E55r 2               @OPCODE_705:   ; [c64_ir] InlineExit
000E55r 2                   ; inline exit
000E55r 2  68               pla
000E56r 2  68               pla
000E57r 2               
000E57r 2               @target_198:
000E57r 2               
000E57r 2               ; src/prelude.fth:8:15 in `2dup`
000E57r 2               @OPCODE_707:   ; [c64_ir] InlineCall("over")
000E57r 2                   ; inline call(over)
000E57r 2  48               pha
000E58r 2  48               pha
000E59r 2               
000E59r 2               @target_199:
000E59r 2               
000E59r 2               ; src/prelude.fth:4:10 in `over`
000E59r 2               @OPCODE_709:   ; [c64_ir] AltPush
000E59r 2  CA               dex
000E5Ar 2  CA               dex
000E5Br 2  B5 03            lda $03,x
000E5Dr 2  48               pha
000E5Er 2  B5 02            lda $02,x
000E60r 2  48               pha
000E61r 2               
000E61r 2               ; src/prelude.fth:4:13 in `over`
000E61r 2               @OPCODE_710:   ; [c64_ir] TempStore
000E61r 2  CA               dex
000E62r 2  CA               dex
000E63r 2  B5 03            lda $03,x
000E65r 2  85 96            sta TEMP_PAX2
000E67r 2  B5 02            lda $02,x
000E69r 2  85 95            sta TEMP_PAX1
000E6Br 2               
000E6Br 2               ; src/prelude.fth:4:19 in `over`
000E6Br 2               @OPCODE_711:   ; [c64_ir] TempLoad
000E6Br 2  E8               inx
000E6Cr 2  E8               inx
000E6Dr 2  A5 95            lda TEMP_PAX1
000E6Fr 2  95 00            sta $00,x
000E71r 2  A5 96            lda TEMP_PAX2
000E73r 2  95 01            sta $01,x
000E75r 2               
000E75r 2               ; src/prelude.fth:4:25 in `over`
000E75r 2               @OPCODE_712:   ; [c64_ir] AltPop
000E75r 2  E8               inx
000E76r 2  E8               inx
000E77r 2  68               pla
000E78r 2  95 00            sta $00,x
000E7Ar 2  68               pla
000E7Br 2  95 01            sta $01,x
000E7Dr 2               
000E7Dr 2               ; src/prelude.fth:4:28 in `over`
000E7Dr 2               @OPCODE_713:   ; [c64_ir] TempLoad
000E7Dr 2  E8               inx
000E7Er 2  E8               inx
000E7Fr 2  A5 95            lda TEMP_PAX1
000E81r 2  95 00            sta $00,x
000E83r 2  A5 96            lda TEMP_PAX2
000E85r 2  95 01            sta $01,x
000E87r 2               
000E87r 2               ; src/prelude.fth:4:34 in `over`
000E87r 2               @OPCODE_714:   ; [c64_ir] InlineExit
000E87r 2                   ; inline exit
000E87r 2  68               pla
000E88r 2  68               pla
000E89r 2               
000E89r 2               @target_200:
000E89r 2               
000E89r 2               ; src/prelude.fth:8:20 in `2dup`
000E89r 2               @OPCODE_716:   ; [c64_ir] InlineExit
000E89r 2                   ; inline exit
000E89r 2  68               pla
000E8Ar 2  68               pla
000E8Br 2               
000E8Br 2               @target_201:
000E8Br 2               
000E8Br 2               ; src/prelude.fth:33:29 in `loopimpl`
000E8Br 2               @OPCODE_718:   ; [c64_ir] AltPush
000E8Br 2  CA               dex
000E8Cr 2  CA               dex
000E8Dr 2  B5 03            lda $03,x
000E8Fr 2  48               pha
000E90r 2  B5 02            lda $02,x
000E92r 2  48               pha
000E93r 2               
000E93r 2               ; src/prelude.fth:33:32 in `loopimpl`
000E93r 2               @OPCODE_719:   ; [c64_ir] AltPush
000E93r 2  CA               dex
000E94r 2  CA               dex
000E95r 2  B5 03            lda $03,x
000E97r 2  48               pha
000E98r 2  B5 02            lda $02,x
000E9Ar 2  48               pha
000E9Br 2               
000E9Br 2               ; src/prelude.fth:33:35 in `loopimpl`
000E9Br 2               @OPCODE_720:   ; [c64_ir] InlineCall("=")
000E9Br 2                   ; inline call(=)
000E9Br 2  48               pha
000E9Cr 2  48               pha
000E9Dr 2               
000E9Dr 2               @target_202:
000E9Dr 2               
000E9Dr 2               ; src/prelude.fth:22:8 in `=`
000E9Dr 2               @OPCODE_722:   ; [c64_ir] InlineCall("-")
000E9Dr 2                   ; inline call(-)
000E9Dr 2  48               pha
000E9Er 2  48               pha
000E9Fr 2               
000E9Fr 2               @target_203:
000E9Fr 2               
000E9Fr 2               ; src/prelude.fth:16:12 in `-`
000E9Fr 2               @OPCODE_724:   ; [c64_ir] InlineCall("negate")
000E9Fr 2                   ; inline call(negate)
000E9Fr 2  48               pha
000EA0r 2  48               pha
000EA1r 2               
000EA1r 2               @target_204:
000EA1r 2               
000EA1r 2               ; src/prelude.fth:15:12 in `negate`
000EA1r 2               @OPCODE_726:   ; [c64_ir] InlineCall("invert")
000EA1r 2                   ; inline call(invert)
000EA1r 2  48               pha
000EA2r 2  48               pha
000EA3r 2               
000EA3r 2               @target_205:
000EA3r 2               
000EA3r 2               ; src/prelude.fth:14:12 in `invert`
000EA3r 2               @OPCODE_728:   ; [c64_ir] PushLiteral(-1)
000EA3r 2  E8               inx
000EA4r 2  E8               inx
000EA5r 2  A9 FF            lda #255
000EA7r 2  95 00            sta $00,x
000EA9r 2  A9 FF            lda #255
000EABr 2  95 01            sta $01,x
000EADr 2               
000EADr 2               ; src/prelude.fth:14:15 in `invert`
000EADr 2               @OPCODE_729:   ; [c64_ir] Nand
000EADr 2                   ; 26
000EADr 2  CA               dex
000EAEr 2  CA               dex
000EAFr 2  B5 00            lda $00,x
000EB1r 2  35 02            and $02,x
000EB3r 2  49 FF            eor #$ff
000EB5r 2  95 00            sta $00,x
000EB7r 2  B5 01            lda $01,x
000EB9r 2  35 03            and $03,x
000EBBr 2  49 FF            eor #$ff
000EBDr 2  95 01            sta $01,x
000EBFr 2               
000EBFr 2               ; src/prelude.fth:14:20 in `invert`
000EBFr 2               @OPCODE_730:   ; [c64_ir] InlineExit
000EBFr 2                   ; inline exit
000EBFr 2  68               pla
000EC0r 2  68               pla
000EC1r 2               
000EC1r 2               @target_206:
000EC1r 2               
000EC1r 2               ; src/prelude.fth:15:19 in `negate`
000EC1r 2               @OPCODE_732:   ; [c64_ir] PushLiteral(1)
000EC1r 2  E8               inx
000EC2r 2  E8               inx
000EC3r 2  A9 01            lda #1
000EC5r 2  95 00            sta $00,x
000EC7r 2  A9 00            lda #0
000EC9r 2  95 01            sta $01,x
000ECBr 2               
000ECBr 2               ; src/prelude.fth:15:21 in `negate`
000ECBr 2               @OPCODE_733:   ; [c64_ir] Add
000ECBr 2                   ; 21
000ECBr 2  CA               dex
000ECCr 2  CA               dex
000ECDr 2  18               clc
000ECEr 2  B5 00            lda $00,x
000ED0r 2  75 02            adc $02,x
000ED2r 2  95 00            sta $00,x
000ED4r 2  B5 01            lda $01,x
000ED6r 2  75 03            adc $03,x
000ED8r 2  95 01            sta $01,x
000EDAr 2               
000EDAr 2               ; src/prelude.fth:15:23 in `negate`
000EDAr 2               @OPCODE_734:   ; [c64_ir] InlineExit
000EDAr 2                   ; inline exit
000EDAr 2  68               pla
000EDBr 2  68               pla
000EDCr 2               
000EDCr 2               @target_207:
000EDCr 2               
000EDCr 2               ; src/prelude.fth:16:19 in `-`
000EDCr 2               @OPCODE_736:   ; [c64_ir] Add
000EDCr 2                   ; 21
000EDCr 2  CA               dex
000EDDr 2  CA               dex
000EDEr 2  18               clc
000EDFr 2  B5 00            lda $00,x
000EE1r 2  75 02            adc $02,x
000EE3r 2  95 00            sta $00,x
000EE5r 2  B5 01            lda $01,x
000EE7r 2  75 03            adc $03,x
000EE9r 2  95 01            sta $01,x
000EEBr 2               
000EEBr 2               ; src/prelude.fth:16:21 in `-`
000EEBr 2               @OPCODE_737:   ; [c64_ir] InlineExit
000EEBr 2                   ; inline exit
000EEBr 2  68               pla
000EECr 2  68               pla
000EEDr 2               
000EEDr 2               @target_208:
000EEDr 2               
000EEDr 2               ; src/prelude.fth:22:10 in `=`
000EEDr 2               @OPCODE_739:   ; [c64_ir] InlineCall("0=")
000EEDr 2                   ; inline call(0=)
000EEDr 2  48               pha
000EEEr 2  48               pha
000EEFr 2               
000EEFr 2               @target_209:
000EEFr 2               
000EEFr 2               ; src/prelude.fth:21:8 in `0=`
000EEFr 2               @OPCODE_741:   ; [c64_ir] JumpIf0(211)
000EEFr 2  CA               dex
000EF0r 2  CA               dex
000EF1r 2  B5 02            lda $02,x
000EF3r 2  15 03            ora $03,x
000EF5r 2  D0 03            bne *+5
000EF7r 2  4C rr rr         jmp @target_211
000EFAr 2               
000EFAr 2               @target_210:
000EFAr 2               
000EFAr 2               ; src/prelude.fth:21:11 in `0=`
000EFAr 2               @OPCODE_743:   ; [c64_ir] PushLiteral(0)
000EFAr 2  E8               inx
000EFBr 2  E8               inx
000EFCr 2  A9 00            lda #0
000EFEr 2  95 00            sta $00,x
000F00r 2  A9 00            lda #0
000F02r 2  95 01            sta $01,x
000F04r 2               
000F04r 2               ; src/prelude.fth:21:13 in `0=`
000F04r 2               @OPCODE_744:   ; [c64_ir] JumpElse(212)
000F04r 2  4C rr rr         jmp @target_212
000F07r 2               
000F07r 2               @target_211:
000F07r 2               
000F07r 2               ; src/prelude.fth:21:18 in `0=`
000F07r 2               @OPCODE_746:   ; [c64_ir] PushLiteral(-1)
000F07r 2  E8               inx
000F08r 2  E8               inx
000F09r 2  A9 FF            lda #255
000F0Br 2  95 00            sta $00,x
000F0Dr 2  A9 FF            lda #255
000F0Fr 2  95 01            sta $01,x
000F11r 2               
000F11r 2               ; src/prelude.fth:21:21 in `0=`
000F11r 2               @OPCODE_747:   ; [c64_ir] JumpTarget(211)
000F11r 2               
000F11r 2               @target_212:
000F11r 2               
000F11r 2               ; src/prelude.fth:21:26 in `0=`
000F11r 2               @OPCODE_749:   ; [c64_ir] InlineExit
000F11r 2                   ; inline exit
000F11r 2  68               pla
000F12r 2  68               pla
000F13r 2               
000F13r 2               @target_213:
000F13r 2               
000F13r 2               ; src/prelude.fth:22:13 in `=`
000F13r 2               @OPCODE_751:   ; [c64_ir] InlineExit
000F13r 2                   ; inline exit
000F13r 2  68               pla
000F14r 2  68               pla
000F15r 2               
000F15r 2               @target_214:
000F15r 2               
000F15r 2               ; src/prelude.fth:33:37 in `loopimpl`
000F15r 2               @OPCODE_753:   ; [c64_ir] InlineCall("swap")
000F15r 2                   ; inline call(swap)
000F15r 2  48               pha
000F16r 2  48               pha
000F17r 2               
000F17r 2               @target_215:
000F17r 2               
000F17r 2               ; src/prelude.fth:3:10 in `swap`
000F17r 2               @OPCODE_755:   ; [c64_ir] AltPush
000F17r 2  CA               dex
000F18r 2  CA               dex
000F19r 2  B5 03            lda $03,x
000F1Br 2  48               pha
000F1Cr 2  B5 02            lda $02,x
000F1Er 2  48               pha
000F1Fr 2               
000F1Fr 2               ; src/prelude.fth:3:13 in `swap`
000F1Fr 2               @OPCODE_756:   ; [c64_ir] TempStore
000F1Fr 2  CA               dex
000F20r 2  CA               dex
000F21r 2  B5 03            lda $03,x
000F23r 2  85 96            sta TEMP_PAX2
000F25r 2  B5 02            lda $02,x
000F27r 2  85 95            sta TEMP_PAX1
000F29r 2               
000F29r 2               ; src/prelude.fth:3:19 in `swap`
000F29r 2               @OPCODE_757:   ; [c64_ir] AltPop
000F29r 2  E8               inx
000F2Ar 2  E8               inx
000F2Br 2  68               pla
000F2Cr 2  95 00            sta $00,x
000F2Er 2  68               pla
000F2Fr 2  95 01            sta $01,x
000F31r 2               
000F31r 2               ; src/prelude.fth:3:22 in `swap`
000F31r 2               @OPCODE_758:   ; [c64_ir] TempLoad
000F31r 2  E8               inx
000F32r 2  E8               inx
000F33r 2  A5 95            lda TEMP_PAX1
000F35r 2  95 00            sta $00,x
000F37r 2  A5 96            lda TEMP_PAX2
000F39r 2  95 01            sta $01,x
000F3Br 2               
000F3Br 2               ; src/prelude.fth:3:28 in `swap`
000F3Br 2               @OPCODE_759:   ; [c64_ir] InlineExit
000F3Br 2                   ; inline exit
000F3Br 2  68               pla
000F3Cr 2  68               pla
000F3Dr 2               
000F3Dr 2               @target_216:
000F3Dr 2               
000F3Dr 2               ; src/prelude.fth:33:42 in `loopimpl`
000F3Dr 2               @OPCODE_761:   ; [c64_ir] AltPush
000F3Dr 2  CA               dex
000F3Er 2  CA               dex
000F3Fr 2  B5 03            lda $03,x
000F41r 2  48               pha
000F42r 2  B5 02            lda $02,x
000F44r 2  48               pha
000F45r 2               
000F45r 2               ; src/prelude.fth:33:45 in `loopimpl`
000F45r 2               @OPCODE_762:   ; [c64_ir] InlineExit
000F45r 2                   ; inline exit
000F45r 2  68               pla
000F46r 2  68               pla
000F47r 2               
000F47r 2               @target_217:
000F47r 2               
000F47r 2               ; snake.fth:85:5 in `draw-walls`
000F47r 2               @OPCODE_764:   ; [c64_ir] LoopIf0(188)
000F47r 2  CA               dex
000F48r 2  CA               dex
000F49r 2  B5 02            lda $02,x
000F4Br 2  15 03            ora $03,x
000F4Dr 2  D0 03            bne *+5
000F4Fr 2  4C rr rr         jmp @target_188
000F52r 2               
000F52r 2               @target_218:
000F52r 2               
000F52r 2               ; snake.fth:85:5 in `draw-walls`
000F52r 2               @OPCODE_766:   ; [c64_ir] AltPop
000F52r 2  E8               inx
000F53r 2  E8               inx
000F54r 2  68               pla
000F55r 2  95 00            sta $00,x
000F57r 2  68               pla
000F58r 2  95 01            sta $01,x
000F5Ar 2               
000F5Ar 2               ; snake.fth:85:5 in `draw-walls`
000F5Ar 2               @OPCODE_767:   ; [c64_ir] Drop
000F5Ar 2  CA               dex
000F5Br 2  CA               dex
000F5Cr 2               
000F5Cr 2               ; snake.fth:85:5 in `draw-walls`
000F5Cr 2               @OPCODE_768:   ; [c64_ir] AltPop
000F5Cr 2  E8               inx
000F5Dr 2  E8               inx
000F5Er 2  68               pla
000F5Fr 2  95 00            sta $00,x
000F61r 2  68               pla
000F62r 2  95 01            sta $01,x
000F64r 2               
000F64r 2               ; snake.fth:85:5 in `draw-walls`
000F64r 2               @OPCODE_769:   ; [c64_ir] Drop
000F64r 2  CA               dex
000F65r 2  CA               dex
000F66r 2               
000F66r 2               ; snake.fth:86:5 in `draw-walls`
000F66r 2               @OPCODE_770:   ; [c64_ir] Drop
000F66r 2  CA               dex
000F67r 2  CA               dex
000F68r 2               
000F68r 2               ; snake.fth:89:5 in `draw-walls`
000F68r 2               @OPCODE_771:   ; [c64_ir] PushLiteral(0)
000F68r 2  E8               inx
000F69r 2  E8               inx
000F6Ar 2  A9 00            lda #0
000F6Cr 2  95 00            sta $00,x
000F6Er 2  A9 00            lda #0
000F70r 2  95 01            sta $01,x
000F72r 2               
000F72r 2               ; snake.fth:90:5 in `draw-walls`
000F72r 2               @OPCODE_772:   ; [c64_ir] PushLiteral(25)
000F72r 2  E8               inx
000F73r 2  E8               inx
000F74r 2  A9 19            lda #25
000F76r 2  95 00            sta $00,x
000F78r 2  A9 00            lda #0
000F7Ar 2  95 01            sta $01,x
000F7Cr 2               
000F7Cr 2               ; snake.fth:90:12 in `draw-walls`
000F7Cr 2               @OPCODE_773:   ; [c64_ir] PushLiteral(0)
000F7Cr 2  E8               inx
000F7Dr 2  E8               inx
000F7Er 2  A9 00            lda #0
000F80r 2  95 00            sta $00,x
000F82r 2  A9 00            lda #0
000F84r 2  95 01            sta $01,x
000F86r 2               
000F86r 2               ; snake.fth:90:14 in `draw-walls`
000F86r 2               @OPCODE_774:   ; [c64_ir] AltPush
000F86r 2  CA               dex
000F87r 2  CA               dex
000F88r 2  B5 03            lda $03,x
000F8Ar 2  48               pha
000F8Br 2  B5 02            lda $02,x
000F8Dr 2  48               pha
000F8Er 2               
000F8Er 2               ; snake.fth:90:14 in `draw-walls`
000F8Er 2               @OPCODE_775:   ; [c64_ir] AltPush
000F8Er 2  CA               dex
000F8Fr 2  CA               dex
000F90r 2  B5 03            lda $03,x
000F92r 2  48               pha
000F93r 2  B5 02            lda $02,x
000F95r 2  48               pha
000F96r 2               
000F96r 2               ; snake.fth:90:14 in `draw-walls`
000F96r 2               @OPCODE_776:   ; [c64_ir] LoopTarget(218)
000F96r 2               
000F96r 2               @target_219:
000F96r 2               
000F96r 2               ; snake.fth:91:9 in `draw-walls`
000F96r 2               @OPCODE_778:   ; [c64_ir] PushLiteral(230)
000F96r 2  E8               inx
000F97r 2  E8               inx
000F98r 2  A9 E6            lda #230
000F9Ar 2  95 00            sta $00,x
000F9Cr 2  A9 00            lda #0
000F9Er 2  95 01            sta $01,x
000FA0r 2               
000FA0r 2               ; snake.fth:91:14 in `draw-walls`
000FA0r 2               @OPCODE_779:   ; [c64_ir] InlineCall("over")
000FA0r 2                   ; inline call(over)
000FA0r 2  48               pha
000FA1r 2  48               pha
000FA2r 2               
000FA2r 2               @target_220:
000FA2r 2               
000FA2r 2               ; src/prelude.fth:4:10 in `over`
000FA2r 2               @OPCODE_781:   ; [c64_ir] AltPush
000FA2r 2  CA               dex
000FA3r 2  CA               dex
000FA4r 2  B5 03            lda $03,x
000FA6r 2  48               pha
000FA7r 2  B5 02            lda $02,x
000FA9r 2  48               pha
000FAAr 2               
000FAAr 2               ; src/prelude.fth:4:13 in `over`
000FAAr 2               @OPCODE_782:   ; [c64_ir] TempStore
000FAAr 2  CA               dex
000FABr 2  CA               dex
000FACr 2  B5 03            lda $03,x
000FAEr 2  85 96            sta TEMP_PAX2
000FB0r 2  B5 02            lda $02,x
000FB2r 2  85 95            sta TEMP_PAX1
000FB4r 2               
000FB4r 2               ; src/prelude.fth:4:19 in `over`
000FB4r 2               @OPCODE_783:   ; [c64_ir] TempLoad
000FB4r 2  E8               inx
000FB5r 2  E8               inx
000FB6r 2  A5 95            lda TEMP_PAX1
000FB8r 2  95 00            sta $00,x
000FBAr 2  A5 96            lda TEMP_PAX2
000FBCr 2  95 01            sta $01,x
000FBEr 2               
000FBEr 2               ; src/prelude.fth:4:25 in `over`
000FBEr 2               @OPCODE_784:   ; [c64_ir] AltPop
000FBEr 2  E8               inx
000FBFr 2  E8               inx
000FC0r 2  68               pla
000FC1r 2  95 00            sta $00,x
000FC3r 2  68               pla
000FC4r 2  95 01            sta $01,x
000FC6r 2               
000FC6r 2               ; src/prelude.fth:4:28 in `over`
000FC6r 2               @OPCODE_785:   ; [c64_ir] TempLoad
000FC6r 2  E8               inx
000FC7r 2  E8               inx
000FC8r 2  A5 95            lda TEMP_PAX1
000FCAr 2  95 00            sta $00,x
000FCCr 2  A5 96            lda TEMP_PAX2
000FCEr 2  95 01            sta $01,x
000FD0r 2               
000FD0r 2               ; src/prelude.fth:4:34 in `over`
000FD0r 2               @OPCODE_786:   ; [c64_ir] InlineExit
000FD0r 2                   ; inline exit
000FD0r 2  68               pla
000FD1r 2  68               pla
000FD2r 2               
000FD2r 2               @target_221:
000FD2r 2               
000FD2r 2               ; snake.fth:91:19 in `draw-walls`
000FD2r 2               @OPCODE_788:   ; [c64_ir] InlineCall("draw-index")
000FD2r 2                   ; inline call(draw-index)
000FD2r 2  48               pha
000FD3r 2  48               pha
000FD4r 2               
000FD4r 2               @target_222:
000FD4r 2               
000FD4r 2               ; snake.fth:49:34 in `draw-index`
000FD4r 2               @OPCODE_790:   ; [c64_ir] PushLiteral(1024)
000FD4r 2  E8               inx
000FD5r 2  E8               inx
000FD6r 2  A9 00            lda #0
000FD8r 2  95 00            sta $00,x
000FDAr 2  A9 04            lda #4
000FDCr 2  95 01            sta $01,x
000FDEr 2               
000FDEr 2               ; snake.fth:49:43 in `draw-index`
000FDEr 2               @OPCODE_791:   ; [c64_ir] Add
000FDEr 2                   ; 21
000FDEr 2  CA               dex
000FDFr 2  CA               dex
000FE0r 2  18               clc
000FE1r 2  B5 00            lda $00,x
000FE3r 2  75 02            adc $02,x
000FE5r 2  95 00            sta $00,x
000FE7r 2  B5 01            lda $01,x
000FE9r 2  75 03            adc $03,x
000FEBr 2  95 01            sta $01,x
000FEDr 2               
000FEDr 2               ; snake.fth:49:45 in `draw-index`
000FEDr 2               @OPCODE_792:   ; [c64_ir] Store8
000FEDr 2  CA               dex
000FEEr 2  CA               dex
000FEFr 2  CA               dex
000FF0r 2  CA               dex
000FF1r 2  B5 02            lda $02,x
000FF3r 2  81 04            sta ($04,x)
000FF5r 2                   ; TODO high byte
000FF5r 2               
000FF5r 2               ; snake.fth:49:48 in `draw-index`
000FF5r 2               @OPCODE_793:   ; [c64_ir] InlineExit
000FF5r 2                   ; inline exit
000FF5r 2  68               pla
000FF6r 2  68               pla
000FF7r 2               
000FF7r 2               @target_223:
000FF7r 2               
000FF7r 2               ; snake.fth:92:9 in `draw-walls`
000FF7r 2               @OPCODE_795:   ; [c64_ir] PushLiteral(40)
000FF7r 2  E8               inx
000FF8r 2  E8               inx
000FF9r 2  A9 28            lda #40
000FFBr 2  95 00            sta $00,x
000FFDr 2  A9 00            lda #0
000FFFr 2  95 01            sta $01,x
001001r 2               
001001r 2               ; snake.fth:92:15 in `draw-walls`
001001r 2               @OPCODE_796:   ; [c64_ir] Add
001001r 2                   ; 21
001001r 2  CA               dex
001002r 2  CA               dex
001003r 2  18               clc
001004r 2  B5 00            lda $00,x
001006r 2  75 02            adc $02,x
001008r 2  95 00            sta $00,x
00100Ar 2  B5 01            lda $01,x
00100Cr 2  75 03            adc $03,x
00100Er 2  95 01            sta $01,x
001010r 2               
001010r 2               ; snake.fth:93:5 in `draw-walls`
001010r 2               @OPCODE_797:   ; [c64_ir] InlineCall("loopimpl")
001010r 2                   ; inline call(loopimpl)
001010r 2  48               pha
001011r 2  48               pha
001012r 2               
001012r 2               @target_224:
001012r 2               
001012r 2               ; src/prelude.fth:33:12 in `loopimpl`
001012r 2               @OPCODE_799:   ; [c64_ir] AltPop
001012r 2  E8               inx
001013r 2  E8               inx
001014r 2  68               pla
001015r 2  95 00            sta $00,x
001017r 2  68               pla
001018r 2  95 01            sta $01,x
00101Ar 2               
00101Ar 2               ; src/prelude.fth:33:15 in `loopimpl`
00101Ar 2               @OPCODE_800:   ; [c64_ir] AltPop
00101Ar 2  E8               inx
00101Br 2  E8               inx
00101Cr 2  68               pla
00101Dr 2  95 00            sta $00,x
00101Fr 2  68               pla
001020r 2  95 01            sta $01,x
001022r 2               
001022r 2               ; src/prelude.fth:33:18 in `loopimpl`
001022r 2               @OPCODE_801:   ; [c64_ir] AltPop
001022r 2  E8               inx
001023r 2  E8               inx
001024r 2  68               pla
001025r 2  95 00            sta $00,x
001027r 2  68               pla
001028r 2  95 01            sta $01,x
00102Ar 2               
00102Ar 2               ; src/prelude.fth:33:21 in `loopimpl`
00102Ar 2               @OPCODE_802:   ; [c64_ir] InlineCall("1+")
00102Ar 2                   ; inline call(1+)
00102Ar 2  48               pha
00102Br 2  48               pha
00102Cr 2               
00102Cr 2               @target_225:
00102Cr 2               
00102Cr 2               ; src/prelude.fth:18:8 in `1+`
00102Cr 2               @OPCODE_804:   ; [c64_ir] PushLiteral(1)
00102Cr 2  E8               inx
00102Dr 2  E8               inx
00102Er 2  A9 01            lda #1
001030r 2  95 00            sta $00,x
001032r 2  A9 00            lda #0
001034r 2  95 01            sta $01,x
001036r 2               
001036r 2               ; src/prelude.fth:18:10 in `1+`
001036r 2               @OPCODE_805:   ; [c64_ir] Add
001036r 2                   ; 21
001036r 2  CA               dex
001037r 2  CA               dex
001038r 2  18               clc
001039r 2  B5 00            lda $00,x
00103Br 2  75 02            adc $02,x
00103Dr 2  95 00            sta $00,x
00103Fr 2  B5 01            lda $01,x
001041r 2  75 03            adc $03,x
001043r 2  95 01            sta $01,x
001045r 2               
001045r 2               ; src/prelude.fth:18:12 in `1+`
001045r 2               @OPCODE_806:   ; [c64_ir] InlineExit
001045r 2                   ; inline exit
001045r 2  68               pla
001046r 2  68               pla
001047r 2               
001047r 2               @target_226:
001047r 2               
001047r 2               ; src/prelude.fth:33:24 in `loopimpl`
001047r 2               @OPCODE_808:   ; [c64_ir] InlineCall("2dup")
001047r 2                   ; inline call(2dup)
001047r 2  48               pha
001048r 2  48               pha
001049r 2               
001049r 2               @target_227:
001049r 2               
001049r 2               ; src/prelude.fth:8:10 in `2dup`
001049r 2               @OPCODE_810:   ; [c64_ir] InlineCall("over")
001049r 2                   ; inline call(over)
001049r 2  48               pha
00104Ar 2  48               pha
00104Br 2               
00104Br 2               @target_228:
00104Br 2               
00104Br 2               ; src/prelude.fth:4:10 in `over`
00104Br 2               @OPCODE_812:   ; [c64_ir] AltPush
00104Br 2  CA               dex
00104Cr 2  CA               dex
00104Dr 2  B5 03            lda $03,x
00104Fr 2  48               pha
001050r 2  B5 02            lda $02,x
001052r 2  48               pha
001053r 2               
001053r 2               ; src/prelude.fth:4:13 in `over`
001053r 2               @OPCODE_813:   ; [c64_ir] TempStore
001053r 2  CA               dex
001054r 2  CA               dex
001055r 2  B5 03            lda $03,x
001057r 2  85 96            sta TEMP_PAX2
001059r 2  B5 02            lda $02,x
00105Br 2  85 95            sta TEMP_PAX1
00105Dr 2               
00105Dr 2               ; src/prelude.fth:4:19 in `over`
00105Dr 2               @OPCODE_814:   ; [c64_ir] TempLoad
00105Dr 2  E8               inx
00105Er 2  E8               inx
00105Fr 2  A5 95            lda TEMP_PAX1
001061r 2  95 00            sta $00,x
001063r 2  A5 96            lda TEMP_PAX2
001065r 2  95 01            sta $01,x
001067r 2               
001067r 2               ; src/prelude.fth:4:25 in `over`
001067r 2               @OPCODE_815:   ; [c64_ir] AltPop
001067r 2  E8               inx
001068r 2  E8               inx
001069r 2  68               pla
00106Ar 2  95 00            sta $00,x
00106Cr 2  68               pla
00106Dr 2  95 01            sta $01,x
00106Fr 2               
00106Fr 2               ; src/prelude.fth:4:28 in `over`
00106Fr 2               @OPCODE_816:   ; [c64_ir] TempLoad
00106Fr 2  E8               inx
001070r 2  E8               inx
001071r 2  A5 95            lda TEMP_PAX1
001073r 2  95 00            sta $00,x
001075r 2  A5 96            lda TEMP_PAX2
001077r 2  95 01            sta $01,x
001079r 2               
001079r 2               ; src/prelude.fth:4:34 in `over`
001079r 2               @OPCODE_817:   ; [c64_ir] InlineExit
001079r 2                   ; inline exit
001079r 2  68               pla
00107Ar 2  68               pla
00107Br 2               
00107Br 2               @target_229:
00107Br 2               
00107Br 2               ; src/prelude.fth:8:15 in `2dup`
00107Br 2               @OPCODE_819:   ; [c64_ir] InlineCall("over")
00107Br 2                   ; inline call(over)
00107Br 2  48               pha
00107Cr 2  48               pha
00107Dr 2               
00107Dr 2               @target_230:
00107Dr 2               
00107Dr 2               ; src/prelude.fth:4:10 in `over`
00107Dr 2               @OPCODE_821:   ; [c64_ir] AltPush
00107Dr 2  CA               dex
00107Er 2  CA               dex
00107Fr 2  B5 03            lda $03,x
001081r 2  48               pha
001082r 2  B5 02            lda $02,x
001084r 2  48               pha
001085r 2               
001085r 2               ; src/prelude.fth:4:13 in `over`
001085r 2               @OPCODE_822:   ; [c64_ir] TempStore
001085r 2  CA               dex
001086r 2  CA               dex
001087r 2  B5 03            lda $03,x
001089r 2  85 96            sta TEMP_PAX2
00108Br 2  B5 02            lda $02,x
00108Dr 2  85 95            sta TEMP_PAX1
00108Fr 2               
00108Fr 2               ; src/prelude.fth:4:19 in `over`
00108Fr 2               @OPCODE_823:   ; [c64_ir] TempLoad
00108Fr 2  E8               inx
001090r 2  E8               inx
001091r 2  A5 95            lda TEMP_PAX1
001093r 2  95 00            sta $00,x
001095r 2  A5 96            lda TEMP_PAX2
001097r 2  95 01            sta $01,x
001099r 2               
001099r 2               ; src/prelude.fth:4:25 in `over`
001099r 2               @OPCODE_824:   ; [c64_ir] AltPop
001099r 2  E8               inx
00109Ar 2  E8               inx
00109Br 2  68               pla
00109Cr 2  95 00            sta $00,x
00109Er 2  68               pla
00109Fr 2  95 01            sta $01,x
0010A1r 2               
0010A1r 2               ; src/prelude.fth:4:28 in `over`
0010A1r 2               @OPCODE_825:   ; [c64_ir] TempLoad
0010A1r 2  E8               inx
0010A2r 2  E8               inx
0010A3r 2  A5 95            lda TEMP_PAX1
0010A5r 2  95 00            sta $00,x
0010A7r 2  A5 96            lda TEMP_PAX2
0010A9r 2  95 01            sta $01,x
0010ABr 2               
0010ABr 2               ; src/prelude.fth:4:34 in `over`
0010ABr 2               @OPCODE_826:   ; [c64_ir] InlineExit
0010ABr 2                   ; inline exit
0010ABr 2  68               pla
0010ACr 2  68               pla
0010ADr 2               
0010ADr 2               @target_231:
0010ADr 2               
0010ADr 2               ; src/prelude.fth:8:20 in `2dup`
0010ADr 2               @OPCODE_828:   ; [c64_ir] InlineExit
0010ADr 2                   ; inline exit
0010ADr 2  68               pla
0010AEr 2  68               pla
0010AFr 2               
0010AFr 2               @target_232:
0010AFr 2               
0010AFr 2               ; src/prelude.fth:33:29 in `loopimpl`
0010AFr 2               @OPCODE_830:   ; [c64_ir] AltPush
0010AFr 2  CA               dex
0010B0r 2  CA               dex
0010B1r 2  B5 03            lda $03,x
0010B3r 2  48               pha
0010B4r 2  B5 02            lda $02,x
0010B6r 2  48               pha
0010B7r 2               
0010B7r 2               ; src/prelude.fth:33:32 in `loopimpl`
0010B7r 2               @OPCODE_831:   ; [c64_ir] AltPush
0010B7r 2  CA               dex
0010B8r 2  CA               dex
0010B9r 2  B5 03            lda $03,x
0010BBr 2  48               pha
0010BCr 2  B5 02            lda $02,x
0010BEr 2  48               pha
0010BFr 2               
0010BFr 2               ; src/prelude.fth:33:35 in `loopimpl`
0010BFr 2               @OPCODE_832:   ; [c64_ir] InlineCall("=")
0010BFr 2                   ; inline call(=)
0010BFr 2  48               pha
0010C0r 2  48               pha
0010C1r 2               
0010C1r 2               @target_233:
0010C1r 2               
0010C1r 2               ; src/prelude.fth:22:8 in `=`
0010C1r 2               @OPCODE_834:   ; [c64_ir] InlineCall("-")
0010C1r 2                   ; inline call(-)
0010C1r 2  48               pha
0010C2r 2  48               pha
0010C3r 2               
0010C3r 2               @target_234:
0010C3r 2               
0010C3r 2               ; src/prelude.fth:16:12 in `-`
0010C3r 2               @OPCODE_836:   ; [c64_ir] InlineCall("negate")
0010C3r 2                   ; inline call(negate)
0010C3r 2  48               pha
0010C4r 2  48               pha
0010C5r 2               
0010C5r 2               @target_235:
0010C5r 2               
0010C5r 2               ; src/prelude.fth:15:12 in `negate`
0010C5r 2               @OPCODE_838:   ; [c64_ir] InlineCall("invert")
0010C5r 2                   ; inline call(invert)
0010C5r 2  48               pha
0010C6r 2  48               pha
0010C7r 2               
0010C7r 2               @target_236:
0010C7r 2               
0010C7r 2               ; src/prelude.fth:14:12 in `invert`
0010C7r 2               @OPCODE_840:   ; [c64_ir] PushLiteral(-1)
0010C7r 2  E8               inx
0010C8r 2  E8               inx
0010C9r 2  A9 FF            lda #255
0010CBr 2  95 00            sta $00,x
0010CDr 2  A9 FF            lda #255
0010CFr 2  95 01            sta $01,x
0010D1r 2               
0010D1r 2               ; src/prelude.fth:14:15 in `invert`
0010D1r 2               @OPCODE_841:   ; [c64_ir] Nand
0010D1r 2                   ; 26
0010D1r 2  CA               dex
0010D2r 2  CA               dex
0010D3r 2  B5 00            lda $00,x
0010D5r 2  35 02            and $02,x
0010D7r 2  49 FF            eor #$ff
0010D9r 2  95 00            sta $00,x
0010DBr 2  B5 01            lda $01,x
0010DDr 2  35 03            and $03,x
0010DFr 2  49 FF            eor #$ff
0010E1r 2  95 01            sta $01,x
0010E3r 2               
0010E3r 2               ; src/prelude.fth:14:20 in `invert`
0010E3r 2               @OPCODE_842:   ; [c64_ir] InlineExit
0010E3r 2                   ; inline exit
0010E3r 2  68               pla
0010E4r 2  68               pla
0010E5r 2               
0010E5r 2               @target_237:
0010E5r 2               
0010E5r 2               ; src/prelude.fth:15:19 in `negate`
0010E5r 2               @OPCODE_844:   ; [c64_ir] PushLiteral(1)
0010E5r 2  E8               inx
0010E6r 2  E8               inx
0010E7r 2  A9 01            lda #1
0010E9r 2  95 00            sta $00,x
0010EBr 2  A9 00            lda #0
0010EDr 2  95 01            sta $01,x
0010EFr 2               
0010EFr 2               ; src/prelude.fth:15:21 in `negate`
0010EFr 2               @OPCODE_845:   ; [c64_ir] Add
0010EFr 2                   ; 21
0010EFr 2  CA               dex
0010F0r 2  CA               dex
0010F1r 2  18               clc
0010F2r 2  B5 00            lda $00,x
0010F4r 2  75 02            adc $02,x
0010F6r 2  95 00            sta $00,x
0010F8r 2  B5 01            lda $01,x
0010FAr 2  75 03            adc $03,x
0010FCr 2  95 01            sta $01,x
0010FEr 2               
0010FEr 2               ; src/prelude.fth:15:23 in `negate`
0010FEr 2               @OPCODE_846:   ; [c64_ir] InlineExit
0010FEr 2                   ; inline exit
0010FEr 2  68               pla
0010FFr 2  68               pla
001100r 2               
001100r 2               @target_238:
001100r 2               
001100r 2               ; src/prelude.fth:16:19 in `-`
001100r 2               @OPCODE_848:   ; [c64_ir] Add
001100r 2                   ; 21
001100r 2  CA               dex
001101r 2  CA               dex
001102r 2  18               clc
001103r 2  B5 00            lda $00,x
001105r 2  75 02            adc $02,x
001107r 2  95 00            sta $00,x
001109r 2  B5 01            lda $01,x
00110Br 2  75 03            adc $03,x
00110Dr 2  95 01            sta $01,x
00110Fr 2               
00110Fr 2               ; src/prelude.fth:16:21 in `-`
00110Fr 2               @OPCODE_849:   ; [c64_ir] InlineExit
00110Fr 2                   ; inline exit
00110Fr 2  68               pla
001110r 2  68               pla
001111r 2               
001111r 2               @target_239:
001111r 2               
001111r 2               ; src/prelude.fth:22:10 in `=`
001111r 2               @OPCODE_851:   ; [c64_ir] InlineCall("0=")
001111r 2                   ; inline call(0=)
001111r 2  48               pha
001112r 2  48               pha
001113r 2               
001113r 2               @target_240:
001113r 2               
001113r 2               ; src/prelude.fth:21:8 in `0=`
001113r 2               @OPCODE_853:   ; [c64_ir] JumpIf0(242)
001113r 2  CA               dex
001114r 2  CA               dex
001115r 2  B5 02            lda $02,x
001117r 2  15 03            ora $03,x
001119r 2  D0 03            bne *+5
00111Br 2  4C rr rr         jmp @target_242
00111Er 2               
00111Er 2               @target_241:
00111Er 2               
00111Er 2               ; src/prelude.fth:21:11 in `0=`
00111Er 2               @OPCODE_855:   ; [c64_ir] PushLiteral(0)
00111Er 2  E8               inx
00111Fr 2  E8               inx
001120r 2  A9 00            lda #0
001122r 2  95 00            sta $00,x
001124r 2  A9 00            lda #0
001126r 2  95 01            sta $01,x
001128r 2               
001128r 2               ; src/prelude.fth:21:13 in `0=`
001128r 2               @OPCODE_856:   ; [c64_ir] JumpElse(243)
001128r 2  4C rr rr         jmp @target_243
00112Br 2               
00112Br 2               @target_242:
00112Br 2               
00112Br 2               ; src/prelude.fth:21:18 in `0=`
00112Br 2               @OPCODE_858:   ; [c64_ir] PushLiteral(-1)
00112Br 2  E8               inx
00112Cr 2  E8               inx
00112Dr 2  A9 FF            lda #255
00112Fr 2  95 00            sta $00,x
001131r 2  A9 FF            lda #255
001133r 2  95 01            sta $01,x
001135r 2               
001135r 2               ; src/prelude.fth:21:21 in `0=`
001135r 2               @OPCODE_859:   ; [c64_ir] JumpTarget(242)
001135r 2               
001135r 2               @target_243:
001135r 2               
001135r 2               ; src/prelude.fth:21:26 in `0=`
001135r 2               @OPCODE_861:   ; [c64_ir] InlineExit
001135r 2                   ; inline exit
001135r 2  68               pla
001136r 2  68               pla
001137r 2               
001137r 2               @target_244:
001137r 2               
001137r 2               ; src/prelude.fth:22:13 in `=`
001137r 2               @OPCODE_863:   ; [c64_ir] InlineExit
001137r 2                   ; inline exit
001137r 2  68               pla
001138r 2  68               pla
001139r 2               
001139r 2               @target_245:
001139r 2               
001139r 2               ; src/prelude.fth:33:37 in `loopimpl`
001139r 2               @OPCODE_865:   ; [c64_ir] InlineCall("swap")
001139r 2                   ; inline call(swap)
001139r 2  48               pha
00113Ar 2  48               pha
00113Br 2               
00113Br 2               @target_246:
00113Br 2               
00113Br 2               ; src/prelude.fth:3:10 in `swap`
00113Br 2               @OPCODE_867:   ; [c64_ir] AltPush
00113Br 2  CA               dex
00113Cr 2  CA               dex
00113Dr 2  B5 03            lda $03,x
00113Fr 2  48               pha
001140r 2  B5 02            lda $02,x
001142r 2  48               pha
001143r 2               
001143r 2               ; src/prelude.fth:3:13 in `swap`
001143r 2               @OPCODE_868:   ; [c64_ir] TempStore
001143r 2  CA               dex
001144r 2  CA               dex
001145r 2  B5 03            lda $03,x
001147r 2  85 96            sta TEMP_PAX2
001149r 2  B5 02            lda $02,x
00114Br 2  85 95            sta TEMP_PAX1
00114Dr 2               
00114Dr 2               ; src/prelude.fth:3:19 in `swap`
00114Dr 2               @OPCODE_869:   ; [c64_ir] AltPop
00114Dr 2  E8               inx
00114Er 2  E8               inx
00114Fr 2  68               pla
001150r 2  95 00            sta $00,x
001152r 2  68               pla
001153r 2  95 01            sta $01,x
001155r 2               
001155r 2               ; src/prelude.fth:3:22 in `swap`
001155r 2               @OPCODE_870:   ; [c64_ir] TempLoad
001155r 2  E8               inx
001156r 2  E8               inx
001157r 2  A5 95            lda TEMP_PAX1
001159r 2  95 00            sta $00,x
00115Br 2  A5 96            lda TEMP_PAX2
00115Dr 2  95 01            sta $01,x
00115Fr 2               
00115Fr 2               ; src/prelude.fth:3:28 in `swap`
00115Fr 2               @OPCODE_871:   ; [c64_ir] InlineExit
00115Fr 2                   ; inline exit
00115Fr 2  68               pla
001160r 2  68               pla
001161r 2               
001161r 2               @target_247:
001161r 2               
001161r 2               ; src/prelude.fth:33:42 in `loopimpl`
001161r 2               @OPCODE_873:   ; [c64_ir] AltPush
001161r 2  CA               dex
001162r 2  CA               dex
001163r 2  B5 03            lda $03,x
001165r 2  48               pha
001166r 2  B5 02            lda $02,x
001168r 2  48               pha
001169r 2               
001169r 2               ; src/prelude.fth:33:45 in `loopimpl`
001169r 2               @OPCODE_874:   ; [c64_ir] InlineExit
001169r 2                   ; inline exit
001169r 2  68               pla
00116Ar 2  68               pla
00116Br 2               
00116Br 2               @target_248:
00116Br 2               
00116Br 2               ; snake.fth:93:5 in `draw-walls`
00116Br 2               @OPCODE_876:   ; [c64_ir] LoopIf0(219)
00116Br 2  CA               dex
00116Cr 2  CA               dex
00116Dr 2  B5 02            lda $02,x
00116Fr 2  15 03            ora $03,x
001171r 2  D0 03            bne *+5
001173r 2  4C rr rr         jmp @target_219
001176r 2               
001176r 2               @target_249:
001176r 2               
001176r 2               ; snake.fth:93:5 in `draw-walls`
001176r 2               @OPCODE_878:   ; [c64_ir] AltPop
001176r 2  E8               inx
001177r 2  E8               inx
001178r 2  68               pla
001179r 2  95 00            sta $00,x
00117Br 2  68               pla
00117Cr 2  95 01            sta $01,x
00117Er 2               
00117Er 2               ; snake.fth:93:5 in `draw-walls`
00117Er 2               @OPCODE_879:   ; [c64_ir] Drop
00117Er 2  CA               dex
00117Fr 2  CA               dex
001180r 2               
001180r 2               ; snake.fth:93:5 in `draw-walls`
001180r 2               @OPCODE_880:   ; [c64_ir] AltPop
001180r 2  E8               inx
001181r 2  E8               inx
001182r 2  68               pla
001183r 2  95 00            sta $00,x
001185r 2  68               pla
001186r 2  95 01            sta $01,x
001188r 2               
001188r 2               ; snake.fth:93:5 in `draw-walls`
001188r 2               @OPCODE_881:   ; [c64_ir] Drop
001188r 2  CA               dex
001189r 2  CA               dex
00118Ar 2               
00118Ar 2               ; snake.fth:94:5 in `draw-walls`
00118Ar 2               @OPCODE_882:   ; [c64_ir] Drop
00118Ar 2  CA               dex
00118Br 2  CA               dex
00118Cr 2               
00118Cr 2               ; snake.fth:95:5 in `draw-walls`
00118Cr 2               @OPCODE_883:   ; [c64_ir] InlineExit
00118Cr 2                   ; inline exit
00118Cr 2  68               pla
00118Dr 2  68               pla
00118Er 2               
00118Er 2               @target_250:
00118Er 2               
00118Er 2               ; snake.fth:118:3 in `initialize`
00118Er 2               @OPCODE_885:   ; [c64_ir] InlineCall("initialize-snake")
00118Er 2                   ; inline call(initialize-snake)
00118Er 2  48               pha
00118Fr 2  48               pha
001190r 2               
001190r 2               @target_251:
001190r 2               
001190r 2               ; snake.fth:98:3 in `initialize-snake`
001190r 2               @OPCODE_887:   ; [c64_ir] PushLiteral(4)
001190r 2  E8               inx
001191r 2  E8               inx
001192r 2  A9 04            lda #4
001194r 2  95 00            sta $00,x
001196r 2  A9 00            lda #0
001198r 2  95 01            sta $01,x
00119Ar 2               
00119Ar 2               ; snake.fth:98:5 in `initialize-snake`
00119Ar 2               @OPCODE_888:   ; [c64_ir] PushLiteral(-26658)
00119Ar 2  E8               inx
00119Br 2  E8               inx
00119Cr 2  A9 DE            lda #222
00119Er 2  95 00            sta $00,x
0011A0r 2  A9 97            lda #151
0011A2r 2  95 01            sta $01,x
0011A4r 2               
0011A4r 2               ; snake.fth:98:12 in `initialize-snake`
0011A4r 2               @OPCODE_889:   ; [c64_ir] Store
0011A4r 2  CA               dex
0011A5r 2  CA               dex
0011A6r 2  CA               dex
0011A7r 2  CA               dex
0011A8r 2  B5 02            lda $02,x
0011AAr 2  81 04            sta ($04,x)
0011ACr 2                   ; TODO high byte
0011ACr 2               
0011ACr 2               ; snake.fth:99:3 in `initialize-snake`
0011ACr 2               @OPCODE_890:   ; [c64_ir] PushLiteral(-26658)
0011ACr 2  E8               inx
0011ADr 2  E8               inx
0011AEr 2  A9 DE            lda #222
0011B0r 2  95 00            sta $00,x
0011B2r 2  A9 97            lda #151
0011B4r 2  95 01            sta $01,x
0011B6r 2               
0011B6r 2               ; snake.fth:99:10 in `initialize-snake`
0011B6r 2               @OPCODE_891:   ; [c64_ir] Load
0011B6r 2  A1 00            lda ($00,x)
0011B8r 2  95 00            sta $00,x
0011BAr 2  A9 00            lda #0
0011BCr 2  95 01            sta $01,x
0011BEr 2               
0011BEr 2               ; snake.fth:99:12 in `initialize-snake`
0011BEr 2               @OPCODE_892:   ; [c64_ir] PushLiteral(1)
0011BEr 2  E8               inx
0011BFr 2  E8               inx
0011C0r 2  A9 01            lda #1
0011C2r 2  95 00            sta $00,x
0011C4r 2  A9 00            lda #0
0011C6r 2  95 01            sta $01,x
0011C8r 2               
0011C8r 2               ; snake.fth:99:14 in `initialize-snake`
0011C8r 2               @OPCODE_893:   ; [c64_ir] Add
0011C8r 2                   ; 21
0011C8r 2  CA               dex
0011C9r 2  CA               dex
0011CAr 2  18               clc
0011CBr 2  B5 00            lda $00,x
0011CDr 2  75 02            adc $02,x
0011CFr 2  95 00            sta $00,x
0011D1r 2  B5 01            lda $01,x
0011D3r 2  75 03            adc $03,x
0011D5r 2  95 01            sta $01,x
0011D7r 2               
0011D7r 2               ; snake.fth:99:16 in `initialize-snake`
0011D7r 2               @OPCODE_894:   ; [c64_ir] PushLiteral(0)
0011D7r 2  E8               inx
0011D8r 2  E8               inx
0011D9r 2  A9 00            lda #0
0011DBr 2  95 00            sta $00,x
0011DDr 2  A9 00            lda #0
0011DFr 2  95 01            sta $01,x
0011E1r 2               
0011E1r 2               ; snake.fth:99:18 in `initialize-snake`
0011E1r 2               @OPCODE_895:   ; [c64_ir] AltPush
0011E1r 2  CA               dex
0011E2r 2  CA               dex
0011E3r 2  B5 03            lda $03,x
0011E5r 2  48               pha
0011E6r 2  B5 02            lda $02,x
0011E8r 2  48               pha
0011E9r 2               
0011E9r 2               ; snake.fth:99:18 in `initialize-snake`
0011E9r 2               @OPCODE_896:   ; [c64_ir] AltPush
0011E9r 2  CA               dex
0011EAr 2  CA               dex
0011EBr 2  B5 03            lda $03,x
0011EDr 2  48               pha
0011EEr 2  B5 02            lda $02,x
0011F0r 2  48               pha
0011F1r 2               
0011F1r 2               ; snake.fth:99:18 in `initialize-snake`
0011F1r 2               @OPCODE_897:   ; [c64_ir] LoopTarget(251)
0011F1r 2               
0011F1r 2               @target_252:
0011F1r 2               
0011F1r 2               ; snake.fth:100:5 in `initialize-snake`
0011F1r 2               @OPCODE_899:   ; [c64_ir] PushLiteral(8)
0011F1r 2  E8               inx
0011F2r 2  E8               inx
0011F3r 2  A9 08            lda #8
0011F5r 2  95 00            sta $00,x
0011F7r 2  A9 00            lda #0
0011F9r 2  95 01            sta $01,x
0011FBr 2               
0011FBr 2               ; snake.fth:100:7 in `initialize-snake`
0011FBr 2               @OPCODE_900:   ; [c64_ir] InlineCall("i")
0011FBr 2                   ; inline call(i)
0011FBr 2  48               pha
0011FCr 2  48               pha
0011FDr 2               
0011FDr 2               @target_253:
0011FDr 2               
0011FDr 2               ; src/prelude.fth:38:5 in `i`
0011FDr 2               @OPCODE_902:   ; [c64_ir] AltPop
0011FDr 2  E8               inx
0011FEr 2  E8               inx
0011FFr 2  68               pla
001200r 2  95 00            sta $00,x
001202r 2  68               pla
001203r 2  95 01            sta $01,x
001205r 2               
001205r 2               ; src/prelude.fth:38:8 in `i`
001205r 2               @OPCODE_903:   ; [c64_ir] AltPop
001205r 2  E8               inx
001206r 2  E8               inx
001207r 2  68               pla
001208r 2  95 00            sta $00,x
00120Ar 2  68               pla
00120Br 2  95 01            sta $01,x
00120Dr 2               
00120Dr 2               ; src/prelude.fth:38:11 in `i`
00120Dr 2               @OPCODE_904:   ; [c64_ir] AltPop
00120Dr 2  E8               inx
00120Er 2  E8               inx
00120Fr 2  68               pla
001210r 2  95 00            sta $00,x
001212r 2  68               pla
001213r 2  95 01            sta $01,x
001215r 2               
001215r 2               ; src/prelude.fth:38:14 in `i`
001215r 2               @OPCODE_905:   ; [c64_ir] TempStore
001215r 2  CA               dex
001216r 2  CA               dex
001217r 2  B5 03            lda $03,x
001219r 2  85 96            sta TEMP_PAX2
00121Br 2  B5 02            lda $02,x
00121Dr 2  85 95            sta TEMP_PAX1
00121Fr 2               
00121Fr 2               ; src/prelude.fth:38:20 in `i`
00121Fr 2               @OPCODE_906:   ; [c64_ir] TempLoad
00121Fr 2  E8               inx
001220r 2  E8               inx
001221r 2  A5 95            lda TEMP_PAX1
001223r 2  95 00            sta $00,x
001225r 2  A5 96            lda TEMP_PAX2
001227r 2  95 01            sta $01,x
001229r 2               
001229r 2               ; src/prelude.fth:38:26 in `i`
001229r 2               @OPCODE_907:   ; [c64_ir] AltPush
001229r 2  CA               dex
00122Ar 2  CA               dex
00122Br 2  B5 03            lda $03,x
00122Dr 2  48               pha
00122Er 2  B5 02            lda $02,x
001230r 2  48               pha
001231r 2               
001231r 2               ; src/prelude.fth:38:29 in `i`
001231r 2               @OPCODE_908:   ; [c64_ir] AltPush
001231r 2  CA               dex
001232r 2  CA               dex
001233r 2  B5 03            lda $03,x
001235r 2  48               pha
001236r 2  B5 02            lda $02,x
001238r 2  48               pha
001239r 2               
001239r 2               ; src/prelude.fth:38:32 in `i`
001239r 2               @OPCODE_909:   ; [c64_ir] AltPush
001239r 2  CA               dex
00123Ar 2  CA               dex
00123Br 2  B5 03            lda $03,x
00123Dr 2  48               pha
00123Er 2  B5 02            lda $02,x
001240r 2  48               pha
001241r 2               
001241r 2               ; src/prelude.fth:38:35 in `i`
001241r 2               @OPCODE_910:   ; [c64_ir] TempLoad
001241r 2  E8               inx
001242r 2  E8               inx
001243r 2  A5 95            lda TEMP_PAX1
001245r 2  95 00            sta $00,x
001247r 2  A5 96            lda TEMP_PAX2
001249r 2  95 01            sta $01,x
00124Br 2               
00124Br 2               ; src/prelude.fth:38:41 in `i`
00124Br 2               @OPCODE_911:   ; [c64_ir] InlineExit
00124Br 2                   ; inline exit
00124Br 2  68               pla
00124Cr 2  68               pla
00124Dr 2               
00124Dr 2               @target_254:
00124Dr 2               
00124Dr 2               ; snake.fth:100:9 in `initialize-snake`
00124Dr 2               @OPCODE_913:   ; [c64_ir] InlineCall("-")
00124Dr 2                   ; inline call(-)
00124Dr 2  48               pha
00124Er 2  48               pha
00124Fr 2               
00124Fr 2               @target_255:
00124Fr 2               
00124Fr 2               ; src/prelude.fth:16:12 in `-`
00124Fr 2               @OPCODE_915:   ; [c64_ir] InlineCall("negate")
00124Fr 2                   ; inline call(negate)
00124Fr 2  48               pha
001250r 2  48               pha
001251r 2               
001251r 2               @target_256:
001251r 2               
001251r 2               ; src/prelude.fth:15:12 in `negate`
001251r 2               @OPCODE_917:   ; [c64_ir] InlineCall("invert")
001251r 2                   ; inline call(invert)
001251r 2  48               pha
001252r 2  48               pha
001253r 2               
001253r 2               @target_257:
001253r 2               
001253r 2               ; src/prelude.fth:14:12 in `invert`
001253r 2               @OPCODE_919:   ; [c64_ir] PushLiteral(-1)
001253r 2  E8               inx
001254r 2  E8               inx
001255r 2  A9 FF            lda #255
001257r 2  95 00            sta $00,x
001259r 2  A9 FF            lda #255
00125Br 2  95 01            sta $01,x
00125Dr 2               
00125Dr 2               ; src/prelude.fth:14:15 in `invert`
00125Dr 2               @OPCODE_920:   ; [c64_ir] Nand
00125Dr 2                   ; 26
00125Dr 2  CA               dex
00125Er 2  CA               dex
00125Fr 2  B5 00            lda $00,x
001261r 2  35 02            and $02,x
001263r 2  49 FF            eor #$ff
001265r 2  95 00            sta $00,x
001267r 2  B5 01            lda $01,x
001269r 2  35 03            and $03,x
00126Br 2  49 FF            eor #$ff
00126Dr 2  95 01            sta $01,x
00126Fr 2               
00126Fr 2               ; src/prelude.fth:14:20 in `invert`
00126Fr 2               @OPCODE_921:   ; [c64_ir] InlineExit
00126Fr 2                   ; inline exit
00126Fr 2  68               pla
001270r 2  68               pla
001271r 2               
001271r 2               @target_258:
001271r 2               
001271r 2               ; src/prelude.fth:15:19 in `negate`
001271r 2               @OPCODE_923:   ; [c64_ir] PushLiteral(1)
001271r 2  E8               inx
001272r 2  E8               inx
001273r 2  A9 01            lda #1
001275r 2  95 00            sta $00,x
001277r 2  A9 00            lda #0
001279r 2  95 01            sta $01,x
00127Br 2               
00127Br 2               ; src/prelude.fth:15:21 in `negate`
00127Br 2               @OPCODE_924:   ; [c64_ir] Add
00127Br 2                   ; 21
00127Br 2  CA               dex
00127Cr 2  CA               dex
00127Dr 2  18               clc
00127Er 2  B5 00            lda $00,x
001280r 2  75 02            adc $02,x
001282r 2  95 00            sta $00,x
001284r 2  B5 01            lda $01,x
001286r 2  75 03            adc $03,x
001288r 2  95 01            sta $01,x
00128Ar 2               
00128Ar 2               ; src/prelude.fth:15:23 in `negate`
00128Ar 2               @OPCODE_925:   ; [c64_ir] InlineExit
00128Ar 2                   ; inline exit
00128Ar 2  68               pla
00128Br 2  68               pla
00128Cr 2               
00128Cr 2               @target_259:
00128Cr 2               
00128Cr 2               ; src/prelude.fth:16:19 in `-`
00128Cr 2               @OPCODE_927:   ; [c64_ir] Add
00128Cr 2                   ; 21
00128Cr 2  CA               dex
00128Dr 2  CA               dex
00128Er 2  18               clc
00128Fr 2  B5 00            lda $00,x
001291r 2  75 02            adc $02,x
001293r 2  95 00            sta $00,x
001295r 2  B5 01            lda $01,x
001297r 2  75 03            adc $03,x
001299r 2  95 01            sta $01,x
00129Br 2               
00129Br 2               ; src/prelude.fth:16:21 in `-`
00129Br 2               @OPCODE_928:   ; [c64_ir] InlineExit
00129Br 2                   ; inline exit
00129Br 2  68               pla
00129Cr 2  68               pla
00129Dr 2               
00129Dr 2               @target_260:
00129Dr 2               
00129Dr 2               ; snake.fth:100:11 in `initialize-snake`
00129Dr 2               @OPCODE_930:   ; [c64_ir] InlineCall("i")
00129Dr 2                   ; inline call(i)
00129Dr 2  48               pha
00129Er 2  48               pha
00129Fr 2               
00129Fr 2               @target_261:
00129Fr 2               
00129Fr 2               ; src/prelude.fth:38:5 in `i`
00129Fr 2               @OPCODE_932:   ; [c64_ir] AltPop
00129Fr 2  E8               inx
0012A0r 2  E8               inx
0012A1r 2  68               pla
0012A2r 2  95 00            sta $00,x
0012A4r 2  68               pla
0012A5r 2  95 01            sta $01,x
0012A7r 2               
0012A7r 2               ; src/prelude.fth:38:8 in `i`
0012A7r 2               @OPCODE_933:   ; [c64_ir] AltPop
0012A7r 2  E8               inx
0012A8r 2  E8               inx
0012A9r 2  68               pla
0012AAr 2  95 00            sta $00,x
0012ACr 2  68               pla
0012ADr 2  95 01            sta $01,x
0012AFr 2               
0012AFr 2               ; src/prelude.fth:38:11 in `i`
0012AFr 2               @OPCODE_934:   ; [c64_ir] AltPop
0012AFr 2  E8               inx
0012B0r 2  E8               inx
0012B1r 2  68               pla
0012B2r 2  95 00            sta $00,x
0012B4r 2  68               pla
0012B5r 2  95 01            sta $01,x
0012B7r 2               
0012B7r 2               ; src/prelude.fth:38:14 in `i`
0012B7r 2               @OPCODE_935:   ; [c64_ir] TempStore
0012B7r 2  CA               dex
0012B8r 2  CA               dex
0012B9r 2  B5 03            lda $03,x
0012BBr 2  85 96            sta TEMP_PAX2
0012BDr 2  B5 02            lda $02,x
0012BFr 2  85 95            sta TEMP_PAX1
0012C1r 2               
0012C1r 2               ; src/prelude.fth:38:20 in `i`
0012C1r 2               @OPCODE_936:   ; [c64_ir] TempLoad
0012C1r 2  E8               inx
0012C2r 2  E8               inx
0012C3r 2  A5 95            lda TEMP_PAX1
0012C5r 2  95 00            sta $00,x
0012C7r 2  A5 96            lda TEMP_PAX2
0012C9r 2  95 01            sta $01,x
0012CBr 2               
0012CBr 2               ; src/prelude.fth:38:26 in `i`
0012CBr 2               @OPCODE_937:   ; [c64_ir] AltPush
0012CBr 2  CA               dex
0012CCr 2  CA               dex
0012CDr 2  B5 03            lda $03,x
0012CFr 2  48               pha
0012D0r 2  B5 02            lda $02,x
0012D2r 2  48               pha
0012D3r 2               
0012D3r 2               ; src/prelude.fth:38:29 in `i`
0012D3r 2               @OPCODE_938:   ; [c64_ir] AltPush
0012D3r 2  CA               dex
0012D4r 2  CA               dex
0012D5r 2  B5 03            lda $03,x
0012D7r 2  48               pha
0012D8r 2  B5 02            lda $02,x
0012DAr 2  48               pha
0012DBr 2               
0012DBr 2               ; src/prelude.fth:38:32 in `i`
0012DBr 2               @OPCODE_939:   ; [c64_ir] AltPush
0012DBr 2  CA               dex
0012DCr 2  CA               dex
0012DDr 2  B5 03            lda $03,x
0012DFr 2  48               pha
0012E0r 2  B5 02            lda $02,x
0012E2r 2  48               pha
0012E3r 2               
0012E3r 2               ; src/prelude.fth:38:35 in `i`
0012E3r 2               @OPCODE_940:   ; [c64_ir] TempLoad
0012E3r 2  E8               inx
0012E4r 2  E8               inx
0012E5r 2  A5 95            lda TEMP_PAX1
0012E7r 2  95 00            sta $00,x
0012E9r 2  A5 96            lda TEMP_PAX2
0012EBr 2  95 01            sta $01,x
0012EDr 2               
0012EDr 2               ; src/prelude.fth:38:41 in `i`
0012EDr 2               @OPCODE_941:   ; [c64_ir] InlineExit
0012EDr 2                   ; inline exit
0012EDr 2  68               pla
0012EEr 2  68               pla
0012EFr 2               
0012EFr 2               @target_262:
0012EFr 2               
0012EFr 2               ; snake.fth:100:13 in `initialize-snake`
0012EFr 2               @OPCODE_943:   ; [c64_ir] InlineCall("snake-x")
0012EFr 2                   ; inline call(snake-x)
0012EFr 2  48               pha
0012F0r 2  48               pha
0012F1r 2               
0012F1r 2               @target_263:
0012F1r 2               
0012F1r 2               ; snake.fth:42:3 in `snake-x`
0012F1r 2               @OPCODE_945:   ; [c64_ir] InlineCall("cells")
0012F1r 2                   ; inline call(cells)
0012F1r 2  48               pha
0012F2r 2  48               pha
0012F3r 2               
0012F3r 2               @target_264:
0012F3r 2               
0012F3r 2               ; src/prelude.fth:41:9 in `cells`
0012F3r 2               @OPCODE_947:   ; [c64_ir] InlineCall("dup")
0012F3r 2                   ; inline call(dup)
0012F3r 2  48               pha
0012F4r 2  48               pha
0012F5r 2               
0012F5r 2               @target_265:
0012F5r 2               
0012F5r 2               ; src/prelude.fth:6:10 in `dup`
0012F5r 2               @OPCODE_949:   ; [c64_ir] TempStore
0012F5r 2  CA               dex
0012F6r 2  CA               dex
0012F7r 2  B5 03            lda $03,x
0012F9r 2  85 96            sta TEMP_PAX2
0012FBr 2  B5 02            lda $02,x
0012FDr 2  85 95            sta TEMP_PAX1
0012FFr 2               
0012FFr 2               ; src/prelude.fth:6:16 in `dup`
0012FFr 2               @OPCODE_950:   ; [c64_ir] TempLoad
0012FFr 2  E8               inx
001300r 2  E8               inx
001301r 2  A5 95            lda TEMP_PAX1
001303r 2  95 00            sta $00,x
001305r 2  A5 96            lda TEMP_PAX2
001307r 2  95 01            sta $01,x
001309r 2               
001309r 2               ; src/prelude.fth:6:22 in `dup`
001309r 2               @OPCODE_951:   ; [c64_ir] TempLoad
001309r 2  E8               inx
00130Ar 2  E8               inx
00130Br 2  A5 95            lda TEMP_PAX1
00130Dr 2  95 00            sta $00,x
00130Fr 2  A5 96            lda TEMP_PAX2
001311r 2  95 01            sta $01,x
001313r 2               
001313r 2               ; src/prelude.fth:6:28 in `dup`
001313r 2               @OPCODE_952:   ; [c64_ir] InlineExit
001313r 2                   ; inline exit
001313r 2  68               pla
001314r 2  68               pla
001315r 2               
001315r 2               @target_266:
001315r 2               
001315r 2               ; src/prelude.fth:41:13 in `cells`
001315r 2               @OPCODE_954:   ; [c64_ir] Add
001315r 2                   ; 21
001315r 2  CA               dex
001316r 2  CA               dex
001317r 2  18               clc
001318r 2  B5 00            lda $00,x
00131Ar 2  75 02            adc $02,x
00131Cr 2  95 00            sta $00,x
00131Er 2  B5 01            lda $01,x
001320r 2  75 03            adc $03,x
001322r 2  95 01            sta $01,x
001324r 2               
001324r 2               ; src/prelude.fth:41:15 in `cells`
001324r 2               @OPCODE_955:   ; [c64_ir] InlineExit
001324r 2                   ; inline exit
001324r 2  68               pla
001325r 2  68               pla
001326r 2               
001326r 2               @target_267:
001326r 2               
001326r 2               ; snake.fth:42:9 in `snake-x`
001326r 2               @OPCODE_957:   ; [c64_ir] PushLiteral(-28668)
001326r 2  E8               inx
001327r 2  E8               inx
001328r 2  A9 04            lda #4
00132Ar 2  95 00            sta $00,x
00132Cr 2  A9 90            lda #144
00132Er 2  95 01            sta $01,x
001330r 2               
001330r 2               ; snake.fth:42:22 in `snake-x`
001330r 2               @OPCODE_958:   ; [c64_ir] Add
001330r 2                   ; 21
001330r 2  CA               dex
001331r 2  CA               dex
001332r 2  18               clc
001333r 2  B5 00            lda $00,x
001335r 2  75 02            adc $02,x
001337r 2  95 00            sta $00,x
001339r 2  B5 01            lda $01,x
00133Br 2  75 03            adc $03,x
00133Dr 2  95 01            sta $01,x
00133Fr 2               
00133Fr 2               ; snake.fth:42:24 in `snake-x`
00133Fr 2               @OPCODE_959:   ; [c64_ir] InlineExit
00133Fr 2                   ; inline exit
00133Fr 2  68               pla
001340r 2  68               pla
001341r 2               
001341r 2               @target_268:
001341r 2               
001341r 2               ; snake.fth:100:21 in `initialize-snake`
001341r 2               @OPCODE_961:   ; [c64_ir] Store
001341r 2  CA               dex
001342r 2  CA               dex
001343r 2  CA               dex
001344r 2  CA               dex
001345r 2  B5 02            lda $02,x
001347r 2  81 04            sta ($04,x)
001349r 2                   ; TODO high byte
001349r 2               
001349r 2               ; snake.fth:101:5 in `initialize-snake`
001349r 2               @OPCODE_962:   ; [c64_ir] PushLiteral(8)
001349r 2  E8               inx
00134Ar 2  E8               inx
00134Br 2  A9 08            lda #8
00134Dr 2  95 00            sta $00,x
00134Fr 2  A9 00            lda #0
001351r 2  95 01            sta $01,x
001353r 2               
001353r 2               ; snake.fth:101:7 in `initialize-snake`
001353r 2               @OPCODE_963:   ; [c64_ir] InlineCall("i")
001353r 2                   ; inline call(i)
001353r 2  48               pha
001354r 2  48               pha
001355r 2               
001355r 2               @target_269:
001355r 2               
001355r 2               ; src/prelude.fth:38:5 in `i`
001355r 2               @OPCODE_965:   ; [c64_ir] AltPop
001355r 2  E8               inx
001356r 2  E8               inx
001357r 2  68               pla
001358r 2  95 00            sta $00,x
00135Ar 2  68               pla
00135Br 2  95 01            sta $01,x
00135Dr 2               
00135Dr 2               ; src/prelude.fth:38:8 in `i`
00135Dr 2               @OPCODE_966:   ; [c64_ir] AltPop
00135Dr 2  E8               inx
00135Er 2  E8               inx
00135Fr 2  68               pla
001360r 2  95 00            sta $00,x
001362r 2  68               pla
001363r 2  95 01            sta $01,x
001365r 2               
001365r 2               ; src/prelude.fth:38:11 in `i`
001365r 2               @OPCODE_967:   ; [c64_ir] AltPop
001365r 2  E8               inx
001366r 2  E8               inx
001367r 2  68               pla
001368r 2  95 00            sta $00,x
00136Ar 2  68               pla
00136Br 2  95 01            sta $01,x
00136Dr 2               
00136Dr 2               ; src/prelude.fth:38:14 in `i`
00136Dr 2               @OPCODE_968:   ; [c64_ir] TempStore
00136Dr 2  CA               dex
00136Er 2  CA               dex
00136Fr 2  B5 03            lda $03,x
001371r 2  85 96            sta TEMP_PAX2
001373r 2  B5 02            lda $02,x
001375r 2  85 95            sta TEMP_PAX1
001377r 2               
001377r 2               ; src/prelude.fth:38:20 in `i`
001377r 2               @OPCODE_969:   ; [c64_ir] TempLoad
001377r 2  E8               inx
001378r 2  E8               inx
001379r 2  A5 95            lda TEMP_PAX1
00137Br 2  95 00            sta $00,x
00137Dr 2  A5 96            lda TEMP_PAX2
00137Fr 2  95 01            sta $01,x
001381r 2               
001381r 2               ; src/prelude.fth:38:26 in `i`
001381r 2               @OPCODE_970:   ; [c64_ir] AltPush
001381r 2  CA               dex
001382r 2  CA               dex
001383r 2  B5 03            lda $03,x
001385r 2  48               pha
001386r 2  B5 02            lda $02,x
001388r 2  48               pha
001389r 2               
001389r 2               ; src/prelude.fth:38:29 in `i`
001389r 2               @OPCODE_971:   ; [c64_ir] AltPush
001389r 2  CA               dex
00138Ar 2  CA               dex
00138Br 2  B5 03            lda $03,x
00138Dr 2  48               pha
00138Er 2  B5 02            lda $02,x
001390r 2  48               pha
001391r 2               
001391r 2               ; src/prelude.fth:38:32 in `i`
001391r 2               @OPCODE_972:   ; [c64_ir] AltPush
001391r 2  CA               dex
001392r 2  CA               dex
001393r 2  B5 03            lda $03,x
001395r 2  48               pha
001396r 2  B5 02            lda $02,x
001398r 2  48               pha
001399r 2               
001399r 2               ; src/prelude.fth:38:35 in `i`
001399r 2               @OPCODE_973:   ; [c64_ir] TempLoad
001399r 2  E8               inx
00139Ar 2  E8               inx
00139Br 2  A5 95            lda TEMP_PAX1
00139Dr 2  95 00            sta $00,x
00139Fr 2  A5 96            lda TEMP_PAX2
0013A1r 2  95 01            sta $01,x
0013A3r 2               
0013A3r 2               ; src/prelude.fth:38:41 in `i`
0013A3r 2               @OPCODE_974:   ; [c64_ir] InlineExit
0013A3r 2                   ; inline exit
0013A3r 2  68               pla
0013A4r 2  68               pla
0013A5r 2               
0013A5r 2               @target_270:
0013A5r 2               
0013A5r 2               ; snake.fth:101:9 in `initialize-snake`
0013A5r 2               @OPCODE_976:   ; [c64_ir] InlineCall("snake-y")
0013A5r 2                   ; inline call(snake-y)
0013A5r 2  48               pha
0013A6r 2  48               pha
0013A7r 2               
0013A7r 2               @target_271:
0013A7r 2               
0013A7r 2               ; snake.fth:45:3 in `snake-y`
0013A7r 2               @OPCODE_978:   ; [c64_ir] InlineCall("cells")
0013A7r 2                   ; inline call(cells)
0013A7r 2  48               pha
0013A8r 2  48               pha
0013A9r 2               
0013A9r 2               @target_272:
0013A9r 2               
0013A9r 2               ; src/prelude.fth:41:9 in `cells`
0013A9r 2               @OPCODE_980:   ; [c64_ir] InlineCall("dup")
0013A9r 2                   ; inline call(dup)
0013A9r 2  48               pha
0013AAr 2  48               pha
0013ABr 2               
0013ABr 2               @target_273:
0013ABr 2               
0013ABr 2               ; src/prelude.fth:6:10 in `dup`
0013ABr 2               @OPCODE_982:   ; [c64_ir] TempStore
0013ABr 2  CA               dex
0013ACr 2  CA               dex
0013ADr 2  B5 03            lda $03,x
0013AFr 2  85 96            sta TEMP_PAX2
0013B1r 2  B5 02            lda $02,x
0013B3r 2  85 95            sta TEMP_PAX1
0013B5r 2               
0013B5r 2               ; src/prelude.fth:6:16 in `dup`
0013B5r 2               @OPCODE_983:   ; [c64_ir] TempLoad
0013B5r 2  E8               inx
0013B6r 2  E8               inx
0013B7r 2  A5 95            lda TEMP_PAX1
0013B9r 2  95 00            sta $00,x
0013BBr 2  A5 96            lda TEMP_PAX2
0013BDr 2  95 01            sta $01,x
0013BFr 2               
0013BFr 2               ; src/prelude.fth:6:22 in `dup`
0013BFr 2               @OPCODE_984:   ; [c64_ir] TempLoad
0013BFr 2  E8               inx
0013C0r 2  E8               inx
0013C1r 2  A5 95            lda TEMP_PAX1
0013C3r 2  95 00            sta $00,x
0013C5r 2  A5 96            lda TEMP_PAX2
0013C7r 2  95 01            sta $01,x
0013C9r 2               
0013C9r 2               ; src/prelude.fth:6:28 in `dup`
0013C9r 2               @OPCODE_985:   ; [c64_ir] InlineExit
0013C9r 2                   ; inline exit
0013C9r 2  68               pla
0013CAr 2  68               pla
0013CBr 2               
0013CBr 2               @target_274:
0013CBr 2               
0013CBr 2               ; src/prelude.fth:41:13 in `cells`
0013CBr 2               @OPCODE_987:   ; [c64_ir] Add
0013CBr 2                   ; 21
0013CBr 2  CA               dex
0013CCr 2  CA               dex
0013CDr 2  18               clc
0013CEr 2  B5 00            lda $00,x
0013D0r 2  75 02            adc $02,x
0013D2r 2  95 00            sta $00,x
0013D4r 2  B5 01            lda $01,x
0013D6r 2  75 03            adc $03,x
0013D8r 2  95 01            sta $01,x
0013DAr 2               
0013DAr 2               ; src/prelude.fth:41:15 in `cells`
0013DAr 2               @OPCODE_988:   ; [c64_ir] InlineExit
0013DAr 2                   ; inline exit
0013DAr 2  68               pla
0013DBr 2  68               pla
0013DCr 2               
0013DCr 2               @target_275:
0013DCr 2               
0013DCr 2               ; snake.fth:45:9 in `snake-y`
0013DCr 2               @OPCODE_990:   ; [c64_ir] PushLiteral(-27666)
0013DCr 2  E8               inx
0013DDr 2  E8               inx
0013DEr 2  A9 EE            lda #238
0013E0r 2  95 00            sta $00,x
0013E2r 2  A9 93            lda #147
0013E4r 2  95 01            sta $01,x
0013E6r 2               
0013E6r 2               ; snake.fth:45:22 in `snake-y`
0013E6r 2               @OPCODE_991:   ; [c64_ir] Add
0013E6r 2                   ; 21
0013E6r 2  CA               dex
0013E7r 2  CA               dex
0013E8r 2  18               clc
0013E9r 2  B5 00            lda $00,x
0013EBr 2  75 02            adc $02,x
0013EDr 2  95 00            sta $00,x
0013EFr 2  B5 01            lda $01,x
0013F1r 2  75 03            adc $03,x
0013F3r 2  95 01            sta $01,x
0013F5r 2               
0013F5r 2               ; snake.fth:45:24 in `snake-y`
0013F5r 2               @OPCODE_992:   ; [c64_ir] InlineExit
0013F5r 2                   ; inline exit
0013F5r 2  68               pla
0013F6r 2  68               pla
0013F7r 2               
0013F7r 2               @target_276:
0013F7r 2               
0013F7r 2               ; snake.fth:101:17 in `initialize-snake`
0013F7r 2               @OPCODE_994:   ; [c64_ir] Store
0013F7r 2  CA               dex
0013F8r 2  CA               dex
0013F9r 2  CA               dex
0013FAr 2  CA               dex
0013FBr 2  B5 02            lda $02,x
0013FDr 2  81 04            sta ($04,x)
0013FFr 2                   ; TODO high byte
0013FFr 2               
0013FFr 2               ; snake.fth:102:3 in `initialize-snake`
0013FFr 2               @OPCODE_995:   ; [c64_ir] InlineCall("loopimpl")
0013FFr 2                   ; inline call(loopimpl)
0013FFr 2  48               pha
001400r 2  48               pha
001401r 2               
001401r 2               @target_277:
001401r 2               
001401r 2               ; src/prelude.fth:33:12 in `loopimpl`
001401r 2               @OPCODE_997:   ; [c64_ir] AltPop
001401r 2  E8               inx
001402r 2  E8               inx
001403r 2  68               pla
001404r 2  95 00            sta $00,x
001406r 2  68               pla
001407r 2  95 01            sta $01,x
001409r 2               
001409r 2               ; src/prelude.fth:33:15 in `loopimpl`
001409r 2               @OPCODE_998:   ; [c64_ir] AltPop
001409r 2  E8               inx
00140Ar 2  E8               inx
00140Br 2  68               pla
00140Cr 2  95 00            sta $00,x
00140Er 2  68               pla
00140Fr 2  95 01            sta $01,x
001411r 2               
001411r 2               ; src/prelude.fth:33:18 in `loopimpl`
001411r 2               @OPCODE_999:   ; [c64_ir] AltPop
001411r 2  E8               inx
001412r 2  E8               inx
001413r 2  68               pla
001414r 2  95 00            sta $00,x
001416r 2  68               pla
001417r 2  95 01            sta $01,x
001419r 2               
001419r 2               ; src/prelude.fth:33:21 in `loopimpl`
001419r 2               @OPCODE_1000:   ; [c64_ir] InlineCall("1+")
001419r 2                   ; inline call(1+)
001419r 2  48               pha
00141Ar 2  48               pha
00141Br 2               
00141Br 2               @target_278:
00141Br 2               
00141Br 2               ; src/prelude.fth:18:8 in `1+`
00141Br 2               @OPCODE_1002:   ; [c64_ir] PushLiteral(1)
00141Br 2  E8               inx
00141Cr 2  E8               inx
00141Dr 2  A9 01            lda #1
00141Fr 2  95 00            sta $00,x
001421r 2  A9 00            lda #0
001423r 2  95 01            sta $01,x
001425r 2               
001425r 2               ; src/prelude.fth:18:10 in `1+`
001425r 2               @OPCODE_1003:   ; [c64_ir] Add
001425r 2                   ; 21
001425r 2  CA               dex
001426r 2  CA               dex
001427r 2  18               clc
001428r 2  B5 00            lda $00,x
00142Ar 2  75 02            adc $02,x
00142Cr 2  95 00            sta $00,x
00142Er 2  B5 01            lda $01,x
001430r 2  75 03            adc $03,x
001432r 2  95 01            sta $01,x
001434r 2               
001434r 2               ; src/prelude.fth:18:12 in `1+`
001434r 2               @OPCODE_1004:   ; [c64_ir] InlineExit
001434r 2                   ; inline exit
001434r 2  68               pla
001435r 2  68               pla
001436r 2               
001436r 2               @target_279:
001436r 2               
001436r 2               ; src/prelude.fth:33:24 in `loopimpl`
001436r 2               @OPCODE_1006:   ; [c64_ir] InlineCall("2dup")
001436r 2                   ; inline call(2dup)
001436r 2  48               pha
001437r 2  48               pha
001438r 2               
001438r 2               @target_280:
001438r 2               
001438r 2               ; src/prelude.fth:8:10 in `2dup`
001438r 2               @OPCODE_1008:   ; [c64_ir] InlineCall("over")
001438r 2                   ; inline call(over)
001438r 2  48               pha
001439r 2  48               pha
00143Ar 2               
00143Ar 2               @target_281:
00143Ar 2               
00143Ar 2               ; src/prelude.fth:4:10 in `over`
00143Ar 2               @OPCODE_1010:   ; [c64_ir] AltPush
00143Ar 2  CA               dex
00143Br 2  CA               dex
00143Cr 2  B5 03            lda $03,x
00143Er 2  48               pha
00143Fr 2  B5 02            lda $02,x
001441r 2  48               pha
001442r 2               
001442r 2               ; src/prelude.fth:4:13 in `over`
001442r 2               @OPCODE_1011:   ; [c64_ir] TempStore
001442r 2  CA               dex
001443r 2  CA               dex
001444r 2  B5 03            lda $03,x
001446r 2  85 96            sta TEMP_PAX2
001448r 2  B5 02            lda $02,x
00144Ar 2  85 95            sta TEMP_PAX1
00144Cr 2               
00144Cr 2               ; src/prelude.fth:4:19 in `over`
00144Cr 2               @OPCODE_1012:   ; [c64_ir] TempLoad
00144Cr 2  E8               inx
00144Dr 2  E8               inx
00144Er 2  A5 95            lda TEMP_PAX1
001450r 2  95 00            sta $00,x
001452r 2  A5 96            lda TEMP_PAX2
001454r 2  95 01            sta $01,x
001456r 2               
001456r 2               ; src/prelude.fth:4:25 in `over`
001456r 2               @OPCODE_1013:   ; [c64_ir] AltPop
001456r 2  E8               inx
001457r 2  E8               inx
001458r 2  68               pla
001459r 2  95 00            sta $00,x
00145Br 2  68               pla
00145Cr 2  95 01            sta $01,x
00145Er 2               
00145Er 2               ; src/prelude.fth:4:28 in `over`
00145Er 2               @OPCODE_1014:   ; [c64_ir] TempLoad
00145Er 2  E8               inx
00145Fr 2  E8               inx
001460r 2  A5 95            lda TEMP_PAX1
001462r 2  95 00            sta $00,x
001464r 2  A5 96            lda TEMP_PAX2
001466r 2  95 01            sta $01,x
001468r 2               
001468r 2               ; src/prelude.fth:4:34 in `over`
001468r 2               @OPCODE_1015:   ; [c64_ir] InlineExit
001468r 2                   ; inline exit
001468r 2  68               pla
001469r 2  68               pla
00146Ar 2               
00146Ar 2               @target_282:
00146Ar 2               
00146Ar 2               ; src/prelude.fth:8:15 in `2dup`
00146Ar 2               @OPCODE_1017:   ; [c64_ir] InlineCall("over")
00146Ar 2                   ; inline call(over)
00146Ar 2  48               pha
00146Br 2  48               pha
00146Cr 2               
00146Cr 2               @target_283:
00146Cr 2               
00146Cr 2               ; src/prelude.fth:4:10 in `over`
00146Cr 2               @OPCODE_1019:   ; [c64_ir] AltPush
00146Cr 2  CA               dex
00146Dr 2  CA               dex
00146Er 2  B5 03            lda $03,x
001470r 2  48               pha
001471r 2  B5 02            lda $02,x
001473r 2  48               pha
001474r 2               
001474r 2               ; src/prelude.fth:4:13 in `over`
001474r 2               @OPCODE_1020:   ; [c64_ir] TempStore
001474r 2  CA               dex
001475r 2  CA               dex
001476r 2  B5 03            lda $03,x
001478r 2  85 96            sta TEMP_PAX2
00147Ar 2  B5 02            lda $02,x
00147Cr 2  85 95            sta TEMP_PAX1
00147Er 2               
00147Er 2               ; src/prelude.fth:4:19 in `over`
00147Er 2               @OPCODE_1021:   ; [c64_ir] TempLoad
00147Er 2  E8               inx
00147Fr 2  E8               inx
001480r 2  A5 95            lda TEMP_PAX1
001482r 2  95 00            sta $00,x
001484r 2  A5 96            lda TEMP_PAX2
001486r 2  95 01            sta $01,x
001488r 2               
001488r 2               ; src/prelude.fth:4:25 in `over`
001488r 2               @OPCODE_1022:   ; [c64_ir] AltPop
001488r 2  E8               inx
001489r 2  E8               inx
00148Ar 2  68               pla
00148Br 2  95 00            sta $00,x
00148Dr 2  68               pla
00148Er 2  95 01            sta $01,x
001490r 2               
001490r 2               ; src/prelude.fth:4:28 in `over`
001490r 2               @OPCODE_1023:   ; [c64_ir] TempLoad
001490r 2  E8               inx
001491r 2  E8               inx
001492r 2  A5 95            lda TEMP_PAX1
001494r 2  95 00            sta $00,x
001496r 2  A5 96            lda TEMP_PAX2
001498r 2  95 01            sta $01,x
00149Ar 2               
00149Ar 2               ; src/prelude.fth:4:34 in `over`
00149Ar 2               @OPCODE_1024:   ; [c64_ir] InlineExit
00149Ar 2                   ; inline exit
00149Ar 2  68               pla
00149Br 2  68               pla
00149Cr 2               
00149Cr 2               @target_284:
00149Cr 2               
00149Cr 2               ; src/prelude.fth:8:20 in `2dup`
00149Cr 2               @OPCODE_1026:   ; [c64_ir] InlineExit
00149Cr 2                   ; inline exit
00149Cr 2  68               pla
00149Dr 2  68               pla
00149Er 2               
00149Er 2               @target_285:
00149Er 2               
00149Er 2               ; src/prelude.fth:33:29 in `loopimpl`
00149Er 2               @OPCODE_1028:   ; [c64_ir] AltPush
00149Er 2  CA               dex
00149Fr 2  CA               dex
0014A0r 2  B5 03            lda $03,x
0014A2r 2  48               pha
0014A3r 2  B5 02            lda $02,x
0014A5r 2  48               pha
0014A6r 2               
0014A6r 2               ; src/prelude.fth:33:32 in `loopimpl`
0014A6r 2               @OPCODE_1029:   ; [c64_ir] AltPush
0014A6r 2  CA               dex
0014A7r 2  CA               dex
0014A8r 2  B5 03            lda $03,x
0014AAr 2  48               pha
0014ABr 2  B5 02            lda $02,x
0014ADr 2  48               pha
0014AEr 2               
0014AEr 2               ; src/prelude.fth:33:35 in `loopimpl`
0014AEr 2               @OPCODE_1030:   ; [c64_ir] InlineCall("=")
0014AEr 2                   ; inline call(=)
0014AEr 2  48               pha
0014AFr 2  48               pha
0014B0r 2               
0014B0r 2               @target_286:
0014B0r 2               
0014B0r 2               ; src/prelude.fth:22:8 in `=`
0014B0r 2               @OPCODE_1032:   ; [c64_ir] InlineCall("-")
0014B0r 2                   ; inline call(-)
0014B0r 2  48               pha
0014B1r 2  48               pha
0014B2r 2               
0014B2r 2               @target_287:
0014B2r 2               
0014B2r 2               ; src/prelude.fth:16:12 in `-`
0014B2r 2               @OPCODE_1034:   ; [c64_ir] InlineCall("negate")
0014B2r 2                   ; inline call(negate)
0014B2r 2  48               pha
0014B3r 2  48               pha
0014B4r 2               
0014B4r 2               @target_288:
0014B4r 2               
0014B4r 2               ; src/prelude.fth:15:12 in `negate`
0014B4r 2               @OPCODE_1036:   ; [c64_ir] InlineCall("invert")
0014B4r 2                   ; inline call(invert)
0014B4r 2  48               pha
0014B5r 2  48               pha
0014B6r 2               
0014B6r 2               @target_289:
0014B6r 2               
0014B6r 2               ; src/prelude.fth:14:12 in `invert`
0014B6r 2               @OPCODE_1038:   ; [c64_ir] PushLiteral(-1)
0014B6r 2  E8               inx
0014B7r 2  E8               inx
0014B8r 2  A9 FF            lda #255
0014BAr 2  95 00            sta $00,x
0014BCr 2  A9 FF            lda #255
0014BEr 2  95 01            sta $01,x
0014C0r 2               
0014C0r 2               ; src/prelude.fth:14:15 in `invert`
0014C0r 2               @OPCODE_1039:   ; [c64_ir] Nand
0014C0r 2                   ; 26
0014C0r 2  CA               dex
0014C1r 2  CA               dex
0014C2r 2  B5 00            lda $00,x
0014C4r 2  35 02            and $02,x
0014C6r 2  49 FF            eor #$ff
0014C8r 2  95 00            sta $00,x
0014CAr 2  B5 01            lda $01,x
0014CCr 2  35 03            and $03,x
0014CEr 2  49 FF            eor #$ff
0014D0r 2  95 01            sta $01,x
0014D2r 2               
0014D2r 2               ; src/prelude.fth:14:20 in `invert`
0014D2r 2               @OPCODE_1040:   ; [c64_ir] InlineExit
0014D2r 2                   ; inline exit
0014D2r 2  68               pla
0014D3r 2  68               pla
0014D4r 2               
0014D4r 2               @target_290:
0014D4r 2               
0014D4r 2               ; src/prelude.fth:15:19 in `negate`
0014D4r 2               @OPCODE_1042:   ; [c64_ir] PushLiteral(1)
0014D4r 2  E8               inx
0014D5r 2  E8               inx
0014D6r 2  A9 01            lda #1
0014D8r 2  95 00            sta $00,x
0014DAr 2  A9 00            lda #0
0014DCr 2  95 01            sta $01,x
0014DEr 2               
0014DEr 2               ; src/prelude.fth:15:21 in `negate`
0014DEr 2               @OPCODE_1043:   ; [c64_ir] Add
0014DEr 2                   ; 21
0014DEr 2  CA               dex
0014DFr 2  CA               dex
0014E0r 2  18               clc
0014E1r 2  B5 00            lda $00,x
0014E3r 2  75 02            adc $02,x
0014E5r 2  95 00            sta $00,x
0014E7r 2  B5 01            lda $01,x
0014E9r 2  75 03            adc $03,x
0014EBr 2  95 01            sta $01,x
0014EDr 2               
0014EDr 2               ; src/prelude.fth:15:23 in `negate`
0014EDr 2               @OPCODE_1044:   ; [c64_ir] InlineExit
0014EDr 2                   ; inline exit
0014EDr 2  68               pla
0014EEr 2  68               pla
0014EFr 2               
0014EFr 2               @target_291:
0014EFr 2               
0014EFr 2               ; src/prelude.fth:16:19 in `-`
0014EFr 2               @OPCODE_1046:   ; [c64_ir] Add
0014EFr 2                   ; 21
0014EFr 2  CA               dex
0014F0r 2  CA               dex
0014F1r 2  18               clc
0014F2r 2  B5 00            lda $00,x
0014F4r 2  75 02            adc $02,x
0014F6r 2  95 00            sta $00,x
0014F8r 2  B5 01            lda $01,x
0014FAr 2  75 03            adc $03,x
0014FCr 2  95 01            sta $01,x
0014FEr 2               
0014FEr 2               ; src/prelude.fth:16:21 in `-`
0014FEr 2               @OPCODE_1047:   ; [c64_ir] InlineExit
0014FEr 2                   ; inline exit
0014FEr 2  68               pla
0014FFr 2  68               pla
001500r 2               
001500r 2               @target_292:
001500r 2               
001500r 2               ; src/prelude.fth:22:10 in `=`
001500r 2               @OPCODE_1049:   ; [c64_ir] InlineCall("0=")
001500r 2                   ; inline call(0=)
001500r 2  48               pha
001501r 2  48               pha
001502r 2               
001502r 2               @target_293:
001502r 2               
001502r 2               ; src/prelude.fth:21:8 in `0=`
001502r 2               @OPCODE_1051:   ; [c64_ir] JumpIf0(295)
001502r 2  CA               dex
001503r 2  CA               dex
001504r 2  B5 02            lda $02,x
001506r 2  15 03            ora $03,x
001508r 2  D0 03            bne *+5
00150Ar 2  4C rr rr         jmp @target_295
00150Dr 2               
00150Dr 2               @target_294:
00150Dr 2               
00150Dr 2               ; src/prelude.fth:21:11 in `0=`
00150Dr 2               @OPCODE_1053:   ; [c64_ir] PushLiteral(0)
00150Dr 2  E8               inx
00150Er 2  E8               inx
00150Fr 2  A9 00            lda #0
001511r 2  95 00            sta $00,x
001513r 2  A9 00            lda #0
001515r 2  95 01            sta $01,x
001517r 2               
001517r 2               ; src/prelude.fth:21:13 in `0=`
001517r 2               @OPCODE_1054:   ; [c64_ir] JumpElse(296)
001517r 2  4C rr rr         jmp @target_296
00151Ar 2               
00151Ar 2               @target_295:
00151Ar 2               
00151Ar 2               ; src/prelude.fth:21:18 in `0=`
00151Ar 2               @OPCODE_1056:   ; [c64_ir] PushLiteral(-1)
00151Ar 2  E8               inx
00151Br 2  E8               inx
00151Cr 2  A9 FF            lda #255
00151Er 2  95 00            sta $00,x
001520r 2  A9 FF            lda #255
001522r 2  95 01            sta $01,x
001524r 2               
001524r 2               ; src/prelude.fth:21:21 in `0=`
001524r 2               @OPCODE_1057:   ; [c64_ir] JumpTarget(295)
001524r 2               
001524r 2               @target_296:
001524r 2               
001524r 2               ; src/prelude.fth:21:26 in `0=`
001524r 2               @OPCODE_1059:   ; [c64_ir] InlineExit
001524r 2                   ; inline exit
001524r 2  68               pla
001525r 2  68               pla
001526r 2               
001526r 2               @target_297:
001526r 2               
001526r 2               ; src/prelude.fth:22:13 in `=`
001526r 2               @OPCODE_1061:   ; [c64_ir] InlineExit
001526r 2                   ; inline exit
001526r 2  68               pla
001527r 2  68               pla
001528r 2               
001528r 2               @target_298:
001528r 2               
001528r 2               ; src/prelude.fth:33:37 in `loopimpl`
001528r 2               @OPCODE_1063:   ; [c64_ir] InlineCall("swap")
001528r 2                   ; inline call(swap)
001528r 2  48               pha
001529r 2  48               pha
00152Ar 2               
00152Ar 2               @target_299:
00152Ar 2               
00152Ar 2               ; src/prelude.fth:3:10 in `swap`
00152Ar 2               @OPCODE_1065:   ; [c64_ir] AltPush
00152Ar 2  CA               dex
00152Br 2  CA               dex
00152Cr 2  B5 03            lda $03,x
00152Er 2  48               pha
00152Fr 2  B5 02            lda $02,x
001531r 2  48               pha
001532r 2               
001532r 2               ; src/prelude.fth:3:13 in `swap`
001532r 2               @OPCODE_1066:   ; [c64_ir] TempStore
001532r 2  CA               dex
001533r 2  CA               dex
001534r 2  B5 03            lda $03,x
001536r 2  85 96            sta TEMP_PAX2
001538r 2  B5 02            lda $02,x
00153Ar 2  85 95            sta TEMP_PAX1
00153Cr 2               
00153Cr 2               ; src/prelude.fth:3:19 in `swap`
00153Cr 2               @OPCODE_1067:   ; [c64_ir] AltPop
00153Cr 2  E8               inx
00153Dr 2  E8               inx
00153Er 2  68               pla
00153Fr 2  95 00            sta $00,x
001541r 2  68               pla
001542r 2  95 01            sta $01,x
001544r 2               
001544r 2               ; src/prelude.fth:3:22 in `swap`
001544r 2               @OPCODE_1068:   ; [c64_ir] TempLoad
001544r 2  E8               inx
001545r 2  E8               inx
001546r 2  A5 95            lda TEMP_PAX1
001548r 2  95 00            sta $00,x
00154Ar 2  A5 96            lda TEMP_PAX2
00154Cr 2  95 01            sta $01,x
00154Er 2               
00154Er 2               ; src/prelude.fth:3:28 in `swap`
00154Er 2               @OPCODE_1069:   ; [c64_ir] InlineExit
00154Er 2                   ; inline exit
00154Er 2  68               pla
00154Fr 2  68               pla
001550r 2               
001550r 2               @target_300:
001550r 2               
001550r 2               ; src/prelude.fth:33:42 in `loopimpl`
001550r 2               @OPCODE_1071:   ; [c64_ir] AltPush
001550r 2  CA               dex
001551r 2  CA               dex
001552r 2  B5 03            lda $03,x
001554r 2  48               pha
001555r 2  B5 02            lda $02,x
001557r 2  48               pha
001558r 2               
001558r 2               ; src/prelude.fth:33:45 in `loopimpl`
001558r 2               @OPCODE_1072:   ; [c64_ir] InlineExit
001558r 2                   ; inline exit
001558r 2  68               pla
001559r 2  68               pla
00155Ar 2               
00155Ar 2               @target_301:
00155Ar 2               
00155Ar 2               ; snake.fth:102:3 in `initialize-snake`
00155Ar 2               @OPCODE_1074:   ; [c64_ir] LoopIf0(252)
00155Ar 2  CA               dex
00155Br 2  CA               dex
00155Cr 2  B5 02            lda $02,x
00155Er 2  15 03            ora $03,x
001560r 2  D0 03            bne *+5
001562r 2  4C rr rr         jmp @target_252
001565r 2               
001565r 2               @target_302:
001565r 2               
001565r 2               ; snake.fth:102:3 in `initialize-snake`
001565r 2               @OPCODE_1076:   ; [c64_ir] AltPop
001565r 2  E8               inx
001566r 2  E8               inx
001567r 2  68               pla
001568r 2  95 00            sta $00,x
00156Ar 2  68               pla
00156Br 2  95 01            sta $01,x
00156Dr 2               
00156Dr 2               ; snake.fth:102:3 in `initialize-snake`
00156Dr 2               @OPCODE_1077:   ; [c64_ir] Drop
00156Dr 2  CA               dex
00156Er 2  CA               dex
00156Fr 2               
00156Fr 2               ; snake.fth:102:3 in `initialize-snake`
00156Fr 2               @OPCODE_1078:   ; [c64_ir] AltPop
00156Fr 2  E8               inx
001570r 2  E8               inx
001571r 2  68               pla
001572r 2  95 00            sta $00,x
001574r 2  68               pla
001575r 2  95 01            sta $01,x
001577r 2               
001577r 2               ; snake.fth:102:3 in `initialize-snake`
001577r 2               @OPCODE_1079:   ; [c64_ir] Drop
001577r 2  CA               dex
001578r 2  CA               dex
001579r 2               
001579r 2               ; snake.fth:103:3 in `initialize-snake`
001579r 2               @OPCODE_1080:   ; [c64_ir] PushLiteral(39)
001579r 2  E8               inx
00157Ar 2  E8               inx
00157Br 2  A9 27            lda #39
00157Dr 2  95 00            sta $00,x
00157Fr 2  A9 00            lda #0
001581r 2  95 01            sta $01,x
001583r 2               
001583r 2               ; snake.fth:103:9 in `initialize-snake`
001583r 2               @OPCODE_1081:   ; [c64_ir] PushLiteral(-26660)
001583r 2  E8               inx
001584r 2  E8               inx
001585r 2  A9 DC            lda #220
001587r 2  95 00            sta $00,x
001589r 2  A9 97            lda #151
00158Br 2  95 01            sta $01,x
00158Dr 2               
00158Dr 2               ; snake.fth:103:19 in `initialize-snake`
00158Dr 2               @OPCODE_1082:   ; [c64_ir] Store
00158Dr 2  CA               dex
00158Er 2  CA               dex
00158Fr 2  CA               dex
001590r 2  CA               dex
001591r 2  B5 02            lda $02,x
001593r 2  81 04            sta ($04,x)
001595r 2                   ; TODO high byte
001595r 2               
001595r 2               ; snake.fth:103:21 in `initialize-snake`
001595r 2               @OPCODE_1083:   ; [c64_ir] InlineExit
001595r 2                   ; inline exit
001595r 2  68               pla
001596r 2  68               pla
001597r 2               
001597r 2               @target_303:
001597r 2               
001597r 2               ; snake.fth:119:3 in `initialize`
001597r 2               @OPCODE_1085:   ; [c64_ir] InlineCall("initialize-apple")
001597r 2                   ; inline call(initialize-apple)
001597r 2  48               pha
001598r 2  48               pha
001599r 2               
001599r 2               @target_304:
001599r 2               
001599r 2               ; snake.fth:107:21 in `initialize-apple`
001599r 2               @OPCODE_1087:   ; [c64_ir] PushLiteral(8)
001599r 2  E8               inx
00159Ar 2  E8               inx
00159Br 2  A9 08            lda #8
00159Dr 2  95 00            sta $00,x
00159Fr 2  A9 00            lda #0
0015A1r 2  95 01            sta $01,x
0015A3r 2               
0015A3r 2               ; snake.fth:107:23 in `initialize-apple`
0015A3r 2               @OPCODE_1088:   ; [c64_ir] PushLiteral(13)
0015A3r 2  E8               inx
0015A4r 2  E8               inx
0015A5r 2  A9 0D            lda #13
0015A7r 2  95 00            sta $00,x
0015A9r 2  A9 00            lda #0
0015ABr 2  95 01            sta $01,x
0015ADr 2               
0015ADr 2               ; snake.fth:107:26 in `initialize-apple`
0015ADr 2               @OPCODE_1089:   ; [c64_ir] InlineCall("set-apple-position")
0015ADr 2                   ; inline call(set-apple-position)
0015ADr 2  48               pha
0015AEr 2  48               pha
0015AFr 2               
0015AFr 2               @target_305:
0015AFr 2               
0015AFr 2               ; snake.fth:105:22 in `set-apple-position`
0015AFr 2               @OPCODE_1091:   ; [c64_ir] PushLiteral(-26664)
0015AFr 2  E8               inx
0015B0r 2  E8               inx
0015B1r 2  A9 D8            lda #216
0015B3r 2  95 00            sta $00,x
0015B5r 2  A9 97            lda #151
0015B7r 2  95 01            sta $01,x
0015B9r 2               
0015B9r 2               ; snake.fth:105:30 in `set-apple-position`
0015B9r 2               @OPCODE_1092:   ; [c64_ir] Store
0015B9r 2  CA               dex
0015BAr 2  CA               dex
0015BBr 2  CA               dex
0015BCr 2  CA               dex
0015BDr 2  B5 02            lda $02,x
0015BFr 2  81 04            sta ($04,x)
0015C1r 2                   ; TODO high byte
0015C1r 2               
0015C1r 2               ; snake.fth:105:32 in `set-apple-position`
0015C1r 2               @OPCODE_1093:   ; [c64_ir] PushLiteral(-26662)
0015C1r 2  E8               inx
0015C2r 2  E8               inx
0015C3r 2  A9 DA            lda #218
0015C5r 2  95 00            sta $00,x
0015C7r 2  A9 97            lda #151
0015C9r 2  95 01            sta $01,x
0015CBr 2               
0015CBr 2               ; snake.fth:105:40 in `set-apple-position`
0015CBr 2               @OPCODE_1094:   ; [c64_ir] Store
0015CBr 2  CA               dex
0015CCr 2  CA               dex
0015CDr 2  CA               dex
0015CEr 2  CA               dex
0015CFr 2  B5 02            lda $02,x
0015D1r 2  81 04            sta ($04,x)
0015D3r 2                   ; TODO high byte
0015D3r 2               
0015D3r 2               ; snake.fth:105:42 in `set-apple-position`
0015D3r 2               @OPCODE_1095:   ; [c64_ir] InlineExit
0015D3r 2                   ; inline exit
0015D3r 2  68               pla
0015D4r 2  68               pla
0015D5r 2               
0015D5r 2               @target_306:
0015D5r 2               
0015D5r 2               ; snake.fth:107:45 in `initialize-apple`
0015D5r 2               @OPCODE_1097:   ; [c64_ir] InlineExit
0015D5r 2                   ; inline exit
0015D5r 2  68               pla
0015D6r 2  68               pla
0015D7r 2               
0015D7r 2               @target_307:
0015D7r 2               
0015D7r 2               ; snake.fth:120:3 in `initialize`
0015D7r 2               @OPCODE_1099:   ; [c64_ir] InlineCall("draw-full-snake")
0015D7r 2                   ; inline call(draw-full-snake)
0015D7r 2  48               pha
0015D8r 2  48               pha
0015D9r 2               
0015D9r 2               @target_308:
0015D9r 2               
0015D9r 2               ; snake.fth:110:3 in `draw-full-snake`
0015D9r 2               @OPCODE_1101:   ; [c64_ir] PushLiteral(-26658)
0015D9r 2  E8               inx
0015DAr 2  E8               inx
0015DBr 2  A9 DE            lda #222
0015DDr 2  95 00            sta $00,x
0015DFr 2  A9 97            lda #151
0015E1r 2  95 01            sta $01,x
0015E3r 2               
0015E3r 2               ; snake.fth:110:10 in `draw-full-snake`
0015E3r 2               @OPCODE_1102:   ; [c64_ir] Load
0015E3r 2  A1 00            lda ($00,x)
0015E5r 2  95 00            sta $00,x
0015E7r 2  A9 00            lda #0
0015E9r 2  95 01            sta $01,x
0015EBr 2               
0015EBr 2               ; snake.fth:110:12 in `draw-full-snake`
0015EBr 2               @OPCODE_1103:   ; [c64_ir] PushLiteral(0)
0015EBr 2  E8               inx
0015ECr 2  E8               inx
0015EDr 2  A9 00            lda #0
0015EFr 2  95 00            sta $00,x
0015F1r 2  A9 00            lda #0
0015F3r 2  95 01            sta $01,x
0015F5r 2               
0015F5r 2               ; snake.fth:110:14 in `draw-full-snake`
0015F5r 2               @OPCODE_1104:   ; [c64_ir] AltPush
0015F5r 2  CA               dex
0015F6r 2  CA               dex
0015F7r 2  B5 03            lda $03,x
0015F9r 2  48               pha
0015FAr 2  B5 02            lda $02,x
0015FCr 2  48               pha
0015FDr 2               
0015FDr 2               ; snake.fth:110:14 in `draw-full-snake`
0015FDr 2               @OPCODE_1105:   ; [c64_ir] AltPush
0015FDr 2  CA               dex
0015FEr 2  CA               dex
0015FFr 2  B5 03            lda $03,x
001601r 2  48               pha
001602r 2  B5 02            lda $02,x
001604r 2  48               pha
001605r 2               
001605r 2               ; snake.fth:110:14 in `draw-full-snake`
001605r 2               @OPCODE_1106:   ; [c64_ir] LoopTarget(308)
001605r 2               
001605r 2               @target_309:
001605r 2               
001605r 2               ; snake.fth:111:5 in `draw-full-snake`
001605r 2               @OPCODE_1108:   ; [c64_ir] InlineCall("i")
001605r 2                   ; inline call(i)
001605r 2  48               pha
001606r 2  48               pha
001607r 2               
001607r 2               @target_310:
001607r 2               
001607r 2               ; src/prelude.fth:38:5 in `i`
001607r 2               @OPCODE_1110:   ; [c64_ir] AltPop
001607r 2  E8               inx
001608r 2  E8               inx
001609r 2  68               pla
00160Ar 2  95 00            sta $00,x
00160Cr 2  68               pla
00160Dr 2  95 01            sta $01,x
00160Fr 2               
00160Fr 2               ; src/prelude.fth:38:8 in `i`
00160Fr 2               @OPCODE_1111:   ; [c64_ir] AltPop
00160Fr 2  E8               inx
001610r 2  E8               inx
001611r 2  68               pla
001612r 2  95 00            sta $00,x
001614r 2  68               pla
001615r 2  95 01            sta $01,x
001617r 2               
001617r 2               ; src/prelude.fth:38:11 in `i`
001617r 2               @OPCODE_1112:   ; [c64_ir] AltPop
001617r 2  E8               inx
001618r 2  E8               inx
001619r 2  68               pla
00161Ar 2  95 00            sta $00,x
00161Cr 2  68               pla
00161Dr 2  95 01            sta $01,x
00161Fr 2               
00161Fr 2               ; src/prelude.fth:38:14 in `i`
00161Fr 2               @OPCODE_1113:   ; [c64_ir] TempStore
00161Fr 2  CA               dex
001620r 2  CA               dex
001621r 2  B5 03            lda $03,x
001623r 2  85 96            sta TEMP_PAX2
001625r 2  B5 02            lda $02,x
001627r 2  85 95            sta TEMP_PAX1
001629r 2               
001629r 2               ; src/prelude.fth:38:20 in `i`
001629r 2               @OPCODE_1114:   ; [c64_ir] TempLoad
001629r 2  E8               inx
00162Ar 2  E8               inx
00162Br 2  A5 95            lda TEMP_PAX1
00162Dr 2  95 00            sta $00,x
00162Fr 2  A5 96            lda TEMP_PAX2
001631r 2  95 01            sta $01,x
001633r 2               
001633r 2               ; src/prelude.fth:38:26 in `i`
001633r 2               @OPCODE_1115:   ; [c64_ir] AltPush
001633r 2  CA               dex
001634r 2  CA               dex
001635r 2  B5 03            lda $03,x
001637r 2  48               pha
001638r 2  B5 02            lda $02,x
00163Ar 2  48               pha
00163Br 2               
00163Br 2               ; src/prelude.fth:38:29 in `i`
00163Br 2               @OPCODE_1116:   ; [c64_ir] AltPush
00163Br 2  CA               dex
00163Cr 2  CA               dex
00163Dr 2  B5 03            lda $03,x
00163Fr 2  48               pha
001640r 2  B5 02            lda $02,x
001642r 2  48               pha
001643r 2               
001643r 2               ; src/prelude.fth:38:32 in `i`
001643r 2               @OPCODE_1117:   ; [c64_ir] AltPush
001643r 2  CA               dex
001644r 2  CA               dex
001645r 2  B5 03            lda $03,x
001647r 2  48               pha
001648r 2  B5 02            lda $02,x
00164Ar 2  48               pha
00164Br 2               
00164Br 2               ; src/prelude.fth:38:35 in `i`
00164Br 2               @OPCODE_1118:   ; [c64_ir] TempLoad
00164Br 2  E8               inx
00164Cr 2  E8               inx
00164Dr 2  A5 95            lda TEMP_PAX1
00164Fr 2  95 00            sta $00,x
001651r 2  A5 96            lda TEMP_PAX2
001653r 2  95 01            sta $01,x
001655r 2               
001655r 2               ; src/prelude.fth:38:41 in `i`
001655r 2               @OPCODE_1119:   ; [c64_ir] InlineExit
001655r 2                   ; inline exit
001655r 2  68               pla
001656r 2  68               pla
001657r 2               
001657r 2               @target_311:
001657r 2               
001657r 2               ; snake.fth:111:7 in `draw-full-snake`
001657r 2               @OPCODE_1121:   ; [c64_ir] InlineCall("snake-x")
001657r 2                   ; inline call(snake-x)
001657r 2  48               pha
001658r 2  48               pha
001659r 2               
001659r 2               @target_312:
001659r 2               
001659r 2               ; snake.fth:42:3 in `snake-x`
001659r 2               @OPCODE_1123:   ; [c64_ir] InlineCall("cells")
001659r 2                   ; inline call(cells)
001659r 2  48               pha
00165Ar 2  48               pha
00165Br 2               
00165Br 2               @target_313:
00165Br 2               
00165Br 2               ; src/prelude.fth:41:9 in `cells`
00165Br 2               @OPCODE_1125:   ; [c64_ir] InlineCall("dup")
00165Br 2                   ; inline call(dup)
00165Br 2  48               pha
00165Cr 2  48               pha
00165Dr 2               
00165Dr 2               @target_314:
00165Dr 2               
00165Dr 2               ; src/prelude.fth:6:10 in `dup`
00165Dr 2               @OPCODE_1127:   ; [c64_ir] TempStore
00165Dr 2  CA               dex
00165Er 2  CA               dex
00165Fr 2  B5 03            lda $03,x
001661r 2  85 96            sta TEMP_PAX2
001663r 2  B5 02            lda $02,x
001665r 2  85 95            sta TEMP_PAX1
001667r 2               
001667r 2               ; src/prelude.fth:6:16 in `dup`
001667r 2               @OPCODE_1128:   ; [c64_ir] TempLoad
001667r 2  E8               inx
001668r 2  E8               inx
001669r 2  A5 95            lda TEMP_PAX1
00166Br 2  95 00            sta $00,x
00166Dr 2  A5 96            lda TEMP_PAX2
00166Fr 2  95 01            sta $01,x
001671r 2               
001671r 2               ; src/prelude.fth:6:22 in `dup`
001671r 2               @OPCODE_1129:   ; [c64_ir] TempLoad
001671r 2  E8               inx
001672r 2  E8               inx
001673r 2  A5 95            lda TEMP_PAX1
001675r 2  95 00            sta $00,x
001677r 2  A5 96            lda TEMP_PAX2
001679r 2  95 01            sta $01,x
00167Br 2               
00167Br 2               ; src/prelude.fth:6:28 in `dup`
00167Br 2               @OPCODE_1130:   ; [c64_ir] InlineExit
00167Br 2                   ; inline exit
00167Br 2  68               pla
00167Cr 2  68               pla
00167Dr 2               
00167Dr 2               @target_315:
00167Dr 2               
00167Dr 2               ; src/prelude.fth:41:13 in `cells`
00167Dr 2               @OPCODE_1132:   ; [c64_ir] Add
00167Dr 2                   ; 21
00167Dr 2  CA               dex
00167Er 2  CA               dex
00167Fr 2  18               clc
001680r 2  B5 00            lda $00,x
001682r 2  75 02            adc $02,x
001684r 2  95 00            sta $00,x
001686r 2  B5 01            lda $01,x
001688r 2  75 03            adc $03,x
00168Ar 2  95 01            sta $01,x
00168Cr 2               
00168Cr 2               ; src/prelude.fth:41:15 in `cells`
00168Cr 2               @OPCODE_1133:   ; [c64_ir] InlineExit
00168Cr 2                   ; inline exit
00168Cr 2  68               pla
00168Dr 2  68               pla
00168Er 2               
00168Er 2               @target_316:
00168Er 2               
00168Er 2               ; snake.fth:42:9 in `snake-x`
00168Er 2               @OPCODE_1135:   ; [c64_ir] PushLiteral(-28668)
00168Er 2  E8               inx
00168Fr 2  E8               inx
001690r 2  A9 04            lda #4
001692r 2  95 00            sta $00,x
001694r 2  A9 90            lda #144
001696r 2  95 01            sta $01,x
001698r 2               
001698r 2               ; snake.fth:42:22 in `snake-x`
001698r 2               @OPCODE_1136:   ; [c64_ir] Add
001698r 2                   ; 21
001698r 2  CA               dex
001699r 2  CA               dex
00169Ar 2  18               clc
00169Br 2  B5 00            lda $00,x
00169Dr 2  75 02            adc $02,x
00169Fr 2  95 00            sta $00,x
0016A1r 2  B5 01            lda $01,x
0016A3r 2  75 03            adc $03,x
0016A5r 2  95 01            sta $01,x
0016A7r 2               
0016A7r 2               ; snake.fth:42:24 in `snake-x`
0016A7r 2               @OPCODE_1137:   ; [c64_ir] InlineExit
0016A7r 2                   ; inline exit
0016A7r 2  68               pla
0016A8r 2  68               pla
0016A9r 2               
0016A9r 2               @target_317:
0016A9r 2               
0016A9r 2               ; snake.fth:111:15 in `draw-full-snake`
0016A9r 2               @OPCODE_1139:   ; [c64_ir] Load
0016A9r 2  A1 00            lda ($00,x)
0016ABr 2  95 00            sta $00,x
0016ADr 2  A9 00            lda #0
0016AFr 2  95 01            sta $01,x
0016B1r 2               
0016B1r 2               ; snake.fth:111:17 in `draw-full-snake`
0016B1r 2               @OPCODE_1140:   ; [c64_ir] InlineCall("i")
0016B1r 2                   ; inline call(i)
0016B1r 2  48               pha
0016B2r 2  48               pha
0016B3r 2               
0016B3r 2               @target_318:
0016B3r 2               
0016B3r 2               ; src/prelude.fth:38:5 in `i`
0016B3r 2               @OPCODE_1142:   ; [c64_ir] AltPop
0016B3r 2  E8               inx
0016B4r 2  E8               inx
0016B5r 2  68               pla
0016B6r 2  95 00            sta $00,x
0016B8r 2  68               pla
0016B9r 2  95 01            sta $01,x
0016BBr 2               
0016BBr 2               ; src/prelude.fth:38:8 in `i`
0016BBr 2               @OPCODE_1143:   ; [c64_ir] AltPop
0016BBr 2  E8               inx
0016BCr 2  E8               inx
0016BDr 2  68               pla
0016BEr 2  95 00            sta $00,x
0016C0r 2  68               pla
0016C1r 2  95 01            sta $01,x
0016C3r 2               
0016C3r 2               ; src/prelude.fth:38:11 in `i`
0016C3r 2               @OPCODE_1144:   ; [c64_ir] AltPop
0016C3r 2  E8               inx
0016C4r 2  E8               inx
0016C5r 2  68               pla
0016C6r 2  95 00            sta $00,x
0016C8r 2  68               pla
0016C9r 2  95 01            sta $01,x
0016CBr 2               
0016CBr 2               ; src/prelude.fth:38:14 in `i`
0016CBr 2               @OPCODE_1145:   ; [c64_ir] TempStore
0016CBr 2  CA               dex
0016CCr 2  CA               dex
0016CDr 2  B5 03            lda $03,x
0016CFr 2  85 96            sta TEMP_PAX2
0016D1r 2  B5 02            lda $02,x
0016D3r 2  85 95            sta TEMP_PAX1
0016D5r 2               
0016D5r 2               ; src/prelude.fth:38:20 in `i`
0016D5r 2               @OPCODE_1146:   ; [c64_ir] TempLoad
0016D5r 2  E8               inx
0016D6r 2  E8               inx
0016D7r 2  A5 95            lda TEMP_PAX1
0016D9r 2  95 00            sta $00,x
0016DBr 2  A5 96            lda TEMP_PAX2
0016DDr 2  95 01            sta $01,x
0016DFr 2               
0016DFr 2               ; src/prelude.fth:38:26 in `i`
0016DFr 2               @OPCODE_1147:   ; [c64_ir] AltPush
0016DFr 2  CA               dex
0016E0r 2  CA               dex
0016E1r 2  B5 03            lda $03,x
0016E3r 2  48               pha
0016E4r 2  B5 02            lda $02,x
0016E6r 2  48               pha
0016E7r 2               
0016E7r 2               ; src/prelude.fth:38:29 in `i`
0016E7r 2               @OPCODE_1148:   ; [c64_ir] AltPush
0016E7r 2  CA               dex
0016E8r 2  CA               dex
0016E9r 2  B5 03            lda $03,x
0016EBr 2  48               pha
0016ECr 2  B5 02            lda $02,x
0016EEr 2  48               pha
0016EFr 2               
0016EFr 2               ; src/prelude.fth:38:32 in `i`
0016EFr 2               @OPCODE_1149:   ; [c64_ir] AltPush
0016EFr 2  CA               dex
0016F0r 2  CA               dex
0016F1r 2  B5 03            lda $03,x
0016F3r 2  48               pha
0016F4r 2  B5 02            lda $02,x
0016F6r 2  48               pha
0016F7r 2               
0016F7r 2               ; src/prelude.fth:38:35 in `i`
0016F7r 2               @OPCODE_1150:   ; [c64_ir] TempLoad
0016F7r 2  E8               inx
0016F8r 2  E8               inx
0016F9r 2  A5 95            lda TEMP_PAX1
0016FBr 2  95 00            sta $00,x
0016FDr 2  A5 96            lda TEMP_PAX2
0016FFr 2  95 01            sta $01,x
001701r 2               
001701r 2               ; src/prelude.fth:38:41 in `i`
001701r 2               @OPCODE_1151:   ; [c64_ir] InlineExit
001701r 2                   ; inline exit
001701r 2  68               pla
001702r 2  68               pla
001703r 2               
001703r 2               @target_319:
001703r 2               
001703r 2               ; snake.fth:111:19 in `draw-full-snake`
001703r 2               @OPCODE_1153:   ; [c64_ir] InlineCall("snake-y")
001703r 2                   ; inline call(snake-y)
001703r 2  48               pha
001704r 2  48               pha
001705r 2               
001705r 2               @target_320:
001705r 2               
001705r 2               ; snake.fth:45:3 in `snake-y`
001705r 2               @OPCODE_1155:   ; [c64_ir] InlineCall("cells")
001705r 2                   ; inline call(cells)
001705r 2  48               pha
001706r 2  48               pha
001707r 2               
001707r 2               @target_321:
001707r 2               
001707r 2               ; src/prelude.fth:41:9 in `cells`
001707r 2               @OPCODE_1157:   ; [c64_ir] InlineCall("dup")
001707r 2                   ; inline call(dup)
001707r 2  48               pha
001708r 2  48               pha
001709r 2               
001709r 2               @target_322:
001709r 2               
001709r 2               ; src/prelude.fth:6:10 in `dup`
001709r 2               @OPCODE_1159:   ; [c64_ir] TempStore
001709r 2  CA               dex
00170Ar 2  CA               dex
00170Br 2  B5 03            lda $03,x
00170Dr 2  85 96            sta TEMP_PAX2
00170Fr 2  B5 02            lda $02,x
001711r 2  85 95            sta TEMP_PAX1
001713r 2               
001713r 2               ; src/prelude.fth:6:16 in `dup`
001713r 2               @OPCODE_1160:   ; [c64_ir] TempLoad
001713r 2  E8               inx
001714r 2  E8               inx
001715r 2  A5 95            lda TEMP_PAX1
001717r 2  95 00            sta $00,x
001719r 2  A5 96            lda TEMP_PAX2
00171Br 2  95 01            sta $01,x
00171Dr 2               
00171Dr 2               ; src/prelude.fth:6:22 in `dup`
00171Dr 2               @OPCODE_1161:   ; [c64_ir] TempLoad
00171Dr 2  E8               inx
00171Er 2  E8               inx
00171Fr 2  A5 95            lda TEMP_PAX1
001721r 2  95 00            sta $00,x
001723r 2  A5 96            lda TEMP_PAX2
001725r 2  95 01            sta $01,x
001727r 2               
001727r 2               ; src/prelude.fth:6:28 in `dup`
001727r 2               @OPCODE_1162:   ; [c64_ir] InlineExit
001727r 2                   ; inline exit
001727r 2  68               pla
001728r 2  68               pla
001729r 2               
001729r 2               @target_323:
001729r 2               
001729r 2               ; src/prelude.fth:41:13 in `cells`
001729r 2               @OPCODE_1164:   ; [c64_ir] Add
001729r 2                   ; 21
001729r 2  CA               dex
00172Ar 2  CA               dex
00172Br 2  18               clc
00172Cr 2  B5 00            lda $00,x
00172Er 2  75 02            adc $02,x
001730r 2  95 00            sta $00,x
001732r 2  B5 01            lda $01,x
001734r 2  75 03            adc $03,x
001736r 2  95 01            sta $01,x
001738r 2               
001738r 2               ; src/prelude.fth:41:15 in `cells`
001738r 2               @OPCODE_1165:   ; [c64_ir] InlineExit
001738r 2                   ; inline exit
001738r 2  68               pla
001739r 2  68               pla
00173Ar 2               
00173Ar 2               @target_324:
00173Ar 2               
00173Ar 2               ; snake.fth:45:9 in `snake-y`
00173Ar 2               @OPCODE_1167:   ; [c64_ir] PushLiteral(-27666)
00173Ar 2  E8               inx
00173Br 2  E8               inx
00173Cr 2  A9 EE            lda #238
00173Er 2  95 00            sta $00,x
001740r 2  A9 93            lda #147
001742r 2  95 01            sta $01,x
001744r 2               
001744r 2               ; snake.fth:45:22 in `snake-y`
001744r 2               @OPCODE_1168:   ; [c64_ir] Add
001744r 2                   ; 21
001744r 2  CA               dex
001745r 2  CA               dex
001746r 2  18               clc
001747r 2  B5 00            lda $00,x
001749r 2  75 02            adc $02,x
00174Br 2  95 00            sta $00,x
00174Dr 2  B5 01            lda $01,x
00174Fr 2  75 03            adc $03,x
001751r 2  95 01            sta $01,x
001753r 2               
001753r 2               ; snake.fth:45:24 in `snake-y`
001753r 2               @OPCODE_1169:   ; [c64_ir] InlineExit
001753r 2                   ; inline exit
001753r 2  68               pla
001754r 2  68               pla
001755r 2               
001755r 2               @target_325:
001755r 2               
001755r 2               ; snake.fth:111:27 in `draw-full-snake`
001755r 2               @OPCODE_1171:   ; [c64_ir] Load
001755r 2  A1 00            lda ($00,x)
001757r 2  95 00            sta $00,x
001759r 2  A9 00            lda #0
00175Br 2  95 01            sta $01,x
00175Dr 2               
00175Dr 2               ; snake.fth:111:29 in `draw-full-snake`
00175Dr 2               @OPCODE_1172:   ; [c64_ir] InlineCall("draw-snake-tile")
00175Dr 2                   ; inline call(draw-snake-tile)
00175Dr 2  48               pha
00175Er 2  48               pha
00175Fr 2               
00175Fr 2               @target_326:
00175Fr 2               
00175Fr 2               ; snake.fth:53:31 in `draw-snake-tile`
00175Fr 2               @OPCODE_1174:   ; [c64_ir] PushLiteral(232)
00175Fr 2  E8               inx
001760r 2  E8               inx
001761r 2  A9 E8            lda #232
001763r 2  95 00            sta $00,x
001765r 2  A9 00            lda #0
001767r 2  95 01            sta $01,x
001769r 2               
001769r 2               ; snake.fth:53:36 in `draw-snake-tile`
001769r 2               @OPCODE_1175:   ; [c64_ir] InlineCall("rot")
001769r 2                   ; inline call(rot)
001769r 2  48               pha
00176Ar 2  48               pha
00176Br 2               
00176Br 2               @target_327:
00176Br 2               
00176Br 2               ; src/prelude.fth:5:10 in `rot`
00176Br 2               @OPCODE_1177:   ; [c64_ir] AltPush
00176Br 2  CA               dex
00176Cr 2  CA               dex
00176Dr 2  B5 03            lda $03,x
00176Fr 2  48               pha
001770r 2  B5 02            lda $02,x
001772r 2  48               pha
001773r 2               
001773r 2               ; src/prelude.fth:5:13 in `rot`
001773r 2               @OPCODE_1178:   ; [c64_ir] InlineCall("swap")
001773r 2                   ; inline call(swap)
001773r 2  48               pha
001774r 2  48               pha
001775r 2               
001775r 2               @target_328:
001775r 2               
001775r 2               ; src/prelude.fth:3:10 in `swap`
001775r 2               @OPCODE_1180:   ; [c64_ir] AltPush
001775r 2  CA               dex
001776r 2  CA               dex
001777r 2  B5 03            lda $03,x
001779r 2  48               pha
00177Ar 2  B5 02            lda $02,x
00177Cr 2  48               pha
00177Dr 2               
00177Dr 2               ; src/prelude.fth:3:13 in `swap`
00177Dr 2               @OPCODE_1181:   ; [c64_ir] TempStore
00177Dr 2  CA               dex
00177Er 2  CA               dex
00177Fr 2  B5 03            lda $03,x
001781r 2  85 96            sta TEMP_PAX2
001783r 2  B5 02            lda $02,x
001785r 2  85 95            sta TEMP_PAX1
001787r 2               
001787r 2               ; src/prelude.fth:3:19 in `swap`
001787r 2               @OPCODE_1182:   ; [c64_ir] AltPop
001787r 2  E8               inx
001788r 2  E8               inx
001789r 2  68               pla
00178Ar 2  95 00            sta $00,x
00178Cr 2  68               pla
00178Dr 2  95 01            sta $01,x
00178Fr 2               
00178Fr 2               ; src/prelude.fth:3:22 in `swap`
00178Fr 2               @OPCODE_1183:   ; [c64_ir] TempLoad
00178Fr 2  E8               inx
001790r 2  E8               inx
001791r 2  A5 95            lda TEMP_PAX1
001793r 2  95 00            sta $00,x
001795r 2  A5 96            lda TEMP_PAX2
001797r 2  95 01            sta $01,x
001799r 2               
001799r 2               ; src/prelude.fth:3:28 in `swap`
001799r 2               @OPCODE_1184:   ; [c64_ir] InlineExit
001799r 2                   ; inline exit
001799r 2  68               pla
00179Ar 2  68               pla
00179Br 2               
00179Br 2               @target_329:
00179Br 2               
00179Br 2               ; src/prelude.fth:5:18 in `rot`
00179Br 2               @OPCODE_1186:   ; [c64_ir] AltPop
00179Br 2  E8               inx
00179Cr 2  E8               inx
00179Dr 2  68               pla
00179Er 2  95 00            sta $00,x
0017A0r 2  68               pla
0017A1r 2  95 01            sta $01,x
0017A3r 2               
0017A3r 2               ; src/prelude.fth:5:21 in `rot`
0017A3r 2               @OPCODE_1187:   ; [c64_ir] InlineCall("swap")
0017A3r 2                   ; inline call(swap)
0017A3r 2  48               pha
0017A4r 2  48               pha
0017A5r 2               
0017A5r 2               @target_330:
0017A5r 2               
0017A5r 2               ; src/prelude.fth:3:10 in `swap`
0017A5r 2               @OPCODE_1189:   ; [c64_ir] AltPush
0017A5r 2  CA               dex
0017A6r 2  CA               dex
0017A7r 2  B5 03            lda $03,x
0017A9r 2  48               pha
0017AAr 2  B5 02            lda $02,x
0017ACr 2  48               pha
0017ADr 2               
0017ADr 2               ; src/prelude.fth:3:13 in `swap`
0017ADr 2               @OPCODE_1190:   ; [c64_ir] TempStore
0017ADr 2  CA               dex
0017AEr 2  CA               dex
0017AFr 2  B5 03            lda $03,x
0017B1r 2  85 96            sta TEMP_PAX2
0017B3r 2  B5 02            lda $02,x
0017B5r 2  85 95            sta TEMP_PAX1
0017B7r 2               
0017B7r 2               ; src/prelude.fth:3:19 in `swap`
0017B7r 2               @OPCODE_1191:   ; [c64_ir] AltPop
0017B7r 2  E8               inx
0017B8r 2  E8               inx
0017B9r 2  68               pla
0017BAr 2  95 00            sta $00,x
0017BCr 2  68               pla
0017BDr 2  95 01            sta $01,x
0017BFr 2               
0017BFr 2               ; src/prelude.fth:3:22 in `swap`
0017BFr 2               @OPCODE_1192:   ; [c64_ir] TempLoad
0017BFr 2  E8               inx
0017C0r 2  E8               inx
0017C1r 2  A5 95            lda TEMP_PAX1
0017C3r 2  95 00            sta $00,x
0017C5r 2  A5 96            lda TEMP_PAX2
0017C7r 2  95 01            sta $01,x
0017C9r 2               
0017C9r 2               ; src/prelude.fth:3:28 in `swap`
0017C9r 2               @OPCODE_1193:   ; [c64_ir] InlineExit
0017C9r 2                   ; inline exit
0017C9r 2  68               pla
0017CAr 2  68               pla
0017CBr 2               
0017CBr 2               @target_331:
0017CBr 2               
0017CBr 2               ; src/prelude.fth:5:26 in `rot`
0017CBr 2               @OPCODE_1195:   ; [c64_ir] InlineExit
0017CBr 2                   ; inline exit
0017CBr 2  68               pla
0017CCr 2  68               pla
0017CDr 2               
0017CDr 2               @target_332:
0017CDr 2               
0017CDr 2               ; snake.fth:53:40 in `draw-snake-tile`
0017CDr 2               @OPCODE_1197:   ; [c64_ir] InlineCall("rot")
0017CDr 2                   ; inline call(rot)
0017CDr 2  48               pha
0017CEr 2  48               pha
0017CFr 2               
0017CFr 2               @target_333:
0017CFr 2               
0017CFr 2               ; src/prelude.fth:5:10 in `rot`
0017CFr 2               @OPCODE_1199:   ; [c64_ir] AltPush
0017CFr 2  CA               dex
0017D0r 2  CA               dex
0017D1r 2  B5 03            lda $03,x
0017D3r 2  48               pha
0017D4r 2  B5 02            lda $02,x
0017D6r 2  48               pha
0017D7r 2               
0017D7r 2               ; src/prelude.fth:5:13 in `rot`
0017D7r 2               @OPCODE_1200:   ; [c64_ir] InlineCall("swap")
0017D7r 2                   ; inline call(swap)
0017D7r 2  48               pha
0017D8r 2  48               pha
0017D9r 2               
0017D9r 2               @target_334:
0017D9r 2               
0017D9r 2               ; src/prelude.fth:3:10 in `swap`
0017D9r 2               @OPCODE_1202:   ; [c64_ir] AltPush
0017D9r 2  CA               dex
0017DAr 2  CA               dex
0017DBr 2  B5 03            lda $03,x
0017DDr 2  48               pha
0017DEr 2  B5 02            lda $02,x
0017E0r 2  48               pha
0017E1r 2               
0017E1r 2               ; src/prelude.fth:3:13 in `swap`
0017E1r 2               @OPCODE_1203:   ; [c64_ir] TempStore
0017E1r 2  CA               dex
0017E2r 2  CA               dex
0017E3r 2  B5 03            lda $03,x
0017E5r 2  85 96            sta TEMP_PAX2
0017E7r 2  B5 02            lda $02,x
0017E9r 2  85 95            sta TEMP_PAX1
0017EBr 2               
0017EBr 2               ; src/prelude.fth:3:19 in `swap`
0017EBr 2               @OPCODE_1204:   ; [c64_ir] AltPop
0017EBr 2  E8               inx
0017ECr 2  E8               inx
0017EDr 2  68               pla
0017EEr 2  95 00            sta $00,x
0017F0r 2  68               pla
0017F1r 2  95 01            sta $01,x
0017F3r 2               
0017F3r 2               ; src/prelude.fth:3:22 in `swap`
0017F3r 2               @OPCODE_1205:   ; [c64_ir] TempLoad
0017F3r 2  E8               inx
0017F4r 2  E8               inx
0017F5r 2  A5 95            lda TEMP_PAX1
0017F7r 2  95 00            sta $00,x
0017F9r 2  A5 96            lda TEMP_PAX2
0017FBr 2  95 01            sta $01,x
0017FDr 2               
0017FDr 2               ; src/prelude.fth:3:28 in `swap`
0017FDr 2               @OPCODE_1206:   ; [c64_ir] InlineExit
0017FDr 2                   ; inline exit
0017FDr 2  68               pla
0017FEr 2  68               pla
0017FFr 2               
0017FFr 2               @target_335:
0017FFr 2               
0017FFr 2               ; src/prelude.fth:5:18 in `rot`
0017FFr 2               @OPCODE_1208:   ; [c64_ir] AltPop
0017FFr 2  E8               inx
001800r 2  E8               inx
001801r 2  68               pla
001802r 2  95 00            sta $00,x
001804r 2  68               pla
001805r 2  95 01            sta $01,x
001807r 2               
001807r 2               ; src/prelude.fth:5:21 in `rot`
001807r 2               @OPCODE_1209:   ; [c64_ir] InlineCall("swap")
001807r 2                   ; inline call(swap)
001807r 2  48               pha
001808r 2  48               pha
001809r 2               
001809r 2               @target_336:
001809r 2               
001809r 2               ; src/prelude.fth:3:10 in `swap`
001809r 2               @OPCODE_1211:   ; [c64_ir] AltPush
001809r 2  CA               dex
00180Ar 2  CA               dex
00180Br 2  B5 03            lda $03,x
00180Dr 2  48               pha
00180Er 2  B5 02            lda $02,x
001810r 2  48               pha
001811r 2               
001811r 2               ; src/prelude.fth:3:13 in `swap`
001811r 2               @OPCODE_1212:   ; [c64_ir] TempStore
001811r 2  CA               dex
001812r 2  CA               dex
001813r 2  B5 03            lda $03,x
001815r 2  85 96            sta TEMP_PAX2
001817r 2  B5 02            lda $02,x
001819r 2  85 95            sta TEMP_PAX1
00181Br 2               
00181Br 2               ; src/prelude.fth:3:19 in `swap`
00181Br 2               @OPCODE_1213:   ; [c64_ir] AltPop
00181Br 2  E8               inx
00181Cr 2  E8               inx
00181Dr 2  68               pla
00181Er 2  95 00            sta $00,x
001820r 2  68               pla
001821r 2  95 01            sta $01,x
001823r 2               
001823r 2               ; src/prelude.fth:3:22 in `swap`
001823r 2               @OPCODE_1214:   ; [c64_ir] TempLoad
001823r 2  E8               inx
001824r 2  E8               inx
001825r 2  A5 95            lda TEMP_PAX1
001827r 2  95 00            sta $00,x
001829r 2  A5 96            lda TEMP_PAX2
00182Br 2  95 01            sta $01,x
00182Dr 2               
00182Dr 2               ; src/prelude.fth:3:28 in `swap`
00182Dr 2               @OPCODE_1215:   ; [c64_ir] InlineExit
00182Dr 2                   ; inline exit
00182Dr 2  68               pla
00182Er 2  68               pla
00182Fr 2               
00182Fr 2               @target_337:
00182Fr 2               
00182Fr 2               ; src/prelude.fth:5:26 in `rot`
00182Fr 2               @OPCODE_1217:   ; [c64_ir] InlineExit
00182Fr 2                   ; inline exit
00182Fr 2  68               pla
001830r 2  68               pla
001831r 2               
001831r 2               @target_338:
001831r 2               
001831r 2               ; snake.fth:53:44 in `draw-snake-tile`
001831r 2               @OPCODE_1219:   ; [c64_ir] InlineCall("draw")
001831r 2                   ; inline call(draw)
001831r 2  48               pha
001832r 2  48               pha
001833r 2               
001833r 2               @target_339:
001833r 2               
001833r 2               ; snake.fth:50:26 in `draw`
001833r 2               @OPCODE_1221:   ; [c64_ir] InlineCall("convert-x-y")
001833r 2                   ; inline call(convert-x-y)
001833r 2  48               pha
001834r 2  48               pha
001835r 2               
001835r 2               @target_340:
001835r 2               
001835r 2               ; snake.fth:48:34 in `convert-x-y`
001835r 2               @OPCODE_1223:   ; [c64_ir] PushLiteral(40)
001835r 2  E8               inx
001836r 2  E8               inx
001837r 2  A9 28            lda #40
001839r 2  95 00            sta $00,x
00183Br 2  A9 00            lda #0
00183Dr 2  95 01            sta $01,x
00183Fr 2               
00183Fr 2               ; snake.fth:48:37 in `convert-x-y`
00183Fr 2               @OPCODE_1224:   ; [c64_ir] InlineCall("*")
00183Fr 2                   ; inline call(*)
00183Fr 2  48               pha
001840r 2  48               pha
001841r 2               
001841r 2               @target_341:
001841r 2               
001841r 2               ; src/prelude.fth:44:5 in `*`
001841r 2               @OPCODE_1226:   ; [c64_ir] AltPush
001841r 2  CA               dex
001842r 2  CA               dex
001843r 2  B5 03            lda $03,x
001845r 2  48               pha
001846r 2  B5 02            lda $02,x
001848r 2  48               pha
001849r 2               
001849r 2               ; src/prelude.fth:44:8 in `*`
001849r 2               @OPCODE_1227:   ; [c64_ir] PushLiteral(0)
001849r 2  E8               inx
00184Ar 2  E8               inx
00184Br 2  A9 00            lda #0
00184Dr 2  95 00            sta $00,x
00184Fr 2  A9 00            lda #0
001851r 2  95 01            sta $01,x
001853r 2               
001853r 2               ; src/prelude.fth:44:10 in `*`
001853r 2               @OPCODE_1228:   ; [c64_ir] AltPop
001853r 2  E8               inx
001854r 2  E8               inx
001855r 2  68               pla
001856r 2  95 00            sta $00,x
001858r 2  68               pla
001859r 2  95 01            sta $01,x
00185Br 2               
00185Br 2               ; src/prelude.fth:44:13 in `*`
00185Br 2               @OPCODE_1229:   ; [c64_ir] PushLiteral(0)
00185Br 2  E8               inx
00185Cr 2  E8               inx
00185Dr 2  A9 00            lda #0
00185Fr 2  95 00            sta $00,x
001861r 2  A9 00            lda #0
001863r 2  95 01            sta $01,x
001865r 2               
001865r 2               ; src/prelude.fth:44:15 in `*`
001865r 2               @OPCODE_1230:   ; [c64_ir] AltPush
001865r 2  CA               dex
001866r 2  CA               dex
001867r 2  B5 03            lda $03,x
001869r 2  48               pha
00186Ar 2  B5 02            lda $02,x
00186Cr 2  48               pha
00186Dr 2               
00186Dr 2               ; src/prelude.fth:44:15 in `*`
00186Dr 2               @OPCODE_1231:   ; [c64_ir] AltPush
00186Dr 2  CA               dex
00186Er 2  CA               dex
00186Fr 2  B5 03            lda $03,x
001871r 2  48               pha
001872r 2  B5 02            lda $02,x
001874r 2  48               pha
001875r 2               
001875r 2               ; src/prelude.fth:44:15 in `*`
001875r 2               @OPCODE_1232:   ; [c64_ir] LoopTarget(341)
001875r 2               
001875r 2               @target_342:
001875r 2               
001875r 2               ; src/prelude.fth:44:18 in `*`
001875r 2               @OPCODE_1234:   ; [c64_ir] InlineCall("over")
001875r 2                   ; inline call(over)
001875r 2  48               pha
001876r 2  48               pha
001877r 2               
001877r 2               @target_343:
001877r 2               
001877r 2               ; src/prelude.fth:4:10 in `over`
001877r 2               @OPCODE_1236:   ; [c64_ir] AltPush
001877r 2  CA               dex
001878r 2  CA               dex
001879r 2  B5 03            lda $03,x
00187Br 2  48               pha
00187Cr 2  B5 02            lda $02,x
00187Er 2  48               pha
00187Fr 2               
00187Fr 2               ; src/prelude.fth:4:13 in `over`
00187Fr 2               @OPCODE_1237:   ; [c64_ir] TempStore
00187Fr 2  CA               dex
001880r 2  CA               dex
001881r 2  B5 03            lda $03,x
001883r 2  85 96            sta TEMP_PAX2
001885r 2  B5 02            lda $02,x
001887r 2  85 95            sta TEMP_PAX1
001889r 2               
001889r 2               ; src/prelude.fth:4:19 in `over`
001889r 2               @OPCODE_1238:   ; [c64_ir] TempLoad
001889r 2  E8               inx
00188Ar 2  E8               inx
00188Br 2  A5 95            lda TEMP_PAX1
00188Dr 2  95 00            sta $00,x
00188Fr 2  A5 96            lda TEMP_PAX2
001891r 2  95 01            sta $01,x
001893r 2               
001893r 2               ; src/prelude.fth:4:25 in `over`
001893r 2               @OPCODE_1239:   ; [c64_ir] AltPop
001893r 2  E8               inx
001894r 2  E8               inx
001895r 2  68               pla
001896r 2  95 00            sta $00,x
001898r 2  68               pla
001899r 2  95 01            sta $01,x
00189Br 2               
00189Br 2               ; src/prelude.fth:4:28 in `over`
00189Br 2               @OPCODE_1240:   ; [c64_ir] TempLoad
00189Br 2  E8               inx
00189Cr 2  E8               inx
00189Dr 2  A5 95            lda TEMP_PAX1
00189Fr 2  95 00            sta $00,x
0018A1r 2  A5 96            lda TEMP_PAX2
0018A3r 2  95 01            sta $01,x
0018A5r 2               
0018A5r 2               ; src/prelude.fth:4:34 in `over`
0018A5r 2               @OPCODE_1241:   ; [c64_ir] InlineExit
0018A5r 2                   ; inline exit
0018A5r 2  68               pla
0018A6r 2  68               pla
0018A7r 2               
0018A7r 2               @target_344:
0018A7r 2               
0018A7r 2               ; src/prelude.fth:44:23 in `*`
0018A7r 2               @OPCODE_1243:   ; [c64_ir] Add
0018A7r 2                   ; 21
0018A7r 2  CA               dex
0018A8r 2  CA               dex
0018A9r 2  18               clc
0018AAr 2  B5 00            lda $00,x
0018ACr 2  75 02            adc $02,x
0018AEr 2  95 00            sta $00,x
0018B0r 2  B5 01            lda $01,x
0018B2r 2  75 03            adc $03,x
0018B4r 2  95 01            sta $01,x
0018B6r 2               
0018B6r 2               ; src/prelude.fth:44:25 in `*`
0018B6r 2               @OPCODE_1244:   ; [c64_ir] InlineCall("loopimpl")
0018B6r 2                   ; inline call(loopimpl)
0018B6r 2  48               pha
0018B7r 2  48               pha
0018B8r 2               
0018B8r 2               @target_345:
0018B8r 2               
0018B8r 2               ; src/prelude.fth:33:12 in `loopimpl`
0018B8r 2               @OPCODE_1246:   ; [c64_ir] AltPop
0018B8r 2  E8               inx
0018B9r 2  E8               inx
0018BAr 2  68               pla
0018BBr 2  95 00            sta $00,x
0018BDr 2  68               pla
0018BEr 2  95 01            sta $01,x
0018C0r 2               
0018C0r 2               ; src/prelude.fth:33:15 in `loopimpl`
0018C0r 2               @OPCODE_1247:   ; [c64_ir] AltPop
0018C0r 2  E8               inx
0018C1r 2  E8               inx
0018C2r 2  68               pla
0018C3r 2  95 00            sta $00,x
0018C5r 2  68               pla
0018C6r 2  95 01            sta $01,x
0018C8r 2               
0018C8r 2               ; src/prelude.fth:33:18 in `loopimpl`
0018C8r 2               @OPCODE_1248:   ; [c64_ir] AltPop
0018C8r 2  E8               inx
0018C9r 2  E8               inx
0018CAr 2  68               pla
0018CBr 2  95 00            sta $00,x
0018CDr 2  68               pla
0018CEr 2  95 01            sta $01,x
0018D0r 2               
0018D0r 2               ; src/prelude.fth:33:21 in `loopimpl`
0018D0r 2               @OPCODE_1249:   ; [c64_ir] InlineCall("1+")
0018D0r 2                   ; inline call(1+)
0018D0r 2  48               pha
0018D1r 2  48               pha
0018D2r 2               
0018D2r 2               @target_346:
0018D2r 2               
0018D2r 2               ; src/prelude.fth:18:8 in `1+`
0018D2r 2               @OPCODE_1251:   ; [c64_ir] PushLiteral(1)
0018D2r 2  E8               inx
0018D3r 2  E8               inx
0018D4r 2  A9 01            lda #1
0018D6r 2  95 00            sta $00,x
0018D8r 2  A9 00            lda #0
0018DAr 2  95 01            sta $01,x
0018DCr 2               
0018DCr 2               ; src/prelude.fth:18:10 in `1+`
0018DCr 2               @OPCODE_1252:   ; [c64_ir] Add
0018DCr 2                   ; 21
0018DCr 2  CA               dex
0018DDr 2  CA               dex
0018DEr 2  18               clc
0018DFr 2  B5 00            lda $00,x
0018E1r 2  75 02            adc $02,x
0018E3r 2  95 00            sta $00,x
0018E5r 2  B5 01            lda $01,x
0018E7r 2  75 03            adc $03,x
0018E9r 2  95 01            sta $01,x
0018EBr 2               
0018EBr 2               ; src/prelude.fth:18:12 in `1+`
0018EBr 2               @OPCODE_1253:   ; [c64_ir] InlineExit
0018EBr 2                   ; inline exit
0018EBr 2  68               pla
0018ECr 2  68               pla
0018EDr 2               
0018EDr 2               @target_347:
0018EDr 2               
0018EDr 2               ; src/prelude.fth:33:24 in `loopimpl`
0018EDr 2               @OPCODE_1255:   ; [c64_ir] InlineCall("2dup")
0018EDr 2                   ; inline call(2dup)
0018EDr 2  48               pha
0018EEr 2  48               pha
0018EFr 2               
0018EFr 2               @target_348:
0018EFr 2               
0018EFr 2               ; src/prelude.fth:8:10 in `2dup`
0018EFr 2               @OPCODE_1257:   ; [c64_ir] InlineCall("over")
0018EFr 2                   ; inline call(over)
0018EFr 2  48               pha
0018F0r 2  48               pha
0018F1r 2               
0018F1r 2               @target_349:
0018F1r 2               
0018F1r 2               ; src/prelude.fth:4:10 in `over`
0018F1r 2               @OPCODE_1259:   ; [c64_ir] AltPush
0018F1r 2  CA               dex
0018F2r 2  CA               dex
0018F3r 2  B5 03            lda $03,x
0018F5r 2  48               pha
0018F6r 2  B5 02            lda $02,x
0018F8r 2  48               pha
0018F9r 2               
0018F9r 2               ; src/prelude.fth:4:13 in `over`
0018F9r 2               @OPCODE_1260:   ; [c64_ir] TempStore
0018F9r 2  CA               dex
0018FAr 2  CA               dex
0018FBr 2  B5 03            lda $03,x
0018FDr 2  85 96            sta TEMP_PAX2
0018FFr 2  B5 02            lda $02,x
001901r 2  85 95            sta TEMP_PAX1
001903r 2               
001903r 2               ; src/prelude.fth:4:19 in `over`
001903r 2               @OPCODE_1261:   ; [c64_ir] TempLoad
001903r 2  E8               inx
001904r 2  E8               inx
001905r 2  A5 95            lda TEMP_PAX1
001907r 2  95 00            sta $00,x
001909r 2  A5 96            lda TEMP_PAX2
00190Br 2  95 01            sta $01,x
00190Dr 2               
00190Dr 2               ; src/prelude.fth:4:25 in `over`
00190Dr 2               @OPCODE_1262:   ; [c64_ir] AltPop
00190Dr 2  E8               inx
00190Er 2  E8               inx
00190Fr 2  68               pla
001910r 2  95 00            sta $00,x
001912r 2  68               pla
001913r 2  95 01            sta $01,x
001915r 2               
001915r 2               ; src/prelude.fth:4:28 in `over`
001915r 2               @OPCODE_1263:   ; [c64_ir] TempLoad
001915r 2  E8               inx
001916r 2  E8               inx
001917r 2  A5 95            lda TEMP_PAX1
001919r 2  95 00            sta $00,x
00191Br 2  A5 96            lda TEMP_PAX2
00191Dr 2  95 01            sta $01,x
00191Fr 2               
00191Fr 2               ; src/prelude.fth:4:34 in `over`
00191Fr 2               @OPCODE_1264:   ; [c64_ir] InlineExit
00191Fr 2                   ; inline exit
00191Fr 2  68               pla
001920r 2  68               pla
001921r 2               
001921r 2               @target_350:
001921r 2               
001921r 2               ; src/prelude.fth:8:15 in `2dup`
001921r 2               @OPCODE_1266:   ; [c64_ir] InlineCall("over")
001921r 2                   ; inline call(over)
001921r 2  48               pha
001922r 2  48               pha
001923r 2               
001923r 2               @target_351:
001923r 2               
001923r 2               ; src/prelude.fth:4:10 in `over`
001923r 2               @OPCODE_1268:   ; [c64_ir] AltPush
001923r 2  CA               dex
001924r 2  CA               dex
001925r 2  B5 03            lda $03,x
001927r 2  48               pha
001928r 2  B5 02            lda $02,x
00192Ar 2  48               pha
00192Br 2               
00192Br 2               ; src/prelude.fth:4:13 in `over`
00192Br 2               @OPCODE_1269:   ; [c64_ir] TempStore
00192Br 2  CA               dex
00192Cr 2  CA               dex
00192Dr 2  B5 03            lda $03,x
00192Fr 2  85 96            sta TEMP_PAX2
001931r 2  B5 02            lda $02,x
001933r 2  85 95            sta TEMP_PAX1
001935r 2               
001935r 2               ; src/prelude.fth:4:19 in `over`
001935r 2               @OPCODE_1270:   ; [c64_ir] TempLoad
001935r 2  E8               inx
001936r 2  E8               inx
001937r 2  A5 95            lda TEMP_PAX1
001939r 2  95 00            sta $00,x
00193Br 2  A5 96            lda TEMP_PAX2
00193Dr 2  95 01            sta $01,x
00193Fr 2               
00193Fr 2               ; src/prelude.fth:4:25 in `over`
00193Fr 2               @OPCODE_1271:   ; [c64_ir] AltPop
00193Fr 2  E8               inx
001940r 2  E8               inx
001941r 2  68               pla
001942r 2  95 00            sta $00,x
001944r 2  68               pla
001945r 2  95 01            sta $01,x
001947r 2               
001947r 2               ; src/prelude.fth:4:28 in `over`
001947r 2               @OPCODE_1272:   ; [c64_ir] TempLoad
001947r 2  E8               inx
001948r 2  E8               inx
001949r 2  A5 95            lda TEMP_PAX1
00194Br 2  95 00            sta $00,x
00194Dr 2  A5 96            lda TEMP_PAX2
00194Fr 2  95 01            sta $01,x
001951r 2               
001951r 2               ; src/prelude.fth:4:34 in `over`
001951r 2               @OPCODE_1273:   ; [c64_ir] InlineExit
001951r 2                   ; inline exit
001951r 2  68               pla
001952r 2  68               pla
001953r 2               
001953r 2               @target_352:
001953r 2               
001953r 2               ; src/prelude.fth:8:20 in `2dup`
001953r 2               @OPCODE_1275:   ; [c64_ir] InlineExit
001953r 2                   ; inline exit
001953r 2  68               pla
001954r 2  68               pla
001955r 2               
001955r 2               @target_353:
001955r 2               
001955r 2               ; src/prelude.fth:33:29 in `loopimpl`
001955r 2               @OPCODE_1277:   ; [c64_ir] AltPush
001955r 2  CA               dex
001956r 2  CA               dex
001957r 2  B5 03            lda $03,x
001959r 2  48               pha
00195Ar 2  B5 02            lda $02,x
00195Cr 2  48               pha
00195Dr 2               
00195Dr 2               ; src/prelude.fth:33:32 in `loopimpl`
00195Dr 2               @OPCODE_1278:   ; [c64_ir] AltPush
00195Dr 2  CA               dex
00195Er 2  CA               dex
00195Fr 2  B5 03            lda $03,x
001961r 2  48               pha
001962r 2  B5 02            lda $02,x
001964r 2  48               pha
001965r 2               
001965r 2               ; src/prelude.fth:33:35 in `loopimpl`
001965r 2               @OPCODE_1279:   ; [c64_ir] InlineCall("=")
001965r 2                   ; inline call(=)
001965r 2  48               pha
001966r 2  48               pha
001967r 2               
001967r 2               @target_354:
001967r 2               
001967r 2               ; src/prelude.fth:22:8 in `=`
001967r 2               @OPCODE_1281:   ; [c64_ir] InlineCall("-")
001967r 2                   ; inline call(-)
001967r 2  48               pha
001968r 2  48               pha
001969r 2               
001969r 2               @target_355:
001969r 2               
001969r 2               ; src/prelude.fth:16:12 in `-`
001969r 2               @OPCODE_1283:   ; [c64_ir] InlineCall("negate")
001969r 2                   ; inline call(negate)
001969r 2  48               pha
00196Ar 2  48               pha
00196Br 2               
00196Br 2               @target_356:
00196Br 2               
00196Br 2               ; src/prelude.fth:15:12 in `negate`
00196Br 2               @OPCODE_1285:   ; [c64_ir] InlineCall("invert")
00196Br 2                   ; inline call(invert)
00196Br 2  48               pha
00196Cr 2  48               pha
00196Dr 2               
00196Dr 2               @target_357:
00196Dr 2               
00196Dr 2               ; src/prelude.fth:14:12 in `invert`
00196Dr 2               @OPCODE_1287:   ; [c64_ir] PushLiteral(-1)
00196Dr 2  E8               inx
00196Er 2  E8               inx
00196Fr 2  A9 FF            lda #255
001971r 2  95 00            sta $00,x
001973r 2  A9 FF            lda #255
001975r 2  95 01            sta $01,x
001977r 2               
001977r 2               ; src/prelude.fth:14:15 in `invert`
001977r 2               @OPCODE_1288:   ; [c64_ir] Nand
001977r 2                   ; 26
001977r 2  CA               dex
001978r 2  CA               dex
001979r 2  B5 00            lda $00,x
00197Br 2  35 02            and $02,x
00197Dr 2  49 FF            eor #$ff
00197Fr 2  95 00            sta $00,x
001981r 2  B5 01            lda $01,x
001983r 2  35 03            and $03,x
001985r 2  49 FF            eor #$ff
001987r 2  95 01            sta $01,x
001989r 2               
001989r 2               ; src/prelude.fth:14:20 in `invert`
001989r 2               @OPCODE_1289:   ; [c64_ir] InlineExit
001989r 2                   ; inline exit
001989r 2  68               pla
00198Ar 2  68               pla
00198Br 2               
00198Br 2               @target_358:
00198Br 2               
00198Br 2               ; src/prelude.fth:15:19 in `negate`
00198Br 2               @OPCODE_1291:   ; [c64_ir] PushLiteral(1)
00198Br 2  E8               inx
00198Cr 2  E8               inx
00198Dr 2  A9 01            lda #1
00198Fr 2  95 00            sta $00,x
001991r 2  A9 00            lda #0
001993r 2  95 01            sta $01,x
001995r 2               
001995r 2               ; src/prelude.fth:15:21 in `negate`
001995r 2               @OPCODE_1292:   ; [c64_ir] Add
001995r 2                   ; 21
001995r 2  CA               dex
001996r 2  CA               dex
001997r 2  18               clc
001998r 2  B5 00            lda $00,x
00199Ar 2  75 02            adc $02,x
00199Cr 2  95 00            sta $00,x
00199Er 2  B5 01            lda $01,x
0019A0r 2  75 03            adc $03,x
0019A2r 2  95 01            sta $01,x
0019A4r 2               
0019A4r 2               ; src/prelude.fth:15:23 in `negate`
0019A4r 2               @OPCODE_1293:   ; [c64_ir] InlineExit
0019A4r 2                   ; inline exit
0019A4r 2  68               pla
0019A5r 2  68               pla
0019A6r 2               
0019A6r 2               @target_359:
0019A6r 2               
0019A6r 2               ; src/prelude.fth:16:19 in `-`
0019A6r 2               @OPCODE_1295:   ; [c64_ir] Add
0019A6r 2                   ; 21
0019A6r 2  CA               dex
0019A7r 2  CA               dex
0019A8r 2  18               clc
0019A9r 2  B5 00            lda $00,x
0019ABr 2  75 02            adc $02,x
0019ADr 2  95 00            sta $00,x
0019AFr 2  B5 01            lda $01,x
0019B1r 2  75 03            adc $03,x
0019B3r 2  95 01            sta $01,x
0019B5r 2               
0019B5r 2               ; src/prelude.fth:16:21 in `-`
0019B5r 2               @OPCODE_1296:   ; [c64_ir] InlineExit
0019B5r 2                   ; inline exit
0019B5r 2  68               pla
0019B6r 2  68               pla
0019B7r 2               
0019B7r 2               @target_360:
0019B7r 2               
0019B7r 2               ; src/prelude.fth:22:10 in `=`
0019B7r 2               @OPCODE_1298:   ; [c64_ir] InlineCall("0=")
0019B7r 2                   ; inline call(0=)
0019B7r 2  48               pha
0019B8r 2  48               pha
0019B9r 2               
0019B9r 2               @target_361:
0019B9r 2               
0019B9r 2               ; src/prelude.fth:21:8 in `0=`
0019B9r 2               @OPCODE_1300:   ; [c64_ir] JumpIf0(363)
0019B9r 2  CA               dex
0019BAr 2  CA               dex
0019BBr 2  B5 02            lda $02,x
0019BDr 2  15 03            ora $03,x
0019BFr 2  D0 03            bne *+5
0019C1r 2  4C rr rr         jmp @target_363
0019C4r 2               
0019C4r 2               @target_362:
0019C4r 2               
0019C4r 2               ; src/prelude.fth:21:11 in `0=`
0019C4r 2               @OPCODE_1302:   ; [c64_ir] PushLiteral(0)
0019C4r 2  E8               inx
0019C5r 2  E8               inx
0019C6r 2  A9 00            lda #0
0019C8r 2  95 00            sta $00,x
0019CAr 2  A9 00            lda #0
0019CCr 2  95 01            sta $01,x
0019CEr 2               
0019CEr 2               ; src/prelude.fth:21:13 in `0=`
0019CEr 2               @OPCODE_1303:   ; [c64_ir] JumpElse(364)
0019CEr 2  4C rr rr         jmp @target_364
0019D1r 2               
0019D1r 2               @target_363:
0019D1r 2               
0019D1r 2               ; src/prelude.fth:21:18 in `0=`
0019D1r 2               @OPCODE_1305:   ; [c64_ir] PushLiteral(-1)
0019D1r 2  E8               inx
0019D2r 2  E8               inx
0019D3r 2  A9 FF            lda #255
0019D5r 2  95 00            sta $00,x
0019D7r 2  A9 FF            lda #255
0019D9r 2  95 01            sta $01,x
0019DBr 2               
0019DBr 2               ; src/prelude.fth:21:21 in `0=`
0019DBr 2               @OPCODE_1306:   ; [c64_ir] JumpTarget(363)
0019DBr 2               
0019DBr 2               @target_364:
0019DBr 2               
0019DBr 2               ; src/prelude.fth:21:26 in `0=`
0019DBr 2               @OPCODE_1308:   ; [c64_ir] InlineExit
0019DBr 2                   ; inline exit
0019DBr 2  68               pla
0019DCr 2  68               pla
0019DDr 2               
0019DDr 2               @target_365:
0019DDr 2               
0019DDr 2               ; src/prelude.fth:22:13 in `=`
0019DDr 2               @OPCODE_1310:   ; [c64_ir] InlineExit
0019DDr 2                   ; inline exit
0019DDr 2  68               pla
0019DEr 2  68               pla
0019DFr 2               
0019DFr 2               @target_366:
0019DFr 2               
0019DFr 2               ; src/prelude.fth:33:37 in `loopimpl`
0019DFr 2               @OPCODE_1312:   ; [c64_ir] InlineCall("swap")
0019DFr 2                   ; inline call(swap)
0019DFr 2  48               pha
0019E0r 2  48               pha
0019E1r 2               
0019E1r 2               @target_367:
0019E1r 2               
0019E1r 2               ; src/prelude.fth:3:10 in `swap`
0019E1r 2               @OPCODE_1314:   ; [c64_ir] AltPush
0019E1r 2  CA               dex
0019E2r 2  CA               dex
0019E3r 2  B5 03            lda $03,x
0019E5r 2  48               pha
0019E6r 2  B5 02            lda $02,x
0019E8r 2  48               pha
0019E9r 2               
0019E9r 2               ; src/prelude.fth:3:13 in `swap`
0019E9r 2               @OPCODE_1315:   ; [c64_ir] TempStore
0019E9r 2  CA               dex
0019EAr 2  CA               dex
0019EBr 2  B5 03            lda $03,x
0019EDr 2  85 96            sta TEMP_PAX2
0019EFr 2  B5 02            lda $02,x
0019F1r 2  85 95            sta TEMP_PAX1
0019F3r 2               
0019F3r 2               ; src/prelude.fth:3:19 in `swap`
0019F3r 2               @OPCODE_1316:   ; [c64_ir] AltPop
0019F3r 2  E8               inx
0019F4r 2  E8               inx
0019F5r 2  68               pla
0019F6r 2  95 00            sta $00,x
0019F8r 2  68               pla
0019F9r 2  95 01            sta $01,x
0019FBr 2               
0019FBr 2               ; src/prelude.fth:3:22 in `swap`
0019FBr 2               @OPCODE_1317:   ; [c64_ir] TempLoad
0019FBr 2  E8               inx
0019FCr 2  E8               inx
0019FDr 2  A5 95            lda TEMP_PAX1
0019FFr 2  95 00            sta $00,x
001A01r 2  A5 96            lda TEMP_PAX2
001A03r 2  95 01            sta $01,x
001A05r 2               
001A05r 2               ; src/prelude.fth:3:28 in `swap`
001A05r 2               @OPCODE_1318:   ; [c64_ir] InlineExit
001A05r 2                   ; inline exit
001A05r 2  68               pla
001A06r 2  68               pla
001A07r 2               
001A07r 2               @target_368:
001A07r 2               
001A07r 2               ; src/prelude.fth:33:42 in `loopimpl`
001A07r 2               @OPCODE_1320:   ; [c64_ir] AltPush
001A07r 2  CA               dex
001A08r 2  CA               dex
001A09r 2  B5 03            lda $03,x
001A0Br 2  48               pha
001A0Cr 2  B5 02            lda $02,x
001A0Er 2  48               pha
001A0Fr 2               
001A0Fr 2               ; src/prelude.fth:33:45 in `loopimpl`
001A0Fr 2               @OPCODE_1321:   ; [c64_ir] InlineExit
001A0Fr 2                   ; inline exit
001A0Fr 2  68               pla
001A10r 2  68               pla
001A11r 2               
001A11r 2               @target_369:
001A11r 2               
001A11r 2               ; src/prelude.fth:44:25 in `*`
001A11r 2               @OPCODE_1323:   ; [c64_ir] LoopIf0(342)
001A11r 2  CA               dex
001A12r 2  CA               dex
001A13r 2  B5 02            lda $02,x
001A15r 2  15 03            ora $03,x
001A17r 2  D0 03            bne *+5
001A19r 2  4C rr rr         jmp @target_342
001A1Cr 2               
001A1Cr 2               @target_370:
001A1Cr 2               
001A1Cr 2               ; src/prelude.fth:44:25 in `*`
001A1Cr 2               @OPCODE_1325:   ; [c64_ir] AltPop
001A1Cr 2  E8               inx
001A1Dr 2  E8               inx
001A1Er 2  68               pla
001A1Fr 2  95 00            sta $00,x
001A21r 2  68               pla
001A22r 2  95 01            sta $01,x
001A24r 2               
001A24r 2               ; src/prelude.fth:44:25 in `*`
001A24r 2               @OPCODE_1326:   ; [c64_ir] Drop
001A24r 2  CA               dex
001A25r 2  CA               dex
001A26r 2               
001A26r 2               ; src/prelude.fth:44:25 in `*`
001A26r 2               @OPCODE_1327:   ; [c64_ir] AltPop
001A26r 2  E8               inx
001A27r 2  E8               inx
001A28r 2  68               pla
001A29r 2  95 00            sta $00,x
001A2Br 2  68               pla
001A2Cr 2  95 01            sta $01,x
001A2Er 2               
001A2Er 2               ; src/prelude.fth:44:25 in `*`
001A2Er 2               @OPCODE_1328:   ; [c64_ir] Drop
001A2Er 2  CA               dex
001A2Fr 2  CA               dex
001A30r 2               
001A30r 2               ; src/prelude.fth:44:30 in `*`
001A30r 2               @OPCODE_1329:   ; [c64_ir] InlineCall("swap")
001A30r 2                   ; inline call(swap)
001A30r 2  48               pha
001A31r 2  48               pha
001A32r 2               
001A32r 2               @target_371:
001A32r 2               
001A32r 2               ; src/prelude.fth:3:10 in `swap`
001A32r 2               @OPCODE_1331:   ; [c64_ir] AltPush
001A32r 2  CA               dex
001A33r 2  CA               dex
001A34r 2  B5 03            lda $03,x
001A36r 2  48               pha
001A37r 2  B5 02            lda $02,x
001A39r 2  48               pha
001A3Ar 2               
001A3Ar 2               ; src/prelude.fth:3:13 in `swap`
001A3Ar 2               @OPCODE_1332:   ; [c64_ir] TempStore
001A3Ar 2  CA               dex
001A3Br 2  CA               dex
001A3Cr 2  B5 03            lda $03,x
001A3Er 2  85 96            sta TEMP_PAX2
001A40r 2  B5 02            lda $02,x
001A42r 2  85 95            sta TEMP_PAX1
001A44r 2               
001A44r 2               ; src/prelude.fth:3:19 in `swap`
001A44r 2               @OPCODE_1333:   ; [c64_ir] AltPop
001A44r 2  E8               inx
001A45r 2  E8               inx
001A46r 2  68               pla
001A47r 2  95 00            sta $00,x
001A49r 2  68               pla
001A4Ar 2  95 01            sta $01,x
001A4Cr 2               
001A4Cr 2               ; src/prelude.fth:3:22 in `swap`
001A4Cr 2               @OPCODE_1334:   ; [c64_ir] TempLoad
001A4Cr 2  E8               inx
001A4Dr 2  E8               inx
001A4Er 2  A5 95            lda TEMP_PAX1
001A50r 2  95 00            sta $00,x
001A52r 2  A5 96            lda TEMP_PAX2
001A54r 2  95 01            sta $01,x
001A56r 2               
001A56r 2               ; src/prelude.fth:3:28 in `swap`
001A56r 2               @OPCODE_1335:   ; [c64_ir] InlineExit
001A56r 2                   ; inline exit
001A56r 2  68               pla
001A57r 2  68               pla
001A58r 2               
001A58r 2               @target_372:
001A58r 2               
001A58r 2               ; src/prelude.fth:44:35 in `*`
001A58r 2               @OPCODE_1337:   ; [c64_ir] Drop
001A58r 2  CA               dex
001A59r 2  CA               dex
001A5Ar 2               
001A5Ar 2               ; src/prelude.fth:44:40 in `*`
001A5Ar 2               @OPCODE_1338:   ; [c64_ir] InlineExit
001A5Ar 2                   ; inline exit
001A5Ar 2  68               pla
001A5Br 2  68               pla
001A5Cr 2               
001A5Cr 2               @target_373:
001A5Cr 2               
001A5Cr 2               ; snake.fth:48:39 in `convert-x-y`
001A5Cr 2               @OPCODE_1340:   ; [c64_ir] Add
001A5Cr 2                   ; 21
001A5Cr 2  CA               dex
001A5Dr 2  CA               dex
001A5Er 2  18               clc
001A5Fr 2  B5 00            lda $00,x
001A61r 2  75 02            adc $02,x
001A63r 2  95 00            sta $00,x
001A65r 2  B5 01            lda $01,x
001A67r 2  75 03            adc $03,x
001A69r 2  95 01            sta $01,x
001A6Br 2               
001A6Br 2               ; snake.fth:48:41 in `convert-x-y`
001A6Br 2               @OPCODE_1341:   ; [c64_ir] InlineExit
001A6Br 2                   ; inline exit
001A6Br 2  68               pla
001A6Cr 2  68               pla
001A6Dr 2               
001A6Dr 2               @target_374:
001A6Dr 2               
001A6Dr 2               ; snake.fth:50:38 in `draw`
001A6Dr 2               @OPCODE_1343:   ; [c64_ir] InlineCall("draw-index")
001A6Dr 2                   ; inline call(draw-index)
001A6Dr 2  48               pha
001A6Er 2  48               pha
001A6Fr 2               
001A6Fr 2               @target_375:
001A6Fr 2               
001A6Fr 2               ; snake.fth:49:34 in `draw-index`
001A6Fr 2               @OPCODE_1345:   ; [c64_ir] PushLiteral(1024)
001A6Fr 2  E8               inx
001A70r 2  E8               inx
001A71r 2  A9 00            lda #0
001A73r 2  95 00            sta $00,x
001A75r 2  A9 04            lda #4
001A77r 2  95 01            sta $01,x
001A79r 2               
001A79r 2               ; snake.fth:49:43 in `draw-index`
001A79r 2               @OPCODE_1346:   ; [c64_ir] Add
001A79r 2                   ; 21
001A79r 2  CA               dex
001A7Ar 2  CA               dex
001A7Br 2  18               clc
001A7Cr 2  B5 00            lda $00,x
001A7Er 2  75 02            adc $02,x
001A80r 2  95 00            sta $00,x
001A82r 2  B5 01            lda $01,x
001A84r 2  75 03            adc $03,x
001A86r 2  95 01            sta $01,x
001A88r 2               
001A88r 2               ; snake.fth:49:45 in `draw-index`
001A88r 2               @OPCODE_1347:   ; [c64_ir] Store8
001A88r 2  CA               dex
001A89r 2  CA               dex
001A8Ar 2  CA               dex
001A8Br 2  CA               dex
001A8Cr 2  B5 02            lda $02,x
001A8Er 2  81 04            sta ($04,x)
001A90r 2                   ; TODO high byte
001A90r 2               
001A90r 2               ; snake.fth:49:48 in `draw-index`
001A90r 2               @OPCODE_1348:   ; [c64_ir] InlineExit
001A90r 2                   ; inline exit
001A90r 2  68               pla
001A91r 2  68               pla
001A92r 2               
001A92r 2               @target_376:
001A92r 2               
001A92r 2               ; snake.fth:50:49 in `draw`
001A92r 2               @OPCODE_1350:   ; [c64_ir] InlineExit
001A92r 2                   ; inline exit
001A92r 2  68               pla
001A93r 2  68               pla
001A94r 2               
001A94r 2               @target_377:
001A94r 2               
001A94r 2               ; snake.fth:53:49 in `draw-snake-tile`
001A94r 2               @OPCODE_1352:   ; [c64_ir] InlineExit
001A94r 2                   ; inline exit
001A94r 2  68               pla
001A95r 2  68               pla
001A96r 2               
001A96r 2               @target_378:
001A96r 2               
001A96r 2               ; snake.fth:112:3 in `draw-full-snake`
001A96r 2               @OPCODE_1354:   ; [c64_ir] InlineCall("loopimpl")
001A96r 2                   ; inline call(loopimpl)
001A96r 2  48               pha
001A97r 2  48               pha
001A98r 2               
001A98r 2               @target_379:
001A98r 2               
001A98r 2               ; src/prelude.fth:33:12 in `loopimpl`
001A98r 2               @OPCODE_1356:   ; [c64_ir] AltPop
001A98r 2  E8               inx
001A99r 2  E8               inx
001A9Ar 2  68               pla
001A9Br 2  95 00            sta $00,x
001A9Dr 2  68               pla
001A9Er 2  95 01            sta $01,x
001AA0r 2               
001AA0r 2               ; src/prelude.fth:33:15 in `loopimpl`
001AA0r 2               @OPCODE_1357:   ; [c64_ir] AltPop
001AA0r 2  E8               inx
001AA1r 2  E8               inx
001AA2r 2  68               pla
001AA3r 2  95 00            sta $00,x
001AA5r 2  68               pla
001AA6r 2  95 01            sta $01,x
001AA8r 2               
001AA8r 2               ; src/prelude.fth:33:18 in `loopimpl`
001AA8r 2               @OPCODE_1358:   ; [c64_ir] AltPop
001AA8r 2  E8               inx
001AA9r 2  E8               inx
001AAAr 2  68               pla
001AABr 2  95 00            sta $00,x
001AADr 2  68               pla
001AAEr 2  95 01            sta $01,x
001AB0r 2               
001AB0r 2               ; src/prelude.fth:33:21 in `loopimpl`
001AB0r 2               @OPCODE_1359:   ; [c64_ir] InlineCall("1+")
001AB0r 2                   ; inline call(1+)
001AB0r 2  48               pha
001AB1r 2  48               pha
001AB2r 2               
001AB2r 2               @target_380:
001AB2r 2               
001AB2r 2               ; src/prelude.fth:18:8 in `1+`
001AB2r 2               @OPCODE_1361:   ; [c64_ir] PushLiteral(1)
001AB2r 2  E8               inx
001AB3r 2  E8               inx
001AB4r 2  A9 01            lda #1
001AB6r 2  95 00            sta $00,x
001AB8r 2  A9 00            lda #0
001ABAr 2  95 01            sta $01,x
001ABCr 2               
001ABCr 2               ; src/prelude.fth:18:10 in `1+`
001ABCr 2               @OPCODE_1362:   ; [c64_ir] Add
001ABCr 2                   ; 21
001ABCr 2  CA               dex
001ABDr 2  CA               dex
001ABEr 2  18               clc
001ABFr 2  B5 00            lda $00,x
001AC1r 2  75 02            adc $02,x
001AC3r 2  95 00            sta $00,x
001AC5r 2  B5 01            lda $01,x
001AC7r 2  75 03            adc $03,x
001AC9r 2  95 01            sta $01,x
001ACBr 2               
001ACBr 2               ; src/prelude.fth:18:12 in `1+`
001ACBr 2               @OPCODE_1363:   ; [c64_ir] InlineExit
001ACBr 2                   ; inline exit
001ACBr 2  68               pla
001ACCr 2  68               pla
001ACDr 2               
001ACDr 2               @target_381:
001ACDr 2               
001ACDr 2               ; src/prelude.fth:33:24 in `loopimpl`
001ACDr 2               @OPCODE_1365:   ; [c64_ir] InlineCall("2dup")
001ACDr 2                   ; inline call(2dup)
001ACDr 2  48               pha
001ACEr 2  48               pha
001ACFr 2               
001ACFr 2               @target_382:
001ACFr 2               
001ACFr 2               ; src/prelude.fth:8:10 in `2dup`
001ACFr 2               @OPCODE_1367:   ; [c64_ir] InlineCall("over")
001ACFr 2                   ; inline call(over)
001ACFr 2  48               pha
001AD0r 2  48               pha
001AD1r 2               
001AD1r 2               @target_383:
001AD1r 2               
001AD1r 2               ; src/prelude.fth:4:10 in `over`
001AD1r 2               @OPCODE_1369:   ; [c64_ir] AltPush
001AD1r 2  CA               dex
001AD2r 2  CA               dex
001AD3r 2  B5 03            lda $03,x
001AD5r 2  48               pha
001AD6r 2  B5 02            lda $02,x
001AD8r 2  48               pha
001AD9r 2               
001AD9r 2               ; src/prelude.fth:4:13 in `over`
001AD9r 2               @OPCODE_1370:   ; [c64_ir] TempStore
001AD9r 2  CA               dex
001ADAr 2  CA               dex
001ADBr 2  B5 03            lda $03,x
001ADDr 2  85 96            sta TEMP_PAX2
001ADFr 2  B5 02            lda $02,x
001AE1r 2  85 95            sta TEMP_PAX1
001AE3r 2               
001AE3r 2               ; src/prelude.fth:4:19 in `over`
001AE3r 2               @OPCODE_1371:   ; [c64_ir] TempLoad
001AE3r 2  E8               inx
001AE4r 2  E8               inx
001AE5r 2  A5 95            lda TEMP_PAX1
001AE7r 2  95 00            sta $00,x
001AE9r 2  A5 96            lda TEMP_PAX2
001AEBr 2  95 01            sta $01,x
001AEDr 2               
001AEDr 2               ; src/prelude.fth:4:25 in `over`
001AEDr 2               @OPCODE_1372:   ; [c64_ir] AltPop
001AEDr 2  E8               inx
001AEEr 2  E8               inx
001AEFr 2  68               pla
001AF0r 2  95 00            sta $00,x
001AF2r 2  68               pla
001AF3r 2  95 01            sta $01,x
001AF5r 2               
001AF5r 2               ; src/prelude.fth:4:28 in `over`
001AF5r 2               @OPCODE_1373:   ; [c64_ir] TempLoad
001AF5r 2  E8               inx
001AF6r 2  E8               inx
001AF7r 2  A5 95            lda TEMP_PAX1
001AF9r 2  95 00            sta $00,x
001AFBr 2  A5 96            lda TEMP_PAX2
001AFDr 2  95 01            sta $01,x
001AFFr 2               
001AFFr 2               ; src/prelude.fth:4:34 in `over`
001AFFr 2               @OPCODE_1374:   ; [c64_ir] InlineExit
001AFFr 2                   ; inline exit
001AFFr 2  68               pla
001B00r 2  68               pla
001B01r 2               
001B01r 2               @target_384:
001B01r 2               
001B01r 2               ; src/prelude.fth:8:15 in `2dup`
001B01r 2               @OPCODE_1376:   ; [c64_ir] InlineCall("over")
001B01r 2                   ; inline call(over)
001B01r 2  48               pha
001B02r 2  48               pha
001B03r 2               
001B03r 2               @target_385:
001B03r 2               
001B03r 2               ; src/prelude.fth:4:10 in `over`
001B03r 2               @OPCODE_1378:   ; [c64_ir] AltPush
001B03r 2  CA               dex
001B04r 2  CA               dex
001B05r 2  B5 03            lda $03,x
001B07r 2  48               pha
001B08r 2  B5 02            lda $02,x
001B0Ar 2  48               pha
001B0Br 2               
001B0Br 2               ; src/prelude.fth:4:13 in `over`
001B0Br 2               @OPCODE_1379:   ; [c64_ir] TempStore
001B0Br 2  CA               dex
001B0Cr 2  CA               dex
001B0Dr 2  B5 03            lda $03,x
001B0Fr 2  85 96            sta TEMP_PAX2
001B11r 2  B5 02            lda $02,x
001B13r 2  85 95            sta TEMP_PAX1
001B15r 2               
001B15r 2               ; src/prelude.fth:4:19 in `over`
001B15r 2               @OPCODE_1380:   ; [c64_ir] TempLoad
001B15r 2  E8               inx
001B16r 2  E8               inx
001B17r 2  A5 95            lda TEMP_PAX1
001B19r 2  95 00            sta $00,x
001B1Br 2  A5 96            lda TEMP_PAX2
001B1Dr 2  95 01            sta $01,x
001B1Fr 2               
001B1Fr 2               ; src/prelude.fth:4:25 in `over`
001B1Fr 2               @OPCODE_1381:   ; [c64_ir] AltPop
001B1Fr 2  E8               inx
001B20r 2  E8               inx
001B21r 2  68               pla
001B22r 2  95 00            sta $00,x
001B24r 2  68               pla
001B25r 2  95 01            sta $01,x
001B27r 2               
001B27r 2               ; src/prelude.fth:4:28 in `over`
001B27r 2               @OPCODE_1382:   ; [c64_ir] TempLoad
001B27r 2  E8               inx
001B28r 2  E8               inx
001B29r 2  A5 95            lda TEMP_PAX1
001B2Br 2  95 00            sta $00,x
001B2Dr 2  A5 96            lda TEMP_PAX2
001B2Fr 2  95 01            sta $01,x
001B31r 2               
001B31r 2               ; src/prelude.fth:4:34 in `over`
001B31r 2               @OPCODE_1383:   ; [c64_ir] InlineExit
001B31r 2                   ; inline exit
001B31r 2  68               pla
001B32r 2  68               pla
001B33r 2               
001B33r 2               @target_386:
001B33r 2               
001B33r 2               ; src/prelude.fth:8:20 in `2dup`
001B33r 2               @OPCODE_1385:   ; [c64_ir] InlineExit
001B33r 2                   ; inline exit
001B33r 2  68               pla
001B34r 2  68               pla
001B35r 2               
001B35r 2               @target_387:
001B35r 2               
001B35r 2               ; src/prelude.fth:33:29 in `loopimpl`
001B35r 2               @OPCODE_1387:   ; [c64_ir] AltPush
001B35r 2  CA               dex
001B36r 2  CA               dex
001B37r 2  B5 03            lda $03,x
001B39r 2  48               pha
001B3Ar 2  B5 02            lda $02,x
001B3Cr 2  48               pha
001B3Dr 2               
001B3Dr 2               ; src/prelude.fth:33:32 in `loopimpl`
001B3Dr 2               @OPCODE_1388:   ; [c64_ir] AltPush
001B3Dr 2  CA               dex
001B3Er 2  CA               dex
001B3Fr 2  B5 03            lda $03,x
001B41r 2  48               pha
001B42r 2  B5 02            lda $02,x
001B44r 2  48               pha
001B45r 2               
001B45r 2               ; src/prelude.fth:33:35 in `loopimpl`
001B45r 2               @OPCODE_1389:   ; [c64_ir] InlineCall("=")
001B45r 2                   ; inline call(=)
001B45r 2  48               pha
001B46r 2  48               pha
001B47r 2               
001B47r 2               @target_388:
001B47r 2               
001B47r 2               ; src/prelude.fth:22:8 in `=`
001B47r 2               @OPCODE_1391:   ; [c64_ir] InlineCall("-")
001B47r 2                   ; inline call(-)
001B47r 2  48               pha
001B48r 2  48               pha
001B49r 2               
001B49r 2               @target_389:
001B49r 2               
001B49r 2               ; src/prelude.fth:16:12 in `-`
001B49r 2               @OPCODE_1393:   ; [c64_ir] InlineCall("negate")
001B49r 2                   ; inline call(negate)
001B49r 2  48               pha
001B4Ar 2  48               pha
001B4Br 2               
001B4Br 2               @target_390:
001B4Br 2               
001B4Br 2               ; src/prelude.fth:15:12 in `negate`
001B4Br 2               @OPCODE_1395:   ; [c64_ir] InlineCall("invert")
001B4Br 2                   ; inline call(invert)
001B4Br 2  48               pha
001B4Cr 2  48               pha
001B4Dr 2               
001B4Dr 2               @target_391:
001B4Dr 2               
001B4Dr 2               ; src/prelude.fth:14:12 in `invert`
001B4Dr 2               @OPCODE_1397:   ; [c64_ir] PushLiteral(-1)
001B4Dr 2  E8               inx
001B4Er 2  E8               inx
001B4Fr 2  A9 FF            lda #255
001B51r 2  95 00            sta $00,x
001B53r 2  A9 FF            lda #255
001B55r 2  95 01            sta $01,x
001B57r 2               
001B57r 2               ; src/prelude.fth:14:15 in `invert`
001B57r 2               @OPCODE_1398:   ; [c64_ir] Nand
001B57r 2                   ; 26
001B57r 2  CA               dex
001B58r 2  CA               dex
001B59r 2  B5 00            lda $00,x
001B5Br 2  35 02            and $02,x
001B5Dr 2  49 FF            eor #$ff
001B5Fr 2  95 00            sta $00,x
001B61r 2  B5 01            lda $01,x
001B63r 2  35 03            and $03,x
001B65r 2  49 FF            eor #$ff
001B67r 2  95 01            sta $01,x
001B69r 2               
001B69r 2               ; src/prelude.fth:14:20 in `invert`
001B69r 2               @OPCODE_1399:   ; [c64_ir] InlineExit
001B69r 2                   ; inline exit
001B69r 2  68               pla
001B6Ar 2  68               pla
001B6Br 2               
001B6Br 2               @target_392:
001B6Br 2               
001B6Br 2               ; src/prelude.fth:15:19 in `negate`
001B6Br 2               @OPCODE_1401:   ; [c64_ir] PushLiteral(1)
001B6Br 2  E8               inx
001B6Cr 2  E8               inx
001B6Dr 2  A9 01            lda #1
001B6Fr 2  95 00            sta $00,x
001B71r 2  A9 00            lda #0
001B73r 2  95 01            sta $01,x
001B75r 2               
001B75r 2               ; src/prelude.fth:15:21 in `negate`
001B75r 2               @OPCODE_1402:   ; [c64_ir] Add
001B75r 2                   ; 21
001B75r 2  CA               dex
001B76r 2  CA               dex
001B77r 2  18               clc
001B78r 2  B5 00            lda $00,x
001B7Ar 2  75 02            adc $02,x
001B7Cr 2  95 00            sta $00,x
001B7Er 2  B5 01            lda $01,x
001B80r 2  75 03            adc $03,x
001B82r 2  95 01            sta $01,x
001B84r 2               
001B84r 2               ; src/prelude.fth:15:23 in `negate`
001B84r 2               @OPCODE_1403:   ; [c64_ir] InlineExit
001B84r 2                   ; inline exit
001B84r 2  68               pla
001B85r 2  68               pla
001B86r 2               
001B86r 2               @target_393:
001B86r 2               
001B86r 2               ; src/prelude.fth:16:19 in `-`
001B86r 2               @OPCODE_1405:   ; [c64_ir] Add
001B86r 2                   ; 21
001B86r 2  CA               dex
001B87r 2  CA               dex
001B88r 2  18               clc
001B89r 2  B5 00            lda $00,x
001B8Br 2  75 02            adc $02,x
001B8Dr 2  95 00            sta $00,x
001B8Fr 2  B5 01            lda $01,x
001B91r 2  75 03            adc $03,x
001B93r 2  95 01            sta $01,x
001B95r 2               
001B95r 2               ; src/prelude.fth:16:21 in `-`
001B95r 2               @OPCODE_1406:   ; [c64_ir] InlineExit
001B95r 2                   ; inline exit
001B95r 2  68               pla
001B96r 2  68               pla
001B97r 2               
001B97r 2               @target_394:
001B97r 2               
001B97r 2               ; src/prelude.fth:22:10 in `=`
001B97r 2               @OPCODE_1408:   ; [c64_ir] InlineCall("0=")
001B97r 2                   ; inline call(0=)
001B97r 2  48               pha
001B98r 2  48               pha
001B99r 2               
001B99r 2               @target_395:
001B99r 2               
001B99r 2               ; src/prelude.fth:21:8 in `0=`
001B99r 2               @OPCODE_1410:   ; [c64_ir] JumpIf0(397)
001B99r 2  CA               dex
001B9Ar 2  CA               dex
001B9Br 2  B5 02            lda $02,x
001B9Dr 2  15 03            ora $03,x
001B9Fr 2  D0 03            bne *+5
001BA1r 2  4C rr rr         jmp @target_397
001BA4r 2               
001BA4r 2               @target_396:
001BA4r 2               
001BA4r 2               ; src/prelude.fth:21:11 in `0=`
001BA4r 2               @OPCODE_1412:   ; [c64_ir] PushLiteral(0)
001BA4r 2  E8               inx
001BA5r 2  E8               inx
001BA6r 2  A9 00            lda #0
001BA8r 2  95 00            sta $00,x
001BAAr 2  A9 00            lda #0
001BACr 2  95 01            sta $01,x
001BAEr 2               
001BAEr 2               ; src/prelude.fth:21:13 in `0=`
001BAEr 2               @OPCODE_1413:   ; [c64_ir] JumpElse(398)
001BAEr 2  4C rr rr         jmp @target_398
001BB1r 2               
001BB1r 2               @target_397:
001BB1r 2               
001BB1r 2               ; src/prelude.fth:21:18 in `0=`
001BB1r 2               @OPCODE_1415:   ; [c64_ir] PushLiteral(-1)
001BB1r 2  E8               inx
001BB2r 2  E8               inx
001BB3r 2  A9 FF            lda #255
001BB5r 2  95 00            sta $00,x
001BB7r 2  A9 FF            lda #255
001BB9r 2  95 01            sta $01,x
001BBBr 2               
001BBBr 2               ; src/prelude.fth:21:21 in `0=`
001BBBr 2               @OPCODE_1416:   ; [c64_ir] JumpTarget(397)
001BBBr 2               
001BBBr 2               @target_398:
001BBBr 2               
001BBBr 2               ; src/prelude.fth:21:26 in `0=`
001BBBr 2               @OPCODE_1418:   ; [c64_ir] InlineExit
001BBBr 2                   ; inline exit
001BBBr 2  68               pla
001BBCr 2  68               pla
001BBDr 2               
001BBDr 2               @target_399:
001BBDr 2               
001BBDr 2               ; src/prelude.fth:22:13 in `=`
001BBDr 2               @OPCODE_1420:   ; [c64_ir] InlineExit
001BBDr 2                   ; inline exit
001BBDr 2  68               pla
001BBEr 2  68               pla
001BBFr 2               
001BBFr 2               @target_400:
001BBFr 2               
001BBFr 2               ; src/prelude.fth:33:37 in `loopimpl`
001BBFr 2               @OPCODE_1422:   ; [c64_ir] InlineCall("swap")
001BBFr 2                   ; inline call(swap)
001BBFr 2  48               pha
001BC0r 2  48               pha
001BC1r 2               
001BC1r 2               @target_401:
001BC1r 2               
001BC1r 2               ; src/prelude.fth:3:10 in `swap`
001BC1r 2               @OPCODE_1424:   ; [c64_ir] AltPush
001BC1r 2  CA               dex
001BC2r 2  CA               dex
001BC3r 2  B5 03            lda $03,x
001BC5r 2  48               pha
001BC6r 2  B5 02            lda $02,x
001BC8r 2  48               pha
001BC9r 2               
001BC9r 2               ; src/prelude.fth:3:13 in `swap`
001BC9r 2               @OPCODE_1425:   ; [c64_ir] TempStore
001BC9r 2  CA               dex
001BCAr 2  CA               dex
001BCBr 2  B5 03            lda $03,x
001BCDr 2  85 96            sta TEMP_PAX2
001BCFr 2  B5 02            lda $02,x
001BD1r 2  85 95            sta TEMP_PAX1
001BD3r 2               
001BD3r 2               ; src/prelude.fth:3:19 in `swap`
001BD3r 2               @OPCODE_1426:   ; [c64_ir] AltPop
001BD3r 2  E8               inx
001BD4r 2  E8               inx
001BD5r 2  68               pla
001BD6r 2  95 00            sta $00,x
001BD8r 2  68               pla
001BD9r 2  95 01            sta $01,x
001BDBr 2               
001BDBr 2               ; src/prelude.fth:3:22 in `swap`
001BDBr 2               @OPCODE_1427:   ; [c64_ir] TempLoad
001BDBr 2  E8               inx
001BDCr 2  E8               inx
001BDDr 2  A5 95            lda TEMP_PAX1
001BDFr 2  95 00            sta $00,x
001BE1r 2  A5 96            lda TEMP_PAX2
001BE3r 2  95 01            sta $01,x
001BE5r 2               
001BE5r 2               ; src/prelude.fth:3:28 in `swap`
001BE5r 2               @OPCODE_1428:   ; [c64_ir] InlineExit
001BE5r 2                   ; inline exit
001BE5r 2  68               pla
001BE6r 2  68               pla
001BE7r 2               
001BE7r 2               @target_402:
001BE7r 2               
001BE7r 2               ; src/prelude.fth:33:42 in `loopimpl`
001BE7r 2               @OPCODE_1430:   ; [c64_ir] AltPush
001BE7r 2  CA               dex
001BE8r 2  CA               dex
001BE9r 2  B5 03            lda $03,x
001BEBr 2  48               pha
001BECr 2  B5 02            lda $02,x
001BEEr 2  48               pha
001BEFr 2               
001BEFr 2               ; src/prelude.fth:33:45 in `loopimpl`
001BEFr 2               @OPCODE_1431:   ; [c64_ir] InlineExit
001BEFr 2                   ; inline exit
001BEFr 2  68               pla
001BF0r 2  68               pla
001BF1r 2               
001BF1r 2               @target_403:
001BF1r 2               
001BF1r 2               ; snake.fth:112:3 in `draw-full-snake`
001BF1r 2               @OPCODE_1433:   ; [c64_ir] LoopIf0(309)
001BF1r 2  CA               dex
001BF2r 2  CA               dex
001BF3r 2  B5 02            lda $02,x
001BF5r 2  15 03            ora $03,x
001BF7r 2  D0 03            bne *+5
001BF9r 2  4C rr rr         jmp @target_309
001BFCr 2               
001BFCr 2               @target_404:
001BFCr 2               
001BFCr 2               ; snake.fth:112:3 in `draw-full-snake`
001BFCr 2               @OPCODE_1435:   ; [c64_ir] AltPop
001BFCr 2  E8               inx
001BFDr 2  E8               inx
001BFEr 2  68               pla
001BFFr 2  95 00            sta $00,x
001C01r 2  68               pla
001C02r 2  95 01            sta $01,x
001C04r 2               
001C04r 2               ; snake.fth:112:3 in `draw-full-snake`
001C04r 2               @OPCODE_1436:   ; [c64_ir] Drop
001C04r 2  CA               dex
001C05r 2  CA               dex
001C06r 2               
001C06r 2               ; snake.fth:112:3 in `draw-full-snake`
001C06r 2               @OPCODE_1437:   ; [c64_ir] AltPop
001C06r 2  E8               inx
001C07r 2  E8               inx
001C08r 2  68               pla
001C09r 2  95 00            sta $00,x
001C0Br 2  68               pla
001C0Cr 2  95 01            sta $01,x
001C0Er 2               
001C0Er 2               ; snake.fth:112:3 in `draw-full-snake`
001C0Er 2               @OPCODE_1438:   ; [c64_ir] Drop
001C0Er 2  CA               dex
001C0Fr 2  CA               dex
001C10r 2               
001C10r 2               ; snake.fth:113:3 in `draw-full-snake`
001C10r 2               @OPCODE_1439:   ; [c64_ir] InlineExit
001C10r 2                   ; inline exit
001C10r 2  68               pla
001C11r 2  68               pla
001C12r 2               
001C12r 2               @target_405:
001C12r 2               
001C12r 2               ; snake.fth:121:3 in `initialize`
001C12r 2               @OPCODE_1441:   ; [c64_ir] InlineExit
001C12r 2                   ; inline exit
001C12r 2  68               pla
001C13r 2  68               pla
001C14r 2               
001C14r 2               @target_406:
001C14r 2               
001C14r 2               ; snake.fth:212:32 in `main`
001C14r 2               @OPCODE_1443:   ; [c64_ir] JumpTarget(406)
001C14r 2               
001C14r 2               @target_407:
001C14r 2               
001C14r 2               ; snake.fth:213:1 in `main`
001C14r 2               @OPCODE_1445:   ; [c64_ir] PushLiteral(1)
001C14r 2  E8               inx
001C15r 2  E8               inx
001C16r 2  A9 01            lda #1
001C18r 2  95 00            sta $00,x
001C1Ar 2  A9 00            lda #0
001C1Cr 2  95 01            sta $01,x
001C1Er 2               
001C1Er 2               ; snake.fth:213:3 in `main`
001C1Er 2               @OPCODE_1446:   ; [c64_ir] PushLiteral(-28672)
001C1Er 2  E8               inx
001C1Fr 2  E8               inx
001C20r 2  A9 00            lda #0
001C22r 2  95 00            sta $00,x
001C24r 2  A9 90            lda #144
001C26r 2  95 01            sta $01,x
001C28r 2               
001C28r 2               ; snake.fth:213:15 in `main`
001C28r 2               @OPCODE_1447:   ; [c64_ir] Store
001C28r 2  CA               dex
001C29r 2  CA               dex
001C2Ar 2  CA               dex
001C2Br 2  CA               dex
001C2Cr 2  B5 02            lda $02,x
001C2Er 2  81 04            sta ($04,x)
001C30r 2                   ; TODO high byte
001C30r 2               
001C30r 2               ; snake.fth:216:1 in `main`
001C30r 2               @OPCODE_1448:   ; [c64_ir] InlineCall("draw-snake-head-tail")
001C30r 2                   ; inline call(draw-snake-head-tail)
001C30r 2  48               pha
001C31r 2  48               pha
001C32r 2               
001C32r 2               @target_408:
001C32r 2               
001C32r 2               ; snake.fth:202:3 in `draw-snake-head-tail`
001C32r 2               @OPCODE_1450:   ; [c64_ir] PushLiteral(0)
001C32r 2  E8               inx
001C33r 2  E8               inx
001C34r 2  A9 00            lda #0
001C36r 2  95 00            sta $00,x
001C38r 2  A9 00            lda #0
001C3Ar 2  95 01            sta $01,x
001C3Cr 2               
001C3Cr 2               ; snake.fth:202:5 in `draw-snake-head-tail`
001C3Cr 2               @OPCODE_1451:   ; [c64_ir] InlineCall("snake-x")
001C3Cr 2                   ; inline call(snake-x)
001C3Cr 2  48               pha
001C3Dr 2  48               pha
001C3Er 2               
001C3Er 2               @target_409:
001C3Er 2               
001C3Er 2               ; snake.fth:42:3 in `snake-x`
001C3Er 2               @OPCODE_1453:   ; [c64_ir] InlineCall("cells")
001C3Er 2                   ; inline call(cells)
001C3Er 2  48               pha
001C3Fr 2  48               pha
001C40r 2               
001C40r 2               @target_410:
001C40r 2               
001C40r 2               ; src/prelude.fth:41:9 in `cells`
001C40r 2               @OPCODE_1455:   ; [c64_ir] InlineCall("dup")
001C40r 2                   ; inline call(dup)
001C40r 2  48               pha
001C41r 2  48               pha
001C42r 2               
001C42r 2               @target_411:
001C42r 2               
001C42r 2               ; src/prelude.fth:6:10 in `dup`
001C42r 2               @OPCODE_1457:   ; [c64_ir] TempStore
001C42r 2  CA               dex
001C43r 2  CA               dex
001C44r 2  B5 03            lda $03,x
001C46r 2  85 96            sta TEMP_PAX2
001C48r 2  B5 02            lda $02,x
001C4Ar 2  85 95            sta TEMP_PAX1
001C4Cr 2               
001C4Cr 2               ; src/prelude.fth:6:16 in `dup`
001C4Cr 2               @OPCODE_1458:   ; [c64_ir] TempLoad
001C4Cr 2  E8               inx
001C4Dr 2  E8               inx
001C4Er 2  A5 95            lda TEMP_PAX1
001C50r 2  95 00            sta $00,x
001C52r 2  A5 96            lda TEMP_PAX2
001C54r 2  95 01            sta $01,x
001C56r 2               
001C56r 2               ; src/prelude.fth:6:22 in `dup`
001C56r 2               @OPCODE_1459:   ; [c64_ir] TempLoad
001C56r 2  E8               inx
001C57r 2  E8               inx
001C58r 2  A5 95            lda TEMP_PAX1
001C5Ar 2  95 00            sta $00,x
001C5Cr 2  A5 96            lda TEMP_PAX2
001C5Er 2  95 01            sta $01,x
001C60r 2               
001C60r 2               ; src/prelude.fth:6:28 in `dup`
001C60r 2               @OPCODE_1460:   ; [c64_ir] InlineExit
001C60r 2                   ; inline exit
001C60r 2  68               pla
001C61r 2  68               pla
001C62r 2               
001C62r 2               @target_412:
001C62r 2               
001C62r 2               ; src/prelude.fth:41:13 in `cells`
001C62r 2               @OPCODE_1462:   ; [c64_ir] Add
001C62r 2                   ; 21
001C62r 2  CA               dex
001C63r 2  CA               dex
001C64r 2  18               clc
001C65r 2  B5 00            lda $00,x
001C67r 2  75 02            adc $02,x
001C69r 2  95 00            sta $00,x
001C6Br 2  B5 01            lda $01,x
001C6Dr 2  75 03            adc $03,x
001C6Fr 2  95 01            sta $01,x
001C71r 2               
001C71r 2               ; src/prelude.fth:41:15 in `cells`
001C71r 2               @OPCODE_1463:   ; [c64_ir] InlineExit
001C71r 2                   ; inline exit
001C71r 2  68               pla
001C72r 2  68               pla
001C73r 2               
001C73r 2               @target_413:
001C73r 2               
001C73r 2               ; snake.fth:42:9 in `snake-x`
001C73r 2               @OPCODE_1465:   ; [c64_ir] PushLiteral(-28668)
001C73r 2  E8               inx
001C74r 2  E8               inx
001C75r 2  A9 04            lda #4
001C77r 2  95 00            sta $00,x
001C79r 2  A9 90            lda #144
001C7Br 2  95 01            sta $01,x
001C7Dr 2               
001C7Dr 2               ; snake.fth:42:22 in `snake-x`
001C7Dr 2               @OPCODE_1466:   ; [c64_ir] Add
001C7Dr 2                   ; 21
001C7Dr 2  CA               dex
001C7Er 2  CA               dex
001C7Fr 2  18               clc
001C80r 2  B5 00            lda $00,x
001C82r 2  75 02            adc $02,x
001C84r 2  95 00            sta $00,x
001C86r 2  B5 01            lda $01,x
001C88r 2  75 03            adc $03,x
001C8Ar 2  95 01            sta $01,x
001C8Cr 2               
001C8Cr 2               ; snake.fth:42:24 in `snake-x`
001C8Cr 2               @OPCODE_1467:   ; [c64_ir] InlineExit
001C8Cr 2                   ; inline exit
001C8Cr 2  68               pla
001C8Dr 2  68               pla
001C8Er 2               
001C8Er 2               @target_414:
001C8Er 2               
001C8Er 2               ; snake.fth:202:13 in `draw-snake-head-tail`
001C8Er 2               @OPCODE_1469:   ; [c64_ir] Load
001C8Er 2  A1 00            lda ($00,x)
001C90r 2  95 00            sta $00,x
001C92r 2  A9 00            lda #0
001C94r 2  95 01            sta $01,x
001C96r 2               
001C96r 2               ; snake.fth:202:15 in `draw-snake-head-tail`
001C96r 2               @OPCODE_1470:   ; [c64_ir] PushLiteral(0)
001C96r 2  E8               inx
001C97r 2  E8               inx
001C98r 2  A9 00            lda #0
001C9Ar 2  95 00            sta $00,x
001C9Cr 2  A9 00            lda #0
001C9Er 2  95 01            sta $01,x
001CA0r 2               
001CA0r 2               ; snake.fth:202:17 in `draw-snake-head-tail`
001CA0r 2               @OPCODE_1471:   ; [c64_ir] InlineCall("snake-y")
001CA0r 2                   ; inline call(snake-y)
001CA0r 2  48               pha
001CA1r 2  48               pha
001CA2r 2               
001CA2r 2               @target_415:
001CA2r 2               
001CA2r 2               ; snake.fth:45:3 in `snake-y`
001CA2r 2               @OPCODE_1473:   ; [c64_ir] InlineCall("cells")
001CA2r 2                   ; inline call(cells)
001CA2r 2  48               pha
001CA3r 2  48               pha
001CA4r 2               
001CA4r 2               @target_416:
001CA4r 2               
001CA4r 2               ; src/prelude.fth:41:9 in `cells`
001CA4r 2               @OPCODE_1475:   ; [c64_ir] InlineCall("dup")
001CA4r 2                   ; inline call(dup)
001CA4r 2  48               pha
001CA5r 2  48               pha
001CA6r 2               
001CA6r 2               @target_417:
001CA6r 2               
001CA6r 2               ; src/prelude.fth:6:10 in `dup`
001CA6r 2               @OPCODE_1477:   ; [c64_ir] TempStore
001CA6r 2  CA               dex
001CA7r 2  CA               dex
001CA8r 2  B5 03            lda $03,x
001CAAr 2  85 96            sta TEMP_PAX2
001CACr 2  B5 02            lda $02,x
001CAEr 2  85 95            sta TEMP_PAX1
001CB0r 2               
001CB0r 2               ; src/prelude.fth:6:16 in `dup`
001CB0r 2               @OPCODE_1478:   ; [c64_ir] TempLoad
001CB0r 2  E8               inx
001CB1r 2  E8               inx
001CB2r 2  A5 95            lda TEMP_PAX1
001CB4r 2  95 00            sta $00,x
001CB6r 2  A5 96            lda TEMP_PAX2
001CB8r 2  95 01            sta $01,x
001CBAr 2               
001CBAr 2               ; src/prelude.fth:6:22 in `dup`
001CBAr 2               @OPCODE_1479:   ; [c64_ir] TempLoad
001CBAr 2  E8               inx
001CBBr 2  E8               inx
001CBCr 2  A5 95            lda TEMP_PAX1
001CBEr 2  95 00            sta $00,x
001CC0r 2  A5 96            lda TEMP_PAX2
001CC2r 2  95 01            sta $01,x
001CC4r 2               
001CC4r 2               ; src/prelude.fth:6:28 in `dup`
001CC4r 2               @OPCODE_1480:   ; [c64_ir] InlineExit
001CC4r 2                   ; inline exit
001CC4r 2  68               pla
001CC5r 2  68               pla
001CC6r 2               
001CC6r 2               @target_418:
001CC6r 2               
001CC6r 2               ; src/prelude.fth:41:13 in `cells`
001CC6r 2               @OPCODE_1482:   ; [c64_ir] Add
001CC6r 2                   ; 21
001CC6r 2  CA               dex
001CC7r 2  CA               dex
001CC8r 2  18               clc
001CC9r 2  B5 00            lda $00,x
001CCBr 2  75 02            adc $02,x
001CCDr 2  95 00            sta $00,x
001CCFr 2  B5 01            lda $01,x
001CD1r 2  75 03            adc $03,x
001CD3r 2  95 01            sta $01,x
001CD5r 2               
001CD5r 2               ; src/prelude.fth:41:15 in `cells`
001CD5r 2               @OPCODE_1483:   ; [c64_ir] InlineExit
001CD5r 2                   ; inline exit
001CD5r 2  68               pla
001CD6r 2  68               pla
001CD7r 2               
001CD7r 2               @target_419:
001CD7r 2               
001CD7r 2               ; snake.fth:45:9 in `snake-y`
001CD7r 2               @OPCODE_1485:   ; [c64_ir] PushLiteral(-27666)
001CD7r 2  E8               inx
001CD8r 2  E8               inx
001CD9r 2  A9 EE            lda #238
001CDBr 2  95 00            sta $00,x
001CDDr 2  A9 93            lda #147
001CDFr 2  95 01            sta $01,x
001CE1r 2               
001CE1r 2               ; snake.fth:45:22 in `snake-y`
001CE1r 2               @OPCODE_1486:   ; [c64_ir] Add
001CE1r 2                   ; 21
001CE1r 2  CA               dex
001CE2r 2  CA               dex
001CE3r 2  18               clc
001CE4r 2  B5 00            lda $00,x
001CE6r 2  75 02            adc $02,x
001CE8r 2  95 00            sta $00,x
001CEAr 2  B5 01            lda $01,x
001CECr 2  75 03            adc $03,x
001CEEr 2  95 01            sta $01,x
001CF0r 2               
001CF0r 2               ; snake.fth:45:24 in `snake-y`
001CF0r 2               @OPCODE_1487:   ; [c64_ir] InlineExit
001CF0r 2                   ; inline exit
001CF0r 2  68               pla
001CF1r 2  68               pla
001CF2r 2               
001CF2r 2               @target_420:
001CF2r 2               
001CF2r 2               ; snake.fth:202:25 in `draw-snake-head-tail`
001CF2r 2               @OPCODE_1489:   ; [c64_ir] Load
001CF2r 2  A1 00            lda ($00,x)
001CF4r 2  95 00            sta $00,x
001CF6r 2  A9 00            lda #0
001CF8r 2  95 01            sta $01,x
001CFAr 2               
001CFAr 2               ; snake.fth:202:27 in `draw-snake-head-tail`
001CFAr 2               @OPCODE_1490:   ; [c64_ir] InlineCall("draw-snake-tile")
001CFAr 2                   ; inline call(draw-snake-tile)
001CFAr 2  48               pha
001CFBr 2  48               pha
001CFCr 2               
001CFCr 2               @target_421:
001CFCr 2               
001CFCr 2               ; snake.fth:53:31 in `draw-snake-tile`
001CFCr 2               @OPCODE_1492:   ; [c64_ir] PushLiteral(232)
001CFCr 2  E8               inx
001CFDr 2  E8               inx
001CFEr 2  A9 E8            lda #232
001D00r 2  95 00            sta $00,x
001D02r 2  A9 00            lda #0
001D04r 2  95 01            sta $01,x
001D06r 2               
001D06r 2               ; snake.fth:53:36 in `draw-snake-tile`
001D06r 2               @OPCODE_1493:   ; [c64_ir] InlineCall("rot")
001D06r 2                   ; inline call(rot)
001D06r 2  48               pha
001D07r 2  48               pha
001D08r 2               
001D08r 2               @target_422:
001D08r 2               
001D08r 2               ; src/prelude.fth:5:10 in `rot`
001D08r 2               @OPCODE_1495:   ; [c64_ir] AltPush
001D08r 2  CA               dex
001D09r 2  CA               dex
001D0Ar 2  B5 03            lda $03,x
001D0Cr 2  48               pha
001D0Dr 2  B5 02            lda $02,x
001D0Fr 2  48               pha
001D10r 2               
001D10r 2               ; src/prelude.fth:5:13 in `rot`
001D10r 2               @OPCODE_1496:   ; [c64_ir] InlineCall("swap")
001D10r 2                   ; inline call(swap)
001D10r 2  48               pha
001D11r 2  48               pha
001D12r 2               
001D12r 2               @target_423:
001D12r 2               
001D12r 2               ; src/prelude.fth:3:10 in `swap`
001D12r 2               @OPCODE_1498:   ; [c64_ir] AltPush
001D12r 2  CA               dex
001D13r 2  CA               dex
001D14r 2  B5 03            lda $03,x
001D16r 2  48               pha
001D17r 2  B5 02            lda $02,x
001D19r 2  48               pha
001D1Ar 2               
001D1Ar 2               ; src/prelude.fth:3:13 in `swap`
001D1Ar 2               @OPCODE_1499:   ; [c64_ir] TempStore
001D1Ar 2  CA               dex
001D1Br 2  CA               dex
001D1Cr 2  B5 03            lda $03,x
001D1Er 2  85 96            sta TEMP_PAX2
001D20r 2  B5 02            lda $02,x
001D22r 2  85 95            sta TEMP_PAX1
001D24r 2               
001D24r 2               ; src/prelude.fth:3:19 in `swap`
001D24r 2               @OPCODE_1500:   ; [c64_ir] AltPop
001D24r 2  E8               inx
001D25r 2  E8               inx
001D26r 2  68               pla
001D27r 2  95 00            sta $00,x
001D29r 2  68               pla
001D2Ar 2  95 01            sta $01,x
001D2Cr 2               
001D2Cr 2               ; src/prelude.fth:3:22 in `swap`
001D2Cr 2               @OPCODE_1501:   ; [c64_ir] TempLoad
001D2Cr 2  E8               inx
001D2Dr 2  E8               inx
001D2Er 2  A5 95            lda TEMP_PAX1
001D30r 2  95 00            sta $00,x
001D32r 2  A5 96            lda TEMP_PAX2
001D34r 2  95 01            sta $01,x
001D36r 2               
001D36r 2               ; src/prelude.fth:3:28 in `swap`
001D36r 2               @OPCODE_1502:   ; [c64_ir] InlineExit
001D36r 2                   ; inline exit
001D36r 2  68               pla
001D37r 2  68               pla
001D38r 2               
001D38r 2               @target_424:
001D38r 2               
001D38r 2               ; src/prelude.fth:5:18 in `rot`
001D38r 2               @OPCODE_1504:   ; [c64_ir] AltPop
001D38r 2  E8               inx
001D39r 2  E8               inx
001D3Ar 2  68               pla
001D3Br 2  95 00            sta $00,x
001D3Dr 2  68               pla
001D3Er 2  95 01            sta $01,x
001D40r 2               
001D40r 2               ; src/prelude.fth:5:21 in `rot`
001D40r 2               @OPCODE_1505:   ; [c64_ir] InlineCall("swap")
001D40r 2                   ; inline call(swap)
001D40r 2  48               pha
001D41r 2  48               pha
001D42r 2               
001D42r 2               @target_425:
001D42r 2               
001D42r 2               ; src/prelude.fth:3:10 in `swap`
001D42r 2               @OPCODE_1507:   ; [c64_ir] AltPush
001D42r 2  CA               dex
001D43r 2  CA               dex
001D44r 2  B5 03            lda $03,x
001D46r 2  48               pha
001D47r 2  B5 02            lda $02,x
001D49r 2  48               pha
001D4Ar 2               
001D4Ar 2               ; src/prelude.fth:3:13 in `swap`
001D4Ar 2               @OPCODE_1508:   ; [c64_ir] TempStore
001D4Ar 2  CA               dex
001D4Br 2  CA               dex
001D4Cr 2  B5 03            lda $03,x
001D4Er 2  85 96            sta TEMP_PAX2
001D50r 2  B5 02            lda $02,x
001D52r 2  85 95            sta TEMP_PAX1
001D54r 2               
001D54r 2               ; src/prelude.fth:3:19 in `swap`
001D54r 2               @OPCODE_1509:   ; [c64_ir] AltPop
001D54r 2  E8               inx
001D55r 2  E8               inx
001D56r 2  68               pla
001D57r 2  95 00            sta $00,x
001D59r 2  68               pla
001D5Ar 2  95 01            sta $01,x
001D5Cr 2               
001D5Cr 2               ; src/prelude.fth:3:22 in `swap`
001D5Cr 2               @OPCODE_1510:   ; [c64_ir] TempLoad
001D5Cr 2  E8               inx
001D5Dr 2  E8               inx
001D5Er 2  A5 95            lda TEMP_PAX1
001D60r 2  95 00            sta $00,x
001D62r 2  A5 96            lda TEMP_PAX2
001D64r 2  95 01            sta $01,x
001D66r 2               
001D66r 2               ; src/prelude.fth:3:28 in `swap`
001D66r 2               @OPCODE_1511:   ; [c64_ir] InlineExit
001D66r 2                   ; inline exit
001D66r 2  68               pla
001D67r 2  68               pla
001D68r 2               
001D68r 2               @target_426:
001D68r 2               
001D68r 2               ; src/prelude.fth:5:26 in `rot`
001D68r 2               @OPCODE_1513:   ; [c64_ir] InlineExit
001D68r 2                   ; inline exit
001D68r 2  68               pla
001D69r 2  68               pla
001D6Ar 2               
001D6Ar 2               @target_427:
001D6Ar 2               
001D6Ar 2               ; snake.fth:53:40 in `draw-snake-tile`
001D6Ar 2               @OPCODE_1515:   ; [c64_ir] InlineCall("rot")
001D6Ar 2                   ; inline call(rot)
001D6Ar 2  48               pha
001D6Br 2  48               pha
001D6Cr 2               
001D6Cr 2               @target_428:
001D6Cr 2               
001D6Cr 2               ; src/prelude.fth:5:10 in `rot`
001D6Cr 2               @OPCODE_1517:   ; [c64_ir] AltPush
001D6Cr 2  CA               dex
001D6Dr 2  CA               dex
001D6Er 2  B5 03            lda $03,x
001D70r 2  48               pha
001D71r 2  B5 02            lda $02,x
001D73r 2  48               pha
001D74r 2               
001D74r 2               ; src/prelude.fth:5:13 in `rot`
001D74r 2               @OPCODE_1518:   ; [c64_ir] InlineCall("swap")
001D74r 2                   ; inline call(swap)
001D74r 2  48               pha
001D75r 2  48               pha
001D76r 2               
001D76r 2               @target_429:
001D76r 2               
001D76r 2               ; src/prelude.fth:3:10 in `swap`
001D76r 2               @OPCODE_1520:   ; [c64_ir] AltPush
001D76r 2  CA               dex
001D77r 2  CA               dex
001D78r 2  B5 03            lda $03,x
001D7Ar 2  48               pha
001D7Br 2  B5 02            lda $02,x
001D7Dr 2  48               pha
001D7Er 2               
001D7Er 2               ; src/prelude.fth:3:13 in `swap`
001D7Er 2               @OPCODE_1521:   ; [c64_ir] TempStore
001D7Er 2  CA               dex
001D7Fr 2  CA               dex
001D80r 2  B5 03            lda $03,x
001D82r 2  85 96            sta TEMP_PAX2
001D84r 2  B5 02            lda $02,x
001D86r 2  85 95            sta TEMP_PAX1
001D88r 2               
001D88r 2               ; src/prelude.fth:3:19 in `swap`
001D88r 2               @OPCODE_1522:   ; [c64_ir] AltPop
001D88r 2  E8               inx
001D89r 2  E8               inx
001D8Ar 2  68               pla
001D8Br 2  95 00            sta $00,x
001D8Dr 2  68               pla
001D8Er 2  95 01            sta $01,x
001D90r 2               
001D90r 2               ; src/prelude.fth:3:22 in `swap`
001D90r 2               @OPCODE_1523:   ; [c64_ir] TempLoad
001D90r 2  E8               inx
001D91r 2  E8               inx
001D92r 2  A5 95            lda TEMP_PAX1
001D94r 2  95 00            sta $00,x
001D96r 2  A5 96            lda TEMP_PAX2
001D98r 2  95 01            sta $01,x
001D9Ar 2               
001D9Ar 2               ; src/prelude.fth:3:28 in `swap`
001D9Ar 2               @OPCODE_1524:   ; [c64_ir] InlineExit
001D9Ar 2                   ; inline exit
001D9Ar 2  68               pla
001D9Br 2  68               pla
001D9Cr 2               
001D9Cr 2               @target_430:
001D9Cr 2               
001D9Cr 2               ; src/prelude.fth:5:18 in `rot`
001D9Cr 2               @OPCODE_1526:   ; [c64_ir] AltPop
001D9Cr 2  E8               inx
001D9Dr 2  E8               inx
001D9Er 2  68               pla
001D9Fr 2  95 00            sta $00,x
001DA1r 2  68               pla
001DA2r 2  95 01            sta $01,x
001DA4r 2               
001DA4r 2               ; src/prelude.fth:5:21 in `rot`
001DA4r 2               @OPCODE_1527:   ; [c64_ir] InlineCall("swap")
001DA4r 2                   ; inline call(swap)
001DA4r 2  48               pha
001DA5r 2  48               pha
001DA6r 2               
001DA6r 2               @target_431:
001DA6r 2               
001DA6r 2               ; src/prelude.fth:3:10 in `swap`
001DA6r 2               @OPCODE_1529:   ; [c64_ir] AltPush
001DA6r 2  CA               dex
001DA7r 2  CA               dex
001DA8r 2  B5 03            lda $03,x
001DAAr 2  48               pha
001DABr 2  B5 02            lda $02,x
001DADr 2  48               pha
001DAEr 2               
001DAEr 2               ; src/prelude.fth:3:13 in `swap`
001DAEr 2               @OPCODE_1530:   ; [c64_ir] TempStore
001DAEr 2  CA               dex
001DAFr 2  CA               dex
001DB0r 2  B5 03            lda $03,x
001DB2r 2  85 96            sta TEMP_PAX2
001DB4r 2  B5 02            lda $02,x
001DB6r 2  85 95            sta TEMP_PAX1
001DB8r 2               
001DB8r 2               ; src/prelude.fth:3:19 in `swap`
001DB8r 2               @OPCODE_1531:   ; [c64_ir] AltPop
001DB8r 2  E8               inx
001DB9r 2  E8               inx
001DBAr 2  68               pla
001DBBr 2  95 00            sta $00,x
001DBDr 2  68               pla
001DBEr 2  95 01            sta $01,x
001DC0r 2               
001DC0r 2               ; src/prelude.fth:3:22 in `swap`
001DC0r 2               @OPCODE_1532:   ; [c64_ir] TempLoad
001DC0r 2  E8               inx
001DC1r 2  E8               inx
001DC2r 2  A5 95            lda TEMP_PAX1
001DC4r 2  95 00            sta $00,x
001DC6r 2  A5 96            lda TEMP_PAX2
001DC8r 2  95 01            sta $01,x
001DCAr 2               
001DCAr 2               ; src/prelude.fth:3:28 in `swap`
001DCAr 2               @OPCODE_1533:   ; [c64_ir] InlineExit
001DCAr 2                   ; inline exit
001DCAr 2  68               pla
001DCBr 2  68               pla
001DCCr 2               
001DCCr 2               @target_432:
001DCCr 2               
001DCCr 2               ; src/prelude.fth:5:26 in `rot`
001DCCr 2               @OPCODE_1535:   ; [c64_ir] InlineExit
001DCCr 2                   ; inline exit
001DCCr 2  68               pla
001DCDr 2  68               pla
001DCEr 2               
001DCEr 2               @target_433:
001DCEr 2               
001DCEr 2               ; snake.fth:53:44 in `draw-snake-tile`
001DCEr 2               @OPCODE_1537:   ; [c64_ir] InlineCall("draw")
001DCEr 2                   ; inline call(draw)
001DCEr 2  48               pha
001DCFr 2  48               pha
001DD0r 2               
001DD0r 2               @target_434:
001DD0r 2               
001DD0r 2               ; snake.fth:50:26 in `draw`
001DD0r 2               @OPCODE_1539:   ; [c64_ir] InlineCall("convert-x-y")
001DD0r 2                   ; inline call(convert-x-y)
001DD0r 2  48               pha
001DD1r 2  48               pha
001DD2r 2               
001DD2r 2               @target_435:
001DD2r 2               
001DD2r 2               ; snake.fth:48:34 in `convert-x-y`
001DD2r 2               @OPCODE_1541:   ; [c64_ir] PushLiteral(40)
001DD2r 2  E8               inx
001DD3r 2  E8               inx
001DD4r 2  A9 28            lda #40
001DD6r 2  95 00            sta $00,x
001DD8r 2  A9 00            lda #0
001DDAr 2  95 01            sta $01,x
001DDCr 2               
001DDCr 2               ; snake.fth:48:37 in `convert-x-y`
001DDCr 2               @OPCODE_1542:   ; [c64_ir] InlineCall("*")
001DDCr 2                   ; inline call(*)
001DDCr 2  48               pha
001DDDr 2  48               pha
001DDEr 2               
001DDEr 2               @target_436:
001DDEr 2               
001DDEr 2               ; src/prelude.fth:44:5 in `*`
001DDEr 2               @OPCODE_1544:   ; [c64_ir] AltPush
001DDEr 2  CA               dex
001DDFr 2  CA               dex
001DE0r 2  B5 03            lda $03,x
001DE2r 2  48               pha
001DE3r 2  B5 02            lda $02,x
001DE5r 2  48               pha
001DE6r 2               
001DE6r 2               ; src/prelude.fth:44:8 in `*`
001DE6r 2               @OPCODE_1545:   ; [c64_ir] PushLiteral(0)
001DE6r 2  E8               inx
001DE7r 2  E8               inx
001DE8r 2  A9 00            lda #0
001DEAr 2  95 00            sta $00,x
001DECr 2  A9 00            lda #0
001DEEr 2  95 01            sta $01,x
001DF0r 2               
001DF0r 2               ; src/prelude.fth:44:10 in `*`
001DF0r 2               @OPCODE_1546:   ; [c64_ir] AltPop
001DF0r 2  E8               inx
001DF1r 2  E8               inx
001DF2r 2  68               pla
001DF3r 2  95 00            sta $00,x
001DF5r 2  68               pla
001DF6r 2  95 01            sta $01,x
001DF8r 2               
001DF8r 2               ; src/prelude.fth:44:13 in `*`
001DF8r 2               @OPCODE_1547:   ; [c64_ir] PushLiteral(0)
001DF8r 2  E8               inx
001DF9r 2  E8               inx
001DFAr 2  A9 00            lda #0
001DFCr 2  95 00            sta $00,x
001DFEr 2  A9 00            lda #0
001E00r 2  95 01            sta $01,x
001E02r 2               
001E02r 2               ; src/prelude.fth:44:15 in `*`
001E02r 2               @OPCODE_1548:   ; [c64_ir] AltPush
001E02r 2  CA               dex
001E03r 2  CA               dex
001E04r 2  B5 03            lda $03,x
001E06r 2  48               pha
001E07r 2  B5 02            lda $02,x
001E09r 2  48               pha
001E0Ar 2               
001E0Ar 2               ; src/prelude.fth:44:15 in `*`
001E0Ar 2               @OPCODE_1549:   ; [c64_ir] AltPush
001E0Ar 2  CA               dex
001E0Br 2  CA               dex
001E0Cr 2  B5 03            lda $03,x
001E0Er 2  48               pha
001E0Fr 2  B5 02            lda $02,x
001E11r 2  48               pha
001E12r 2               
001E12r 2               ; src/prelude.fth:44:15 in `*`
001E12r 2               @OPCODE_1550:   ; [c64_ir] LoopTarget(436)
001E12r 2               
001E12r 2               @target_437:
001E12r 2               
001E12r 2               ; src/prelude.fth:44:18 in `*`
001E12r 2               @OPCODE_1552:   ; [c64_ir] InlineCall("over")
001E12r 2                   ; inline call(over)
001E12r 2  48               pha
001E13r 2  48               pha
001E14r 2               
001E14r 2               @target_438:
001E14r 2               
001E14r 2               ; src/prelude.fth:4:10 in `over`
001E14r 2               @OPCODE_1554:   ; [c64_ir] AltPush
001E14r 2  CA               dex
001E15r 2  CA               dex
001E16r 2  B5 03            lda $03,x
001E18r 2  48               pha
001E19r 2  B5 02            lda $02,x
001E1Br 2  48               pha
001E1Cr 2               
001E1Cr 2               ; src/prelude.fth:4:13 in `over`
001E1Cr 2               @OPCODE_1555:   ; [c64_ir] TempStore
001E1Cr 2  CA               dex
001E1Dr 2  CA               dex
001E1Er 2  B5 03            lda $03,x
001E20r 2  85 96            sta TEMP_PAX2
001E22r 2  B5 02            lda $02,x
001E24r 2  85 95            sta TEMP_PAX1
001E26r 2               
001E26r 2               ; src/prelude.fth:4:19 in `over`
001E26r 2               @OPCODE_1556:   ; [c64_ir] TempLoad
001E26r 2  E8               inx
001E27r 2  E8               inx
001E28r 2  A5 95            lda TEMP_PAX1
001E2Ar 2  95 00            sta $00,x
001E2Cr 2  A5 96            lda TEMP_PAX2
001E2Er 2  95 01            sta $01,x
001E30r 2               
001E30r 2               ; src/prelude.fth:4:25 in `over`
001E30r 2               @OPCODE_1557:   ; [c64_ir] AltPop
001E30r 2  E8               inx
001E31r 2  E8               inx
001E32r 2  68               pla
001E33r 2  95 00            sta $00,x
001E35r 2  68               pla
001E36r 2  95 01            sta $01,x
001E38r 2               
001E38r 2               ; src/prelude.fth:4:28 in `over`
001E38r 2               @OPCODE_1558:   ; [c64_ir] TempLoad
001E38r 2  E8               inx
001E39r 2  E8               inx
001E3Ar 2  A5 95            lda TEMP_PAX1
001E3Cr 2  95 00            sta $00,x
001E3Er 2  A5 96            lda TEMP_PAX2
001E40r 2  95 01            sta $01,x
001E42r 2               
001E42r 2               ; src/prelude.fth:4:34 in `over`
001E42r 2               @OPCODE_1559:   ; [c64_ir] InlineExit
001E42r 2                   ; inline exit
001E42r 2  68               pla
001E43r 2  68               pla
001E44r 2               
001E44r 2               @target_439:
001E44r 2               
001E44r 2               ; src/prelude.fth:44:23 in `*`
001E44r 2               @OPCODE_1561:   ; [c64_ir] Add
001E44r 2                   ; 21
001E44r 2  CA               dex
001E45r 2  CA               dex
001E46r 2  18               clc
001E47r 2  B5 00            lda $00,x
001E49r 2  75 02            adc $02,x
001E4Br 2  95 00            sta $00,x
001E4Dr 2  B5 01            lda $01,x
001E4Fr 2  75 03            adc $03,x
001E51r 2  95 01            sta $01,x
001E53r 2               
001E53r 2               ; src/prelude.fth:44:25 in `*`
001E53r 2               @OPCODE_1562:   ; [c64_ir] InlineCall("loopimpl")
001E53r 2                   ; inline call(loopimpl)
001E53r 2  48               pha
001E54r 2  48               pha
001E55r 2               
001E55r 2               @target_440:
001E55r 2               
001E55r 2               ; src/prelude.fth:33:12 in `loopimpl`
001E55r 2               @OPCODE_1564:   ; [c64_ir] AltPop
001E55r 2  E8               inx
001E56r 2  E8               inx
001E57r 2  68               pla
001E58r 2  95 00            sta $00,x
001E5Ar 2  68               pla
001E5Br 2  95 01            sta $01,x
001E5Dr 2               
001E5Dr 2               ; src/prelude.fth:33:15 in `loopimpl`
001E5Dr 2               @OPCODE_1565:   ; [c64_ir] AltPop
001E5Dr 2  E8               inx
001E5Er 2  E8               inx
001E5Fr 2  68               pla
001E60r 2  95 00            sta $00,x
001E62r 2  68               pla
001E63r 2  95 01            sta $01,x
001E65r 2               
001E65r 2               ; src/prelude.fth:33:18 in `loopimpl`
001E65r 2               @OPCODE_1566:   ; [c64_ir] AltPop
001E65r 2  E8               inx
001E66r 2  E8               inx
001E67r 2  68               pla
001E68r 2  95 00            sta $00,x
001E6Ar 2  68               pla
001E6Br 2  95 01            sta $01,x
001E6Dr 2               
001E6Dr 2               ; src/prelude.fth:33:21 in `loopimpl`
001E6Dr 2               @OPCODE_1567:   ; [c64_ir] InlineCall("1+")
001E6Dr 2                   ; inline call(1+)
001E6Dr 2  48               pha
001E6Er 2  48               pha
001E6Fr 2               
001E6Fr 2               @target_441:
001E6Fr 2               
001E6Fr 2               ; src/prelude.fth:18:8 in `1+`
001E6Fr 2               @OPCODE_1569:   ; [c64_ir] PushLiteral(1)
001E6Fr 2  E8               inx
001E70r 2  E8               inx
001E71r 2  A9 01            lda #1
001E73r 2  95 00            sta $00,x
001E75r 2  A9 00            lda #0
001E77r 2  95 01            sta $01,x
001E79r 2               
001E79r 2               ; src/prelude.fth:18:10 in `1+`
001E79r 2               @OPCODE_1570:   ; [c64_ir] Add
001E79r 2                   ; 21
001E79r 2  CA               dex
001E7Ar 2  CA               dex
001E7Br 2  18               clc
001E7Cr 2  B5 00            lda $00,x
001E7Er 2  75 02            adc $02,x
001E80r 2  95 00            sta $00,x
001E82r 2  B5 01            lda $01,x
001E84r 2  75 03            adc $03,x
001E86r 2  95 01            sta $01,x
001E88r 2               
001E88r 2               ; src/prelude.fth:18:12 in `1+`
001E88r 2               @OPCODE_1571:   ; [c64_ir] InlineExit
001E88r 2                   ; inline exit
001E88r 2  68               pla
001E89r 2  68               pla
001E8Ar 2               
001E8Ar 2               @target_442:
001E8Ar 2               
001E8Ar 2               ; src/prelude.fth:33:24 in `loopimpl`
001E8Ar 2               @OPCODE_1573:   ; [c64_ir] InlineCall("2dup")
001E8Ar 2                   ; inline call(2dup)
001E8Ar 2  48               pha
001E8Br 2  48               pha
001E8Cr 2               
001E8Cr 2               @target_443:
001E8Cr 2               
001E8Cr 2               ; src/prelude.fth:8:10 in `2dup`
001E8Cr 2               @OPCODE_1575:   ; [c64_ir] InlineCall("over")
001E8Cr 2                   ; inline call(over)
001E8Cr 2  48               pha
001E8Dr 2  48               pha
001E8Er 2               
001E8Er 2               @target_444:
001E8Er 2               
001E8Er 2               ; src/prelude.fth:4:10 in `over`
001E8Er 2               @OPCODE_1577:   ; [c64_ir] AltPush
001E8Er 2  CA               dex
001E8Fr 2  CA               dex
001E90r 2  B5 03            lda $03,x
001E92r 2  48               pha
001E93r 2  B5 02            lda $02,x
001E95r 2  48               pha
001E96r 2               
001E96r 2               ; src/prelude.fth:4:13 in `over`
001E96r 2               @OPCODE_1578:   ; [c64_ir] TempStore
001E96r 2  CA               dex
001E97r 2  CA               dex
001E98r 2  B5 03            lda $03,x
001E9Ar 2  85 96            sta TEMP_PAX2
001E9Cr 2  B5 02            lda $02,x
001E9Er 2  85 95            sta TEMP_PAX1
001EA0r 2               
001EA0r 2               ; src/prelude.fth:4:19 in `over`
001EA0r 2               @OPCODE_1579:   ; [c64_ir] TempLoad
001EA0r 2  E8               inx
001EA1r 2  E8               inx
001EA2r 2  A5 95            lda TEMP_PAX1
001EA4r 2  95 00            sta $00,x
001EA6r 2  A5 96            lda TEMP_PAX2
001EA8r 2  95 01            sta $01,x
001EAAr 2               
001EAAr 2               ; src/prelude.fth:4:25 in `over`
001EAAr 2               @OPCODE_1580:   ; [c64_ir] AltPop
001EAAr 2  E8               inx
001EABr 2  E8               inx
001EACr 2  68               pla
001EADr 2  95 00            sta $00,x
001EAFr 2  68               pla
001EB0r 2  95 01            sta $01,x
001EB2r 2               
001EB2r 2               ; src/prelude.fth:4:28 in `over`
001EB2r 2               @OPCODE_1581:   ; [c64_ir] TempLoad
001EB2r 2  E8               inx
001EB3r 2  E8               inx
001EB4r 2  A5 95            lda TEMP_PAX1
001EB6r 2  95 00            sta $00,x
001EB8r 2  A5 96            lda TEMP_PAX2
001EBAr 2  95 01            sta $01,x
001EBCr 2               
001EBCr 2               ; src/prelude.fth:4:34 in `over`
001EBCr 2               @OPCODE_1582:   ; [c64_ir] InlineExit
001EBCr 2                   ; inline exit
001EBCr 2  68               pla
001EBDr 2  68               pla
001EBEr 2               
001EBEr 2               @target_445:
001EBEr 2               
001EBEr 2               ; src/prelude.fth:8:15 in `2dup`
001EBEr 2               @OPCODE_1584:   ; [c64_ir] InlineCall("over")
001EBEr 2                   ; inline call(over)
001EBEr 2  48               pha
001EBFr 2  48               pha
001EC0r 2               
001EC0r 2               @target_446:
001EC0r 2               
001EC0r 2               ; src/prelude.fth:4:10 in `over`
001EC0r 2               @OPCODE_1586:   ; [c64_ir] AltPush
001EC0r 2  CA               dex
001EC1r 2  CA               dex
001EC2r 2  B5 03            lda $03,x
001EC4r 2  48               pha
001EC5r 2  B5 02            lda $02,x
001EC7r 2  48               pha
001EC8r 2               
001EC8r 2               ; src/prelude.fth:4:13 in `over`
001EC8r 2               @OPCODE_1587:   ; [c64_ir] TempStore
001EC8r 2  CA               dex
001EC9r 2  CA               dex
001ECAr 2  B5 03            lda $03,x
001ECCr 2  85 96            sta TEMP_PAX2
001ECEr 2  B5 02            lda $02,x
001ED0r 2  85 95            sta TEMP_PAX1
001ED2r 2               
001ED2r 2               ; src/prelude.fth:4:19 in `over`
001ED2r 2               @OPCODE_1588:   ; [c64_ir] TempLoad
001ED2r 2  E8               inx
001ED3r 2  E8               inx
001ED4r 2  A5 95            lda TEMP_PAX1
001ED6r 2  95 00            sta $00,x
001ED8r 2  A5 96            lda TEMP_PAX2
001EDAr 2  95 01            sta $01,x
001EDCr 2               
001EDCr 2               ; src/prelude.fth:4:25 in `over`
001EDCr 2               @OPCODE_1589:   ; [c64_ir] AltPop
001EDCr 2  E8               inx
001EDDr 2  E8               inx
001EDEr 2  68               pla
001EDFr 2  95 00            sta $00,x
001EE1r 2  68               pla
001EE2r 2  95 01            sta $01,x
001EE4r 2               
001EE4r 2               ; src/prelude.fth:4:28 in `over`
001EE4r 2               @OPCODE_1590:   ; [c64_ir] TempLoad
001EE4r 2  E8               inx
001EE5r 2  E8               inx
001EE6r 2  A5 95            lda TEMP_PAX1
001EE8r 2  95 00            sta $00,x
001EEAr 2  A5 96            lda TEMP_PAX2
001EECr 2  95 01            sta $01,x
001EEEr 2               
001EEEr 2               ; src/prelude.fth:4:34 in `over`
001EEEr 2               @OPCODE_1591:   ; [c64_ir] InlineExit
001EEEr 2                   ; inline exit
001EEEr 2  68               pla
001EEFr 2  68               pla
001EF0r 2               
001EF0r 2               @target_447:
001EF0r 2               
001EF0r 2               ; src/prelude.fth:8:20 in `2dup`
001EF0r 2               @OPCODE_1593:   ; [c64_ir] InlineExit
001EF0r 2                   ; inline exit
001EF0r 2  68               pla
001EF1r 2  68               pla
001EF2r 2               
001EF2r 2               @target_448:
001EF2r 2               
001EF2r 2               ; src/prelude.fth:33:29 in `loopimpl`
001EF2r 2               @OPCODE_1595:   ; [c64_ir] AltPush
001EF2r 2  CA               dex
001EF3r 2  CA               dex
001EF4r 2  B5 03            lda $03,x
001EF6r 2  48               pha
001EF7r 2  B5 02            lda $02,x
001EF9r 2  48               pha
001EFAr 2               
001EFAr 2               ; src/prelude.fth:33:32 in `loopimpl`
001EFAr 2               @OPCODE_1596:   ; [c64_ir] AltPush
001EFAr 2  CA               dex
001EFBr 2  CA               dex
001EFCr 2  B5 03            lda $03,x
001EFEr 2  48               pha
001EFFr 2  B5 02            lda $02,x
001F01r 2  48               pha
001F02r 2               
001F02r 2               ; src/prelude.fth:33:35 in `loopimpl`
001F02r 2               @OPCODE_1597:   ; [c64_ir] InlineCall("=")
001F02r 2                   ; inline call(=)
001F02r 2  48               pha
001F03r 2  48               pha
001F04r 2               
001F04r 2               @target_449:
001F04r 2               
001F04r 2               ; src/prelude.fth:22:8 in `=`
001F04r 2               @OPCODE_1599:   ; [c64_ir] InlineCall("-")
001F04r 2                   ; inline call(-)
001F04r 2  48               pha
001F05r 2  48               pha
001F06r 2               
001F06r 2               @target_450:
001F06r 2               
001F06r 2               ; src/prelude.fth:16:12 in `-`
001F06r 2               @OPCODE_1601:   ; [c64_ir] InlineCall("negate")
001F06r 2                   ; inline call(negate)
001F06r 2  48               pha
001F07r 2  48               pha
001F08r 2               
001F08r 2               @target_451:
001F08r 2               
001F08r 2               ; src/prelude.fth:15:12 in `negate`
001F08r 2               @OPCODE_1603:   ; [c64_ir] InlineCall("invert")
001F08r 2                   ; inline call(invert)
001F08r 2  48               pha
001F09r 2  48               pha
001F0Ar 2               
001F0Ar 2               @target_452:
001F0Ar 2               
001F0Ar 2               ; src/prelude.fth:14:12 in `invert`
001F0Ar 2               @OPCODE_1605:   ; [c64_ir] PushLiteral(-1)
001F0Ar 2  E8               inx
001F0Br 2  E8               inx
001F0Cr 2  A9 FF            lda #255
001F0Er 2  95 00            sta $00,x
001F10r 2  A9 FF            lda #255
001F12r 2  95 01            sta $01,x
001F14r 2               
001F14r 2               ; src/prelude.fth:14:15 in `invert`
001F14r 2               @OPCODE_1606:   ; [c64_ir] Nand
001F14r 2                   ; 26
001F14r 2  CA               dex
001F15r 2  CA               dex
001F16r 2  B5 00            lda $00,x
001F18r 2  35 02            and $02,x
001F1Ar 2  49 FF            eor #$ff
001F1Cr 2  95 00            sta $00,x
001F1Er 2  B5 01            lda $01,x
001F20r 2  35 03            and $03,x
001F22r 2  49 FF            eor #$ff
001F24r 2  95 01            sta $01,x
001F26r 2               
001F26r 2               ; src/prelude.fth:14:20 in `invert`
001F26r 2               @OPCODE_1607:   ; [c64_ir] InlineExit
001F26r 2                   ; inline exit
001F26r 2  68               pla
001F27r 2  68               pla
001F28r 2               
001F28r 2               @target_453:
001F28r 2               
001F28r 2               ; src/prelude.fth:15:19 in `negate`
001F28r 2               @OPCODE_1609:   ; [c64_ir] PushLiteral(1)
001F28r 2  E8               inx
001F29r 2  E8               inx
001F2Ar 2  A9 01            lda #1
001F2Cr 2  95 00            sta $00,x
001F2Er 2  A9 00            lda #0
001F30r 2  95 01            sta $01,x
001F32r 2               
001F32r 2               ; src/prelude.fth:15:21 in `negate`
001F32r 2               @OPCODE_1610:   ; [c64_ir] Add
001F32r 2                   ; 21
001F32r 2  CA               dex
001F33r 2  CA               dex
001F34r 2  18               clc
001F35r 2  B5 00            lda $00,x
001F37r 2  75 02            adc $02,x
001F39r 2  95 00            sta $00,x
001F3Br 2  B5 01            lda $01,x
001F3Dr 2  75 03            adc $03,x
001F3Fr 2  95 01            sta $01,x
001F41r 2               
001F41r 2               ; src/prelude.fth:15:23 in `negate`
001F41r 2               @OPCODE_1611:   ; [c64_ir] InlineExit
001F41r 2                   ; inline exit
001F41r 2  68               pla
001F42r 2  68               pla
001F43r 2               
001F43r 2               @target_454:
001F43r 2               
001F43r 2               ; src/prelude.fth:16:19 in `-`
001F43r 2               @OPCODE_1613:   ; [c64_ir] Add
001F43r 2                   ; 21
001F43r 2  CA               dex
001F44r 2  CA               dex
001F45r 2  18               clc
001F46r 2  B5 00            lda $00,x
001F48r 2  75 02            adc $02,x
001F4Ar 2  95 00            sta $00,x
001F4Cr 2  B5 01            lda $01,x
001F4Er 2  75 03            adc $03,x
001F50r 2  95 01            sta $01,x
001F52r 2               
001F52r 2               ; src/prelude.fth:16:21 in `-`
001F52r 2               @OPCODE_1614:   ; [c64_ir] InlineExit
001F52r 2                   ; inline exit
001F52r 2  68               pla
001F53r 2  68               pla
001F54r 2               
001F54r 2               @target_455:
001F54r 2               
001F54r 2               ; src/prelude.fth:22:10 in `=`
001F54r 2               @OPCODE_1616:   ; [c64_ir] InlineCall("0=")
001F54r 2                   ; inline call(0=)
001F54r 2  48               pha
001F55r 2  48               pha
001F56r 2               
001F56r 2               @target_456:
001F56r 2               
001F56r 2               ; src/prelude.fth:21:8 in `0=`
001F56r 2               @OPCODE_1618:   ; [c64_ir] JumpIf0(458)
001F56r 2  CA               dex
001F57r 2  CA               dex
001F58r 2  B5 02            lda $02,x
001F5Ar 2  15 03            ora $03,x
001F5Cr 2  D0 03            bne *+5
001F5Er 2  4C rr rr         jmp @target_458
001F61r 2               
001F61r 2               @target_457:
001F61r 2               
001F61r 2               ; src/prelude.fth:21:11 in `0=`
001F61r 2               @OPCODE_1620:   ; [c64_ir] PushLiteral(0)
001F61r 2  E8               inx
001F62r 2  E8               inx
001F63r 2  A9 00            lda #0
001F65r 2  95 00            sta $00,x
001F67r 2  A9 00            lda #0
001F69r 2  95 01            sta $01,x
001F6Br 2               
001F6Br 2               ; src/prelude.fth:21:13 in `0=`
001F6Br 2               @OPCODE_1621:   ; [c64_ir] JumpElse(459)
001F6Br 2  4C rr rr         jmp @target_459
001F6Er 2               
001F6Er 2               @target_458:
001F6Er 2               
001F6Er 2               ; src/prelude.fth:21:18 in `0=`
001F6Er 2               @OPCODE_1623:   ; [c64_ir] PushLiteral(-1)
001F6Er 2  E8               inx
001F6Fr 2  E8               inx
001F70r 2  A9 FF            lda #255
001F72r 2  95 00            sta $00,x
001F74r 2  A9 FF            lda #255
001F76r 2  95 01            sta $01,x
001F78r 2               
001F78r 2               ; src/prelude.fth:21:21 in `0=`
001F78r 2               @OPCODE_1624:   ; [c64_ir] JumpTarget(458)
001F78r 2               
001F78r 2               @target_459:
001F78r 2               
001F78r 2               ; src/prelude.fth:21:26 in `0=`
001F78r 2               @OPCODE_1626:   ; [c64_ir] InlineExit
001F78r 2                   ; inline exit
001F78r 2  68               pla
001F79r 2  68               pla
001F7Ar 2               
001F7Ar 2               @target_460:
001F7Ar 2               
001F7Ar 2               ; src/prelude.fth:22:13 in `=`
001F7Ar 2               @OPCODE_1628:   ; [c64_ir] InlineExit
001F7Ar 2                   ; inline exit
001F7Ar 2  68               pla
001F7Br 2  68               pla
001F7Cr 2               
001F7Cr 2               @target_461:
001F7Cr 2               
001F7Cr 2               ; src/prelude.fth:33:37 in `loopimpl`
001F7Cr 2               @OPCODE_1630:   ; [c64_ir] InlineCall("swap")
001F7Cr 2                   ; inline call(swap)
001F7Cr 2  48               pha
001F7Dr 2  48               pha
001F7Er 2               
001F7Er 2               @target_462:
001F7Er 2               
001F7Er 2               ; src/prelude.fth:3:10 in `swap`
001F7Er 2               @OPCODE_1632:   ; [c64_ir] AltPush
001F7Er 2  CA               dex
001F7Fr 2  CA               dex
001F80r 2  B5 03            lda $03,x
001F82r 2  48               pha
001F83r 2  B5 02            lda $02,x
001F85r 2  48               pha
001F86r 2               
001F86r 2               ; src/prelude.fth:3:13 in `swap`
001F86r 2               @OPCODE_1633:   ; [c64_ir] TempStore
001F86r 2  CA               dex
001F87r 2  CA               dex
001F88r 2  B5 03            lda $03,x
001F8Ar 2  85 96            sta TEMP_PAX2
001F8Cr 2  B5 02            lda $02,x
001F8Er 2  85 95            sta TEMP_PAX1
001F90r 2               
001F90r 2               ; src/prelude.fth:3:19 in `swap`
001F90r 2               @OPCODE_1634:   ; [c64_ir] AltPop
001F90r 2  E8               inx
001F91r 2  E8               inx
001F92r 2  68               pla
001F93r 2  95 00            sta $00,x
001F95r 2  68               pla
001F96r 2  95 01            sta $01,x
001F98r 2               
001F98r 2               ; src/prelude.fth:3:22 in `swap`
001F98r 2               @OPCODE_1635:   ; [c64_ir] TempLoad
001F98r 2  E8               inx
001F99r 2  E8               inx
001F9Ar 2  A5 95            lda TEMP_PAX1
001F9Cr 2  95 00            sta $00,x
001F9Er 2  A5 96            lda TEMP_PAX2
001FA0r 2  95 01            sta $01,x
001FA2r 2               
001FA2r 2               ; src/prelude.fth:3:28 in `swap`
001FA2r 2               @OPCODE_1636:   ; [c64_ir] InlineExit
001FA2r 2                   ; inline exit
001FA2r 2  68               pla
001FA3r 2  68               pla
001FA4r 2               
001FA4r 2               @target_463:
001FA4r 2               
001FA4r 2               ; src/prelude.fth:33:42 in `loopimpl`
001FA4r 2               @OPCODE_1638:   ; [c64_ir] AltPush
001FA4r 2  CA               dex
001FA5r 2  CA               dex
001FA6r 2  B5 03            lda $03,x
001FA8r 2  48               pha
001FA9r 2  B5 02            lda $02,x
001FABr 2  48               pha
001FACr 2               
001FACr 2               ; src/prelude.fth:33:45 in `loopimpl`
001FACr 2               @OPCODE_1639:   ; [c64_ir] InlineExit
001FACr 2                   ; inline exit
001FACr 2  68               pla
001FADr 2  68               pla
001FAEr 2               
001FAEr 2               @target_464:
001FAEr 2               
001FAEr 2               ; src/prelude.fth:44:25 in `*`
001FAEr 2               @OPCODE_1641:   ; [c64_ir] LoopIf0(437)
001FAEr 2  CA               dex
001FAFr 2  CA               dex
001FB0r 2  B5 02            lda $02,x
001FB2r 2  15 03            ora $03,x
001FB4r 2  D0 03            bne *+5
001FB6r 2  4C rr rr         jmp @target_437
001FB9r 2               
001FB9r 2               @target_465:
001FB9r 2               
001FB9r 2               ; src/prelude.fth:44:25 in `*`
001FB9r 2               @OPCODE_1643:   ; [c64_ir] AltPop
001FB9r 2  E8               inx
001FBAr 2  E8               inx
001FBBr 2  68               pla
001FBCr 2  95 00            sta $00,x
001FBEr 2  68               pla
001FBFr 2  95 01            sta $01,x
001FC1r 2               
001FC1r 2               ; src/prelude.fth:44:25 in `*`
001FC1r 2               @OPCODE_1644:   ; [c64_ir] Drop
001FC1r 2  CA               dex
001FC2r 2  CA               dex
001FC3r 2               
001FC3r 2               ; src/prelude.fth:44:25 in `*`
001FC3r 2               @OPCODE_1645:   ; [c64_ir] AltPop
001FC3r 2  E8               inx
001FC4r 2  E8               inx
001FC5r 2  68               pla
001FC6r 2  95 00            sta $00,x
001FC8r 2  68               pla
001FC9r 2  95 01            sta $01,x
001FCBr 2               
001FCBr 2               ; src/prelude.fth:44:25 in `*`
001FCBr 2               @OPCODE_1646:   ; [c64_ir] Drop
001FCBr 2  CA               dex
001FCCr 2  CA               dex
001FCDr 2               
001FCDr 2               ; src/prelude.fth:44:30 in `*`
001FCDr 2               @OPCODE_1647:   ; [c64_ir] InlineCall("swap")
001FCDr 2                   ; inline call(swap)
001FCDr 2  48               pha
001FCEr 2  48               pha
001FCFr 2               
001FCFr 2               @target_466:
001FCFr 2               
001FCFr 2               ; src/prelude.fth:3:10 in `swap`
001FCFr 2               @OPCODE_1649:   ; [c64_ir] AltPush
001FCFr 2  CA               dex
001FD0r 2  CA               dex
001FD1r 2  B5 03            lda $03,x
001FD3r 2  48               pha
001FD4r 2  B5 02            lda $02,x
001FD6r 2  48               pha
001FD7r 2               
001FD7r 2               ; src/prelude.fth:3:13 in `swap`
001FD7r 2               @OPCODE_1650:   ; [c64_ir] TempStore
001FD7r 2  CA               dex
001FD8r 2  CA               dex
001FD9r 2  B5 03            lda $03,x
001FDBr 2  85 96            sta TEMP_PAX2
001FDDr 2  B5 02            lda $02,x
001FDFr 2  85 95            sta TEMP_PAX1
001FE1r 2               
001FE1r 2               ; src/prelude.fth:3:19 in `swap`
001FE1r 2               @OPCODE_1651:   ; [c64_ir] AltPop
001FE1r 2  E8               inx
001FE2r 2  E8               inx
001FE3r 2  68               pla
001FE4r 2  95 00            sta $00,x
001FE6r 2  68               pla
001FE7r 2  95 01            sta $01,x
001FE9r 2               
001FE9r 2               ; src/prelude.fth:3:22 in `swap`
001FE9r 2               @OPCODE_1652:   ; [c64_ir] TempLoad
001FE9r 2  E8               inx
001FEAr 2  E8               inx
001FEBr 2  A5 95            lda TEMP_PAX1
001FEDr 2  95 00            sta $00,x
001FEFr 2  A5 96            lda TEMP_PAX2
001FF1r 2  95 01            sta $01,x
001FF3r 2               
001FF3r 2               ; src/prelude.fth:3:28 in `swap`
001FF3r 2               @OPCODE_1653:   ; [c64_ir] InlineExit
001FF3r 2                   ; inline exit
001FF3r 2  68               pla
001FF4r 2  68               pla
001FF5r 2               
001FF5r 2               @target_467:
001FF5r 2               
001FF5r 2               ; src/prelude.fth:44:35 in `*`
001FF5r 2               @OPCODE_1655:   ; [c64_ir] Drop
001FF5r 2  CA               dex
001FF6r 2  CA               dex
001FF7r 2               
001FF7r 2               ; src/prelude.fth:44:40 in `*`
001FF7r 2               @OPCODE_1656:   ; [c64_ir] InlineExit
001FF7r 2                   ; inline exit
001FF7r 2  68               pla
001FF8r 2  68               pla
001FF9r 2               
001FF9r 2               @target_468:
001FF9r 2               
001FF9r 2               ; snake.fth:48:39 in `convert-x-y`
001FF9r 2               @OPCODE_1658:   ; [c64_ir] Add
001FF9r 2                   ; 21
001FF9r 2  CA               dex
001FFAr 2  CA               dex
001FFBr 2  18               clc
001FFCr 2  B5 00            lda $00,x
001FFEr 2  75 02            adc $02,x
002000r 2  95 00            sta $00,x
002002r 2  B5 01            lda $01,x
002004r 2  75 03            adc $03,x
002006r 2  95 01            sta $01,x
002008r 2               
002008r 2               ; snake.fth:48:41 in `convert-x-y`
002008r 2               @OPCODE_1659:   ; [c64_ir] InlineExit
002008r 2                   ; inline exit
002008r 2  68               pla
002009r 2  68               pla
00200Ar 2               
00200Ar 2               @target_469:
00200Ar 2               
00200Ar 2               ; snake.fth:50:38 in `draw`
00200Ar 2               @OPCODE_1661:   ; [c64_ir] InlineCall("draw-index")
00200Ar 2                   ; inline call(draw-index)
00200Ar 2  48               pha
00200Br 2  48               pha
00200Cr 2               
00200Cr 2               @target_470:
00200Cr 2               
00200Cr 2               ; snake.fth:49:34 in `draw-index`
00200Cr 2               @OPCODE_1663:   ; [c64_ir] PushLiteral(1024)
00200Cr 2  E8               inx
00200Dr 2  E8               inx
00200Er 2  A9 00            lda #0
002010r 2  95 00            sta $00,x
002012r 2  A9 04            lda #4
002014r 2  95 01            sta $01,x
002016r 2               
002016r 2               ; snake.fth:49:43 in `draw-index`
002016r 2               @OPCODE_1664:   ; [c64_ir] Add
002016r 2                   ; 21
002016r 2  CA               dex
002017r 2  CA               dex
002018r 2  18               clc
002019r 2  B5 00            lda $00,x
00201Br 2  75 02            adc $02,x
00201Dr 2  95 00            sta $00,x
00201Fr 2  B5 01            lda $01,x
002021r 2  75 03            adc $03,x
002023r 2  95 01            sta $01,x
002025r 2               
002025r 2               ; snake.fth:49:45 in `draw-index`
002025r 2               @OPCODE_1665:   ; [c64_ir] Store8
002025r 2  CA               dex
002026r 2  CA               dex
002027r 2  CA               dex
002028r 2  CA               dex
002029r 2  B5 02            lda $02,x
00202Br 2  81 04            sta ($04,x)
00202Dr 2                   ; TODO high byte
00202Dr 2               
00202Dr 2               ; snake.fth:49:48 in `draw-index`
00202Dr 2               @OPCODE_1666:   ; [c64_ir] InlineExit
00202Dr 2                   ; inline exit
00202Dr 2  68               pla
00202Er 2  68               pla
00202Fr 2               
00202Fr 2               @target_471:
00202Fr 2               
00202Fr 2               ; snake.fth:50:49 in `draw`
00202Fr 2               @OPCODE_1668:   ; [c64_ir] InlineExit
00202Fr 2                   ; inline exit
00202Fr 2  68               pla
002030r 2  68               pla
002031r 2               
002031r 2               @target_472:
002031r 2               
002031r 2               ; snake.fth:53:49 in `draw-snake-tile`
002031r 2               @OPCODE_1670:   ; [c64_ir] InlineExit
002031r 2                   ; inline exit
002031r 2  68               pla
002032r 2  68               pla
002033r 2               
002033r 2               @target_473:
002033r 2               
002033r 2               ; snake.fth:203:3 in `draw-snake-head-tail`
002033r 2               @OPCODE_1672:   ; [c64_ir] PushLiteral(-26658)
002033r 2  E8               inx
002034r 2  E8               inx
002035r 2  A9 DE            lda #222
002037r 2  95 00            sta $00,x
002039r 2  A9 97            lda #151
00203Br 2  95 01            sta $01,x
00203Dr 2               
00203Dr 2               ; snake.fth:203:10 in `draw-snake-head-tail`
00203Dr 2               @OPCODE_1673:   ; [c64_ir] Load
00203Dr 2  A1 00            lda ($00,x)
00203Fr 2  95 00            sta $00,x
002041r 2  A9 00            lda #0
002043r 2  95 01            sta $01,x
002045r 2               
002045r 2               ; snake.fth:203:12 in `draw-snake-head-tail`
002045r 2               @OPCODE_1674:   ; [c64_ir] InlineCall("snake-x")
002045r 2                   ; inline call(snake-x)
002045r 2  48               pha
002046r 2  48               pha
002047r 2               
002047r 2               @target_474:
002047r 2               
002047r 2               ; snake.fth:42:3 in `snake-x`
002047r 2               @OPCODE_1676:   ; [c64_ir] InlineCall("cells")
002047r 2                   ; inline call(cells)
002047r 2  48               pha
002048r 2  48               pha
002049r 2               
002049r 2               @target_475:
002049r 2               
002049r 2               ; src/prelude.fth:41:9 in `cells`
002049r 2               @OPCODE_1678:   ; [c64_ir] InlineCall("dup")
002049r 2                   ; inline call(dup)
002049r 2  48               pha
00204Ar 2  48               pha
00204Br 2               
00204Br 2               @target_476:
00204Br 2               
00204Br 2               ; src/prelude.fth:6:10 in `dup`
00204Br 2               @OPCODE_1680:   ; [c64_ir] TempStore
00204Br 2  CA               dex
00204Cr 2  CA               dex
00204Dr 2  B5 03            lda $03,x
00204Fr 2  85 96            sta TEMP_PAX2
002051r 2  B5 02            lda $02,x
002053r 2  85 95            sta TEMP_PAX1
002055r 2               
002055r 2               ; src/prelude.fth:6:16 in `dup`
002055r 2               @OPCODE_1681:   ; [c64_ir] TempLoad
002055r 2  E8               inx
002056r 2  E8               inx
002057r 2  A5 95            lda TEMP_PAX1
002059r 2  95 00            sta $00,x
00205Br 2  A5 96            lda TEMP_PAX2
00205Dr 2  95 01            sta $01,x
00205Fr 2               
00205Fr 2               ; src/prelude.fth:6:22 in `dup`
00205Fr 2               @OPCODE_1682:   ; [c64_ir] TempLoad
00205Fr 2  E8               inx
002060r 2  E8               inx
002061r 2  A5 95            lda TEMP_PAX1
002063r 2  95 00            sta $00,x
002065r 2  A5 96            lda TEMP_PAX2
002067r 2  95 01            sta $01,x
002069r 2               
002069r 2               ; src/prelude.fth:6:28 in `dup`
002069r 2               @OPCODE_1683:   ; [c64_ir] InlineExit
002069r 2                   ; inline exit
002069r 2  68               pla
00206Ar 2  68               pla
00206Br 2               
00206Br 2               @target_477:
00206Br 2               
00206Br 2               ; src/prelude.fth:41:13 in `cells`
00206Br 2               @OPCODE_1685:   ; [c64_ir] Add
00206Br 2                   ; 21
00206Br 2  CA               dex
00206Cr 2  CA               dex
00206Dr 2  18               clc
00206Er 2  B5 00            lda $00,x
002070r 2  75 02            adc $02,x
002072r 2  95 00            sta $00,x
002074r 2  B5 01            lda $01,x
002076r 2  75 03            adc $03,x
002078r 2  95 01            sta $01,x
00207Ar 2               
00207Ar 2               ; src/prelude.fth:41:15 in `cells`
00207Ar 2               @OPCODE_1686:   ; [c64_ir] InlineExit
00207Ar 2                   ; inline exit
00207Ar 2  68               pla
00207Br 2  68               pla
00207Cr 2               
00207Cr 2               @target_478:
00207Cr 2               
00207Cr 2               ; snake.fth:42:9 in `snake-x`
00207Cr 2               @OPCODE_1688:   ; [c64_ir] PushLiteral(-28668)
00207Cr 2  E8               inx
00207Dr 2  E8               inx
00207Er 2  A9 04            lda #4
002080r 2  95 00            sta $00,x
002082r 2  A9 90            lda #144
002084r 2  95 01            sta $01,x
002086r 2               
002086r 2               ; snake.fth:42:22 in `snake-x`
002086r 2               @OPCODE_1689:   ; [c64_ir] Add
002086r 2                   ; 21
002086r 2  CA               dex
002087r 2  CA               dex
002088r 2  18               clc
002089r 2  B5 00            lda $00,x
00208Br 2  75 02            adc $02,x
00208Dr 2  95 00            sta $00,x
00208Fr 2  B5 01            lda $01,x
002091r 2  75 03            adc $03,x
002093r 2  95 01            sta $01,x
002095r 2               
002095r 2               ; snake.fth:42:24 in `snake-x`
002095r 2               @OPCODE_1690:   ; [c64_ir] InlineExit
002095r 2                   ; inline exit
002095r 2  68               pla
002096r 2  68               pla
002097r 2               
002097r 2               @target_479:
002097r 2               
002097r 2               ; snake.fth:203:20 in `draw-snake-head-tail`
002097r 2               @OPCODE_1692:   ; [c64_ir] Load
002097r 2  A1 00            lda ($00,x)
002099r 2  95 00            sta $00,x
00209Br 2  A9 00            lda #0
00209Dr 2  95 01            sta $01,x
00209Fr 2               
00209Fr 2               ; snake.fth:204:3 in `draw-snake-head-tail`
00209Fr 2               @OPCODE_1693:   ; [c64_ir] PushLiteral(-26658)
00209Fr 2  E8               inx
0020A0r 2  E8               inx
0020A1r 2  A9 DE            lda #222
0020A3r 2  95 00            sta $00,x
0020A5r 2  A9 97            lda #151
0020A7r 2  95 01            sta $01,x
0020A9r 2               
0020A9r 2               ; snake.fth:204:10 in `draw-snake-head-tail`
0020A9r 2               @OPCODE_1694:   ; [c64_ir] Load
0020A9r 2  A1 00            lda ($00,x)
0020ABr 2  95 00            sta $00,x
0020ADr 2  A9 00            lda #0
0020AFr 2  95 01            sta $01,x
0020B1r 2               
0020B1r 2               ; snake.fth:204:12 in `draw-snake-head-tail`
0020B1r 2               @OPCODE_1695:   ; [c64_ir] InlineCall("snake-y")
0020B1r 2                   ; inline call(snake-y)
0020B1r 2  48               pha
0020B2r 2  48               pha
0020B3r 2               
0020B3r 2               @target_480:
0020B3r 2               
0020B3r 2               ; snake.fth:45:3 in `snake-y`
0020B3r 2               @OPCODE_1697:   ; [c64_ir] InlineCall("cells")
0020B3r 2                   ; inline call(cells)
0020B3r 2  48               pha
0020B4r 2  48               pha
0020B5r 2               
0020B5r 2               @target_481:
0020B5r 2               
0020B5r 2               ; src/prelude.fth:41:9 in `cells`
0020B5r 2               @OPCODE_1699:   ; [c64_ir] InlineCall("dup")
0020B5r 2                   ; inline call(dup)
0020B5r 2  48               pha
0020B6r 2  48               pha
0020B7r 2               
0020B7r 2               @target_482:
0020B7r 2               
0020B7r 2               ; src/prelude.fth:6:10 in `dup`
0020B7r 2               @OPCODE_1701:   ; [c64_ir] TempStore
0020B7r 2  CA               dex
0020B8r 2  CA               dex
0020B9r 2  B5 03            lda $03,x
0020BBr 2  85 96            sta TEMP_PAX2
0020BDr 2  B5 02            lda $02,x
0020BFr 2  85 95            sta TEMP_PAX1
0020C1r 2               
0020C1r 2               ; src/prelude.fth:6:16 in `dup`
0020C1r 2               @OPCODE_1702:   ; [c64_ir] TempLoad
0020C1r 2  E8               inx
0020C2r 2  E8               inx
0020C3r 2  A5 95            lda TEMP_PAX1
0020C5r 2  95 00            sta $00,x
0020C7r 2  A5 96            lda TEMP_PAX2
0020C9r 2  95 01            sta $01,x
0020CBr 2               
0020CBr 2               ; src/prelude.fth:6:22 in `dup`
0020CBr 2               @OPCODE_1703:   ; [c64_ir] TempLoad
0020CBr 2  E8               inx
0020CCr 2  E8               inx
0020CDr 2  A5 95            lda TEMP_PAX1
0020CFr 2  95 00            sta $00,x
0020D1r 2  A5 96            lda TEMP_PAX2
0020D3r 2  95 01            sta $01,x
0020D5r 2               
0020D5r 2               ; src/prelude.fth:6:28 in `dup`
0020D5r 2               @OPCODE_1704:   ; [c64_ir] InlineExit
0020D5r 2                   ; inline exit
0020D5r 2  68               pla
0020D6r 2  68               pla
0020D7r 2               
0020D7r 2               @target_483:
0020D7r 2               
0020D7r 2               ; src/prelude.fth:41:13 in `cells`
0020D7r 2               @OPCODE_1706:   ; [c64_ir] Add
0020D7r 2                   ; 21
0020D7r 2  CA               dex
0020D8r 2  CA               dex
0020D9r 2  18               clc
0020DAr 2  B5 00            lda $00,x
0020DCr 2  75 02            adc $02,x
0020DEr 2  95 00            sta $00,x
0020E0r 2  B5 01            lda $01,x
0020E2r 2  75 03            adc $03,x
0020E4r 2  95 01            sta $01,x
0020E6r 2               
0020E6r 2               ; src/prelude.fth:41:15 in `cells`
0020E6r 2               @OPCODE_1707:   ; [c64_ir] InlineExit
0020E6r 2                   ; inline exit
0020E6r 2  68               pla
0020E7r 2  68               pla
0020E8r 2               
0020E8r 2               @target_484:
0020E8r 2               
0020E8r 2               ; snake.fth:45:9 in `snake-y`
0020E8r 2               @OPCODE_1709:   ; [c64_ir] PushLiteral(-27666)
0020E8r 2  E8               inx
0020E9r 2  E8               inx
0020EAr 2  A9 EE            lda #238
0020ECr 2  95 00            sta $00,x
0020EEr 2  A9 93            lda #147
0020F0r 2  95 01            sta $01,x
0020F2r 2               
0020F2r 2               ; snake.fth:45:22 in `snake-y`
0020F2r 2               @OPCODE_1710:   ; [c64_ir] Add
0020F2r 2                   ; 21
0020F2r 2  CA               dex
0020F3r 2  CA               dex
0020F4r 2  18               clc
0020F5r 2  B5 00            lda $00,x
0020F7r 2  75 02            adc $02,x
0020F9r 2  95 00            sta $00,x
0020FBr 2  B5 01            lda $01,x
0020FDr 2  75 03            adc $03,x
0020FFr 2  95 01            sta $01,x
002101r 2               
002101r 2               ; snake.fth:45:24 in `snake-y`
002101r 2               @OPCODE_1711:   ; [c64_ir] InlineExit
002101r 2                   ; inline exit
002101r 2  68               pla
002102r 2  68               pla
002103r 2               
002103r 2               @target_485:
002103r 2               
002103r 2               ; snake.fth:204:20 in `draw-snake-head-tail`
002103r 2               @OPCODE_1713:   ; [c64_ir] Load
002103r 2  A1 00            lda ($00,x)
002105r 2  95 00            sta $00,x
002107r 2  A9 00            lda #0
002109r 2  95 01            sta $01,x
00210Br 2               
00210Br 2               ; snake.fth:205:3 in `draw-snake-head-tail`
00210Br 2               @OPCODE_1714:   ; [c64_ir] InlineCall("draw-white")
00210Br 2                   ; inline call(draw-white)
00210Br 2  48               pha
00210Cr 2  48               pha
00210Dr 2               
00210Dr 2               @target_486:
00210Dr 2               
00210Dr 2               ; snake.fth:51:26 in `draw-white`
00210Dr 2               @OPCODE_1716:   ; [c64_ir] PushLiteral(32)
00210Dr 2  E8               inx
00210Er 2  E8               inx
00210Fr 2  A9 20            lda #32
002111r 2  95 00            sta $00,x
002113r 2  A9 00            lda #0
002115r 2  95 01            sta $01,x
002117r 2               
002117r 2               ; snake.fth:51:38 in `draw-white`
002117r 2               @OPCODE_1717:   ; [c64_ir] InlineCall("rot")
002117r 2                   ; inline call(rot)
002117r 2  48               pha
002118r 2  48               pha
002119r 2               
002119r 2               @target_487:
002119r 2               
002119r 2               ; src/prelude.fth:5:10 in `rot`
002119r 2               @OPCODE_1719:   ; [c64_ir] AltPush
002119r 2  CA               dex
00211Ar 2  CA               dex
00211Br 2  B5 03            lda $03,x
00211Dr 2  48               pha
00211Er 2  B5 02            lda $02,x
002120r 2  48               pha
002121r 2               
002121r 2               ; src/prelude.fth:5:13 in `rot`
002121r 2               @OPCODE_1720:   ; [c64_ir] InlineCall("swap")
002121r 2                   ; inline call(swap)
002121r 2  48               pha
002122r 2  48               pha
002123r 2               
002123r 2               @target_488:
002123r 2               
002123r 2               ; src/prelude.fth:3:10 in `swap`
002123r 2               @OPCODE_1722:   ; [c64_ir] AltPush
002123r 2  CA               dex
002124r 2  CA               dex
002125r 2  B5 03            lda $03,x
002127r 2  48               pha
002128r 2  B5 02            lda $02,x
00212Ar 2  48               pha
00212Br 2               
00212Br 2               ; src/prelude.fth:3:13 in `swap`
00212Br 2               @OPCODE_1723:   ; [c64_ir] TempStore
00212Br 2  CA               dex
00212Cr 2  CA               dex
00212Dr 2  B5 03            lda $03,x
00212Fr 2  85 96            sta TEMP_PAX2
002131r 2  B5 02            lda $02,x
002133r 2  85 95            sta TEMP_PAX1
002135r 2               
002135r 2               ; src/prelude.fth:3:19 in `swap`
002135r 2               @OPCODE_1724:   ; [c64_ir] AltPop
002135r 2  E8               inx
002136r 2  E8               inx
002137r 2  68               pla
002138r 2  95 00            sta $00,x
00213Ar 2  68               pla
00213Br 2  95 01            sta $01,x
00213Dr 2               
00213Dr 2               ; src/prelude.fth:3:22 in `swap`
00213Dr 2               @OPCODE_1725:   ; [c64_ir] TempLoad
00213Dr 2  E8               inx
00213Er 2  E8               inx
00213Fr 2  A5 95            lda TEMP_PAX1
002141r 2  95 00            sta $00,x
002143r 2  A5 96            lda TEMP_PAX2
002145r 2  95 01            sta $01,x
002147r 2               
002147r 2               ; src/prelude.fth:3:28 in `swap`
002147r 2               @OPCODE_1726:   ; [c64_ir] InlineExit
002147r 2                   ; inline exit
002147r 2  68               pla
002148r 2  68               pla
002149r 2               
002149r 2               @target_489:
002149r 2               
002149r 2               ; src/prelude.fth:5:18 in `rot`
002149r 2               @OPCODE_1728:   ; [c64_ir] AltPop
002149r 2  E8               inx
00214Ar 2  E8               inx
00214Br 2  68               pla
00214Cr 2  95 00            sta $00,x
00214Er 2  68               pla
00214Fr 2  95 01            sta $01,x
002151r 2               
002151r 2               ; src/prelude.fth:5:21 in `rot`
002151r 2               @OPCODE_1729:   ; [c64_ir] InlineCall("swap")
002151r 2                   ; inline call(swap)
002151r 2  48               pha
002152r 2  48               pha
002153r 2               
002153r 2               @target_490:
002153r 2               
002153r 2               ; src/prelude.fth:3:10 in `swap`
002153r 2               @OPCODE_1731:   ; [c64_ir] AltPush
002153r 2  CA               dex
002154r 2  CA               dex
002155r 2  B5 03            lda $03,x
002157r 2  48               pha
002158r 2  B5 02            lda $02,x
00215Ar 2  48               pha
00215Br 2               
00215Br 2               ; src/prelude.fth:3:13 in `swap`
00215Br 2               @OPCODE_1732:   ; [c64_ir] TempStore
00215Br 2  CA               dex
00215Cr 2  CA               dex
00215Dr 2  B5 03            lda $03,x
00215Fr 2  85 96            sta TEMP_PAX2
002161r 2  B5 02            lda $02,x
002163r 2  85 95            sta TEMP_PAX1
002165r 2               
002165r 2               ; src/prelude.fth:3:19 in `swap`
002165r 2               @OPCODE_1733:   ; [c64_ir] AltPop
002165r 2  E8               inx
002166r 2  E8               inx
002167r 2  68               pla
002168r 2  95 00            sta $00,x
00216Ar 2  68               pla
00216Br 2  95 01            sta $01,x
00216Dr 2               
00216Dr 2               ; src/prelude.fth:3:22 in `swap`
00216Dr 2               @OPCODE_1734:   ; [c64_ir] TempLoad
00216Dr 2  E8               inx
00216Er 2  E8               inx
00216Fr 2  A5 95            lda TEMP_PAX1
002171r 2  95 00            sta $00,x
002173r 2  A5 96            lda TEMP_PAX2
002175r 2  95 01            sta $01,x
002177r 2               
002177r 2               ; src/prelude.fth:3:28 in `swap`
002177r 2               @OPCODE_1735:   ; [c64_ir] InlineExit
002177r 2                   ; inline exit
002177r 2  68               pla
002178r 2  68               pla
002179r 2               
002179r 2               @target_491:
002179r 2               
002179r 2               ; src/prelude.fth:5:26 in `rot`
002179r 2               @OPCODE_1737:   ; [c64_ir] InlineExit
002179r 2                   ; inline exit
002179r 2  68               pla
00217Ar 2  68               pla
00217Br 2               
00217Br 2               @target_492:
00217Br 2               
00217Br 2               ; snake.fth:51:42 in `draw-white`
00217Br 2               @OPCODE_1739:   ; [c64_ir] InlineCall("rot")
00217Br 2                   ; inline call(rot)
00217Br 2  48               pha
00217Cr 2  48               pha
00217Dr 2               
00217Dr 2               @target_493:
00217Dr 2               
00217Dr 2               ; src/prelude.fth:5:10 in `rot`
00217Dr 2               @OPCODE_1741:   ; [c64_ir] AltPush
00217Dr 2  CA               dex
00217Er 2  CA               dex
00217Fr 2  B5 03            lda $03,x
002181r 2  48               pha
002182r 2  B5 02            lda $02,x
002184r 2  48               pha
002185r 2               
002185r 2               ; src/prelude.fth:5:13 in `rot`
002185r 2               @OPCODE_1742:   ; [c64_ir] InlineCall("swap")
002185r 2                   ; inline call(swap)
002185r 2  48               pha
002186r 2  48               pha
002187r 2               
002187r 2               @target_494:
002187r 2               
002187r 2               ; src/prelude.fth:3:10 in `swap`
002187r 2               @OPCODE_1744:   ; [c64_ir] AltPush
002187r 2  CA               dex
002188r 2  CA               dex
002189r 2  B5 03            lda $03,x
00218Br 2  48               pha
00218Cr 2  B5 02            lda $02,x
00218Er 2  48               pha
00218Fr 2               
00218Fr 2               ; src/prelude.fth:3:13 in `swap`
00218Fr 2               @OPCODE_1745:   ; [c64_ir] TempStore
00218Fr 2  CA               dex
002190r 2  CA               dex
002191r 2  B5 03            lda $03,x
002193r 2  85 96            sta TEMP_PAX2
002195r 2  B5 02            lda $02,x
002197r 2  85 95            sta TEMP_PAX1
002199r 2               
002199r 2               ; src/prelude.fth:3:19 in `swap`
002199r 2               @OPCODE_1746:   ; [c64_ir] AltPop
002199r 2  E8               inx
00219Ar 2  E8               inx
00219Br 2  68               pla
00219Cr 2  95 00            sta $00,x
00219Er 2  68               pla
00219Fr 2  95 01            sta $01,x
0021A1r 2               
0021A1r 2               ; src/prelude.fth:3:22 in `swap`
0021A1r 2               @OPCODE_1747:   ; [c64_ir] TempLoad
0021A1r 2  E8               inx
0021A2r 2  E8               inx
0021A3r 2  A5 95            lda TEMP_PAX1
0021A5r 2  95 00            sta $00,x
0021A7r 2  A5 96            lda TEMP_PAX2
0021A9r 2  95 01            sta $01,x
0021ABr 2               
0021ABr 2               ; src/prelude.fth:3:28 in `swap`
0021ABr 2               @OPCODE_1748:   ; [c64_ir] InlineExit
0021ABr 2                   ; inline exit
0021ABr 2  68               pla
0021ACr 2  68               pla
0021ADr 2               
0021ADr 2               @target_495:
0021ADr 2               
0021ADr 2               ; src/prelude.fth:5:18 in `rot`
0021ADr 2               @OPCODE_1750:   ; [c64_ir] AltPop
0021ADr 2  E8               inx
0021AEr 2  E8               inx
0021AFr 2  68               pla
0021B0r 2  95 00            sta $00,x
0021B2r 2  68               pla
0021B3r 2  95 01            sta $01,x
0021B5r 2               
0021B5r 2               ; src/prelude.fth:5:21 in `rot`
0021B5r 2               @OPCODE_1751:   ; [c64_ir] InlineCall("swap")
0021B5r 2                   ; inline call(swap)
0021B5r 2  48               pha
0021B6r 2  48               pha
0021B7r 2               
0021B7r 2               @target_496:
0021B7r 2               
0021B7r 2               ; src/prelude.fth:3:10 in `swap`
0021B7r 2               @OPCODE_1753:   ; [c64_ir] AltPush
0021B7r 2  CA               dex
0021B8r 2  CA               dex
0021B9r 2  B5 03            lda $03,x
0021BBr 2  48               pha
0021BCr 2  B5 02            lda $02,x
0021BEr 2  48               pha
0021BFr 2               
0021BFr 2               ; src/prelude.fth:3:13 in `swap`
0021BFr 2               @OPCODE_1754:   ; [c64_ir] TempStore
0021BFr 2  CA               dex
0021C0r 2  CA               dex
0021C1r 2  B5 03            lda $03,x
0021C3r 2  85 96            sta TEMP_PAX2
0021C5r 2  B5 02            lda $02,x
0021C7r 2  85 95            sta TEMP_PAX1
0021C9r 2               
0021C9r 2               ; src/prelude.fth:3:19 in `swap`
0021C9r 2               @OPCODE_1755:   ; [c64_ir] AltPop
0021C9r 2  E8               inx
0021CAr 2  E8               inx
0021CBr 2  68               pla
0021CCr 2  95 00            sta $00,x
0021CEr 2  68               pla
0021CFr 2  95 01            sta $01,x
0021D1r 2               
0021D1r 2               ; src/prelude.fth:3:22 in `swap`
0021D1r 2               @OPCODE_1756:   ; [c64_ir] TempLoad
0021D1r 2  E8               inx
0021D2r 2  E8               inx
0021D3r 2  A5 95            lda TEMP_PAX1
0021D5r 2  95 00            sta $00,x
0021D7r 2  A5 96            lda TEMP_PAX2
0021D9r 2  95 01            sta $01,x
0021DBr 2               
0021DBr 2               ; src/prelude.fth:3:28 in `swap`
0021DBr 2               @OPCODE_1757:   ; [c64_ir] InlineExit
0021DBr 2                   ; inline exit
0021DBr 2  68               pla
0021DCr 2  68               pla
0021DDr 2               
0021DDr 2               @target_497:
0021DDr 2               
0021DDr 2               ; src/prelude.fth:5:26 in `rot`
0021DDr 2               @OPCODE_1759:   ; [c64_ir] InlineExit
0021DDr 2                   ; inline exit
0021DDr 2  68               pla
0021DEr 2  68               pla
0021DFr 2               
0021DFr 2               @target_498:
0021DFr 2               
0021DFr 2               ; snake.fth:51:46 in `draw-white`
0021DFr 2               @OPCODE_1761:   ; [c64_ir] InlineCall("draw")
0021DFr 2                   ; inline call(draw)
0021DFr 2  48               pha
0021E0r 2  48               pha
0021E1r 2               
0021E1r 2               @target_499:
0021E1r 2               
0021E1r 2               ; snake.fth:50:26 in `draw`
0021E1r 2               @OPCODE_1763:   ; [c64_ir] InlineCall("convert-x-y")
0021E1r 2                   ; inline call(convert-x-y)
0021E1r 2  48               pha
0021E2r 2  48               pha
0021E3r 2               
0021E3r 2               @target_500:
0021E3r 2               
0021E3r 2               ; snake.fth:48:34 in `convert-x-y`
0021E3r 2               @OPCODE_1765:   ; [c64_ir] PushLiteral(40)
0021E3r 2  E8               inx
0021E4r 2  E8               inx
0021E5r 2  A9 28            lda #40
0021E7r 2  95 00            sta $00,x
0021E9r 2  A9 00            lda #0
0021EBr 2  95 01            sta $01,x
0021EDr 2               
0021EDr 2               ; snake.fth:48:37 in `convert-x-y`
0021EDr 2               @OPCODE_1766:   ; [c64_ir] InlineCall("*")
0021EDr 2                   ; inline call(*)
0021EDr 2  48               pha
0021EEr 2  48               pha
0021EFr 2               
0021EFr 2               @target_501:
0021EFr 2               
0021EFr 2               ; src/prelude.fth:44:5 in `*`
0021EFr 2               @OPCODE_1768:   ; [c64_ir] AltPush
0021EFr 2  CA               dex
0021F0r 2  CA               dex
0021F1r 2  B5 03            lda $03,x
0021F3r 2  48               pha
0021F4r 2  B5 02            lda $02,x
0021F6r 2  48               pha
0021F7r 2               
0021F7r 2               ; src/prelude.fth:44:8 in `*`
0021F7r 2               @OPCODE_1769:   ; [c64_ir] PushLiteral(0)
0021F7r 2  E8               inx
0021F8r 2  E8               inx
0021F9r 2  A9 00            lda #0
0021FBr 2  95 00            sta $00,x
0021FDr 2  A9 00            lda #0
0021FFr 2  95 01            sta $01,x
002201r 2               
002201r 2               ; src/prelude.fth:44:10 in `*`
002201r 2               @OPCODE_1770:   ; [c64_ir] AltPop
002201r 2  E8               inx
002202r 2  E8               inx
002203r 2  68               pla
002204r 2  95 00            sta $00,x
002206r 2  68               pla
002207r 2  95 01            sta $01,x
002209r 2               
002209r 2               ; src/prelude.fth:44:13 in `*`
002209r 2               @OPCODE_1771:   ; [c64_ir] PushLiteral(0)
002209r 2  E8               inx
00220Ar 2  E8               inx
00220Br 2  A9 00            lda #0
00220Dr 2  95 00            sta $00,x
00220Fr 2  A9 00            lda #0
002211r 2  95 01            sta $01,x
002213r 2               
002213r 2               ; src/prelude.fth:44:15 in `*`
002213r 2               @OPCODE_1772:   ; [c64_ir] AltPush
002213r 2  CA               dex
002214r 2  CA               dex
002215r 2  B5 03            lda $03,x
002217r 2  48               pha
002218r 2  B5 02            lda $02,x
00221Ar 2  48               pha
00221Br 2               
00221Br 2               ; src/prelude.fth:44:15 in `*`
00221Br 2               @OPCODE_1773:   ; [c64_ir] AltPush
00221Br 2  CA               dex
00221Cr 2  CA               dex
00221Dr 2  B5 03            lda $03,x
00221Fr 2  48               pha
002220r 2  B5 02            lda $02,x
002222r 2  48               pha
002223r 2               
002223r 2               ; src/prelude.fth:44:15 in `*`
002223r 2               @OPCODE_1774:   ; [c64_ir] LoopTarget(501)
002223r 2               
002223r 2               @target_502:
002223r 2               
002223r 2               ; src/prelude.fth:44:18 in `*`
002223r 2               @OPCODE_1776:   ; [c64_ir] InlineCall("over")
002223r 2                   ; inline call(over)
002223r 2  48               pha
002224r 2  48               pha
002225r 2               
002225r 2               @target_503:
002225r 2               
002225r 2               ; src/prelude.fth:4:10 in `over`
002225r 2               @OPCODE_1778:   ; [c64_ir] AltPush
002225r 2  CA               dex
002226r 2  CA               dex
002227r 2  B5 03            lda $03,x
002229r 2  48               pha
00222Ar 2  B5 02            lda $02,x
00222Cr 2  48               pha
00222Dr 2               
00222Dr 2               ; src/prelude.fth:4:13 in `over`
00222Dr 2               @OPCODE_1779:   ; [c64_ir] TempStore
00222Dr 2  CA               dex
00222Er 2  CA               dex
00222Fr 2  B5 03            lda $03,x
002231r 2  85 96            sta TEMP_PAX2
002233r 2  B5 02            lda $02,x
002235r 2  85 95            sta TEMP_PAX1
002237r 2               
002237r 2               ; src/prelude.fth:4:19 in `over`
002237r 2               @OPCODE_1780:   ; [c64_ir] TempLoad
002237r 2  E8               inx
002238r 2  E8               inx
002239r 2  A5 95            lda TEMP_PAX1
00223Br 2  95 00            sta $00,x
00223Dr 2  A5 96            lda TEMP_PAX2
00223Fr 2  95 01            sta $01,x
002241r 2               
002241r 2               ; src/prelude.fth:4:25 in `over`
002241r 2               @OPCODE_1781:   ; [c64_ir] AltPop
002241r 2  E8               inx
002242r 2  E8               inx
002243r 2  68               pla
002244r 2  95 00            sta $00,x
002246r 2  68               pla
002247r 2  95 01            sta $01,x
002249r 2               
002249r 2               ; src/prelude.fth:4:28 in `over`
002249r 2               @OPCODE_1782:   ; [c64_ir] TempLoad
002249r 2  E8               inx
00224Ar 2  E8               inx
00224Br 2  A5 95            lda TEMP_PAX1
00224Dr 2  95 00            sta $00,x
00224Fr 2  A5 96            lda TEMP_PAX2
002251r 2  95 01            sta $01,x
002253r 2               
002253r 2               ; src/prelude.fth:4:34 in `over`
002253r 2               @OPCODE_1783:   ; [c64_ir] InlineExit
002253r 2                   ; inline exit
002253r 2  68               pla
002254r 2  68               pla
002255r 2               
002255r 2               @target_504:
002255r 2               
002255r 2               ; src/prelude.fth:44:23 in `*`
002255r 2               @OPCODE_1785:   ; [c64_ir] Add
002255r 2                   ; 21
002255r 2  CA               dex
002256r 2  CA               dex
002257r 2  18               clc
002258r 2  B5 00            lda $00,x
00225Ar 2  75 02            adc $02,x
00225Cr 2  95 00            sta $00,x
00225Er 2  B5 01            lda $01,x
002260r 2  75 03            adc $03,x
002262r 2  95 01            sta $01,x
002264r 2               
002264r 2               ; src/prelude.fth:44:25 in `*`
002264r 2               @OPCODE_1786:   ; [c64_ir] InlineCall("loopimpl")
002264r 2                   ; inline call(loopimpl)
002264r 2  48               pha
002265r 2  48               pha
002266r 2               
002266r 2               @target_505:
002266r 2               
002266r 2               ; src/prelude.fth:33:12 in `loopimpl`
002266r 2               @OPCODE_1788:   ; [c64_ir] AltPop
002266r 2  E8               inx
002267r 2  E8               inx
002268r 2  68               pla
002269r 2  95 00            sta $00,x
00226Br 2  68               pla
00226Cr 2  95 01            sta $01,x
00226Er 2               
00226Er 2               ; src/prelude.fth:33:15 in `loopimpl`
00226Er 2               @OPCODE_1789:   ; [c64_ir] AltPop
00226Er 2  E8               inx
00226Fr 2  E8               inx
002270r 2  68               pla
002271r 2  95 00            sta $00,x
002273r 2  68               pla
002274r 2  95 01            sta $01,x
002276r 2               
002276r 2               ; src/prelude.fth:33:18 in `loopimpl`
002276r 2               @OPCODE_1790:   ; [c64_ir] AltPop
002276r 2  E8               inx
002277r 2  E8               inx
002278r 2  68               pla
002279r 2  95 00            sta $00,x
00227Br 2  68               pla
00227Cr 2  95 01            sta $01,x
00227Er 2               
00227Er 2               ; src/prelude.fth:33:21 in `loopimpl`
00227Er 2               @OPCODE_1791:   ; [c64_ir] InlineCall("1+")
00227Er 2                   ; inline call(1+)
00227Er 2  48               pha
00227Fr 2  48               pha
002280r 2               
002280r 2               @target_506:
002280r 2               
002280r 2               ; src/prelude.fth:18:8 in `1+`
002280r 2               @OPCODE_1793:   ; [c64_ir] PushLiteral(1)
002280r 2  E8               inx
002281r 2  E8               inx
002282r 2  A9 01            lda #1
002284r 2  95 00            sta $00,x
002286r 2  A9 00            lda #0
002288r 2  95 01            sta $01,x
00228Ar 2               
00228Ar 2               ; src/prelude.fth:18:10 in `1+`
00228Ar 2               @OPCODE_1794:   ; [c64_ir] Add
00228Ar 2                   ; 21
00228Ar 2  CA               dex
00228Br 2  CA               dex
00228Cr 2  18               clc
00228Dr 2  B5 00            lda $00,x
00228Fr 2  75 02            adc $02,x
002291r 2  95 00            sta $00,x
002293r 2  B5 01            lda $01,x
002295r 2  75 03            adc $03,x
002297r 2  95 01            sta $01,x
002299r 2               
002299r 2               ; src/prelude.fth:18:12 in `1+`
002299r 2               @OPCODE_1795:   ; [c64_ir] InlineExit
002299r 2                   ; inline exit
002299r 2  68               pla
00229Ar 2  68               pla
00229Br 2               
00229Br 2               @target_507:
00229Br 2               
00229Br 2               ; src/prelude.fth:33:24 in `loopimpl`
00229Br 2               @OPCODE_1797:   ; [c64_ir] InlineCall("2dup")
00229Br 2                   ; inline call(2dup)
00229Br 2  48               pha
00229Cr 2  48               pha
00229Dr 2               
00229Dr 2               @target_508:
00229Dr 2               
00229Dr 2               ; src/prelude.fth:8:10 in `2dup`
00229Dr 2               @OPCODE_1799:   ; [c64_ir] InlineCall("over")
00229Dr 2                   ; inline call(over)
00229Dr 2  48               pha
00229Er 2  48               pha
00229Fr 2               
00229Fr 2               @target_509:
00229Fr 2               
00229Fr 2               ; src/prelude.fth:4:10 in `over`
00229Fr 2               @OPCODE_1801:   ; [c64_ir] AltPush
00229Fr 2  CA               dex
0022A0r 2  CA               dex
0022A1r 2  B5 03            lda $03,x
0022A3r 2  48               pha
0022A4r 2  B5 02            lda $02,x
0022A6r 2  48               pha
0022A7r 2               
0022A7r 2               ; src/prelude.fth:4:13 in `over`
0022A7r 2               @OPCODE_1802:   ; [c64_ir] TempStore
0022A7r 2  CA               dex
0022A8r 2  CA               dex
0022A9r 2  B5 03            lda $03,x
0022ABr 2  85 96            sta TEMP_PAX2
0022ADr 2  B5 02            lda $02,x
0022AFr 2  85 95            sta TEMP_PAX1
0022B1r 2               
0022B1r 2               ; src/prelude.fth:4:19 in `over`
0022B1r 2               @OPCODE_1803:   ; [c64_ir] TempLoad
0022B1r 2  E8               inx
0022B2r 2  E8               inx
0022B3r 2  A5 95            lda TEMP_PAX1
0022B5r 2  95 00            sta $00,x
0022B7r 2  A5 96            lda TEMP_PAX2
0022B9r 2  95 01            sta $01,x
0022BBr 2               
0022BBr 2               ; src/prelude.fth:4:25 in `over`
0022BBr 2               @OPCODE_1804:   ; [c64_ir] AltPop
0022BBr 2  E8               inx
0022BCr 2  E8               inx
0022BDr 2  68               pla
0022BEr 2  95 00            sta $00,x
0022C0r 2  68               pla
0022C1r 2  95 01            sta $01,x
0022C3r 2               
0022C3r 2               ; src/prelude.fth:4:28 in `over`
0022C3r 2               @OPCODE_1805:   ; [c64_ir] TempLoad
0022C3r 2  E8               inx
0022C4r 2  E8               inx
0022C5r 2  A5 95            lda TEMP_PAX1
0022C7r 2  95 00            sta $00,x
0022C9r 2  A5 96            lda TEMP_PAX2
0022CBr 2  95 01            sta $01,x
0022CDr 2               
0022CDr 2               ; src/prelude.fth:4:34 in `over`
0022CDr 2               @OPCODE_1806:   ; [c64_ir] InlineExit
0022CDr 2                   ; inline exit
0022CDr 2  68               pla
0022CEr 2  68               pla
0022CFr 2               
0022CFr 2               @target_510:
0022CFr 2               
0022CFr 2               ; src/prelude.fth:8:15 in `2dup`
0022CFr 2               @OPCODE_1808:   ; [c64_ir] InlineCall("over")
0022CFr 2                   ; inline call(over)
0022CFr 2  48               pha
0022D0r 2  48               pha
0022D1r 2               
0022D1r 2               @target_511:
0022D1r 2               
0022D1r 2               ; src/prelude.fth:4:10 in `over`
0022D1r 2               @OPCODE_1810:   ; [c64_ir] AltPush
0022D1r 2  CA               dex
0022D2r 2  CA               dex
0022D3r 2  B5 03            lda $03,x
0022D5r 2  48               pha
0022D6r 2  B5 02            lda $02,x
0022D8r 2  48               pha
0022D9r 2               
0022D9r 2               ; src/prelude.fth:4:13 in `over`
0022D9r 2               @OPCODE_1811:   ; [c64_ir] TempStore
0022D9r 2  CA               dex
0022DAr 2  CA               dex
0022DBr 2  B5 03            lda $03,x
0022DDr 2  85 96            sta TEMP_PAX2
0022DFr 2  B5 02            lda $02,x
0022E1r 2  85 95            sta TEMP_PAX1
0022E3r 2               
0022E3r 2               ; src/prelude.fth:4:19 in `over`
0022E3r 2               @OPCODE_1812:   ; [c64_ir] TempLoad
0022E3r 2  E8               inx
0022E4r 2  E8               inx
0022E5r 2  A5 95            lda TEMP_PAX1
0022E7r 2  95 00            sta $00,x
0022E9r 2  A5 96            lda TEMP_PAX2
0022EBr 2  95 01            sta $01,x
0022EDr 2               
0022EDr 2               ; src/prelude.fth:4:25 in `over`
0022EDr 2               @OPCODE_1813:   ; [c64_ir] AltPop
0022EDr 2  E8               inx
0022EEr 2  E8               inx
0022EFr 2  68               pla
0022F0r 2  95 00            sta $00,x
0022F2r 2  68               pla
0022F3r 2  95 01            sta $01,x
0022F5r 2               
0022F5r 2               ; src/prelude.fth:4:28 in `over`
0022F5r 2               @OPCODE_1814:   ; [c64_ir] TempLoad
0022F5r 2  E8               inx
0022F6r 2  E8               inx
0022F7r 2  A5 95            lda TEMP_PAX1
0022F9r 2  95 00            sta $00,x
0022FBr 2  A5 96            lda TEMP_PAX2
0022FDr 2  95 01            sta $01,x
0022FFr 2               
0022FFr 2               ; src/prelude.fth:4:34 in `over`
0022FFr 2               @OPCODE_1815:   ; [c64_ir] InlineExit
0022FFr 2                   ; inline exit
0022FFr 2  68               pla
002300r 2  68               pla
002301r 2               
002301r 2               @target_512:
002301r 2               
002301r 2               ; src/prelude.fth:8:20 in `2dup`
002301r 2               @OPCODE_1817:   ; [c64_ir] InlineExit
002301r 2                   ; inline exit
002301r 2  68               pla
002302r 2  68               pla
002303r 2               
002303r 2               @target_513:
002303r 2               
002303r 2               ; src/prelude.fth:33:29 in `loopimpl`
002303r 2               @OPCODE_1819:   ; [c64_ir] AltPush
002303r 2  CA               dex
002304r 2  CA               dex
002305r 2  B5 03            lda $03,x
002307r 2  48               pha
002308r 2  B5 02            lda $02,x
00230Ar 2  48               pha
00230Br 2               
00230Br 2               ; src/prelude.fth:33:32 in `loopimpl`
00230Br 2               @OPCODE_1820:   ; [c64_ir] AltPush
00230Br 2  CA               dex
00230Cr 2  CA               dex
00230Dr 2  B5 03            lda $03,x
00230Fr 2  48               pha
002310r 2  B5 02            lda $02,x
002312r 2  48               pha
002313r 2               
002313r 2               ; src/prelude.fth:33:35 in `loopimpl`
002313r 2               @OPCODE_1821:   ; [c64_ir] InlineCall("=")
002313r 2                   ; inline call(=)
002313r 2  48               pha
002314r 2  48               pha
002315r 2               
002315r 2               @target_514:
002315r 2               
002315r 2               ; src/prelude.fth:22:8 in `=`
002315r 2               @OPCODE_1823:   ; [c64_ir] InlineCall("-")
002315r 2                   ; inline call(-)
002315r 2  48               pha
002316r 2  48               pha
002317r 2               
002317r 2               @target_515:
002317r 2               
002317r 2               ; src/prelude.fth:16:12 in `-`
002317r 2               @OPCODE_1825:   ; [c64_ir] InlineCall("negate")
002317r 2                   ; inline call(negate)
002317r 2  48               pha
002318r 2  48               pha
002319r 2               
002319r 2               @target_516:
002319r 2               
002319r 2               ; src/prelude.fth:15:12 in `negate`
002319r 2               @OPCODE_1827:   ; [c64_ir] InlineCall("invert")
002319r 2                   ; inline call(invert)
002319r 2  48               pha
00231Ar 2  48               pha
00231Br 2               
00231Br 2               @target_517:
00231Br 2               
00231Br 2               ; src/prelude.fth:14:12 in `invert`
00231Br 2               @OPCODE_1829:   ; [c64_ir] PushLiteral(-1)
00231Br 2  E8               inx
00231Cr 2  E8               inx
00231Dr 2  A9 FF            lda #255
00231Fr 2  95 00            sta $00,x
002321r 2  A9 FF            lda #255
002323r 2  95 01            sta $01,x
002325r 2               
002325r 2               ; src/prelude.fth:14:15 in `invert`
002325r 2               @OPCODE_1830:   ; [c64_ir] Nand
002325r 2                   ; 26
002325r 2  CA               dex
002326r 2  CA               dex
002327r 2  B5 00            lda $00,x
002329r 2  35 02            and $02,x
00232Br 2  49 FF            eor #$ff
00232Dr 2  95 00            sta $00,x
00232Fr 2  B5 01            lda $01,x
002331r 2  35 03            and $03,x
002333r 2  49 FF            eor #$ff
002335r 2  95 01            sta $01,x
002337r 2               
002337r 2               ; src/prelude.fth:14:20 in `invert`
002337r 2               @OPCODE_1831:   ; [c64_ir] InlineExit
002337r 2                   ; inline exit
002337r 2  68               pla
002338r 2  68               pla
002339r 2               
002339r 2               @target_518:
002339r 2               
002339r 2               ; src/prelude.fth:15:19 in `negate`
002339r 2               @OPCODE_1833:   ; [c64_ir] PushLiteral(1)
002339r 2  E8               inx
00233Ar 2  E8               inx
00233Br 2  A9 01            lda #1
00233Dr 2  95 00            sta $00,x
00233Fr 2  A9 00            lda #0
002341r 2  95 01            sta $01,x
002343r 2               
002343r 2               ; src/prelude.fth:15:21 in `negate`
002343r 2               @OPCODE_1834:   ; [c64_ir] Add
002343r 2                   ; 21
002343r 2  CA               dex
002344r 2  CA               dex
002345r 2  18               clc
002346r 2  B5 00            lda $00,x
002348r 2  75 02            adc $02,x
00234Ar 2  95 00            sta $00,x
00234Cr 2  B5 01            lda $01,x
00234Er 2  75 03            adc $03,x
002350r 2  95 01            sta $01,x
002352r 2               
002352r 2               ; src/prelude.fth:15:23 in `negate`
002352r 2               @OPCODE_1835:   ; [c64_ir] InlineExit
002352r 2                   ; inline exit
002352r 2  68               pla
002353r 2  68               pla
002354r 2               
002354r 2               @target_519:
002354r 2               
002354r 2               ; src/prelude.fth:16:19 in `-`
002354r 2               @OPCODE_1837:   ; [c64_ir] Add
002354r 2                   ; 21
002354r 2  CA               dex
002355r 2  CA               dex
002356r 2  18               clc
002357r 2  B5 00            lda $00,x
002359r 2  75 02            adc $02,x
00235Br 2  95 00            sta $00,x
00235Dr 2  B5 01            lda $01,x
00235Fr 2  75 03            adc $03,x
002361r 2  95 01            sta $01,x
002363r 2               
002363r 2               ; src/prelude.fth:16:21 in `-`
002363r 2               @OPCODE_1838:   ; [c64_ir] InlineExit
002363r 2                   ; inline exit
002363r 2  68               pla
002364r 2  68               pla
002365r 2               
002365r 2               @target_520:
002365r 2               
002365r 2               ; src/prelude.fth:22:10 in `=`
002365r 2               @OPCODE_1840:   ; [c64_ir] InlineCall("0=")
002365r 2                   ; inline call(0=)
002365r 2  48               pha
002366r 2  48               pha
002367r 2               
002367r 2               @target_521:
002367r 2               
002367r 2               ; src/prelude.fth:21:8 in `0=`
002367r 2               @OPCODE_1842:   ; [c64_ir] JumpIf0(523)
002367r 2  CA               dex
002368r 2  CA               dex
002369r 2  B5 02            lda $02,x
00236Br 2  15 03            ora $03,x
00236Dr 2  D0 03            bne *+5
00236Fr 2  4C rr rr         jmp @target_523
002372r 2               
002372r 2               @target_522:
002372r 2               
002372r 2               ; src/prelude.fth:21:11 in `0=`
002372r 2               @OPCODE_1844:   ; [c64_ir] PushLiteral(0)
002372r 2  E8               inx
002373r 2  E8               inx
002374r 2  A9 00            lda #0
002376r 2  95 00            sta $00,x
002378r 2  A9 00            lda #0
00237Ar 2  95 01            sta $01,x
00237Cr 2               
00237Cr 2               ; src/prelude.fth:21:13 in `0=`
00237Cr 2               @OPCODE_1845:   ; [c64_ir] JumpElse(524)
00237Cr 2  4C rr rr         jmp @target_524
00237Fr 2               
00237Fr 2               @target_523:
00237Fr 2               
00237Fr 2               ; src/prelude.fth:21:18 in `0=`
00237Fr 2               @OPCODE_1847:   ; [c64_ir] PushLiteral(-1)
00237Fr 2  E8               inx
002380r 2  E8               inx
002381r 2  A9 FF            lda #255
002383r 2  95 00            sta $00,x
002385r 2  A9 FF            lda #255
002387r 2  95 01            sta $01,x
002389r 2               
002389r 2               ; src/prelude.fth:21:21 in `0=`
002389r 2               @OPCODE_1848:   ; [c64_ir] JumpTarget(523)
002389r 2               
002389r 2               @target_524:
002389r 2               
002389r 2               ; src/prelude.fth:21:26 in `0=`
002389r 2               @OPCODE_1850:   ; [c64_ir] InlineExit
002389r 2                   ; inline exit
002389r 2  68               pla
00238Ar 2  68               pla
00238Br 2               
00238Br 2               @target_525:
00238Br 2               
00238Br 2               ; src/prelude.fth:22:13 in `=`
00238Br 2               @OPCODE_1852:   ; [c64_ir] InlineExit
00238Br 2                   ; inline exit
00238Br 2  68               pla
00238Cr 2  68               pla
00238Dr 2               
00238Dr 2               @target_526:
00238Dr 2               
00238Dr 2               ; src/prelude.fth:33:37 in `loopimpl`
00238Dr 2               @OPCODE_1854:   ; [c64_ir] InlineCall("swap")
00238Dr 2                   ; inline call(swap)
00238Dr 2  48               pha
00238Er 2  48               pha
00238Fr 2               
00238Fr 2               @target_527:
00238Fr 2               
00238Fr 2               ; src/prelude.fth:3:10 in `swap`
00238Fr 2               @OPCODE_1856:   ; [c64_ir] AltPush
00238Fr 2  CA               dex
002390r 2  CA               dex
002391r 2  B5 03            lda $03,x
002393r 2  48               pha
002394r 2  B5 02            lda $02,x
002396r 2  48               pha
002397r 2               
002397r 2               ; src/prelude.fth:3:13 in `swap`
002397r 2               @OPCODE_1857:   ; [c64_ir] TempStore
002397r 2  CA               dex
002398r 2  CA               dex
002399r 2  B5 03            lda $03,x
00239Br 2  85 96            sta TEMP_PAX2
00239Dr 2  B5 02            lda $02,x
00239Fr 2  85 95            sta TEMP_PAX1
0023A1r 2               
0023A1r 2               ; src/prelude.fth:3:19 in `swap`
0023A1r 2               @OPCODE_1858:   ; [c64_ir] AltPop
0023A1r 2  E8               inx
0023A2r 2  E8               inx
0023A3r 2  68               pla
0023A4r 2  95 00            sta $00,x
0023A6r 2  68               pla
0023A7r 2  95 01            sta $01,x
0023A9r 2               
0023A9r 2               ; src/prelude.fth:3:22 in `swap`
0023A9r 2               @OPCODE_1859:   ; [c64_ir] TempLoad
0023A9r 2  E8               inx
0023AAr 2  E8               inx
0023ABr 2  A5 95            lda TEMP_PAX1
0023ADr 2  95 00            sta $00,x
0023AFr 2  A5 96            lda TEMP_PAX2
0023B1r 2  95 01            sta $01,x
0023B3r 2               
0023B3r 2               ; src/prelude.fth:3:28 in `swap`
0023B3r 2               @OPCODE_1860:   ; [c64_ir] InlineExit
0023B3r 2                   ; inline exit
0023B3r 2  68               pla
0023B4r 2  68               pla
0023B5r 2               
0023B5r 2               @target_528:
0023B5r 2               
0023B5r 2               ; src/prelude.fth:33:42 in `loopimpl`
0023B5r 2               @OPCODE_1862:   ; [c64_ir] AltPush
0023B5r 2  CA               dex
0023B6r 2  CA               dex
0023B7r 2  B5 03            lda $03,x
0023B9r 2  48               pha
0023BAr 2  B5 02            lda $02,x
0023BCr 2  48               pha
0023BDr 2               
0023BDr 2               ; src/prelude.fth:33:45 in `loopimpl`
0023BDr 2               @OPCODE_1863:   ; [c64_ir] InlineExit
0023BDr 2                   ; inline exit
0023BDr 2  68               pla
0023BEr 2  68               pla
0023BFr 2               
0023BFr 2               @target_529:
0023BFr 2               
0023BFr 2               ; src/prelude.fth:44:25 in `*`
0023BFr 2               @OPCODE_1865:   ; [c64_ir] LoopIf0(502)
0023BFr 2  CA               dex
0023C0r 2  CA               dex
0023C1r 2  B5 02            lda $02,x
0023C3r 2  15 03            ora $03,x
0023C5r 2  D0 03            bne *+5
0023C7r 2  4C rr rr         jmp @target_502
0023CAr 2               
0023CAr 2               @target_530:
0023CAr 2               
0023CAr 2               ; src/prelude.fth:44:25 in `*`
0023CAr 2               @OPCODE_1867:   ; [c64_ir] AltPop
0023CAr 2  E8               inx
0023CBr 2  E8               inx
0023CCr 2  68               pla
0023CDr 2  95 00            sta $00,x
0023CFr 2  68               pla
0023D0r 2  95 01            sta $01,x
0023D2r 2               
0023D2r 2               ; src/prelude.fth:44:25 in `*`
0023D2r 2               @OPCODE_1868:   ; [c64_ir] Drop
0023D2r 2  CA               dex
0023D3r 2  CA               dex
0023D4r 2               
0023D4r 2               ; src/prelude.fth:44:25 in `*`
0023D4r 2               @OPCODE_1869:   ; [c64_ir] AltPop
0023D4r 2  E8               inx
0023D5r 2  E8               inx
0023D6r 2  68               pla
0023D7r 2  95 00            sta $00,x
0023D9r 2  68               pla
0023DAr 2  95 01            sta $01,x
0023DCr 2               
0023DCr 2               ; src/prelude.fth:44:25 in `*`
0023DCr 2               @OPCODE_1870:   ; [c64_ir] Drop
0023DCr 2  CA               dex
0023DDr 2  CA               dex
0023DEr 2               
0023DEr 2               ; src/prelude.fth:44:30 in `*`
0023DEr 2               @OPCODE_1871:   ; [c64_ir] InlineCall("swap")
0023DEr 2                   ; inline call(swap)
0023DEr 2  48               pha
0023DFr 2  48               pha
0023E0r 2               
0023E0r 2               @target_531:
0023E0r 2               
0023E0r 2               ; src/prelude.fth:3:10 in `swap`
0023E0r 2               @OPCODE_1873:   ; [c64_ir] AltPush
0023E0r 2  CA               dex
0023E1r 2  CA               dex
0023E2r 2  B5 03            lda $03,x
0023E4r 2  48               pha
0023E5r 2  B5 02            lda $02,x
0023E7r 2  48               pha
0023E8r 2               
0023E8r 2               ; src/prelude.fth:3:13 in `swap`
0023E8r 2               @OPCODE_1874:   ; [c64_ir] TempStore
0023E8r 2  CA               dex
0023E9r 2  CA               dex
0023EAr 2  B5 03            lda $03,x
0023ECr 2  85 96            sta TEMP_PAX2
0023EEr 2  B5 02            lda $02,x
0023F0r 2  85 95            sta TEMP_PAX1
0023F2r 2               
0023F2r 2               ; src/prelude.fth:3:19 in `swap`
0023F2r 2               @OPCODE_1875:   ; [c64_ir] AltPop
0023F2r 2  E8               inx
0023F3r 2  E8               inx
0023F4r 2  68               pla
0023F5r 2  95 00            sta $00,x
0023F7r 2  68               pla
0023F8r 2  95 01            sta $01,x
0023FAr 2               
0023FAr 2               ; src/prelude.fth:3:22 in `swap`
0023FAr 2               @OPCODE_1876:   ; [c64_ir] TempLoad
0023FAr 2  E8               inx
0023FBr 2  E8               inx
0023FCr 2  A5 95            lda TEMP_PAX1
0023FEr 2  95 00            sta $00,x
002400r 2  A5 96            lda TEMP_PAX2
002402r 2  95 01            sta $01,x
002404r 2               
002404r 2               ; src/prelude.fth:3:28 in `swap`
002404r 2               @OPCODE_1877:   ; [c64_ir] InlineExit
002404r 2                   ; inline exit
002404r 2  68               pla
002405r 2  68               pla
002406r 2               
002406r 2               @target_532:
002406r 2               
002406r 2               ; src/prelude.fth:44:35 in `*`
002406r 2               @OPCODE_1879:   ; [c64_ir] Drop
002406r 2  CA               dex
002407r 2  CA               dex
002408r 2               
002408r 2               ; src/prelude.fth:44:40 in `*`
002408r 2               @OPCODE_1880:   ; [c64_ir] InlineExit
002408r 2                   ; inline exit
002408r 2  68               pla
002409r 2  68               pla
00240Ar 2               
00240Ar 2               @target_533:
00240Ar 2               
00240Ar 2               ; snake.fth:48:39 in `convert-x-y`
00240Ar 2               @OPCODE_1882:   ; [c64_ir] Add
00240Ar 2                   ; 21
00240Ar 2  CA               dex
00240Br 2  CA               dex
00240Cr 2  18               clc
00240Dr 2  B5 00            lda $00,x
00240Fr 2  75 02            adc $02,x
002411r 2  95 00            sta $00,x
002413r 2  B5 01            lda $01,x
002415r 2  75 03            adc $03,x
002417r 2  95 01            sta $01,x
002419r 2               
002419r 2               ; snake.fth:48:41 in `convert-x-y`
002419r 2               @OPCODE_1883:   ; [c64_ir] InlineExit
002419r 2                   ; inline exit
002419r 2  68               pla
00241Ar 2  68               pla
00241Br 2               
00241Br 2               @target_534:
00241Br 2               
00241Br 2               ; snake.fth:50:38 in `draw`
00241Br 2               @OPCODE_1885:   ; [c64_ir] InlineCall("draw-index")
00241Br 2                   ; inline call(draw-index)
00241Br 2  48               pha
00241Cr 2  48               pha
00241Dr 2               
00241Dr 2               @target_535:
00241Dr 2               
00241Dr 2               ; snake.fth:49:34 in `draw-index`
00241Dr 2               @OPCODE_1887:   ; [c64_ir] PushLiteral(1024)
00241Dr 2  E8               inx
00241Er 2  E8               inx
00241Fr 2  A9 00            lda #0
002421r 2  95 00            sta $00,x
002423r 2  A9 04            lda #4
002425r 2  95 01            sta $01,x
002427r 2               
002427r 2               ; snake.fth:49:43 in `draw-index`
002427r 2               @OPCODE_1888:   ; [c64_ir] Add
002427r 2                   ; 21
002427r 2  CA               dex
002428r 2  CA               dex
002429r 2  18               clc
00242Ar 2  B5 00            lda $00,x
00242Cr 2  75 02            adc $02,x
00242Er 2  95 00            sta $00,x
002430r 2  B5 01            lda $01,x
002432r 2  75 03            adc $03,x
002434r 2  95 01            sta $01,x
002436r 2               
002436r 2               ; snake.fth:49:45 in `draw-index`
002436r 2               @OPCODE_1889:   ; [c64_ir] Store8
002436r 2  CA               dex
002437r 2  CA               dex
002438r 2  CA               dex
002439r 2  CA               dex
00243Ar 2  B5 02            lda $02,x
00243Cr 2  81 04            sta ($04,x)
00243Er 2                   ; TODO high byte
00243Er 2               
00243Er 2               ; snake.fth:49:48 in `draw-index`
00243Er 2               @OPCODE_1890:   ; [c64_ir] InlineExit
00243Er 2                   ; inline exit
00243Er 2  68               pla
00243Fr 2  68               pla
002440r 2               
002440r 2               @target_536:
002440r 2               
002440r 2               ; snake.fth:50:49 in `draw`
002440r 2               @OPCODE_1892:   ; [c64_ir] InlineExit
002440r 2                   ; inline exit
002440r 2  68               pla
002441r 2  68               pla
002442r 2               
002442r 2               @target_537:
002442r 2               
002442r 2               ; snake.fth:51:51 in `draw-white`
002442r 2               @OPCODE_1894:   ; [c64_ir] InlineExit
002442r 2                   ; inline exit
002442r 2  68               pla
002443r 2  68               pla
002444r 2               
002444r 2               @target_538:
002444r 2               
002444r 2               ; snake.fth:205:14 in `draw-snake-head-tail`
002444r 2               @OPCODE_1896:   ; [c64_ir] InlineExit
002444r 2                   ; inline exit
002444r 2  68               pla
002445r 2  68               pla
002446r 2               
002446r 2               @target_539:
002446r 2               
002446r 2               ; snake.fth:217:1 in `main`
002446r 2               @OPCODE_1898:   ; [c64_ir] InlineCall("draw-apple")
002446r 2                   ; inline call(draw-apple)
002446r 2  48               pha
002447r 2  48               pha
002448r 2               
002448r 2               @target_540:
002448r 2               
002448r 2               ; snake.fth:208:3 in `draw-apple`
002448r 2               @OPCODE_1900:   ; [c64_ir] PushLiteral(-26664)
002448r 2  E8               inx
002449r 2  E8               inx
00244Ar 2  A9 D8            lda #216
00244Cr 2  95 00            sta $00,x
00244Er 2  A9 97            lda #151
002450r 2  95 01            sta $01,x
002452r 2               
002452r 2               ; snake.fth:208:11 in `draw-apple`
002452r 2               @OPCODE_1901:   ; [c64_ir] Load
002452r 2  A1 00            lda ($00,x)
002454r 2  95 00            sta $00,x
002456r 2  A9 00            lda #0
002458r 2  95 01            sta $01,x
00245Ar 2               
00245Ar 2               ; snake.fth:208:13 in `draw-apple`
00245Ar 2               @OPCODE_1902:   ; [c64_ir] PushLiteral(-26662)
00245Ar 2  E8               inx
00245Br 2  E8               inx
00245Cr 2  A9 DA            lda #218
00245Er 2  95 00            sta $00,x
002460r 2  A9 97            lda #151
002462r 2  95 01            sta $01,x
002464r 2               
002464r 2               ; snake.fth:208:21 in `draw-apple`
002464r 2               @OPCODE_1903:   ; [c64_ir] Load
002464r 2  A1 00            lda ($00,x)
002466r 2  95 00            sta $00,x
002468r 2  A9 00            lda #0
00246Ar 2  95 01            sta $01,x
00246Cr 2               
00246Cr 2               ; snake.fth:208:23 in `draw-apple`
00246Cr 2               @OPCODE_1904:   ; [c64_ir] InlineCall("draw-apple-tile")
00246Cr 2                   ; inline call(draw-apple-tile)
00246Cr 2  48               pha
00246Dr 2  48               pha
00246Er 2               
00246Er 2               @target_541:
00246Er 2               
00246Er 2               ; snake.fth:54:31 in `draw-apple-tile`
00246Er 2               @OPCODE_1906:   ; [c64_ir] PushLiteral(233)
00246Er 2  E8               inx
00246Fr 2  E8               inx
002470r 2  A9 E9            lda #233
002472r 2  95 00            sta $00,x
002474r 2  A9 00            lda #0
002476r 2  95 01            sta $01,x
002478r 2               
002478r 2               ; snake.fth:54:36 in `draw-apple-tile`
002478r 2               @OPCODE_1907:   ; [c64_ir] InlineCall("rot")
002478r 2                   ; inline call(rot)
002478r 2  48               pha
002479r 2  48               pha
00247Ar 2               
00247Ar 2               @target_542:
00247Ar 2               
00247Ar 2               ; src/prelude.fth:5:10 in `rot`
00247Ar 2               @OPCODE_1909:   ; [c64_ir] AltPush
00247Ar 2  CA               dex
00247Br 2  CA               dex
00247Cr 2  B5 03            lda $03,x
00247Er 2  48               pha
00247Fr 2  B5 02            lda $02,x
002481r 2  48               pha
002482r 2               
002482r 2               ; src/prelude.fth:5:13 in `rot`
002482r 2               @OPCODE_1910:   ; [c64_ir] InlineCall("swap")
002482r 2                   ; inline call(swap)
002482r 2  48               pha
002483r 2  48               pha
002484r 2               
002484r 2               @target_543:
002484r 2               
002484r 2               ; src/prelude.fth:3:10 in `swap`
002484r 2               @OPCODE_1912:   ; [c64_ir] AltPush
002484r 2  CA               dex
002485r 2  CA               dex
002486r 2  B5 03            lda $03,x
002488r 2  48               pha
002489r 2  B5 02            lda $02,x
00248Br 2  48               pha
00248Cr 2               
00248Cr 2               ; src/prelude.fth:3:13 in `swap`
00248Cr 2               @OPCODE_1913:   ; [c64_ir] TempStore
00248Cr 2  CA               dex
00248Dr 2  CA               dex
00248Er 2  B5 03            lda $03,x
002490r 2  85 96            sta TEMP_PAX2
002492r 2  B5 02            lda $02,x
002494r 2  85 95            sta TEMP_PAX1
002496r 2               
002496r 2               ; src/prelude.fth:3:19 in `swap`
002496r 2               @OPCODE_1914:   ; [c64_ir] AltPop
002496r 2  E8               inx
002497r 2  E8               inx
002498r 2  68               pla
002499r 2  95 00            sta $00,x
00249Br 2  68               pla
00249Cr 2  95 01            sta $01,x
00249Er 2               
00249Er 2               ; src/prelude.fth:3:22 in `swap`
00249Er 2               @OPCODE_1915:   ; [c64_ir] TempLoad
00249Er 2  E8               inx
00249Fr 2  E8               inx
0024A0r 2  A5 95            lda TEMP_PAX1
0024A2r 2  95 00            sta $00,x
0024A4r 2  A5 96            lda TEMP_PAX2
0024A6r 2  95 01            sta $01,x
0024A8r 2               
0024A8r 2               ; src/prelude.fth:3:28 in `swap`
0024A8r 2               @OPCODE_1916:   ; [c64_ir] InlineExit
0024A8r 2                   ; inline exit
0024A8r 2  68               pla
0024A9r 2  68               pla
0024AAr 2               
0024AAr 2               @target_544:
0024AAr 2               
0024AAr 2               ; src/prelude.fth:5:18 in `rot`
0024AAr 2               @OPCODE_1918:   ; [c64_ir] AltPop
0024AAr 2  E8               inx
0024ABr 2  E8               inx
0024ACr 2  68               pla
0024ADr 2  95 00            sta $00,x
0024AFr 2  68               pla
0024B0r 2  95 01            sta $01,x
0024B2r 2               
0024B2r 2               ; src/prelude.fth:5:21 in `rot`
0024B2r 2               @OPCODE_1919:   ; [c64_ir] InlineCall("swap")
0024B2r 2                   ; inline call(swap)
0024B2r 2  48               pha
0024B3r 2  48               pha
0024B4r 2               
0024B4r 2               @target_545:
0024B4r 2               
0024B4r 2               ; src/prelude.fth:3:10 in `swap`
0024B4r 2               @OPCODE_1921:   ; [c64_ir] AltPush
0024B4r 2  CA               dex
0024B5r 2  CA               dex
0024B6r 2  B5 03            lda $03,x
0024B8r 2  48               pha
0024B9r 2  B5 02            lda $02,x
0024BBr 2  48               pha
0024BCr 2               
0024BCr 2               ; src/prelude.fth:3:13 in `swap`
0024BCr 2               @OPCODE_1922:   ; [c64_ir] TempStore
0024BCr 2  CA               dex
0024BDr 2  CA               dex
0024BEr 2  B5 03            lda $03,x
0024C0r 2  85 96            sta TEMP_PAX2
0024C2r 2  B5 02            lda $02,x
0024C4r 2  85 95            sta TEMP_PAX1
0024C6r 2               
0024C6r 2               ; src/prelude.fth:3:19 in `swap`
0024C6r 2               @OPCODE_1923:   ; [c64_ir] AltPop
0024C6r 2  E8               inx
0024C7r 2  E8               inx
0024C8r 2  68               pla
0024C9r 2  95 00            sta $00,x
0024CBr 2  68               pla
0024CCr 2  95 01            sta $01,x
0024CEr 2               
0024CEr 2               ; src/prelude.fth:3:22 in `swap`
0024CEr 2               @OPCODE_1924:   ; [c64_ir] TempLoad
0024CEr 2  E8               inx
0024CFr 2  E8               inx
0024D0r 2  A5 95            lda TEMP_PAX1
0024D2r 2  95 00            sta $00,x
0024D4r 2  A5 96            lda TEMP_PAX2
0024D6r 2  95 01            sta $01,x
0024D8r 2               
0024D8r 2               ; src/prelude.fth:3:28 in `swap`
0024D8r 2               @OPCODE_1925:   ; [c64_ir] InlineExit
0024D8r 2                   ; inline exit
0024D8r 2  68               pla
0024D9r 2  68               pla
0024DAr 2               
0024DAr 2               @target_546:
0024DAr 2               
0024DAr 2               ; src/prelude.fth:5:26 in `rot`
0024DAr 2               @OPCODE_1927:   ; [c64_ir] InlineExit
0024DAr 2                   ; inline exit
0024DAr 2  68               pla
0024DBr 2  68               pla
0024DCr 2               
0024DCr 2               @target_547:
0024DCr 2               
0024DCr 2               ; snake.fth:54:40 in `draw-apple-tile`
0024DCr 2               @OPCODE_1929:   ; [c64_ir] InlineCall("rot")
0024DCr 2                   ; inline call(rot)
0024DCr 2  48               pha
0024DDr 2  48               pha
0024DEr 2               
0024DEr 2               @target_548:
0024DEr 2               
0024DEr 2               ; src/prelude.fth:5:10 in `rot`
0024DEr 2               @OPCODE_1931:   ; [c64_ir] AltPush
0024DEr 2  CA               dex
0024DFr 2  CA               dex
0024E0r 2  B5 03            lda $03,x
0024E2r 2  48               pha
0024E3r 2  B5 02            lda $02,x
0024E5r 2  48               pha
0024E6r 2               
0024E6r 2               ; src/prelude.fth:5:13 in `rot`
0024E6r 2               @OPCODE_1932:   ; [c64_ir] InlineCall("swap")
0024E6r 2                   ; inline call(swap)
0024E6r 2  48               pha
0024E7r 2  48               pha
0024E8r 2               
0024E8r 2               @target_549:
0024E8r 2               
0024E8r 2               ; src/prelude.fth:3:10 in `swap`
0024E8r 2               @OPCODE_1934:   ; [c64_ir] AltPush
0024E8r 2  CA               dex
0024E9r 2  CA               dex
0024EAr 2  B5 03            lda $03,x
0024ECr 2  48               pha
0024EDr 2  B5 02            lda $02,x
0024EFr 2  48               pha
0024F0r 2               
0024F0r 2               ; src/prelude.fth:3:13 in `swap`
0024F0r 2               @OPCODE_1935:   ; [c64_ir] TempStore
0024F0r 2  CA               dex
0024F1r 2  CA               dex
0024F2r 2  B5 03            lda $03,x
0024F4r 2  85 96            sta TEMP_PAX2
0024F6r 2  B5 02            lda $02,x
0024F8r 2  85 95            sta TEMP_PAX1
0024FAr 2               
0024FAr 2               ; src/prelude.fth:3:19 in `swap`
0024FAr 2               @OPCODE_1936:   ; [c64_ir] AltPop
0024FAr 2  E8               inx
0024FBr 2  E8               inx
0024FCr 2  68               pla
0024FDr 2  95 00            sta $00,x
0024FFr 2  68               pla
002500r 2  95 01            sta $01,x
002502r 2               
002502r 2               ; src/prelude.fth:3:22 in `swap`
002502r 2               @OPCODE_1937:   ; [c64_ir] TempLoad
002502r 2  E8               inx
002503r 2  E8               inx
002504r 2  A5 95            lda TEMP_PAX1
002506r 2  95 00            sta $00,x
002508r 2  A5 96            lda TEMP_PAX2
00250Ar 2  95 01            sta $01,x
00250Cr 2               
00250Cr 2               ; src/prelude.fth:3:28 in `swap`
00250Cr 2               @OPCODE_1938:   ; [c64_ir] InlineExit
00250Cr 2                   ; inline exit
00250Cr 2  68               pla
00250Dr 2  68               pla
00250Er 2               
00250Er 2               @target_550:
00250Er 2               
00250Er 2               ; src/prelude.fth:5:18 in `rot`
00250Er 2               @OPCODE_1940:   ; [c64_ir] AltPop
00250Er 2  E8               inx
00250Fr 2  E8               inx
002510r 2  68               pla
002511r 2  95 00            sta $00,x
002513r 2  68               pla
002514r 2  95 01            sta $01,x
002516r 2               
002516r 2               ; src/prelude.fth:5:21 in `rot`
002516r 2               @OPCODE_1941:   ; [c64_ir] InlineCall("swap")
002516r 2                   ; inline call(swap)
002516r 2  48               pha
002517r 2  48               pha
002518r 2               
002518r 2               @target_551:
002518r 2               
002518r 2               ; src/prelude.fth:3:10 in `swap`
002518r 2               @OPCODE_1943:   ; [c64_ir] AltPush
002518r 2  CA               dex
002519r 2  CA               dex
00251Ar 2  B5 03            lda $03,x
00251Cr 2  48               pha
00251Dr 2  B5 02            lda $02,x
00251Fr 2  48               pha
002520r 2               
002520r 2               ; src/prelude.fth:3:13 in `swap`
002520r 2               @OPCODE_1944:   ; [c64_ir] TempStore
002520r 2  CA               dex
002521r 2  CA               dex
002522r 2  B5 03            lda $03,x
002524r 2  85 96            sta TEMP_PAX2
002526r 2  B5 02            lda $02,x
002528r 2  85 95            sta TEMP_PAX1
00252Ar 2               
00252Ar 2               ; src/prelude.fth:3:19 in `swap`
00252Ar 2               @OPCODE_1945:   ; [c64_ir] AltPop
00252Ar 2  E8               inx
00252Br 2  E8               inx
00252Cr 2  68               pla
00252Dr 2  95 00            sta $00,x
00252Fr 2  68               pla
002530r 2  95 01            sta $01,x
002532r 2               
002532r 2               ; src/prelude.fth:3:22 in `swap`
002532r 2               @OPCODE_1946:   ; [c64_ir] TempLoad
002532r 2  E8               inx
002533r 2  E8               inx
002534r 2  A5 95            lda TEMP_PAX1
002536r 2  95 00            sta $00,x
002538r 2  A5 96            lda TEMP_PAX2
00253Ar 2  95 01            sta $01,x
00253Cr 2               
00253Cr 2               ; src/prelude.fth:3:28 in `swap`
00253Cr 2               @OPCODE_1947:   ; [c64_ir] InlineExit
00253Cr 2                   ; inline exit
00253Cr 2  68               pla
00253Dr 2  68               pla
00253Er 2               
00253Er 2               @target_552:
00253Er 2               
00253Er 2               ; src/prelude.fth:5:26 in `rot`
00253Er 2               @OPCODE_1949:   ; [c64_ir] InlineExit
00253Er 2                   ; inline exit
00253Er 2  68               pla
00253Fr 2  68               pla
002540r 2               
002540r 2               @target_553:
002540r 2               
002540r 2               ; snake.fth:54:44 in `draw-apple-tile`
002540r 2               @OPCODE_1951:   ; [c64_ir] InlineCall("draw")
002540r 2                   ; inline call(draw)
002540r 2  48               pha
002541r 2  48               pha
002542r 2               
002542r 2               @target_554:
002542r 2               
002542r 2               ; snake.fth:50:26 in `draw`
002542r 2               @OPCODE_1953:   ; [c64_ir] InlineCall("convert-x-y")
002542r 2                   ; inline call(convert-x-y)
002542r 2  48               pha
002543r 2  48               pha
002544r 2               
002544r 2               @target_555:
002544r 2               
002544r 2               ; snake.fth:48:34 in `convert-x-y`
002544r 2               @OPCODE_1955:   ; [c64_ir] PushLiteral(40)
002544r 2  E8               inx
002545r 2  E8               inx
002546r 2  A9 28            lda #40
002548r 2  95 00            sta $00,x
00254Ar 2  A9 00            lda #0
00254Cr 2  95 01            sta $01,x
00254Er 2               
00254Er 2               ; snake.fth:48:37 in `convert-x-y`
00254Er 2               @OPCODE_1956:   ; [c64_ir] InlineCall("*")
00254Er 2                   ; inline call(*)
00254Er 2  48               pha
00254Fr 2  48               pha
002550r 2               
002550r 2               @target_556:
002550r 2               
002550r 2               ; src/prelude.fth:44:5 in `*`
002550r 2               @OPCODE_1958:   ; [c64_ir] AltPush
002550r 2  CA               dex
002551r 2  CA               dex
002552r 2  B5 03            lda $03,x
002554r 2  48               pha
002555r 2  B5 02            lda $02,x
002557r 2  48               pha
002558r 2               
002558r 2               ; src/prelude.fth:44:8 in `*`
002558r 2               @OPCODE_1959:   ; [c64_ir] PushLiteral(0)
002558r 2  E8               inx
002559r 2  E8               inx
00255Ar 2  A9 00            lda #0
00255Cr 2  95 00            sta $00,x
00255Er 2  A9 00            lda #0
002560r 2  95 01            sta $01,x
002562r 2               
002562r 2               ; src/prelude.fth:44:10 in `*`
002562r 2               @OPCODE_1960:   ; [c64_ir] AltPop
002562r 2  E8               inx
002563r 2  E8               inx
002564r 2  68               pla
002565r 2  95 00            sta $00,x
002567r 2  68               pla
002568r 2  95 01            sta $01,x
00256Ar 2               
00256Ar 2               ; src/prelude.fth:44:13 in `*`
00256Ar 2               @OPCODE_1961:   ; [c64_ir] PushLiteral(0)
00256Ar 2  E8               inx
00256Br 2  E8               inx
00256Cr 2  A9 00            lda #0
00256Er 2  95 00            sta $00,x
002570r 2  A9 00            lda #0
002572r 2  95 01            sta $01,x
002574r 2               
002574r 2               ; src/prelude.fth:44:15 in `*`
002574r 2               @OPCODE_1962:   ; [c64_ir] AltPush
002574r 2  CA               dex
002575r 2  CA               dex
002576r 2  B5 03            lda $03,x
002578r 2  48               pha
002579r 2  B5 02            lda $02,x
00257Br 2  48               pha
00257Cr 2               
00257Cr 2               ; src/prelude.fth:44:15 in `*`
00257Cr 2               @OPCODE_1963:   ; [c64_ir] AltPush
00257Cr 2  CA               dex
00257Dr 2  CA               dex
00257Er 2  B5 03            lda $03,x
002580r 2  48               pha
002581r 2  B5 02            lda $02,x
002583r 2  48               pha
002584r 2               
002584r 2               ; src/prelude.fth:44:15 in `*`
002584r 2               @OPCODE_1964:   ; [c64_ir] LoopTarget(556)
002584r 2               
002584r 2               @target_557:
002584r 2               
002584r 2               ; src/prelude.fth:44:18 in `*`
002584r 2               @OPCODE_1966:   ; [c64_ir] InlineCall("over")
002584r 2                   ; inline call(over)
002584r 2  48               pha
002585r 2  48               pha
002586r 2               
002586r 2               @target_558:
002586r 2               
002586r 2               ; src/prelude.fth:4:10 in `over`
002586r 2               @OPCODE_1968:   ; [c64_ir] AltPush
002586r 2  CA               dex
002587r 2  CA               dex
002588r 2  B5 03            lda $03,x
00258Ar 2  48               pha
00258Br 2  B5 02            lda $02,x
00258Dr 2  48               pha
00258Er 2               
00258Er 2               ; src/prelude.fth:4:13 in `over`
00258Er 2               @OPCODE_1969:   ; [c64_ir] TempStore
00258Er 2  CA               dex
00258Fr 2  CA               dex
002590r 2  B5 03            lda $03,x
002592r 2  85 96            sta TEMP_PAX2
002594r 2  B5 02            lda $02,x
002596r 2  85 95            sta TEMP_PAX1
002598r 2               
002598r 2               ; src/prelude.fth:4:19 in `over`
002598r 2               @OPCODE_1970:   ; [c64_ir] TempLoad
002598r 2  E8               inx
002599r 2  E8               inx
00259Ar 2  A5 95            lda TEMP_PAX1
00259Cr 2  95 00            sta $00,x
00259Er 2  A5 96            lda TEMP_PAX2
0025A0r 2  95 01            sta $01,x
0025A2r 2               
0025A2r 2               ; src/prelude.fth:4:25 in `over`
0025A2r 2               @OPCODE_1971:   ; [c64_ir] AltPop
0025A2r 2  E8               inx
0025A3r 2  E8               inx
0025A4r 2  68               pla
0025A5r 2  95 00            sta $00,x
0025A7r 2  68               pla
0025A8r 2  95 01            sta $01,x
0025AAr 2               
0025AAr 2               ; src/prelude.fth:4:28 in `over`
0025AAr 2               @OPCODE_1972:   ; [c64_ir] TempLoad
0025AAr 2  E8               inx
0025ABr 2  E8               inx
0025ACr 2  A5 95            lda TEMP_PAX1
0025AEr 2  95 00            sta $00,x
0025B0r 2  A5 96            lda TEMP_PAX2
0025B2r 2  95 01            sta $01,x
0025B4r 2               
0025B4r 2               ; src/prelude.fth:4:34 in `over`
0025B4r 2               @OPCODE_1973:   ; [c64_ir] InlineExit
0025B4r 2                   ; inline exit
0025B4r 2  68               pla
0025B5r 2  68               pla
0025B6r 2               
0025B6r 2               @target_559:
0025B6r 2               
0025B6r 2               ; src/prelude.fth:44:23 in `*`
0025B6r 2               @OPCODE_1975:   ; [c64_ir] Add
0025B6r 2                   ; 21
0025B6r 2  CA               dex
0025B7r 2  CA               dex
0025B8r 2  18               clc
0025B9r 2  B5 00            lda $00,x
0025BBr 2  75 02            adc $02,x
0025BDr 2  95 00            sta $00,x
0025BFr 2  B5 01            lda $01,x
0025C1r 2  75 03            adc $03,x
0025C3r 2  95 01            sta $01,x
0025C5r 2               
0025C5r 2               ; src/prelude.fth:44:25 in `*`
0025C5r 2               @OPCODE_1976:   ; [c64_ir] InlineCall("loopimpl")
0025C5r 2                   ; inline call(loopimpl)
0025C5r 2  48               pha
0025C6r 2  48               pha
0025C7r 2               
0025C7r 2               @target_560:
0025C7r 2               
0025C7r 2               ; src/prelude.fth:33:12 in `loopimpl`
0025C7r 2               @OPCODE_1978:   ; [c64_ir] AltPop
0025C7r 2  E8               inx
0025C8r 2  E8               inx
0025C9r 2  68               pla
0025CAr 2  95 00            sta $00,x
0025CCr 2  68               pla
0025CDr 2  95 01            sta $01,x
0025CFr 2               
0025CFr 2               ; src/prelude.fth:33:15 in `loopimpl`
0025CFr 2               @OPCODE_1979:   ; [c64_ir] AltPop
0025CFr 2  E8               inx
0025D0r 2  E8               inx
0025D1r 2  68               pla
0025D2r 2  95 00            sta $00,x
0025D4r 2  68               pla
0025D5r 2  95 01            sta $01,x
0025D7r 2               
0025D7r 2               ; src/prelude.fth:33:18 in `loopimpl`
0025D7r 2               @OPCODE_1980:   ; [c64_ir] AltPop
0025D7r 2  E8               inx
0025D8r 2  E8               inx
0025D9r 2  68               pla
0025DAr 2  95 00            sta $00,x
0025DCr 2  68               pla
0025DDr 2  95 01            sta $01,x
0025DFr 2               
0025DFr 2               ; src/prelude.fth:33:21 in `loopimpl`
0025DFr 2               @OPCODE_1981:   ; [c64_ir] InlineCall("1+")
0025DFr 2                   ; inline call(1+)
0025DFr 2  48               pha
0025E0r 2  48               pha
0025E1r 2               
0025E1r 2               @target_561:
0025E1r 2               
0025E1r 2               ; src/prelude.fth:18:8 in `1+`
0025E1r 2               @OPCODE_1983:   ; [c64_ir] PushLiteral(1)
0025E1r 2  E8               inx
0025E2r 2  E8               inx
0025E3r 2  A9 01            lda #1
0025E5r 2  95 00            sta $00,x
0025E7r 2  A9 00            lda #0
0025E9r 2  95 01            sta $01,x
0025EBr 2               
0025EBr 2               ; src/prelude.fth:18:10 in `1+`
0025EBr 2               @OPCODE_1984:   ; [c64_ir] Add
0025EBr 2                   ; 21
0025EBr 2  CA               dex
0025ECr 2  CA               dex
0025EDr 2  18               clc
0025EEr 2  B5 00            lda $00,x
0025F0r 2  75 02            adc $02,x
0025F2r 2  95 00            sta $00,x
0025F4r 2  B5 01            lda $01,x
0025F6r 2  75 03            adc $03,x
0025F8r 2  95 01            sta $01,x
0025FAr 2               
0025FAr 2               ; src/prelude.fth:18:12 in `1+`
0025FAr 2               @OPCODE_1985:   ; [c64_ir] InlineExit
0025FAr 2                   ; inline exit
0025FAr 2  68               pla
0025FBr 2  68               pla
0025FCr 2               
0025FCr 2               @target_562:
0025FCr 2               
0025FCr 2               ; src/prelude.fth:33:24 in `loopimpl`
0025FCr 2               @OPCODE_1987:   ; [c64_ir] InlineCall("2dup")
0025FCr 2                   ; inline call(2dup)
0025FCr 2  48               pha
0025FDr 2  48               pha
0025FEr 2               
0025FEr 2               @target_563:
0025FEr 2               
0025FEr 2               ; src/prelude.fth:8:10 in `2dup`
0025FEr 2               @OPCODE_1989:   ; [c64_ir] InlineCall("over")
0025FEr 2                   ; inline call(over)
0025FEr 2  48               pha
0025FFr 2  48               pha
002600r 2               
002600r 2               @target_564:
002600r 2               
002600r 2               ; src/prelude.fth:4:10 in `over`
002600r 2               @OPCODE_1991:   ; [c64_ir] AltPush
002600r 2  CA               dex
002601r 2  CA               dex
002602r 2  B5 03            lda $03,x
002604r 2  48               pha
002605r 2  B5 02            lda $02,x
002607r 2  48               pha
002608r 2               
002608r 2               ; src/prelude.fth:4:13 in `over`
002608r 2               @OPCODE_1992:   ; [c64_ir] TempStore
002608r 2  CA               dex
002609r 2  CA               dex
00260Ar 2  B5 03            lda $03,x
00260Cr 2  85 96            sta TEMP_PAX2
00260Er 2  B5 02            lda $02,x
002610r 2  85 95            sta TEMP_PAX1
002612r 2               
002612r 2               ; src/prelude.fth:4:19 in `over`
002612r 2               @OPCODE_1993:   ; [c64_ir] TempLoad
002612r 2  E8               inx
002613r 2  E8               inx
002614r 2  A5 95            lda TEMP_PAX1
002616r 2  95 00            sta $00,x
002618r 2  A5 96            lda TEMP_PAX2
00261Ar 2  95 01            sta $01,x
00261Cr 2               
00261Cr 2               ; src/prelude.fth:4:25 in `over`
00261Cr 2               @OPCODE_1994:   ; [c64_ir] AltPop
00261Cr 2  E8               inx
00261Dr 2  E8               inx
00261Er 2  68               pla
00261Fr 2  95 00            sta $00,x
002621r 2  68               pla
002622r 2  95 01            sta $01,x
002624r 2               
002624r 2               ; src/prelude.fth:4:28 in `over`
002624r 2               @OPCODE_1995:   ; [c64_ir] TempLoad
002624r 2  E8               inx
002625r 2  E8               inx
002626r 2  A5 95            lda TEMP_PAX1
002628r 2  95 00            sta $00,x
00262Ar 2  A5 96            lda TEMP_PAX2
00262Cr 2  95 01            sta $01,x
00262Er 2               
00262Er 2               ; src/prelude.fth:4:34 in `over`
00262Er 2               @OPCODE_1996:   ; [c64_ir] InlineExit
00262Er 2                   ; inline exit
00262Er 2  68               pla
00262Fr 2  68               pla
002630r 2               
002630r 2               @target_565:
002630r 2               
002630r 2               ; src/prelude.fth:8:15 in `2dup`
002630r 2               @OPCODE_1998:   ; [c64_ir] InlineCall("over")
002630r 2                   ; inline call(over)
002630r 2  48               pha
002631r 2  48               pha
002632r 2               
002632r 2               @target_566:
002632r 2               
002632r 2               ; src/prelude.fth:4:10 in `over`
002632r 2               @OPCODE_2000:   ; [c64_ir] AltPush
002632r 2  CA               dex
002633r 2  CA               dex
002634r 2  B5 03            lda $03,x
002636r 2  48               pha
002637r 2  B5 02            lda $02,x
002639r 2  48               pha
00263Ar 2               
00263Ar 2               ; src/prelude.fth:4:13 in `over`
00263Ar 2               @OPCODE_2001:   ; [c64_ir] TempStore
00263Ar 2  CA               dex
00263Br 2  CA               dex
00263Cr 2  B5 03            lda $03,x
00263Er 2  85 96            sta TEMP_PAX2
002640r 2  B5 02            lda $02,x
002642r 2  85 95            sta TEMP_PAX1
002644r 2               
002644r 2               ; src/prelude.fth:4:19 in `over`
002644r 2               @OPCODE_2002:   ; [c64_ir] TempLoad
002644r 2  E8               inx
002645r 2  E8               inx
002646r 2  A5 95            lda TEMP_PAX1
002648r 2  95 00            sta $00,x
00264Ar 2  A5 96            lda TEMP_PAX2
00264Cr 2  95 01            sta $01,x
00264Er 2               
00264Er 2               ; src/prelude.fth:4:25 in `over`
00264Er 2               @OPCODE_2003:   ; [c64_ir] AltPop
00264Er 2  E8               inx
00264Fr 2  E8               inx
002650r 2  68               pla
002651r 2  95 00            sta $00,x
002653r 2  68               pla
002654r 2  95 01            sta $01,x
002656r 2               
002656r 2               ; src/prelude.fth:4:28 in `over`
002656r 2               @OPCODE_2004:   ; [c64_ir] TempLoad
002656r 2  E8               inx
002657r 2  E8               inx
002658r 2  A5 95            lda TEMP_PAX1
00265Ar 2  95 00            sta $00,x
00265Cr 2  A5 96            lda TEMP_PAX2
00265Er 2  95 01            sta $01,x
002660r 2               
002660r 2               ; src/prelude.fth:4:34 in `over`
002660r 2               @OPCODE_2005:   ; [c64_ir] InlineExit
002660r 2                   ; inline exit
002660r 2  68               pla
002661r 2  68               pla
002662r 2               
002662r 2               @target_567:
002662r 2               
002662r 2               ; src/prelude.fth:8:20 in `2dup`
002662r 2               @OPCODE_2007:   ; [c64_ir] InlineExit
002662r 2                   ; inline exit
002662r 2  68               pla
002663r 2  68               pla
002664r 2               
002664r 2               @target_568:
002664r 2               
002664r 2               ; src/prelude.fth:33:29 in `loopimpl`
002664r 2               @OPCODE_2009:   ; [c64_ir] AltPush
002664r 2  CA               dex
002665r 2  CA               dex
002666r 2  B5 03            lda $03,x
002668r 2  48               pha
002669r 2  B5 02            lda $02,x
00266Br 2  48               pha
00266Cr 2               
00266Cr 2               ; src/prelude.fth:33:32 in `loopimpl`
00266Cr 2               @OPCODE_2010:   ; [c64_ir] AltPush
00266Cr 2  CA               dex
00266Dr 2  CA               dex
00266Er 2  B5 03            lda $03,x
002670r 2  48               pha
002671r 2  B5 02            lda $02,x
002673r 2  48               pha
002674r 2               
002674r 2               ; src/prelude.fth:33:35 in `loopimpl`
002674r 2               @OPCODE_2011:   ; [c64_ir] InlineCall("=")
002674r 2                   ; inline call(=)
002674r 2  48               pha
002675r 2  48               pha
002676r 2               
002676r 2               @target_569:
002676r 2               
002676r 2               ; src/prelude.fth:22:8 in `=`
002676r 2               @OPCODE_2013:   ; [c64_ir] InlineCall("-")
002676r 2                   ; inline call(-)
002676r 2  48               pha
002677r 2  48               pha
002678r 2               
002678r 2               @target_570:
002678r 2               
002678r 2               ; src/prelude.fth:16:12 in `-`
002678r 2               @OPCODE_2015:   ; [c64_ir] InlineCall("negate")
002678r 2                   ; inline call(negate)
002678r 2  48               pha
002679r 2  48               pha
00267Ar 2               
00267Ar 2               @target_571:
00267Ar 2               
00267Ar 2               ; src/prelude.fth:15:12 in `negate`
00267Ar 2               @OPCODE_2017:   ; [c64_ir] InlineCall("invert")
00267Ar 2                   ; inline call(invert)
00267Ar 2  48               pha
00267Br 2  48               pha
00267Cr 2               
00267Cr 2               @target_572:
00267Cr 2               
00267Cr 2               ; src/prelude.fth:14:12 in `invert`
00267Cr 2               @OPCODE_2019:   ; [c64_ir] PushLiteral(-1)
00267Cr 2  E8               inx
00267Dr 2  E8               inx
00267Er 2  A9 FF            lda #255
002680r 2  95 00            sta $00,x
002682r 2  A9 FF            lda #255
002684r 2  95 01            sta $01,x
002686r 2               
002686r 2               ; src/prelude.fth:14:15 in `invert`
002686r 2               @OPCODE_2020:   ; [c64_ir] Nand
002686r 2                   ; 26
002686r 2  CA               dex
002687r 2  CA               dex
002688r 2  B5 00            lda $00,x
00268Ar 2  35 02            and $02,x
00268Cr 2  49 FF            eor #$ff
00268Er 2  95 00            sta $00,x
002690r 2  B5 01            lda $01,x
002692r 2  35 03            and $03,x
002694r 2  49 FF            eor #$ff
002696r 2  95 01            sta $01,x
002698r 2               
002698r 2               ; src/prelude.fth:14:20 in `invert`
002698r 2               @OPCODE_2021:   ; [c64_ir] InlineExit
002698r 2                   ; inline exit
002698r 2  68               pla
002699r 2  68               pla
00269Ar 2               
00269Ar 2               @target_573:
00269Ar 2               
00269Ar 2               ; src/prelude.fth:15:19 in `negate`
00269Ar 2               @OPCODE_2023:   ; [c64_ir] PushLiteral(1)
00269Ar 2  E8               inx
00269Br 2  E8               inx
00269Cr 2  A9 01            lda #1
00269Er 2  95 00            sta $00,x
0026A0r 2  A9 00            lda #0
0026A2r 2  95 01            sta $01,x
0026A4r 2               
0026A4r 2               ; src/prelude.fth:15:21 in `negate`
0026A4r 2               @OPCODE_2024:   ; [c64_ir] Add
0026A4r 2                   ; 21
0026A4r 2  CA               dex
0026A5r 2  CA               dex
0026A6r 2  18               clc
0026A7r 2  B5 00            lda $00,x
0026A9r 2  75 02            adc $02,x
0026ABr 2  95 00            sta $00,x
0026ADr 2  B5 01            lda $01,x
0026AFr 2  75 03            adc $03,x
0026B1r 2  95 01            sta $01,x
0026B3r 2               
0026B3r 2               ; src/prelude.fth:15:23 in `negate`
0026B3r 2               @OPCODE_2025:   ; [c64_ir] InlineExit
0026B3r 2                   ; inline exit
0026B3r 2  68               pla
0026B4r 2  68               pla
0026B5r 2               
0026B5r 2               @target_574:
0026B5r 2               
0026B5r 2               ; src/prelude.fth:16:19 in `-`
0026B5r 2               @OPCODE_2027:   ; [c64_ir] Add
0026B5r 2                   ; 21
0026B5r 2  CA               dex
0026B6r 2  CA               dex
0026B7r 2  18               clc
0026B8r 2  B5 00            lda $00,x
0026BAr 2  75 02            adc $02,x
0026BCr 2  95 00            sta $00,x
0026BEr 2  B5 01            lda $01,x
0026C0r 2  75 03            adc $03,x
0026C2r 2  95 01            sta $01,x
0026C4r 2               
0026C4r 2               ; src/prelude.fth:16:21 in `-`
0026C4r 2               @OPCODE_2028:   ; [c64_ir] InlineExit
0026C4r 2                   ; inline exit
0026C4r 2  68               pla
0026C5r 2  68               pla
0026C6r 2               
0026C6r 2               @target_575:
0026C6r 2               
0026C6r 2               ; src/prelude.fth:22:10 in `=`
0026C6r 2               @OPCODE_2030:   ; [c64_ir] InlineCall("0=")
0026C6r 2                   ; inline call(0=)
0026C6r 2  48               pha
0026C7r 2  48               pha
0026C8r 2               
0026C8r 2               @target_576:
0026C8r 2               
0026C8r 2               ; src/prelude.fth:21:8 in `0=`
0026C8r 2               @OPCODE_2032:   ; [c64_ir] JumpIf0(578)
0026C8r 2  CA               dex
0026C9r 2  CA               dex
0026CAr 2  B5 02            lda $02,x
0026CCr 2  15 03            ora $03,x
0026CEr 2  D0 03            bne *+5
0026D0r 2  4C rr rr         jmp @target_578
0026D3r 2               
0026D3r 2               @target_577:
0026D3r 2               
0026D3r 2               ; src/prelude.fth:21:11 in `0=`
0026D3r 2               @OPCODE_2034:   ; [c64_ir] PushLiteral(0)
0026D3r 2  E8               inx
0026D4r 2  E8               inx
0026D5r 2  A9 00            lda #0
0026D7r 2  95 00            sta $00,x
0026D9r 2  A9 00            lda #0
0026DBr 2  95 01            sta $01,x
0026DDr 2               
0026DDr 2               ; src/prelude.fth:21:13 in `0=`
0026DDr 2               @OPCODE_2035:   ; [c64_ir] JumpElse(579)
0026DDr 2  4C rr rr         jmp @target_579
0026E0r 2               
0026E0r 2               @target_578:
0026E0r 2               
0026E0r 2               ; src/prelude.fth:21:18 in `0=`
0026E0r 2               @OPCODE_2037:   ; [c64_ir] PushLiteral(-1)
0026E0r 2  E8               inx
0026E1r 2  E8               inx
0026E2r 2  A9 FF            lda #255
0026E4r 2  95 00            sta $00,x
0026E6r 2  A9 FF            lda #255
0026E8r 2  95 01            sta $01,x
0026EAr 2               
0026EAr 2               ; src/prelude.fth:21:21 in `0=`
0026EAr 2               @OPCODE_2038:   ; [c64_ir] JumpTarget(578)
0026EAr 2               
0026EAr 2               @target_579:
0026EAr 2               
0026EAr 2               ; src/prelude.fth:21:26 in `0=`
0026EAr 2               @OPCODE_2040:   ; [c64_ir] InlineExit
0026EAr 2                   ; inline exit
0026EAr 2  68               pla
0026EBr 2  68               pla
0026ECr 2               
0026ECr 2               @target_580:
0026ECr 2               
0026ECr 2               ; src/prelude.fth:22:13 in `=`
0026ECr 2               @OPCODE_2042:   ; [c64_ir] InlineExit
0026ECr 2                   ; inline exit
0026ECr 2  68               pla
0026EDr 2  68               pla
0026EEr 2               
0026EEr 2               @target_581:
0026EEr 2               
0026EEr 2               ; src/prelude.fth:33:37 in `loopimpl`
0026EEr 2               @OPCODE_2044:   ; [c64_ir] InlineCall("swap")
0026EEr 2                   ; inline call(swap)
0026EEr 2  48               pha
0026EFr 2  48               pha
0026F0r 2               
0026F0r 2               @target_582:
0026F0r 2               
0026F0r 2               ; src/prelude.fth:3:10 in `swap`
0026F0r 2               @OPCODE_2046:   ; [c64_ir] AltPush
0026F0r 2  CA               dex
0026F1r 2  CA               dex
0026F2r 2  B5 03            lda $03,x
0026F4r 2  48               pha
0026F5r 2  B5 02            lda $02,x
0026F7r 2  48               pha
0026F8r 2               
0026F8r 2               ; src/prelude.fth:3:13 in `swap`
0026F8r 2               @OPCODE_2047:   ; [c64_ir] TempStore
0026F8r 2  CA               dex
0026F9r 2  CA               dex
0026FAr 2  B5 03            lda $03,x
0026FCr 2  85 96            sta TEMP_PAX2
0026FEr 2  B5 02            lda $02,x
002700r 2  85 95            sta TEMP_PAX1
002702r 2               
002702r 2               ; src/prelude.fth:3:19 in `swap`
002702r 2               @OPCODE_2048:   ; [c64_ir] AltPop
002702r 2  E8               inx
002703r 2  E8               inx
002704r 2  68               pla
002705r 2  95 00            sta $00,x
002707r 2  68               pla
002708r 2  95 01            sta $01,x
00270Ar 2               
00270Ar 2               ; src/prelude.fth:3:22 in `swap`
00270Ar 2               @OPCODE_2049:   ; [c64_ir] TempLoad
00270Ar 2  E8               inx
00270Br 2  E8               inx
00270Cr 2  A5 95            lda TEMP_PAX1
00270Er 2  95 00            sta $00,x
002710r 2  A5 96            lda TEMP_PAX2
002712r 2  95 01            sta $01,x
002714r 2               
002714r 2               ; src/prelude.fth:3:28 in `swap`
002714r 2               @OPCODE_2050:   ; [c64_ir] InlineExit
002714r 2                   ; inline exit
002714r 2  68               pla
002715r 2  68               pla
002716r 2               
002716r 2               @target_583:
002716r 2               
002716r 2               ; src/prelude.fth:33:42 in `loopimpl`
002716r 2               @OPCODE_2052:   ; [c64_ir] AltPush
002716r 2  CA               dex
002717r 2  CA               dex
002718r 2  B5 03            lda $03,x
00271Ar 2  48               pha
00271Br 2  B5 02            lda $02,x
00271Dr 2  48               pha
00271Er 2               
00271Er 2               ; src/prelude.fth:33:45 in `loopimpl`
00271Er 2               @OPCODE_2053:   ; [c64_ir] InlineExit
00271Er 2                   ; inline exit
00271Er 2  68               pla
00271Fr 2  68               pla
002720r 2               
002720r 2               @target_584:
002720r 2               
002720r 2               ; src/prelude.fth:44:25 in `*`
002720r 2               @OPCODE_2055:   ; [c64_ir] LoopIf0(557)
002720r 2  CA               dex
002721r 2  CA               dex
002722r 2  B5 02            lda $02,x
002724r 2  15 03            ora $03,x
002726r 2  D0 03            bne *+5
002728r 2  4C rr rr         jmp @target_557
00272Br 2               
00272Br 2               @target_585:
00272Br 2               
00272Br 2               ; src/prelude.fth:44:25 in `*`
00272Br 2               @OPCODE_2057:   ; [c64_ir] AltPop
00272Br 2  E8               inx
00272Cr 2  E8               inx
00272Dr 2  68               pla
00272Er 2  95 00            sta $00,x
002730r 2  68               pla
002731r 2  95 01            sta $01,x
002733r 2               
002733r 2               ; src/prelude.fth:44:25 in `*`
002733r 2               @OPCODE_2058:   ; [c64_ir] Drop
002733r 2  CA               dex
002734r 2  CA               dex
002735r 2               
002735r 2               ; src/prelude.fth:44:25 in `*`
002735r 2               @OPCODE_2059:   ; [c64_ir] AltPop
002735r 2  E8               inx
002736r 2  E8               inx
002737r 2  68               pla
002738r 2  95 00            sta $00,x
00273Ar 2  68               pla
00273Br 2  95 01            sta $01,x
00273Dr 2               
00273Dr 2               ; src/prelude.fth:44:25 in `*`
00273Dr 2               @OPCODE_2060:   ; [c64_ir] Drop
00273Dr 2  CA               dex
00273Er 2  CA               dex
00273Fr 2               
00273Fr 2               ; src/prelude.fth:44:30 in `*`
00273Fr 2               @OPCODE_2061:   ; [c64_ir] InlineCall("swap")
00273Fr 2                   ; inline call(swap)
00273Fr 2  48               pha
002740r 2  48               pha
002741r 2               
002741r 2               @target_586:
002741r 2               
002741r 2               ; src/prelude.fth:3:10 in `swap`
002741r 2               @OPCODE_2063:   ; [c64_ir] AltPush
002741r 2  CA               dex
002742r 2  CA               dex
002743r 2  B5 03            lda $03,x
002745r 2  48               pha
002746r 2  B5 02            lda $02,x
002748r 2  48               pha
002749r 2               
002749r 2               ; src/prelude.fth:3:13 in `swap`
002749r 2               @OPCODE_2064:   ; [c64_ir] TempStore
002749r 2  CA               dex
00274Ar 2  CA               dex
00274Br 2  B5 03            lda $03,x
00274Dr 2  85 96            sta TEMP_PAX2
00274Fr 2  B5 02            lda $02,x
002751r 2  85 95            sta TEMP_PAX1
002753r 2               
002753r 2               ; src/prelude.fth:3:19 in `swap`
002753r 2               @OPCODE_2065:   ; [c64_ir] AltPop
002753r 2  E8               inx
002754r 2  E8               inx
002755r 2  68               pla
002756r 2  95 00            sta $00,x
002758r 2  68               pla
002759r 2  95 01            sta $01,x
00275Br 2               
00275Br 2               ; src/prelude.fth:3:22 in `swap`
00275Br 2               @OPCODE_2066:   ; [c64_ir] TempLoad
00275Br 2  E8               inx
00275Cr 2  E8               inx
00275Dr 2  A5 95            lda TEMP_PAX1
00275Fr 2  95 00            sta $00,x
002761r 2  A5 96            lda TEMP_PAX2
002763r 2  95 01            sta $01,x
002765r 2               
002765r 2               ; src/prelude.fth:3:28 in `swap`
002765r 2               @OPCODE_2067:   ; [c64_ir] InlineExit
002765r 2                   ; inline exit
002765r 2  68               pla
002766r 2  68               pla
002767r 2               
002767r 2               @target_587:
002767r 2               
002767r 2               ; src/prelude.fth:44:35 in `*`
002767r 2               @OPCODE_2069:   ; [c64_ir] Drop
002767r 2  CA               dex
002768r 2  CA               dex
002769r 2               
002769r 2               ; src/prelude.fth:44:40 in `*`
002769r 2               @OPCODE_2070:   ; [c64_ir] InlineExit
002769r 2                   ; inline exit
002769r 2  68               pla
00276Ar 2  68               pla
00276Br 2               
00276Br 2               @target_588:
00276Br 2               
00276Br 2               ; snake.fth:48:39 in `convert-x-y`
00276Br 2               @OPCODE_2072:   ; [c64_ir] Add
00276Br 2                   ; 21
00276Br 2  CA               dex
00276Cr 2  CA               dex
00276Dr 2  18               clc
00276Er 2  B5 00            lda $00,x
002770r 2  75 02            adc $02,x
002772r 2  95 00            sta $00,x
002774r 2  B5 01            lda $01,x
002776r 2  75 03            adc $03,x
002778r 2  95 01            sta $01,x
00277Ar 2               
00277Ar 2               ; snake.fth:48:41 in `convert-x-y`
00277Ar 2               @OPCODE_2073:   ; [c64_ir] InlineExit
00277Ar 2                   ; inline exit
00277Ar 2  68               pla
00277Br 2  68               pla
00277Cr 2               
00277Cr 2               @target_589:
00277Cr 2               
00277Cr 2               ; snake.fth:50:38 in `draw`
00277Cr 2               @OPCODE_2075:   ; [c64_ir] InlineCall("draw-index")
00277Cr 2                   ; inline call(draw-index)
00277Cr 2  48               pha
00277Dr 2  48               pha
00277Er 2               
00277Er 2               @target_590:
00277Er 2               
00277Er 2               ; snake.fth:49:34 in `draw-index`
00277Er 2               @OPCODE_2077:   ; [c64_ir] PushLiteral(1024)
00277Er 2  E8               inx
00277Fr 2  E8               inx
002780r 2  A9 00            lda #0
002782r 2  95 00            sta $00,x
002784r 2  A9 04            lda #4
002786r 2  95 01            sta $01,x
002788r 2               
002788r 2               ; snake.fth:49:43 in `draw-index`
002788r 2               @OPCODE_2078:   ; [c64_ir] Add
002788r 2                   ; 21
002788r 2  CA               dex
002789r 2  CA               dex
00278Ar 2  18               clc
00278Br 2  B5 00            lda $00,x
00278Dr 2  75 02            adc $02,x
00278Fr 2  95 00            sta $00,x
002791r 2  B5 01            lda $01,x
002793r 2  75 03            adc $03,x
002795r 2  95 01            sta $01,x
002797r 2               
002797r 2               ; snake.fth:49:45 in `draw-index`
002797r 2               @OPCODE_2079:   ; [c64_ir] Store8
002797r 2  CA               dex
002798r 2  CA               dex
002799r 2  CA               dex
00279Ar 2  CA               dex
00279Br 2  B5 02            lda $02,x
00279Dr 2  81 04            sta ($04,x)
00279Fr 2                   ; TODO high byte
00279Fr 2               
00279Fr 2               ; snake.fth:49:48 in `draw-index`
00279Fr 2               @OPCODE_2080:   ; [c64_ir] InlineExit
00279Fr 2                   ; inline exit
00279Fr 2  68               pla
0027A0r 2  68               pla
0027A1r 2               
0027A1r 2               @target_591:
0027A1r 2               
0027A1r 2               ; snake.fth:50:49 in `draw`
0027A1r 2               @OPCODE_2082:   ; [c64_ir] InlineExit
0027A1r 2                   ; inline exit
0027A1r 2  68               pla
0027A2r 2  68               pla
0027A3r 2               
0027A3r 2               @target_592:
0027A3r 2               
0027A3r 2               ; snake.fth:54:49 in `draw-apple-tile`
0027A3r 2               @OPCODE_2084:   ; [c64_ir] InlineExit
0027A3r 2                   ; inline exit
0027A3r 2  68               pla
0027A4r 2  68               pla
0027A5r 2               
0027A5r 2               @target_593:
0027A5r 2               
0027A5r 2               ; snake.fth:208:39 in `draw-apple`
0027A5r 2               @OPCODE_2086:   ; [c64_ir] InlineExit
0027A5r 2                   ; inline exit
0027A5r 2  68               pla
0027A6r 2  68               pla
0027A7r 2               
0027A7r 2               @target_594:
0027A7r 2               
0027A7r 2               ; snake.fth:218:1 in `main`
0027A7r 2               @OPCODE_2088:   ; [c64_ir] InlineCall("check-input")
0027A7r 2                   ; inline call(check-input)
0027A7r 2  48               pha
0027A8r 2  48               pha
0027A9r 2               
0027A9r 2               @target_595:
0027A9r 2               
0027A9r 2               ; snake.fth:167:3 in `check-input`
0027A9r 2               @OPCODE_2090:   ; [c64_ir] PushLiteral(126)
0027A9r 2  E8               inx
0027AAr 2  E8               inx
0027ABr 2  A9 7E            lda #126
0027ADr 2  95 00            sta $00,x
0027AFr 2  A9 00            lda #0
0027B1r 2  95 01            sta $01,x
0027B3r 2               
0027B3r 2               ; snake.fth:167:12 in `check-input`
0027B3r 2               @OPCODE_2091:   ; [c64_ir] Load
0027B3r 2  A1 00            lda ($00,x)
0027B5r 2  95 00            sta $00,x
0027B7r 2  A9 00            lda #0
0027B9r 2  95 01            sta $01,x
0027BBr 2               
0027BBr 2               ; snake.fth:167:14 in `check-input`
0027BBr 2               @OPCODE_2092:   ; [c64_ir] InlineCall("change-direction")
0027BBr 2                   ; inline call(change-direction)
0027BBr 2  48               pha
0027BCr 2  48               pha
0027BDr 2               
0027BDr 2               @target_596:
0027BDr 2               
0027BDr 2               ; snake.fth:160:3 in `change-direction`
0027BDr 2               @OPCODE_2094:   ; [c64_ir] PushLiteral(37)
0027BDr 2  E8               inx
0027BEr 2  E8               inx
0027BFr 2  A9 25            lda #37
0027C1r 2  95 00            sta $00,x
0027C3r 2  A9 00            lda #0
0027C5r 2  95 01            sta $01,x
0027C7r 2               
0027C7r 2               ; snake.fth:160:8 in `change-direction`
0027C7r 2               @OPCODE_2095:   ; [c64_ir] InlineCall("over")
0027C7r 2                   ; inline call(over)
0027C7r 2  48               pha
0027C8r 2  48               pha
0027C9r 2               
0027C9r 2               @target_597:
0027C9r 2               
0027C9r 2               ; src/prelude.fth:4:10 in `over`
0027C9r 2               @OPCODE_2097:   ; [c64_ir] AltPush
0027C9r 2  CA               dex
0027CAr 2  CA               dex
0027CBr 2  B5 03            lda $03,x
0027CDr 2  48               pha
0027CEr 2  B5 02            lda $02,x
0027D0r 2  48               pha
0027D1r 2               
0027D1r 2               ; src/prelude.fth:4:13 in `over`
0027D1r 2               @OPCODE_2098:   ; [c64_ir] TempStore
0027D1r 2  CA               dex
0027D2r 2  CA               dex
0027D3r 2  B5 03            lda $03,x
0027D5r 2  85 96            sta TEMP_PAX2
0027D7r 2  B5 02            lda $02,x
0027D9r 2  85 95            sta TEMP_PAX1
0027DBr 2               
0027DBr 2               ; src/prelude.fth:4:19 in `over`
0027DBr 2               @OPCODE_2099:   ; [c64_ir] TempLoad
0027DBr 2  E8               inx
0027DCr 2  E8               inx
0027DDr 2  A5 95            lda TEMP_PAX1
0027DFr 2  95 00            sta $00,x
0027E1r 2  A5 96            lda TEMP_PAX2
0027E3r 2  95 01            sta $01,x
0027E5r 2               
0027E5r 2               ; src/prelude.fth:4:25 in `over`
0027E5r 2               @OPCODE_2100:   ; [c64_ir] AltPop
0027E5r 2  E8               inx
0027E6r 2  E8               inx
0027E7r 2  68               pla
0027E8r 2  95 00            sta $00,x
0027EAr 2  68               pla
0027EBr 2  95 01            sta $01,x
0027EDr 2               
0027EDr 2               ; src/prelude.fth:4:28 in `over`
0027EDr 2               @OPCODE_2101:   ; [c64_ir] TempLoad
0027EDr 2  E8               inx
0027EEr 2  E8               inx
0027EFr 2  A5 95            lda TEMP_PAX1
0027F1r 2  95 00            sta $00,x
0027F3r 2  A5 96            lda TEMP_PAX2
0027F5r 2  95 01            sta $01,x
0027F7r 2               
0027F7r 2               ; src/prelude.fth:4:34 in `over`
0027F7r 2               @OPCODE_2102:   ; [c64_ir] InlineExit
0027F7r 2                   ; inline exit
0027F7r 2  68               pla
0027F8r 2  68               pla
0027F9r 2               
0027F9r 2               @target_598:
0027F9r 2               
0027F9r 2               ; snake.fth:160:13 in `change-direction`
0027F9r 2               @OPCODE_2104:   ; [c64_ir] InlineCall("=")
0027F9r 2                   ; inline call(=)
0027F9r 2  48               pha
0027FAr 2  48               pha
0027FBr 2               
0027FBr 2               @target_599:
0027FBr 2               
0027FBr 2               ; src/prelude.fth:22:8 in `=`
0027FBr 2               @OPCODE_2106:   ; [c64_ir] InlineCall("-")
0027FBr 2                   ; inline call(-)
0027FBr 2  48               pha
0027FCr 2  48               pha
0027FDr 2               
0027FDr 2               @target_600:
0027FDr 2               
0027FDr 2               ; src/prelude.fth:16:12 in `-`
0027FDr 2               @OPCODE_2108:   ; [c64_ir] InlineCall("negate")
0027FDr 2                   ; inline call(negate)
0027FDr 2  48               pha
0027FEr 2  48               pha
0027FFr 2               
0027FFr 2               @target_601:
0027FFr 2               
0027FFr 2               ; src/prelude.fth:15:12 in `negate`
0027FFr 2               @OPCODE_2110:   ; [c64_ir] InlineCall("invert")
0027FFr 2                   ; inline call(invert)
0027FFr 2  48               pha
002800r 2  48               pha
002801r 2               
002801r 2               @target_602:
002801r 2               
002801r 2               ; src/prelude.fth:14:12 in `invert`
002801r 2               @OPCODE_2112:   ; [c64_ir] PushLiteral(-1)
002801r 2  E8               inx
002802r 2  E8               inx
002803r 2  A9 FF            lda #255
002805r 2  95 00            sta $00,x
002807r 2  A9 FF            lda #255
002809r 2  95 01            sta $01,x
00280Br 2               
00280Br 2               ; src/prelude.fth:14:15 in `invert`
00280Br 2               @OPCODE_2113:   ; [c64_ir] Nand
00280Br 2                   ; 26
00280Br 2  CA               dex
00280Cr 2  CA               dex
00280Dr 2  B5 00            lda $00,x
00280Fr 2  35 02            and $02,x
002811r 2  49 FF            eor #$ff
002813r 2  95 00            sta $00,x
002815r 2  B5 01            lda $01,x
002817r 2  35 03            and $03,x
002819r 2  49 FF            eor #$ff
00281Br 2  95 01            sta $01,x
00281Dr 2               
00281Dr 2               ; src/prelude.fth:14:20 in `invert`
00281Dr 2               @OPCODE_2114:   ; [c64_ir] InlineExit
00281Dr 2                   ; inline exit
00281Dr 2  68               pla
00281Er 2  68               pla
00281Fr 2               
00281Fr 2               @target_603:
00281Fr 2               
00281Fr 2               ; src/prelude.fth:15:19 in `negate`
00281Fr 2               @OPCODE_2116:   ; [c64_ir] PushLiteral(1)
00281Fr 2  E8               inx
002820r 2  E8               inx
002821r 2  A9 01            lda #1
002823r 2  95 00            sta $00,x
002825r 2  A9 00            lda #0
002827r 2  95 01            sta $01,x
002829r 2               
002829r 2               ; src/prelude.fth:15:21 in `negate`
002829r 2               @OPCODE_2117:   ; [c64_ir] Add
002829r 2                   ; 21
002829r 2  CA               dex
00282Ar 2  CA               dex
00282Br 2  18               clc
00282Cr 2  B5 00            lda $00,x
00282Er 2  75 02            adc $02,x
002830r 2  95 00            sta $00,x
002832r 2  B5 01            lda $01,x
002834r 2  75 03            adc $03,x
002836r 2  95 01            sta $01,x
002838r 2               
002838r 2               ; src/prelude.fth:15:23 in `negate`
002838r 2               @OPCODE_2118:   ; [c64_ir] InlineExit
002838r 2                   ; inline exit
002838r 2  68               pla
002839r 2  68               pla
00283Ar 2               
00283Ar 2               @target_604:
00283Ar 2               
00283Ar 2               ; src/prelude.fth:16:19 in `-`
00283Ar 2               @OPCODE_2120:   ; [c64_ir] Add
00283Ar 2                   ; 21
00283Ar 2  CA               dex
00283Br 2  CA               dex
00283Cr 2  18               clc
00283Dr 2  B5 00            lda $00,x
00283Fr 2  75 02            adc $02,x
002841r 2  95 00            sta $00,x
002843r 2  B5 01            lda $01,x
002845r 2  75 03            adc $03,x
002847r 2  95 01            sta $01,x
002849r 2               
002849r 2               ; src/prelude.fth:16:21 in `-`
002849r 2               @OPCODE_2121:   ; [c64_ir] InlineExit
002849r 2                   ; inline exit
002849r 2  68               pla
00284Ar 2  68               pla
00284Br 2               
00284Br 2               @target_605:
00284Br 2               
00284Br 2               ; src/prelude.fth:22:10 in `=`
00284Br 2               @OPCODE_2123:   ; [c64_ir] InlineCall("0=")
00284Br 2                   ; inline call(0=)
00284Br 2  48               pha
00284Cr 2  48               pha
00284Dr 2               
00284Dr 2               @target_606:
00284Dr 2               
00284Dr 2               ; src/prelude.fth:21:8 in `0=`
00284Dr 2               @OPCODE_2125:   ; [c64_ir] JumpIf0(608)
00284Dr 2  CA               dex
00284Er 2  CA               dex
00284Fr 2  B5 02            lda $02,x
002851r 2  15 03            ora $03,x
002853r 2  D0 03            bne *+5
002855r 2  4C rr rr         jmp @target_608
002858r 2               
002858r 2               @target_607:
002858r 2               
002858r 2               ; src/prelude.fth:21:11 in `0=`
002858r 2               @OPCODE_2127:   ; [c64_ir] PushLiteral(0)
002858r 2  E8               inx
002859r 2  E8               inx
00285Ar 2  A9 00            lda #0
00285Cr 2  95 00            sta $00,x
00285Er 2  A9 00            lda #0
002860r 2  95 01            sta $01,x
002862r 2               
002862r 2               ; src/prelude.fth:21:13 in `0=`
002862r 2               @OPCODE_2128:   ; [c64_ir] JumpElse(609)
002862r 2  4C rr rr         jmp @target_609
002865r 2               
002865r 2               @target_608:
002865r 2               
002865r 2               ; src/prelude.fth:21:18 in `0=`
002865r 2               @OPCODE_2130:   ; [c64_ir] PushLiteral(-1)
002865r 2  E8               inx
002866r 2  E8               inx
002867r 2  A9 FF            lda #255
002869r 2  95 00            sta $00,x
00286Br 2  A9 FF            lda #255
00286Dr 2  95 01            sta $01,x
00286Fr 2               
00286Fr 2               ; src/prelude.fth:21:21 in `0=`
00286Fr 2               @OPCODE_2131:   ; [c64_ir] JumpTarget(608)
00286Fr 2               
00286Fr 2               @target_609:
00286Fr 2               
00286Fr 2               ; src/prelude.fth:21:26 in `0=`
00286Fr 2               @OPCODE_2133:   ; [c64_ir] InlineExit
00286Fr 2                   ; inline exit
00286Fr 2  68               pla
002870r 2  68               pla
002871r 2               
002871r 2               @target_610:
002871r 2               
002871r 2               ; src/prelude.fth:22:13 in `=`
002871r 2               @OPCODE_2135:   ; [c64_ir] InlineExit
002871r 2                   ; inline exit
002871r 2  68               pla
002872r 2  68               pla
002873r 2               
002873r 2               @target_611:
002873r 2               
002873r 2               ; snake.fth:160:15 in `change-direction`
002873r 2               @OPCODE_2137:   ; [c64_ir] JumpIf0(657)
002873r 2  CA               dex
002874r 2  CA               dex
002875r 2  B5 02            lda $02,x
002877r 2  15 03            ora $03,x
002879r 2  D0 03            bne *+5
00287Br 2  4C rr rr         jmp @target_657
00287Er 2               
00287Er 2               @target_612:
00287Er 2               
00287Er 2               ; snake.fth:160:18 in `change-direction`
00287Er 2               @OPCODE_2139:   ; [c64_ir] InlineCall("turn-left")
00287Er 2                   ; inline call(turn-left)
00287Er 2  48               pha
00287Fr 2  48               pha
002880r 2               
002880r 2               @target_613:
002880r 2               
002880r 2               ; snake.fth:155:15 in `turn-left`
002880r 2               @OPCODE_2141:   ; [c64_ir] InlineCall("is-vertical")
002880r 2                   ; inline call(is-vertical)
002880r 2  48               pha
002881r 2  48               pha
002882r 2               
002882r 2               @target_614:
002882r 2               
002882r 2               ; snake.fth:150:16 in `is-vertical`
002882r 2               @OPCODE_2143:   ; [c64_ir] PushLiteral(-26660)
002882r 2  E8               inx
002883r 2  E8               inx
002884r 2  A9 DC            lda #220
002886r 2  95 00            sta $00,x
002888r 2  A9 97            lda #151
00288Ar 2  95 01            sta $01,x
00288Cr 2               
00288Cr 2               ; snake.fth:150:26 in `is-vertical`
00288Cr 2               @OPCODE_2144:   ; [c64_ir] Load
00288Cr 2  A1 00            lda ($00,x)
00288Er 2  95 00            sta $00,x
002890r 2  A9 00            lda #0
002892r 2  95 01            sta $01,x
002894r 2               
002894r 2               ; snake.fth:150:28 in `is-vertical`
002894r 2               @OPCODE_2145:   ; [c64_ir] InlineCall("dup")
002894r 2                   ; inline call(dup)
002894r 2  48               pha
002895r 2  48               pha
002896r 2               
002896r 2               @target_615:
002896r 2               
002896r 2               ; src/prelude.fth:6:10 in `dup`
002896r 2               @OPCODE_2147:   ; [c64_ir] TempStore
002896r 2  CA               dex
002897r 2  CA               dex
002898r 2  B5 03            lda $03,x
00289Ar 2  85 96            sta TEMP_PAX2
00289Cr 2  B5 02            lda $02,x
00289Er 2  85 95            sta TEMP_PAX1
0028A0r 2               
0028A0r 2               ; src/prelude.fth:6:16 in `dup`
0028A0r 2               @OPCODE_2148:   ; [c64_ir] TempLoad
0028A0r 2  E8               inx
0028A1r 2  E8               inx
0028A2r 2  A5 95            lda TEMP_PAX1
0028A4r 2  95 00            sta $00,x
0028A6r 2  A5 96            lda TEMP_PAX2
0028A8r 2  95 01            sta $01,x
0028AAr 2               
0028AAr 2               ; src/prelude.fth:6:22 in `dup`
0028AAr 2               @OPCODE_2149:   ; [c64_ir] TempLoad
0028AAr 2  E8               inx
0028ABr 2  E8               inx
0028ACr 2  A5 95            lda TEMP_PAX1
0028AEr 2  95 00            sta $00,x
0028B0r 2  A5 96            lda TEMP_PAX2
0028B2r 2  95 01            sta $01,x
0028B4r 2               
0028B4r 2               ; src/prelude.fth:6:28 in `dup`
0028B4r 2               @OPCODE_2150:   ; [c64_ir] InlineExit
0028B4r 2                   ; inline exit
0028B4r 2  68               pla
0028B5r 2  68               pla
0028B6r 2               
0028B6r 2               @target_616:
0028B6r 2               
0028B6r 2               ; snake.fth:151:3 in `is-vertical`
0028B6r 2               @OPCODE_2152:   ; [c64_ir] PushLiteral(38)
0028B6r 2  E8               inx
0028B7r 2  E8               inx
0028B8r 2  A9 26            lda #38
0028BAr 2  95 00            sta $00,x
0028BCr 2  A9 00            lda #0
0028BEr 2  95 01            sta $01,x
0028C0r 2               
0028C0r 2               ; snake.fth:151:6 in `is-vertical`
0028C0r 2               @OPCODE_2153:   ; [c64_ir] InlineCall("=")
0028C0r 2                   ; inline call(=)
0028C0r 2  48               pha
0028C1r 2  48               pha
0028C2r 2               
0028C2r 2               @target_617:
0028C2r 2               
0028C2r 2               ; src/prelude.fth:22:8 in `=`
0028C2r 2               @OPCODE_2155:   ; [c64_ir] InlineCall("-")
0028C2r 2                   ; inline call(-)
0028C2r 2  48               pha
0028C3r 2  48               pha
0028C4r 2               
0028C4r 2               @target_618:
0028C4r 2               
0028C4r 2               ; src/prelude.fth:16:12 in `-`
0028C4r 2               @OPCODE_2157:   ; [c64_ir] InlineCall("negate")
0028C4r 2                   ; inline call(negate)
0028C4r 2  48               pha
0028C5r 2  48               pha
0028C6r 2               
0028C6r 2               @target_619:
0028C6r 2               
0028C6r 2               ; src/prelude.fth:15:12 in `negate`
0028C6r 2               @OPCODE_2159:   ; [c64_ir] InlineCall("invert")
0028C6r 2                   ; inline call(invert)
0028C6r 2  48               pha
0028C7r 2  48               pha
0028C8r 2               
0028C8r 2               @target_620:
0028C8r 2               
0028C8r 2               ; src/prelude.fth:14:12 in `invert`
0028C8r 2               @OPCODE_2161:   ; [c64_ir] PushLiteral(-1)
0028C8r 2  E8               inx
0028C9r 2  E8               inx
0028CAr 2  A9 FF            lda #255
0028CCr 2  95 00            sta $00,x
0028CEr 2  A9 FF            lda #255
0028D0r 2  95 01            sta $01,x
0028D2r 2               
0028D2r 2               ; src/prelude.fth:14:15 in `invert`
0028D2r 2               @OPCODE_2162:   ; [c64_ir] Nand
0028D2r 2                   ; 26
0028D2r 2  CA               dex
0028D3r 2  CA               dex
0028D4r 2  B5 00            lda $00,x
0028D6r 2  35 02            and $02,x
0028D8r 2  49 FF            eor #$ff
0028DAr 2  95 00            sta $00,x
0028DCr 2  B5 01            lda $01,x
0028DEr 2  35 03            and $03,x
0028E0r 2  49 FF            eor #$ff
0028E2r 2  95 01            sta $01,x
0028E4r 2               
0028E4r 2               ; src/prelude.fth:14:20 in `invert`
0028E4r 2               @OPCODE_2163:   ; [c64_ir] InlineExit
0028E4r 2                   ; inline exit
0028E4r 2  68               pla
0028E5r 2  68               pla
0028E6r 2               
0028E6r 2               @target_621:
0028E6r 2               
0028E6r 2               ; src/prelude.fth:15:19 in `negate`
0028E6r 2               @OPCODE_2165:   ; [c64_ir] PushLiteral(1)
0028E6r 2  E8               inx
0028E7r 2  E8               inx
0028E8r 2  A9 01            lda #1
0028EAr 2  95 00            sta $00,x
0028ECr 2  A9 00            lda #0
0028EEr 2  95 01            sta $01,x
0028F0r 2               
0028F0r 2               ; src/prelude.fth:15:21 in `negate`
0028F0r 2               @OPCODE_2166:   ; [c64_ir] Add
0028F0r 2                   ; 21
0028F0r 2  CA               dex
0028F1r 2  CA               dex
0028F2r 2  18               clc
0028F3r 2  B5 00            lda $00,x
0028F5r 2  75 02            adc $02,x
0028F7r 2  95 00            sta $00,x
0028F9r 2  B5 01            lda $01,x
0028FBr 2  75 03            adc $03,x
0028FDr 2  95 01            sta $01,x
0028FFr 2               
0028FFr 2               ; src/prelude.fth:15:23 in `negate`
0028FFr 2               @OPCODE_2167:   ; [c64_ir] InlineExit
0028FFr 2                   ; inline exit
0028FFr 2  68               pla
002900r 2  68               pla
002901r 2               
002901r 2               @target_622:
002901r 2               
002901r 2               ; src/prelude.fth:16:19 in `-`
002901r 2               @OPCODE_2169:   ; [c64_ir] Add
002901r 2                   ; 21
002901r 2  CA               dex
002902r 2  CA               dex
002903r 2  18               clc
002904r 2  B5 00            lda $00,x
002906r 2  75 02            adc $02,x
002908r 2  95 00            sta $00,x
00290Ar 2  B5 01            lda $01,x
00290Cr 2  75 03            adc $03,x
00290Er 2  95 01            sta $01,x
002910r 2               
002910r 2               ; src/prelude.fth:16:21 in `-`
002910r 2               @OPCODE_2170:   ; [c64_ir] InlineExit
002910r 2                   ; inline exit
002910r 2  68               pla
002911r 2  68               pla
002912r 2               
002912r 2               @target_623:
002912r 2               
002912r 2               ; src/prelude.fth:22:10 in `=`
002912r 2               @OPCODE_2172:   ; [c64_ir] InlineCall("0=")
002912r 2                   ; inline call(0=)
002912r 2  48               pha
002913r 2  48               pha
002914r 2               
002914r 2               @target_624:
002914r 2               
002914r 2               ; src/prelude.fth:21:8 in `0=`
002914r 2               @OPCODE_2174:   ; [c64_ir] JumpIf0(626)
002914r 2  CA               dex
002915r 2  CA               dex
002916r 2  B5 02            lda $02,x
002918r 2  15 03            ora $03,x
00291Ar 2  D0 03            bne *+5
00291Cr 2  4C rr rr         jmp @target_626
00291Fr 2               
00291Fr 2               @target_625:
00291Fr 2               
00291Fr 2               ; src/prelude.fth:21:11 in `0=`
00291Fr 2               @OPCODE_2176:   ; [c64_ir] PushLiteral(0)
00291Fr 2  E8               inx
002920r 2  E8               inx
002921r 2  A9 00            lda #0
002923r 2  95 00            sta $00,x
002925r 2  A9 00            lda #0
002927r 2  95 01            sta $01,x
002929r 2               
002929r 2               ; src/prelude.fth:21:13 in `0=`
002929r 2               @OPCODE_2177:   ; [c64_ir] JumpElse(627)
002929r 2  4C rr rr         jmp @target_627
00292Cr 2               
00292Cr 2               @target_626:
00292Cr 2               
00292Cr 2               ; src/prelude.fth:21:18 in `0=`
00292Cr 2               @OPCODE_2179:   ; [c64_ir] PushLiteral(-1)
00292Cr 2  E8               inx
00292Dr 2  E8               inx
00292Er 2  A9 FF            lda #255
002930r 2  95 00            sta $00,x
002932r 2  A9 FF            lda #255
002934r 2  95 01            sta $01,x
002936r 2               
002936r 2               ; src/prelude.fth:21:21 in `0=`
002936r 2               @OPCODE_2180:   ; [c64_ir] JumpTarget(626)
002936r 2               
002936r 2               @target_627:
002936r 2               
002936r 2               ; src/prelude.fth:21:26 in `0=`
002936r 2               @OPCODE_2182:   ; [c64_ir] InlineExit
002936r 2                   ; inline exit
002936r 2  68               pla
002937r 2  68               pla
002938r 2               
002938r 2               @target_628:
002938r 2               
002938r 2               ; src/prelude.fth:22:13 in `=`
002938r 2               @OPCODE_2184:   ; [c64_ir] InlineExit
002938r 2                   ; inline exit
002938r 2  68               pla
002939r 2  68               pla
00293Ar 2               
00293Ar 2               @target_629:
00293Ar 2               
00293Ar 2               ; snake.fth:151:8 in `is-vertical`
00293Ar 2               @OPCODE_2186:   ; [c64_ir] InlineCall("swap")
00293Ar 2                   ; inline call(swap)
00293Ar 2  48               pha
00293Br 2  48               pha
00293Cr 2               
00293Cr 2               @target_630:
00293Cr 2               
00293Cr 2               ; src/prelude.fth:3:10 in `swap`
00293Cr 2               @OPCODE_2188:   ; [c64_ir] AltPush
00293Cr 2  CA               dex
00293Dr 2  CA               dex
00293Er 2  B5 03            lda $03,x
002940r 2  48               pha
002941r 2  B5 02            lda $02,x
002943r 2  48               pha
002944r 2               
002944r 2               ; src/prelude.fth:3:13 in `swap`
002944r 2               @OPCODE_2189:   ; [c64_ir] TempStore
002944r 2  CA               dex
002945r 2  CA               dex
002946r 2  B5 03            lda $03,x
002948r 2  85 96            sta TEMP_PAX2
00294Ar 2  B5 02            lda $02,x
00294Cr 2  85 95            sta TEMP_PAX1
00294Er 2               
00294Er 2               ; src/prelude.fth:3:19 in `swap`
00294Er 2               @OPCODE_2190:   ; [c64_ir] AltPop
00294Er 2  E8               inx
00294Fr 2  E8               inx
002950r 2  68               pla
002951r 2  95 00            sta $00,x
002953r 2  68               pla
002954r 2  95 01            sta $01,x
002956r 2               
002956r 2               ; src/prelude.fth:3:22 in `swap`
002956r 2               @OPCODE_2191:   ; [c64_ir] TempLoad
002956r 2  E8               inx
002957r 2  E8               inx
002958r 2  A5 95            lda TEMP_PAX1
00295Ar 2  95 00            sta $00,x
00295Cr 2  A5 96            lda TEMP_PAX2
00295Er 2  95 01            sta $01,x
002960r 2               
002960r 2               ; src/prelude.fth:3:28 in `swap`
002960r 2               @OPCODE_2192:   ; [c64_ir] InlineExit
002960r 2                   ; inline exit
002960r 2  68               pla
002961r 2  68               pla
002962r 2               
002962r 2               @target_631:
002962r 2               
002962r 2               ; snake.fth:152:3 in `is-vertical`
002962r 2               @OPCODE_2194:   ; [c64_ir] PushLiteral(40)
002962r 2  E8               inx
002963r 2  E8               inx
002964r 2  A9 28            lda #40
002966r 2  95 00            sta $00,x
002968r 2  A9 00            lda #0
00296Ar 2  95 01            sta $01,x
00296Cr 2               
00296Cr 2               ; snake.fth:152:8 in `is-vertical`
00296Cr 2               @OPCODE_2195:   ; [c64_ir] InlineCall("=")
00296Cr 2                   ; inline call(=)
00296Cr 2  48               pha
00296Dr 2  48               pha
00296Er 2               
00296Er 2               @target_632:
00296Er 2               
00296Er 2               ; src/prelude.fth:22:8 in `=`
00296Er 2               @OPCODE_2197:   ; [c64_ir] InlineCall("-")
00296Er 2                   ; inline call(-)
00296Er 2  48               pha
00296Fr 2  48               pha
002970r 2               
002970r 2               @target_633:
002970r 2               
002970r 2               ; src/prelude.fth:16:12 in `-`
002970r 2               @OPCODE_2199:   ; [c64_ir] InlineCall("negate")
002970r 2                   ; inline call(negate)
002970r 2  48               pha
002971r 2  48               pha
002972r 2               
002972r 2               @target_634:
002972r 2               
002972r 2               ; src/prelude.fth:15:12 in `negate`
002972r 2               @OPCODE_2201:   ; [c64_ir] InlineCall("invert")
002972r 2                   ; inline call(invert)
002972r 2  48               pha
002973r 2  48               pha
002974r 2               
002974r 2               @target_635:
002974r 2               
002974r 2               ; src/prelude.fth:14:12 in `invert`
002974r 2               @OPCODE_2203:   ; [c64_ir] PushLiteral(-1)
002974r 2  E8               inx
002975r 2  E8               inx
002976r 2  A9 FF            lda #255
002978r 2  95 00            sta $00,x
00297Ar 2  A9 FF            lda #255
00297Cr 2  95 01            sta $01,x
00297Er 2               
00297Er 2               ; src/prelude.fth:14:15 in `invert`
00297Er 2               @OPCODE_2204:   ; [c64_ir] Nand
00297Er 2                   ; 26
00297Er 2  CA               dex
00297Fr 2  CA               dex
002980r 2  B5 00            lda $00,x
002982r 2  35 02            and $02,x
002984r 2  49 FF            eor #$ff
002986r 2  95 00            sta $00,x
002988r 2  B5 01            lda $01,x
00298Ar 2  35 03            and $03,x
00298Cr 2  49 FF            eor #$ff
00298Er 2  95 01            sta $01,x
002990r 2               
002990r 2               ; src/prelude.fth:14:20 in `invert`
002990r 2               @OPCODE_2205:   ; [c64_ir] InlineExit
002990r 2                   ; inline exit
002990r 2  68               pla
002991r 2  68               pla
002992r 2               
002992r 2               @target_636:
002992r 2               
002992r 2               ; src/prelude.fth:15:19 in `negate`
002992r 2               @OPCODE_2207:   ; [c64_ir] PushLiteral(1)
002992r 2  E8               inx
002993r 2  E8               inx
002994r 2  A9 01            lda #1
002996r 2  95 00            sta $00,x
002998r 2  A9 00            lda #0
00299Ar 2  95 01            sta $01,x
00299Cr 2               
00299Cr 2               ; src/prelude.fth:15:21 in `negate`
00299Cr 2               @OPCODE_2208:   ; [c64_ir] Add
00299Cr 2                   ; 21
00299Cr 2  CA               dex
00299Dr 2  CA               dex
00299Er 2  18               clc
00299Fr 2  B5 00            lda $00,x
0029A1r 2  75 02            adc $02,x
0029A3r 2  95 00            sta $00,x
0029A5r 2  B5 01            lda $01,x
0029A7r 2  75 03            adc $03,x
0029A9r 2  95 01            sta $01,x
0029ABr 2               
0029ABr 2               ; src/prelude.fth:15:23 in `negate`
0029ABr 2               @OPCODE_2209:   ; [c64_ir] InlineExit
0029ABr 2                   ; inline exit
0029ABr 2  68               pla
0029ACr 2  68               pla
0029ADr 2               
0029ADr 2               @target_637:
0029ADr 2               
0029ADr 2               ; src/prelude.fth:16:19 in `-`
0029ADr 2               @OPCODE_2211:   ; [c64_ir] Add
0029ADr 2                   ; 21
0029ADr 2  CA               dex
0029AEr 2  CA               dex
0029AFr 2  18               clc
0029B0r 2  B5 00            lda $00,x
0029B2r 2  75 02            adc $02,x
0029B4r 2  95 00            sta $00,x
0029B6r 2  B5 01            lda $01,x
0029B8r 2  75 03            adc $03,x
0029BAr 2  95 01            sta $01,x
0029BCr 2               
0029BCr 2               ; src/prelude.fth:16:21 in `-`
0029BCr 2               @OPCODE_2212:   ; [c64_ir] InlineExit
0029BCr 2                   ; inline exit
0029BCr 2  68               pla
0029BDr 2  68               pla
0029BEr 2               
0029BEr 2               @target_638:
0029BEr 2               
0029BEr 2               ; src/prelude.fth:22:10 in `=`
0029BEr 2               @OPCODE_2214:   ; [c64_ir] InlineCall("0=")
0029BEr 2                   ; inline call(0=)
0029BEr 2  48               pha
0029BFr 2  48               pha
0029C0r 2               
0029C0r 2               @target_639:
0029C0r 2               
0029C0r 2               ; src/prelude.fth:21:8 in `0=`
0029C0r 2               @OPCODE_2216:   ; [c64_ir] JumpIf0(641)
0029C0r 2  CA               dex
0029C1r 2  CA               dex
0029C2r 2  B5 02            lda $02,x
0029C4r 2  15 03            ora $03,x
0029C6r 2  D0 03            bne *+5
0029C8r 2  4C rr rr         jmp @target_641
0029CBr 2               
0029CBr 2               @target_640:
0029CBr 2               
0029CBr 2               ; src/prelude.fth:21:11 in `0=`
0029CBr 2               @OPCODE_2218:   ; [c64_ir] PushLiteral(0)
0029CBr 2  E8               inx
0029CCr 2  E8               inx
0029CDr 2  A9 00            lda #0
0029CFr 2  95 00            sta $00,x
0029D1r 2  A9 00            lda #0
0029D3r 2  95 01            sta $01,x
0029D5r 2               
0029D5r 2               ; src/prelude.fth:21:13 in `0=`
0029D5r 2               @OPCODE_2219:   ; [c64_ir] JumpElse(642)
0029D5r 2  4C rr rr         jmp @target_642
0029D8r 2               
0029D8r 2               @target_641:
0029D8r 2               
0029D8r 2               ; src/prelude.fth:21:18 in `0=`
0029D8r 2               @OPCODE_2221:   ; [c64_ir] PushLiteral(-1)
0029D8r 2  E8               inx
0029D9r 2  E8               inx
0029DAr 2  A9 FF            lda #255
0029DCr 2  95 00            sta $00,x
0029DEr 2  A9 FF            lda #255
0029E0r 2  95 01            sta $01,x
0029E2r 2               
0029E2r 2               ; src/prelude.fth:21:21 in `0=`
0029E2r 2               @OPCODE_2222:   ; [c64_ir] JumpTarget(641)
0029E2r 2               
0029E2r 2               @target_642:
0029E2r 2               
0029E2r 2               ; src/prelude.fth:21:26 in `0=`
0029E2r 2               @OPCODE_2224:   ; [c64_ir] InlineExit
0029E2r 2                   ; inline exit
0029E2r 2  68               pla
0029E3r 2  68               pla
0029E4r 2               
0029E4r 2               @target_643:
0029E4r 2               
0029E4r 2               ; src/prelude.fth:22:13 in `=`
0029E4r 2               @OPCODE_2226:   ; [c64_ir] InlineExit
0029E4r 2                   ; inline exit
0029E4r 2  68               pla
0029E5r 2  68               pla
0029E6r 2               
0029E6r 2               @target_644:
0029E6r 2               
0029E6r 2               ; snake.fth:152:10 in `is-vertical`
0029E6r 2               @OPCODE_2228:   ; [c64_ir] InlineCall("or")
0029E6r 2                   ; inline call(or)
0029E6r 2  48               pha
0029E7r 2  48               pha
0029E8r 2               
0029E8r 2               @target_645:
0029E8r 2               
0029E8r 2               ; src/prelude.fth:26:8 in `or`
0029E8r 2               @OPCODE_2230:   ; [c64_ir] InlineCall("invert")
0029E8r 2                   ; inline call(invert)
0029E8r 2  48               pha
0029E9r 2  48               pha
0029EAr 2               
0029EAr 2               @target_646:
0029EAr 2               
0029EAr 2               ; src/prelude.fth:14:12 in `invert`
0029EAr 2               @OPCODE_2232:   ; [c64_ir] PushLiteral(-1)
0029EAr 2  E8               inx
0029EBr 2  E8               inx
0029ECr 2  A9 FF            lda #255
0029EEr 2  95 00            sta $00,x
0029F0r 2  A9 FF            lda #255
0029F2r 2  95 01            sta $01,x
0029F4r 2               
0029F4r 2               ; src/prelude.fth:14:15 in `invert`
0029F4r 2               @OPCODE_2233:   ; [c64_ir] Nand
0029F4r 2                   ; 26
0029F4r 2  CA               dex
0029F5r 2  CA               dex
0029F6r 2  B5 00            lda $00,x
0029F8r 2  35 02            and $02,x
0029FAr 2  49 FF            eor #$ff
0029FCr 2  95 00            sta $00,x
0029FEr 2  B5 01            lda $01,x
002A00r 2  35 03            and $03,x
002A02r 2  49 FF            eor #$ff
002A04r 2  95 01            sta $01,x
002A06r 2               
002A06r 2               ; src/prelude.fth:14:20 in `invert`
002A06r 2               @OPCODE_2234:   ; [c64_ir] InlineExit
002A06r 2                   ; inline exit
002A06r 2  68               pla
002A07r 2  68               pla
002A08r 2               
002A08r 2               @target_647:
002A08r 2               
002A08r 2               ; src/prelude.fth:26:15 in `or`
002A08r 2               @OPCODE_2236:   ; [c64_ir] InlineCall("swap")
002A08r 2                   ; inline call(swap)
002A08r 2  48               pha
002A09r 2  48               pha
002A0Ar 2               
002A0Ar 2               @target_648:
002A0Ar 2               
002A0Ar 2               ; src/prelude.fth:3:10 in `swap`
002A0Ar 2               @OPCODE_2238:   ; [c64_ir] AltPush
002A0Ar 2  CA               dex
002A0Br 2  CA               dex
002A0Cr 2  B5 03            lda $03,x
002A0Er 2  48               pha
002A0Fr 2  B5 02            lda $02,x
002A11r 2  48               pha
002A12r 2               
002A12r 2               ; src/prelude.fth:3:13 in `swap`
002A12r 2               @OPCODE_2239:   ; [c64_ir] TempStore
002A12r 2  CA               dex
002A13r 2  CA               dex
002A14r 2  B5 03            lda $03,x
002A16r 2  85 96            sta TEMP_PAX2
002A18r 2  B5 02            lda $02,x
002A1Ar 2  85 95            sta TEMP_PAX1
002A1Cr 2               
002A1Cr 2               ; src/prelude.fth:3:19 in `swap`
002A1Cr 2               @OPCODE_2240:   ; [c64_ir] AltPop
002A1Cr 2  E8               inx
002A1Dr 2  E8               inx
002A1Er 2  68               pla
002A1Fr 2  95 00            sta $00,x
002A21r 2  68               pla
002A22r 2  95 01            sta $01,x
002A24r 2               
002A24r 2               ; src/prelude.fth:3:22 in `swap`
002A24r 2               @OPCODE_2241:   ; [c64_ir] TempLoad
002A24r 2  E8               inx
002A25r 2  E8               inx
002A26r 2  A5 95            lda TEMP_PAX1
002A28r 2  95 00            sta $00,x
002A2Ar 2  A5 96            lda TEMP_PAX2
002A2Cr 2  95 01            sta $01,x
002A2Er 2               
002A2Er 2               ; src/prelude.fth:3:28 in `swap`
002A2Er 2               @OPCODE_2242:   ; [c64_ir] InlineExit
002A2Er 2                   ; inline exit
002A2Er 2  68               pla
002A2Fr 2  68               pla
002A30r 2               
002A30r 2               @target_649:
002A30r 2               
002A30r 2               ; src/prelude.fth:26:20 in `or`
002A30r 2               @OPCODE_2244:   ; [c64_ir] InlineCall("invert")
002A30r 2                   ; inline call(invert)
002A30r 2  48               pha
002A31r 2  48               pha
002A32r 2               
002A32r 2               @target_650:
002A32r 2               
002A32r 2               ; src/prelude.fth:14:12 in `invert`
002A32r 2               @OPCODE_2246:   ; [c64_ir] PushLiteral(-1)
002A32r 2  E8               inx
002A33r 2  E8               inx
002A34r 2  A9 FF            lda #255
002A36r 2  95 00            sta $00,x
002A38r 2  A9 FF            lda #255
002A3Ar 2  95 01            sta $01,x
002A3Cr 2               
002A3Cr 2               ; src/prelude.fth:14:15 in `invert`
002A3Cr 2               @OPCODE_2247:   ; [c64_ir] Nand
002A3Cr 2                   ; 26
002A3Cr 2  CA               dex
002A3Dr 2  CA               dex
002A3Er 2  B5 00            lda $00,x
002A40r 2  35 02            and $02,x
002A42r 2  49 FF            eor #$ff
002A44r 2  95 00            sta $00,x
002A46r 2  B5 01            lda $01,x
002A48r 2  35 03            and $03,x
002A4Ar 2  49 FF            eor #$ff
002A4Cr 2  95 01            sta $01,x
002A4Er 2               
002A4Er 2               ; src/prelude.fth:14:20 in `invert`
002A4Er 2               @OPCODE_2248:   ; [c64_ir] InlineExit
002A4Er 2                   ; inline exit
002A4Er 2  68               pla
002A4Fr 2  68               pla
002A50r 2               
002A50r 2               @target_651:
002A50r 2               
002A50r 2               ; src/prelude.fth:26:27 in `or`
002A50r 2               @OPCODE_2250:   ; [c64_ir] Nand
002A50r 2                   ; 26
002A50r 2  CA               dex
002A51r 2  CA               dex
002A52r 2  B5 00            lda $00,x
002A54r 2  35 02            and $02,x
002A56r 2  49 FF            eor #$ff
002A58r 2  95 00            sta $00,x
002A5Ar 2  B5 01            lda $01,x
002A5Cr 2  35 03            and $03,x
002A5Er 2  49 FF            eor #$ff
002A60r 2  95 01            sta $01,x
002A62r 2               
002A62r 2               ; src/prelude.fth:26:32 in `or`
002A62r 2               @OPCODE_2251:   ; [c64_ir] InlineExit
002A62r 2                   ; inline exit
002A62r 2  68               pla
002A63r 2  68               pla
002A64r 2               
002A64r 2               @target_652:
002A64r 2               
002A64r 2               ; snake.fth:152:13 in `is-vertical`
002A64r 2               @OPCODE_2253:   ; [c64_ir] InlineExit
002A64r 2                   ; inline exit
002A64r 2  68               pla
002A65r 2  68               pla
002A66r 2               
002A66r 2               @target_653:
002A66r 2               
002A66r 2               ; snake.fth:155:27 in `turn-left`
002A66r 2               @OPCODE_2255:   ; [c64_ir] JumpIf0(655)
002A66r 2  CA               dex
002A67r 2  CA               dex
002A68r 2  B5 02            lda $02,x
002A6Ar 2  15 03            ora $03,x
002A6Cr 2  D0 03            bne *+5
002A6Er 2  4C rr rr         jmp @target_655
002A71r 2               
002A71r 2               @target_654:
002A71r 2               
002A71r 2               ; snake.fth:155:30 in `turn-left`
002A71r 2               @OPCODE_2257:   ; [c64_ir] PushLiteral(37)
002A71r 2  E8               inx
002A72r 2  E8               inx
002A73r 2  A9 25            lda #37
002A75r 2  95 00            sta $00,x
002A77r 2  A9 00            lda #0
002A79r 2  95 01            sta $01,x
002A7Br 2               
002A7Br 2               ; snake.fth:155:35 in `turn-left`
002A7Br 2               @OPCODE_2258:   ; [c64_ir] PushLiteral(-26660)
002A7Br 2  E8               inx
002A7Cr 2  E8               inx
002A7Dr 2  A9 DC            lda #220
002A7Fr 2  95 00            sta $00,x
002A81r 2  A9 97            lda #151
002A83r 2  95 01            sta $01,x
002A85r 2               
002A85r 2               ; snake.fth:155:45 in `turn-left`
002A85r 2               @OPCODE_2259:   ; [c64_ir] Store
002A85r 2  CA               dex
002A86r 2  CA               dex
002A87r 2  CA               dex
002A88r 2  CA               dex
002A89r 2  B5 02            lda $02,x
002A8Br 2  81 04            sta ($04,x)
002A8Dr 2                   ; TODO high byte
002A8Dr 2               
002A8Dr 2               ; snake.fth:155:47 in `turn-left`
002A8Dr 2               @OPCODE_2260:   ; [c64_ir] JumpTarget(654)
002A8Dr 2               
002A8Dr 2               @target_655:
002A8Dr 2               
002A8Dr 2               ; snake.fth:155:52 in `turn-left`
002A8Dr 2               @OPCODE_2262:   ; [c64_ir] InlineExit
002A8Dr 2                   ; inline exit
002A8Dr 2  68               pla
002A8Er 2  68               pla
002A8Fr 2               
002A8Fr 2               @target_656:
002A8Fr 2               
002A8Fr 2               ; snake.fth:160:28 in `change-direction`
002A8Fr 2               @OPCODE_2264:   ; [c64_ir] JumpElse(843)
002A8Fr 2  4C rr rr         jmp @target_843
002A92r 2               
002A92r 2               @target_657:
002A92r 2               
002A92r 2               ; snake.fth:161:3 in `change-direction`
002A92r 2               @OPCODE_2266:   ; [c64_ir] PushLiteral(38)
002A92r 2  E8               inx
002A93r 2  E8               inx
002A94r 2  A9 26            lda #38
002A96r 2  95 00            sta $00,x
002A98r 2  A9 00            lda #0
002A9Ar 2  95 01            sta $01,x
002A9Cr 2               
002A9Cr 2               ; snake.fth:161:6 in `change-direction`
002A9Cr 2               @OPCODE_2267:   ; [c64_ir] InlineCall("over")
002A9Cr 2                   ; inline call(over)
002A9Cr 2  48               pha
002A9Dr 2  48               pha
002A9Er 2               
002A9Er 2               @target_658:
002A9Er 2               
002A9Er 2               ; src/prelude.fth:4:10 in `over`
002A9Er 2               @OPCODE_2269:   ; [c64_ir] AltPush
002A9Er 2  CA               dex
002A9Fr 2  CA               dex
002AA0r 2  B5 03            lda $03,x
002AA2r 2  48               pha
002AA3r 2  B5 02            lda $02,x
002AA5r 2  48               pha
002AA6r 2               
002AA6r 2               ; src/prelude.fth:4:13 in `over`
002AA6r 2               @OPCODE_2270:   ; [c64_ir] TempStore
002AA6r 2  CA               dex
002AA7r 2  CA               dex
002AA8r 2  B5 03            lda $03,x
002AAAr 2  85 96            sta TEMP_PAX2
002AACr 2  B5 02            lda $02,x
002AAEr 2  85 95            sta TEMP_PAX1
002AB0r 2               
002AB0r 2               ; src/prelude.fth:4:19 in `over`
002AB0r 2               @OPCODE_2271:   ; [c64_ir] TempLoad
002AB0r 2  E8               inx
002AB1r 2  E8               inx
002AB2r 2  A5 95            lda TEMP_PAX1
002AB4r 2  95 00            sta $00,x
002AB6r 2  A5 96            lda TEMP_PAX2
002AB8r 2  95 01            sta $01,x
002ABAr 2               
002ABAr 2               ; src/prelude.fth:4:25 in `over`
002ABAr 2               @OPCODE_2272:   ; [c64_ir] AltPop
002ABAr 2  E8               inx
002ABBr 2  E8               inx
002ABCr 2  68               pla
002ABDr 2  95 00            sta $00,x
002ABFr 2  68               pla
002AC0r 2  95 01            sta $01,x
002AC2r 2               
002AC2r 2               ; src/prelude.fth:4:28 in `over`
002AC2r 2               @OPCODE_2273:   ; [c64_ir] TempLoad
002AC2r 2  E8               inx
002AC3r 2  E8               inx
002AC4r 2  A5 95            lda TEMP_PAX1
002AC6r 2  95 00            sta $00,x
002AC8r 2  A5 96            lda TEMP_PAX2
002ACAr 2  95 01            sta $01,x
002ACCr 2               
002ACCr 2               ; src/prelude.fth:4:34 in `over`
002ACCr 2               @OPCODE_2274:   ; [c64_ir] InlineExit
002ACCr 2                   ; inline exit
002ACCr 2  68               pla
002ACDr 2  68               pla
002ACEr 2               
002ACEr 2               @target_659:
002ACEr 2               
002ACEr 2               ; snake.fth:161:11 in `change-direction`
002ACEr 2               @OPCODE_2276:   ; [c64_ir] InlineCall("=")
002ACEr 2                   ; inline call(=)
002ACEr 2  48               pha
002ACFr 2  48               pha
002AD0r 2               
002AD0r 2               @target_660:
002AD0r 2               
002AD0r 2               ; src/prelude.fth:22:8 in `=`
002AD0r 2               @OPCODE_2278:   ; [c64_ir] InlineCall("-")
002AD0r 2                   ; inline call(-)
002AD0r 2  48               pha
002AD1r 2  48               pha
002AD2r 2               
002AD2r 2               @target_661:
002AD2r 2               
002AD2r 2               ; src/prelude.fth:16:12 in `-`
002AD2r 2               @OPCODE_2280:   ; [c64_ir] InlineCall("negate")
002AD2r 2                   ; inline call(negate)
002AD2r 2  48               pha
002AD3r 2  48               pha
002AD4r 2               
002AD4r 2               @target_662:
002AD4r 2               
002AD4r 2               ; src/prelude.fth:15:12 in `negate`
002AD4r 2               @OPCODE_2282:   ; [c64_ir] InlineCall("invert")
002AD4r 2                   ; inline call(invert)
002AD4r 2  48               pha
002AD5r 2  48               pha
002AD6r 2               
002AD6r 2               @target_663:
002AD6r 2               
002AD6r 2               ; src/prelude.fth:14:12 in `invert`
002AD6r 2               @OPCODE_2284:   ; [c64_ir] PushLiteral(-1)
002AD6r 2  E8               inx
002AD7r 2  E8               inx
002AD8r 2  A9 FF            lda #255
002ADAr 2  95 00            sta $00,x
002ADCr 2  A9 FF            lda #255
002ADEr 2  95 01            sta $01,x
002AE0r 2               
002AE0r 2               ; src/prelude.fth:14:15 in `invert`
002AE0r 2               @OPCODE_2285:   ; [c64_ir] Nand
002AE0r 2                   ; 26
002AE0r 2  CA               dex
002AE1r 2  CA               dex
002AE2r 2  B5 00            lda $00,x
002AE4r 2  35 02            and $02,x
002AE6r 2  49 FF            eor #$ff
002AE8r 2  95 00            sta $00,x
002AEAr 2  B5 01            lda $01,x
002AECr 2  35 03            and $03,x
002AEEr 2  49 FF            eor #$ff
002AF0r 2  95 01            sta $01,x
002AF2r 2               
002AF2r 2               ; src/prelude.fth:14:20 in `invert`
002AF2r 2               @OPCODE_2286:   ; [c64_ir] InlineExit
002AF2r 2                   ; inline exit
002AF2r 2  68               pla
002AF3r 2  68               pla
002AF4r 2               
002AF4r 2               @target_664:
002AF4r 2               
002AF4r 2               ; src/prelude.fth:15:19 in `negate`
002AF4r 2               @OPCODE_2288:   ; [c64_ir] PushLiteral(1)
002AF4r 2  E8               inx
002AF5r 2  E8               inx
002AF6r 2  A9 01            lda #1
002AF8r 2  95 00            sta $00,x
002AFAr 2  A9 00            lda #0
002AFCr 2  95 01            sta $01,x
002AFEr 2               
002AFEr 2               ; src/prelude.fth:15:21 in `negate`
002AFEr 2               @OPCODE_2289:   ; [c64_ir] Add
002AFEr 2                   ; 21
002AFEr 2  CA               dex
002AFFr 2  CA               dex
002B00r 2  18               clc
002B01r 2  B5 00            lda $00,x
002B03r 2  75 02            adc $02,x
002B05r 2  95 00            sta $00,x
002B07r 2  B5 01            lda $01,x
002B09r 2  75 03            adc $03,x
002B0Br 2  95 01            sta $01,x
002B0Dr 2               
002B0Dr 2               ; src/prelude.fth:15:23 in `negate`
002B0Dr 2               @OPCODE_2290:   ; [c64_ir] InlineExit
002B0Dr 2                   ; inline exit
002B0Dr 2  68               pla
002B0Er 2  68               pla
002B0Fr 2               
002B0Fr 2               @target_665:
002B0Fr 2               
002B0Fr 2               ; src/prelude.fth:16:19 in `-`
002B0Fr 2               @OPCODE_2292:   ; [c64_ir] Add
002B0Fr 2                   ; 21
002B0Fr 2  CA               dex
002B10r 2  CA               dex
002B11r 2  18               clc
002B12r 2  B5 00            lda $00,x
002B14r 2  75 02            adc $02,x
002B16r 2  95 00            sta $00,x
002B18r 2  B5 01            lda $01,x
002B1Ar 2  75 03            adc $03,x
002B1Cr 2  95 01            sta $01,x
002B1Er 2               
002B1Er 2               ; src/prelude.fth:16:21 in `-`
002B1Er 2               @OPCODE_2293:   ; [c64_ir] InlineExit
002B1Er 2                   ; inline exit
002B1Er 2  68               pla
002B1Fr 2  68               pla
002B20r 2               
002B20r 2               @target_666:
002B20r 2               
002B20r 2               ; src/prelude.fth:22:10 in `=`
002B20r 2               @OPCODE_2295:   ; [c64_ir] InlineCall("0=")
002B20r 2                   ; inline call(0=)
002B20r 2  48               pha
002B21r 2  48               pha
002B22r 2               
002B22r 2               @target_667:
002B22r 2               
002B22r 2               ; src/prelude.fth:21:8 in `0=`
002B22r 2               @OPCODE_2297:   ; [c64_ir] JumpIf0(669)
002B22r 2  CA               dex
002B23r 2  CA               dex
002B24r 2  B5 02            lda $02,x
002B26r 2  15 03            ora $03,x
002B28r 2  D0 03            bne *+5
002B2Ar 2  4C rr rr         jmp @target_669
002B2Dr 2               
002B2Dr 2               @target_668:
002B2Dr 2               
002B2Dr 2               ; src/prelude.fth:21:11 in `0=`
002B2Dr 2               @OPCODE_2299:   ; [c64_ir] PushLiteral(0)
002B2Dr 2  E8               inx
002B2Er 2  E8               inx
002B2Fr 2  A9 00            lda #0
002B31r 2  95 00            sta $00,x
002B33r 2  A9 00            lda #0
002B35r 2  95 01            sta $01,x
002B37r 2               
002B37r 2               ; src/prelude.fth:21:13 in `0=`
002B37r 2               @OPCODE_2300:   ; [c64_ir] JumpElse(670)
002B37r 2  4C rr rr         jmp @target_670
002B3Ar 2               
002B3Ar 2               @target_669:
002B3Ar 2               
002B3Ar 2               ; src/prelude.fth:21:18 in `0=`
002B3Ar 2               @OPCODE_2302:   ; [c64_ir] PushLiteral(-1)
002B3Ar 2  E8               inx
002B3Br 2  E8               inx
002B3Cr 2  A9 FF            lda #255
002B3Er 2  95 00            sta $00,x
002B40r 2  A9 FF            lda #255
002B42r 2  95 01            sta $01,x
002B44r 2               
002B44r 2               ; src/prelude.fth:21:21 in `0=`
002B44r 2               @OPCODE_2303:   ; [c64_ir] JumpTarget(669)
002B44r 2               
002B44r 2               @target_670:
002B44r 2               
002B44r 2               ; src/prelude.fth:21:26 in `0=`
002B44r 2               @OPCODE_2305:   ; [c64_ir] InlineExit
002B44r 2                   ; inline exit
002B44r 2  68               pla
002B45r 2  68               pla
002B46r 2               
002B46r 2               @target_671:
002B46r 2               
002B46r 2               ; src/prelude.fth:22:13 in `=`
002B46r 2               @OPCODE_2307:   ; [c64_ir] InlineExit
002B46r 2                   ; inline exit
002B46r 2  68               pla
002B47r 2  68               pla
002B48r 2               
002B48r 2               @target_672:
002B48r 2               
002B48r 2               ; snake.fth:161:13 in `change-direction`
002B48r 2               @OPCODE_2309:   ; [c64_ir] JumpIf0(718)
002B48r 2  CA               dex
002B49r 2  CA               dex
002B4Ar 2  B5 02            lda $02,x
002B4Cr 2  15 03            ora $03,x
002B4Er 2  D0 03            bne *+5
002B50r 2  4C rr rr         jmp @target_718
002B53r 2               
002B53r 2               @target_673:
002B53r 2               
002B53r 2               ; snake.fth:161:16 in `change-direction`
002B53r 2               @OPCODE_2311:   ; [c64_ir] InlineCall("turn-up")
002B53r 2                   ; inline call(turn-up)
002B53r 2  48               pha
002B54r 2  48               pha
002B55r 2               
002B55r 2               @target_674:
002B55r 2               
002B55r 2               ; snake.fth:154:15 in `turn-up`
002B55r 2               @OPCODE_2313:   ; [c64_ir] InlineCall("is-horizontal")
002B55r 2                   ; inline call(is-horizontal)
002B55r 2  48               pha
002B56r 2  48               pha
002B57r 2               
002B57r 2               @target_675:
002B57r 2               
002B57r 2               ; snake.fth:146:18 in `is-horizontal`
002B57r 2               @OPCODE_2315:   ; [c64_ir] PushLiteral(-26660)
002B57r 2  E8               inx
002B58r 2  E8               inx
002B59r 2  A9 DC            lda #220
002B5Br 2  95 00            sta $00,x
002B5Dr 2  A9 97            lda #151
002B5Fr 2  95 01            sta $01,x
002B61r 2               
002B61r 2               ; snake.fth:146:28 in `is-horizontal`
002B61r 2               @OPCODE_2316:   ; [c64_ir] Load
002B61r 2  A1 00            lda ($00,x)
002B63r 2  95 00            sta $00,x
002B65r 2  A9 00            lda #0
002B67r 2  95 01            sta $01,x
002B69r 2               
002B69r 2               ; snake.fth:146:30 in `is-horizontal`
002B69r 2               @OPCODE_2317:   ; [c64_ir] InlineCall("dup")
002B69r 2                   ; inline call(dup)
002B69r 2  48               pha
002B6Ar 2  48               pha
002B6Br 2               
002B6Br 2               @target_676:
002B6Br 2               
002B6Br 2               ; src/prelude.fth:6:10 in `dup`
002B6Br 2               @OPCODE_2319:   ; [c64_ir] TempStore
002B6Br 2  CA               dex
002B6Cr 2  CA               dex
002B6Dr 2  B5 03            lda $03,x
002B6Fr 2  85 96            sta TEMP_PAX2
002B71r 2  B5 02            lda $02,x
002B73r 2  85 95            sta TEMP_PAX1
002B75r 2               
002B75r 2               ; src/prelude.fth:6:16 in `dup`
002B75r 2               @OPCODE_2320:   ; [c64_ir] TempLoad
002B75r 2  E8               inx
002B76r 2  E8               inx
002B77r 2  A5 95            lda TEMP_PAX1
002B79r 2  95 00            sta $00,x
002B7Br 2  A5 96            lda TEMP_PAX2
002B7Dr 2  95 01            sta $01,x
002B7Fr 2               
002B7Fr 2               ; src/prelude.fth:6:22 in `dup`
002B7Fr 2               @OPCODE_2321:   ; [c64_ir] TempLoad
002B7Fr 2  E8               inx
002B80r 2  E8               inx
002B81r 2  A5 95            lda TEMP_PAX1
002B83r 2  95 00            sta $00,x
002B85r 2  A5 96            lda TEMP_PAX2
002B87r 2  95 01            sta $01,x
002B89r 2               
002B89r 2               ; src/prelude.fth:6:28 in `dup`
002B89r 2               @OPCODE_2322:   ; [c64_ir] InlineExit
002B89r 2                   ; inline exit
002B89r 2  68               pla
002B8Ar 2  68               pla
002B8Br 2               
002B8Br 2               @target_677:
002B8Br 2               
002B8Br 2               ; snake.fth:147:3 in `is-horizontal`
002B8Br 2               @OPCODE_2324:   ; [c64_ir] PushLiteral(37)
002B8Br 2  E8               inx
002B8Cr 2  E8               inx
002B8Dr 2  A9 25            lda #37
002B8Fr 2  95 00            sta $00,x
002B91r 2  A9 00            lda #0
002B93r 2  95 01            sta $01,x
002B95r 2               
002B95r 2               ; snake.fth:147:8 in `is-horizontal`
002B95r 2               @OPCODE_2325:   ; [c64_ir] InlineCall("=")
002B95r 2                   ; inline call(=)
002B95r 2  48               pha
002B96r 2  48               pha
002B97r 2               
002B97r 2               @target_678:
002B97r 2               
002B97r 2               ; src/prelude.fth:22:8 in `=`
002B97r 2               @OPCODE_2327:   ; [c64_ir] InlineCall("-")
002B97r 2                   ; inline call(-)
002B97r 2  48               pha
002B98r 2  48               pha
002B99r 2               
002B99r 2               @target_679:
002B99r 2               
002B99r 2               ; src/prelude.fth:16:12 in `-`
002B99r 2               @OPCODE_2329:   ; [c64_ir] InlineCall("negate")
002B99r 2                   ; inline call(negate)
002B99r 2  48               pha
002B9Ar 2  48               pha
002B9Br 2               
002B9Br 2               @target_680:
002B9Br 2               
002B9Br 2               ; src/prelude.fth:15:12 in `negate`
002B9Br 2               @OPCODE_2331:   ; [c64_ir] InlineCall("invert")
002B9Br 2                   ; inline call(invert)
002B9Br 2  48               pha
002B9Cr 2  48               pha
002B9Dr 2               
002B9Dr 2               @target_681:
002B9Dr 2               
002B9Dr 2               ; src/prelude.fth:14:12 in `invert`
002B9Dr 2               @OPCODE_2333:   ; [c64_ir] PushLiteral(-1)
002B9Dr 2  E8               inx
002B9Er 2  E8               inx
002B9Fr 2  A9 FF            lda #255
002BA1r 2  95 00            sta $00,x
002BA3r 2  A9 FF            lda #255
002BA5r 2  95 01            sta $01,x
002BA7r 2               
002BA7r 2               ; src/prelude.fth:14:15 in `invert`
002BA7r 2               @OPCODE_2334:   ; [c64_ir] Nand
002BA7r 2                   ; 26
002BA7r 2  CA               dex
002BA8r 2  CA               dex
002BA9r 2  B5 00            lda $00,x
002BABr 2  35 02            and $02,x
002BADr 2  49 FF            eor #$ff
002BAFr 2  95 00            sta $00,x
002BB1r 2  B5 01            lda $01,x
002BB3r 2  35 03            and $03,x
002BB5r 2  49 FF            eor #$ff
002BB7r 2  95 01            sta $01,x
002BB9r 2               
002BB9r 2               ; src/prelude.fth:14:20 in `invert`
002BB9r 2               @OPCODE_2335:   ; [c64_ir] InlineExit
002BB9r 2                   ; inline exit
002BB9r 2  68               pla
002BBAr 2  68               pla
002BBBr 2               
002BBBr 2               @target_682:
002BBBr 2               
002BBBr 2               ; src/prelude.fth:15:19 in `negate`
002BBBr 2               @OPCODE_2337:   ; [c64_ir] PushLiteral(1)
002BBBr 2  E8               inx
002BBCr 2  E8               inx
002BBDr 2  A9 01            lda #1
002BBFr 2  95 00            sta $00,x
002BC1r 2  A9 00            lda #0
002BC3r 2  95 01            sta $01,x
002BC5r 2               
002BC5r 2               ; src/prelude.fth:15:21 in `negate`
002BC5r 2               @OPCODE_2338:   ; [c64_ir] Add
002BC5r 2                   ; 21
002BC5r 2  CA               dex
002BC6r 2  CA               dex
002BC7r 2  18               clc
002BC8r 2  B5 00            lda $00,x
002BCAr 2  75 02            adc $02,x
002BCCr 2  95 00            sta $00,x
002BCEr 2  B5 01            lda $01,x
002BD0r 2  75 03            adc $03,x
002BD2r 2  95 01            sta $01,x
002BD4r 2               
002BD4r 2               ; src/prelude.fth:15:23 in `negate`
002BD4r 2               @OPCODE_2339:   ; [c64_ir] InlineExit
002BD4r 2                   ; inline exit
002BD4r 2  68               pla
002BD5r 2  68               pla
002BD6r 2               
002BD6r 2               @target_683:
002BD6r 2               
002BD6r 2               ; src/prelude.fth:16:19 in `-`
002BD6r 2               @OPCODE_2341:   ; [c64_ir] Add
002BD6r 2                   ; 21
002BD6r 2  CA               dex
002BD7r 2  CA               dex
002BD8r 2  18               clc
002BD9r 2  B5 00            lda $00,x
002BDBr 2  75 02            adc $02,x
002BDDr 2  95 00            sta $00,x
002BDFr 2  B5 01            lda $01,x
002BE1r 2  75 03            adc $03,x
002BE3r 2  95 01            sta $01,x
002BE5r 2               
002BE5r 2               ; src/prelude.fth:16:21 in `-`
002BE5r 2               @OPCODE_2342:   ; [c64_ir] InlineExit
002BE5r 2                   ; inline exit
002BE5r 2  68               pla
002BE6r 2  68               pla
002BE7r 2               
002BE7r 2               @target_684:
002BE7r 2               
002BE7r 2               ; src/prelude.fth:22:10 in `=`
002BE7r 2               @OPCODE_2344:   ; [c64_ir] InlineCall("0=")
002BE7r 2                   ; inline call(0=)
002BE7r 2  48               pha
002BE8r 2  48               pha
002BE9r 2               
002BE9r 2               @target_685:
002BE9r 2               
002BE9r 2               ; src/prelude.fth:21:8 in `0=`
002BE9r 2               @OPCODE_2346:   ; [c64_ir] JumpIf0(687)
002BE9r 2  CA               dex
002BEAr 2  CA               dex
002BEBr 2  B5 02            lda $02,x
002BEDr 2  15 03            ora $03,x
002BEFr 2  D0 03            bne *+5
002BF1r 2  4C rr rr         jmp @target_687
002BF4r 2               
002BF4r 2               @target_686:
002BF4r 2               
002BF4r 2               ; src/prelude.fth:21:11 in `0=`
002BF4r 2               @OPCODE_2348:   ; [c64_ir] PushLiteral(0)
002BF4r 2  E8               inx
002BF5r 2  E8               inx
002BF6r 2  A9 00            lda #0
002BF8r 2  95 00            sta $00,x
002BFAr 2  A9 00            lda #0
002BFCr 2  95 01            sta $01,x
002BFEr 2               
002BFEr 2               ; src/prelude.fth:21:13 in `0=`
002BFEr 2               @OPCODE_2349:   ; [c64_ir] JumpElse(688)
002BFEr 2  4C rr rr         jmp @target_688
002C01r 2               
002C01r 2               @target_687:
002C01r 2               
002C01r 2               ; src/prelude.fth:21:18 in `0=`
002C01r 2               @OPCODE_2351:   ; [c64_ir] PushLiteral(-1)
002C01r 2  E8               inx
002C02r 2  E8               inx
002C03r 2  A9 FF            lda #255
002C05r 2  95 00            sta $00,x
002C07r 2  A9 FF            lda #255
002C09r 2  95 01            sta $01,x
002C0Br 2               
002C0Br 2               ; src/prelude.fth:21:21 in `0=`
002C0Br 2               @OPCODE_2352:   ; [c64_ir] JumpTarget(687)
002C0Br 2               
002C0Br 2               @target_688:
002C0Br 2               
002C0Br 2               ; src/prelude.fth:21:26 in `0=`
002C0Br 2               @OPCODE_2354:   ; [c64_ir] InlineExit
002C0Br 2                   ; inline exit
002C0Br 2  68               pla
002C0Cr 2  68               pla
002C0Dr 2               
002C0Dr 2               @target_689:
002C0Dr 2               
002C0Dr 2               ; src/prelude.fth:22:13 in `=`
002C0Dr 2               @OPCODE_2356:   ; [c64_ir] InlineExit
002C0Dr 2                   ; inline exit
002C0Dr 2  68               pla
002C0Er 2  68               pla
002C0Fr 2               
002C0Fr 2               @target_690:
002C0Fr 2               
002C0Fr 2               ; snake.fth:147:10 in `is-horizontal`
002C0Fr 2               @OPCODE_2358:   ; [c64_ir] InlineCall("swap")
002C0Fr 2                   ; inline call(swap)
002C0Fr 2  48               pha
002C10r 2  48               pha
002C11r 2               
002C11r 2               @target_691:
002C11r 2               
002C11r 2               ; src/prelude.fth:3:10 in `swap`
002C11r 2               @OPCODE_2360:   ; [c64_ir] AltPush
002C11r 2  CA               dex
002C12r 2  CA               dex
002C13r 2  B5 03            lda $03,x
002C15r 2  48               pha
002C16r 2  B5 02            lda $02,x
002C18r 2  48               pha
002C19r 2               
002C19r 2               ; src/prelude.fth:3:13 in `swap`
002C19r 2               @OPCODE_2361:   ; [c64_ir] TempStore
002C19r 2  CA               dex
002C1Ar 2  CA               dex
002C1Br 2  B5 03            lda $03,x
002C1Dr 2  85 96            sta TEMP_PAX2
002C1Fr 2  B5 02            lda $02,x
002C21r 2  85 95            sta TEMP_PAX1
002C23r 2               
002C23r 2               ; src/prelude.fth:3:19 in `swap`
002C23r 2               @OPCODE_2362:   ; [c64_ir] AltPop
002C23r 2  E8               inx
002C24r 2  E8               inx
002C25r 2  68               pla
002C26r 2  95 00            sta $00,x
002C28r 2  68               pla
002C29r 2  95 01            sta $01,x
002C2Br 2               
002C2Br 2               ; src/prelude.fth:3:22 in `swap`
002C2Br 2               @OPCODE_2363:   ; [c64_ir] TempLoad
002C2Br 2  E8               inx
002C2Cr 2  E8               inx
002C2Dr 2  A5 95            lda TEMP_PAX1
002C2Fr 2  95 00            sta $00,x
002C31r 2  A5 96            lda TEMP_PAX2
002C33r 2  95 01            sta $01,x
002C35r 2               
002C35r 2               ; src/prelude.fth:3:28 in `swap`
002C35r 2               @OPCODE_2364:   ; [c64_ir] InlineExit
002C35r 2                   ; inline exit
002C35r 2  68               pla
002C36r 2  68               pla
002C37r 2               
002C37r 2               @target_692:
002C37r 2               
002C37r 2               ; snake.fth:148:3 in `is-horizontal`
002C37r 2               @OPCODE_2366:   ; [c64_ir] PushLiteral(39)
002C37r 2  E8               inx
002C38r 2  E8               inx
002C39r 2  A9 27            lda #39
002C3Br 2  95 00            sta $00,x
002C3Dr 2  A9 00            lda #0
002C3Fr 2  95 01            sta $01,x
002C41r 2               
002C41r 2               ; snake.fth:148:9 in `is-horizontal`
002C41r 2               @OPCODE_2367:   ; [c64_ir] InlineCall("=")
002C41r 2                   ; inline call(=)
002C41r 2  48               pha
002C42r 2  48               pha
002C43r 2               
002C43r 2               @target_693:
002C43r 2               
002C43r 2               ; src/prelude.fth:22:8 in `=`
002C43r 2               @OPCODE_2369:   ; [c64_ir] InlineCall("-")
002C43r 2                   ; inline call(-)
002C43r 2  48               pha
002C44r 2  48               pha
002C45r 2               
002C45r 2               @target_694:
002C45r 2               
002C45r 2               ; src/prelude.fth:16:12 in `-`
002C45r 2               @OPCODE_2371:   ; [c64_ir] InlineCall("negate")
002C45r 2                   ; inline call(negate)
002C45r 2  48               pha
002C46r 2  48               pha
002C47r 2               
002C47r 2               @target_695:
002C47r 2               
002C47r 2               ; src/prelude.fth:15:12 in `negate`
002C47r 2               @OPCODE_2373:   ; [c64_ir] InlineCall("invert")
002C47r 2                   ; inline call(invert)
002C47r 2  48               pha
002C48r 2  48               pha
002C49r 2               
002C49r 2               @target_696:
002C49r 2               
002C49r 2               ; src/prelude.fth:14:12 in `invert`
002C49r 2               @OPCODE_2375:   ; [c64_ir] PushLiteral(-1)
002C49r 2  E8               inx
002C4Ar 2  E8               inx
002C4Br 2  A9 FF            lda #255
002C4Dr 2  95 00            sta $00,x
002C4Fr 2  A9 FF            lda #255
002C51r 2  95 01            sta $01,x
002C53r 2               
002C53r 2               ; src/prelude.fth:14:15 in `invert`
002C53r 2               @OPCODE_2376:   ; [c64_ir] Nand
002C53r 2                   ; 26
002C53r 2  CA               dex
002C54r 2  CA               dex
002C55r 2  B5 00            lda $00,x
002C57r 2  35 02            and $02,x
002C59r 2  49 FF            eor #$ff
002C5Br 2  95 00            sta $00,x
002C5Dr 2  B5 01            lda $01,x
002C5Fr 2  35 03            and $03,x
002C61r 2  49 FF            eor #$ff
002C63r 2  95 01            sta $01,x
002C65r 2               
002C65r 2               ; src/prelude.fth:14:20 in `invert`
002C65r 2               @OPCODE_2377:   ; [c64_ir] InlineExit
002C65r 2                   ; inline exit
002C65r 2  68               pla
002C66r 2  68               pla
002C67r 2               
002C67r 2               @target_697:
002C67r 2               
002C67r 2               ; src/prelude.fth:15:19 in `negate`
002C67r 2               @OPCODE_2379:   ; [c64_ir] PushLiteral(1)
002C67r 2  E8               inx
002C68r 2  E8               inx
002C69r 2  A9 01            lda #1
002C6Br 2  95 00            sta $00,x
002C6Dr 2  A9 00            lda #0
002C6Fr 2  95 01            sta $01,x
002C71r 2               
002C71r 2               ; src/prelude.fth:15:21 in `negate`
002C71r 2               @OPCODE_2380:   ; [c64_ir] Add
002C71r 2                   ; 21
002C71r 2  CA               dex
002C72r 2  CA               dex
002C73r 2  18               clc
002C74r 2  B5 00            lda $00,x
002C76r 2  75 02            adc $02,x
002C78r 2  95 00            sta $00,x
002C7Ar 2  B5 01            lda $01,x
002C7Cr 2  75 03            adc $03,x
002C7Er 2  95 01            sta $01,x
002C80r 2               
002C80r 2               ; src/prelude.fth:15:23 in `negate`
002C80r 2               @OPCODE_2381:   ; [c64_ir] InlineExit
002C80r 2                   ; inline exit
002C80r 2  68               pla
002C81r 2  68               pla
002C82r 2               
002C82r 2               @target_698:
002C82r 2               
002C82r 2               ; src/prelude.fth:16:19 in `-`
002C82r 2               @OPCODE_2383:   ; [c64_ir] Add
002C82r 2                   ; 21
002C82r 2  CA               dex
002C83r 2  CA               dex
002C84r 2  18               clc
002C85r 2  B5 00            lda $00,x
002C87r 2  75 02            adc $02,x
002C89r 2  95 00            sta $00,x
002C8Br 2  B5 01            lda $01,x
002C8Dr 2  75 03            adc $03,x
002C8Fr 2  95 01            sta $01,x
002C91r 2               
002C91r 2               ; src/prelude.fth:16:21 in `-`
002C91r 2               @OPCODE_2384:   ; [c64_ir] InlineExit
002C91r 2                   ; inline exit
002C91r 2  68               pla
002C92r 2  68               pla
002C93r 2               
002C93r 2               @target_699:
002C93r 2               
002C93r 2               ; src/prelude.fth:22:10 in `=`
002C93r 2               @OPCODE_2386:   ; [c64_ir] InlineCall("0=")
002C93r 2                   ; inline call(0=)
002C93r 2  48               pha
002C94r 2  48               pha
002C95r 2               
002C95r 2               @target_700:
002C95r 2               
002C95r 2               ; src/prelude.fth:21:8 in `0=`
002C95r 2               @OPCODE_2388:   ; [c64_ir] JumpIf0(702)
002C95r 2  CA               dex
002C96r 2  CA               dex
002C97r 2  B5 02            lda $02,x
002C99r 2  15 03            ora $03,x
002C9Br 2  D0 03            bne *+5
002C9Dr 2  4C rr rr         jmp @target_702
002CA0r 2               
002CA0r 2               @target_701:
002CA0r 2               
002CA0r 2               ; src/prelude.fth:21:11 in `0=`
002CA0r 2               @OPCODE_2390:   ; [c64_ir] PushLiteral(0)
002CA0r 2  E8               inx
002CA1r 2  E8               inx
002CA2r 2  A9 00            lda #0
002CA4r 2  95 00            sta $00,x
002CA6r 2  A9 00            lda #0
002CA8r 2  95 01            sta $01,x
002CAAr 2               
002CAAr 2               ; src/prelude.fth:21:13 in `0=`
002CAAr 2               @OPCODE_2391:   ; [c64_ir] JumpElse(703)
002CAAr 2  4C rr rr         jmp @target_703
002CADr 2               
002CADr 2               @target_702:
002CADr 2               
002CADr 2               ; src/prelude.fth:21:18 in `0=`
002CADr 2               @OPCODE_2393:   ; [c64_ir] PushLiteral(-1)
002CADr 2  E8               inx
002CAEr 2  E8               inx
002CAFr 2  A9 FF            lda #255
002CB1r 2  95 00            sta $00,x
002CB3r 2  A9 FF            lda #255
002CB5r 2  95 01            sta $01,x
002CB7r 2               
002CB7r 2               ; src/prelude.fth:21:21 in `0=`
002CB7r 2               @OPCODE_2394:   ; [c64_ir] JumpTarget(702)
002CB7r 2               
002CB7r 2               @target_703:
002CB7r 2               
002CB7r 2               ; src/prelude.fth:21:26 in `0=`
002CB7r 2               @OPCODE_2396:   ; [c64_ir] InlineExit
002CB7r 2                   ; inline exit
002CB7r 2  68               pla
002CB8r 2  68               pla
002CB9r 2               
002CB9r 2               @target_704:
002CB9r 2               
002CB9r 2               ; src/prelude.fth:22:13 in `=`
002CB9r 2               @OPCODE_2398:   ; [c64_ir] InlineExit
002CB9r 2                   ; inline exit
002CB9r 2  68               pla
002CBAr 2  68               pla
002CBBr 2               
002CBBr 2               @target_705:
002CBBr 2               
002CBBr 2               ; snake.fth:148:11 in `is-horizontal`
002CBBr 2               @OPCODE_2400:   ; [c64_ir] InlineCall("or")
002CBBr 2                   ; inline call(or)
002CBBr 2  48               pha
002CBCr 2  48               pha
002CBDr 2               
002CBDr 2               @target_706:
002CBDr 2               
002CBDr 2               ; src/prelude.fth:26:8 in `or`
002CBDr 2               @OPCODE_2402:   ; [c64_ir] InlineCall("invert")
002CBDr 2                   ; inline call(invert)
002CBDr 2  48               pha
002CBEr 2  48               pha
002CBFr 2               
002CBFr 2               @target_707:
002CBFr 2               
002CBFr 2               ; src/prelude.fth:14:12 in `invert`
002CBFr 2               @OPCODE_2404:   ; [c64_ir] PushLiteral(-1)
002CBFr 2  E8               inx
002CC0r 2  E8               inx
002CC1r 2  A9 FF            lda #255
002CC3r 2  95 00            sta $00,x
002CC5r 2  A9 FF            lda #255
002CC7r 2  95 01            sta $01,x
002CC9r 2               
002CC9r 2               ; src/prelude.fth:14:15 in `invert`
002CC9r 2               @OPCODE_2405:   ; [c64_ir] Nand
002CC9r 2                   ; 26
002CC9r 2  CA               dex
002CCAr 2  CA               dex
002CCBr 2  B5 00            lda $00,x
002CCDr 2  35 02            and $02,x
002CCFr 2  49 FF            eor #$ff
002CD1r 2  95 00            sta $00,x
002CD3r 2  B5 01            lda $01,x
002CD5r 2  35 03            and $03,x
002CD7r 2  49 FF            eor #$ff
002CD9r 2  95 01            sta $01,x
002CDBr 2               
002CDBr 2               ; src/prelude.fth:14:20 in `invert`
002CDBr 2               @OPCODE_2406:   ; [c64_ir] InlineExit
002CDBr 2                   ; inline exit
002CDBr 2  68               pla
002CDCr 2  68               pla
002CDDr 2               
002CDDr 2               @target_708:
002CDDr 2               
002CDDr 2               ; src/prelude.fth:26:15 in `or`
002CDDr 2               @OPCODE_2408:   ; [c64_ir] InlineCall("swap")
002CDDr 2                   ; inline call(swap)
002CDDr 2  48               pha
002CDEr 2  48               pha
002CDFr 2               
002CDFr 2               @target_709:
002CDFr 2               
002CDFr 2               ; src/prelude.fth:3:10 in `swap`
002CDFr 2               @OPCODE_2410:   ; [c64_ir] AltPush
002CDFr 2  CA               dex
002CE0r 2  CA               dex
002CE1r 2  B5 03            lda $03,x
002CE3r 2  48               pha
002CE4r 2  B5 02            lda $02,x
002CE6r 2  48               pha
002CE7r 2               
002CE7r 2               ; src/prelude.fth:3:13 in `swap`
002CE7r 2               @OPCODE_2411:   ; [c64_ir] TempStore
002CE7r 2  CA               dex
002CE8r 2  CA               dex
002CE9r 2  B5 03            lda $03,x
002CEBr 2  85 96            sta TEMP_PAX2
002CEDr 2  B5 02            lda $02,x
002CEFr 2  85 95            sta TEMP_PAX1
002CF1r 2               
002CF1r 2               ; src/prelude.fth:3:19 in `swap`
002CF1r 2               @OPCODE_2412:   ; [c64_ir] AltPop
002CF1r 2  E8               inx
002CF2r 2  E8               inx
002CF3r 2  68               pla
002CF4r 2  95 00            sta $00,x
002CF6r 2  68               pla
002CF7r 2  95 01            sta $01,x
002CF9r 2               
002CF9r 2               ; src/prelude.fth:3:22 in `swap`
002CF9r 2               @OPCODE_2413:   ; [c64_ir] TempLoad
002CF9r 2  E8               inx
002CFAr 2  E8               inx
002CFBr 2  A5 95            lda TEMP_PAX1
002CFDr 2  95 00            sta $00,x
002CFFr 2  A5 96            lda TEMP_PAX2
002D01r 2  95 01            sta $01,x
002D03r 2               
002D03r 2               ; src/prelude.fth:3:28 in `swap`
002D03r 2               @OPCODE_2414:   ; [c64_ir] InlineExit
002D03r 2                   ; inline exit
002D03r 2  68               pla
002D04r 2  68               pla
002D05r 2               
002D05r 2               @target_710:
002D05r 2               
002D05r 2               ; src/prelude.fth:26:20 in `or`
002D05r 2               @OPCODE_2416:   ; [c64_ir] InlineCall("invert")
002D05r 2                   ; inline call(invert)
002D05r 2  48               pha
002D06r 2  48               pha
002D07r 2               
002D07r 2               @target_711:
002D07r 2               
002D07r 2               ; src/prelude.fth:14:12 in `invert`
002D07r 2               @OPCODE_2418:   ; [c64_ir] PushLiteral(-1)
002D07r 2  E8               inx
002D08r 2  E8               inx
002D09r 2  A9 FF            lda #255
002D0Br 2  95 00            sta $00,x
002D0Dr 2  A9 FF            lda #255
002D0Fr 2  95 01            sta $01,x
002D11r 2               
002D11r 2               ; src/prelude.fth:14:15 in `invert`
002D11r 2               @OPCODE_2419:   ; [c64_ir] Nand
002D11r 2                   ; 26
002D11r 2  CA               dex
002D12r 2  CA               dex
002D13r 2  B5 00            lda $00,x
002D15r 2  35 02            and $02,x
002D17r 2  49 FF            eor #$ff
002D19r 2  95 00            sta $00,x
002D1Br 2  B5 01            lda $01,x
002D1Dr 2  35 03            and $03,x
002D1Fr 2  49 FF            eor #$ff
002D21r 2  95 01            sta $01,x
002D23r 2               
002D23r 2               ; src/prelude.fth:14:20 in `invert`
002D23r 2               @OPCODE_2420:   ; [c64_ir] InlineExit
002D23r 2                   ; inline exit
002D23r 2  68               pla
002D24r 2  68               pla
002D25r 2               
002D25r 2               @target_712:
002D25r 2               
002D25r 2               ; src/prelude.fth:26:27 in `or`
002D25r 2               @OPCODE_2422:   ; [c64_ir] Nand
002D25r 2                   ; 26
002D25r 2  CA               dex
002D26r 2  CA               dex
002D27r 2  B5 00            lda $00,x
002D29r 2  35 02            and $02,x
002D2Br 2  49 FF            eor #$ff
002D2Dr 2  95 00            sta $00,x
002D2Fr 2  B5 01            lda $01,x
002D31r 2  35 03            and $03,x
002D33r 2  49 FF            eor #$ff
002D35r 2  95 01            sta $01,x
002D37r 2               
002D37r 2               ; src/prelude.fth:26:32 in `or`
002D37r 2               @OPCODE_2423:   ; [c64_ir] InlineExit
002D37r 2                   ; inline exit
002D37r 2  68               pla
002D38r 2  68               pla
002D39r 2               
002D39r 2               @target_713:
002D39r 2               
002D39r 2               ; snake.fth:148:14 in `is-horizontal`
002D39r 2               @OPCODE_2425:   ; [c64_ir] InlineExit
002D39r 2                   ; inline exit
002D39r 2  68               pla
002D3Ar 2  68               pla
002D3Br 2               
002D3Br 2               @target_714:
002D3Br 2               
002D3Br 2               ; snake.fth:154:29 in `turn-up`
002D3Br 2               @OPCODE_2427:   ; [c64_ir] JumpIf0(716)
002D3Br 2  CA               dex
002D3Cr 2  CA               dex
002D3Dr 2  B5 02            lda $02,x
002D3Fr 2  15 03            ora $03,x
002D41r 2  D0 03            bne *+5
002D43r 2  4C rr rr         jmp @target_716
002D46r 2               
002D46r 2               @target_715:
002D46r 2               
002D46r 2               ; snake.fth:154:32 in `turn-up`
002D46r 2               @OPCODE_2429:   ; [c64_ir] PushLiteral(38)
002D46r 2  E8               inx
002D47r 2  E8               inx
002D48r 2  A9 26            lda #38
002D4Ar 2  95 00            sta $00,x
002D4Cr 2  A9 00            lda #0
002D4Er 2  95 01            sta $01,x
002D50r 2               
002D50r 2               ; snake.fth:154:35 in `turn-up`
002D50r 2               @OPCODE_2430:   ; [c64_ir] PushLiteral(-26660)
002D50r 2  E8               inx
002D51r 2  E8               inx
002D52r 2  A9 DC            lda #220
002D54r 2  95 00            sta $00,x
002D56r 2  A9 97            lda #151
002D58r 2  95 01            sta $01,x
002D5Ar 2               
002D5Ar 2               ; snake.fth:154:45 in `turn-up`
002D5Ar 2               @OPCODE_2431:   ; [c64_ir] Store
002D5Ar 2  CA               dex
002D5Br 2  CA               dex
002D5Cr 2  CA               dex
002D5Dr 2  CA               dex
002D5Er 2  B5 02            lda $02,x
002D60r 2  81 04            sta ($04,x)
002D62r 2                   ; TODO high byte
002D62r 2               
002D62r 2               ; snake.fth:154:47 in `turn-up`
002D62r 2               @OPCODE_2432:   ; [c64_ir] JumpTarget(715)
002D62r 2               
002D62r 2               @target_716:
002D62r 2               
002D62r 2               ; snake.fth:154:52 in `turn-up`
002D62r 2               @OPCODE_2434:   ; [c64_ir] InlineExit
002D62r 2                   ; inline exit
002D62r 2  68               pla
002D63r 2  68               pla
002D64r 2               
002D64r 2               @target_717:
002D64r 2               
002D64r 2               ; snake.fth:161:24 in `change-direction`
002D64r 2               @OPCODE_2436:   ; [c64_ir] JumpElse(842)
002D64r 2  4C rr rr         jmp @target_842
002D67r 2               
002D67r 2               @target_718:
002D67r 2               
002D67r 2               ; snake.fth:162:3 in `change-direction`
002D67r 2               @OPCODE_2438:   ; [c64_ir] PushLiteral(39)
002D67r 2  E8               inx
002D68r 2  E8               inx
002D69r 2  A9 27            lda #39
002D6Br 2  95 00            sta $00,x
002D6Dr 2  A9 00            lda #0
002D6Fr 2  95 01            sta $01,x
002D71r 2               
002D71r 2               ; snake.fth:162:9 in `change-direction`
002D71r 2               @OPCODE_2439:   ; [c64_ir] InlineCall("over")
002D71r 2                   ; inline call(over)
002D71r 2  48               pha
002D72r 2  48               pha
002D73r 2               
002D73r 2               @target_719:
002D73r 2               
002D73r 2               ; src/prelude.fth:4:10 in `over`
002D73r 2               @OPCODE_2441:   ; [c64_ir] AltPush
002D73r 2  CA               dex
002D74r 2  CA               dex
002D75r 2  B5 03            lda $03,x
002D77r 2  48               pha
002D78r 2  B5 02            lda $02,x
002D7Ar 2  48               pha
002D7Br 2               
002D7Br 2               ; src/prelude.fth:4:13 in `over`
002D7Br 2               @OPCODE_2442:   ; [c64_ir] TempStore
002D7Br 2  CA               dex
002D7Cr 2  CA               dex
002D7Dr 2  B5 03            lda $03,x
002D7Fr 2  85 96            sta TEMP_PAX2
002D81r 2  B5 02            lda $02,x
002D83r 2  85 95            sta TEMP_PAX1
002D85r 2               
002D85r 2               ; src/prelude.fth:4:19 in `over`
002D85r 2               @OPCODE_2443:   ; [c64_ir] TempLoad
002D85r 2  E8               inx
002D86r 2  E8               inx
002D87r 2  A5 95            lda TEMP_PAX1
002D89r 2  95 00            sta $00,x
002D8Br 2  A5 96            lda TEMP_PAX2
002D8Dr 2  95 01            sta $01,x
002D8Fr 2               
002D8Fr 2               ; src/prelude.fth:4:25 in `over`
002D8Fr 2               @OPCODE_2444:   ; [c64_ir] AltPop
002D8Fr 2  E8               inx
002D90r 2  E8               inx
002D91r 2  68               pla
002D92r 2  95 00            sta $00,x
002D94r 2  68               pla
002D95r 2  95 01            sta $01,x
002D97r 2               
002D97r 2               ; src/prelude.fth:4:28 in `over`
002D97r 2               @OPCODE_2445:   ; [c64_ir] TempLoad
002D97r 2  E8               inx
002D98r 2  E8               inx
002D99r 2  A5 95            lda TEMP_PAX1
002D9Br 2  95 00            sta $00,x
002D9Dr 2  A5 96            lda TEMP_PAX2
002D9Fr 2  95 01            sta $01,x
002DA1r 2               
002DA1r 2               ; src/prelude.fth:4:34 in `over`
002DA1r 2               @OPCODE_2446:   ; [c64_ir] InlineExit
002DA1r 2                   ; inline exit
002DA1r 2  68               pla
002DA2r 2  68               pla
002DA3r 2               
002DA3r 2               @target_720:
002DA3r 2               
002DA3r 2               ; snake.fth:162:14 in `change-direction`
002DA3r 2               @OPCODE_2448:   ; [c64_ir] InlineCall("=")
002DA3r 2                   ; inline call(=)
002DA3r 2  48               pha
002DA4r 2  48               pha
002DA5r 2               
002DA5r 2               @target_721:
002DA5r 2               
002DA5r 2               ; src/prelude.fth:22:8 in `=`
002DA5r 2               @OPCODE_2450:   ; [c64_ir] InlineCall("-")
002DA5r 2                   ; inline call(-)
002DA5r 2  48               pha
002DA6r 2  48               pha
002DA7r 2               
002DA7r 2               @target_722:
002DA7r 2               
002DA7r 2               ; src/prelude.fth:16:12 in `-`
002DA7r 2               @OPCODE_2452:   ; [c64_ir] InlineCall("negate")
002DA7r 2                   ; inline call(negate)
002DA7r 2  48               pha
002DA8r 2  48               pha
002DA9r 2               
002DA9r 2               @target_723:
002DA9r 2               
002DA9r 2               ; src/prelude.fth:15:12 in `negate`
002DA9r 2               @OPCODE_2454:   ; [c64_ir] InlineCall("invert")
002DA9r 2                   ; inline call(invert)
002DA9r 2  48               pha
002DAAr 2  48               pha
002DABr 2               
002DABr 2               @target_724:
002DABr 2               
002DABr 2               ; src/prelude.fth:14:12 in `invert`
002DABr 2               @OPCODE_2456:   ; [c64_ir] PushLiteral(-1)
002DABr 2  E8               inx
002DACr 2  E8               inx
002DADr 2  A9 FF            lda #255
002DAFr 2  95 00            sta $00,x
002DB1r 2  A9 FF            lda #255
002DB3r 2  95 01            sta $01,x
002DB5r 2               
002DB5r 2               ; src/prelude.fth:14:15 in `invert`
002DB5r 2               @OPCODE_2457:   ; [c64_ir] Nand
002DB5r 2                   ; 26
002DB5r 2  CA               dex
002DB6r 2  CA               dex
002DB7r 2  B5 00            lda $00,x
002DB9r 2  35 02            and $02,x
002DBBr 2  49 FF            eor #$ff
002DBDr 2  95 00            sta $00,x
002DBFr 2  B5 01            lda $01,x
002DC1r 2  35 03            and $03,x
002DC3r 2  49 FF            eor #$ff
002DC5r 2  95 01            sta $01,x
002DC7r 2               
002DC7r 2               ; src/prelude.fth:14:20 in `invert`
002DC7r 2               @OPCODE_2458:   ; [c64_ir] InlineExit
002DC7r 2                   ; inline exit
002DC7r 2  68               pla
002DC8r 2  68               pla
002DC9r 2               
002DC9r 2               @target_725:
002DC9r 2               
002DC9r 2               ; src/prelude.fth:15:19 in `negate`
002DC9r 2               @OPCODE_2460:   ; [c64_ir] PushLiteral(1)
002DC9r 2  E8               inx
002DCAr 2  E8               inx
002DCBr 2  A9 01            lda #1
002DCDr 2  95 00            sta $00,x
002DCFr 2  A9 00            lda #0
002DD1r 2  95 01            sta $01,x
002DD3r 2               
002DD3r 2               ; src/prelude.fth:15:21 in `negate`
002DD3r 2               @OPCODE_2461:   ; [c64_ir] Add
002DD3r 2                   ; 21
002DD3r 2  CA               dex
002DD4r 2  CA               dex
002DD5r 2  18               clc
002DD6r 2  B5 00            lda $00,x
002DD8r 2  75 02            adc $02,x
002DDAr 2  95 00            sta $00,x
002DDCr 2  B5 01            lda $01,x
002DDEr 2  75 03            adc $03,x
002DE0r 2  95 01            sta $01,x
002DE2r 2               
002DE2r 2               ; src/prelude.fth:15:23 in `negate`
002DE2r 2               @OPCODE_2462:   ; [c64_ir] InlineExit
002DE2r 2                   ; inline exit
002DE2r 2  68               pla
002DE3r 2  68               pla
002DE4r 2               
002DE4r 2               @target_726:
002DE4r 2               
002DE4r 2               ; src/prelude.fth:16:19 in `-`
002DE4r 2               @OPCODE_2464:   ; [c64_ir] Add
002DE4r 2                   ; 21
002DE4r 2  CA               dex
002DE5r 2  CA               dex
002DE6r 2  18               clc
002DE7r 2  B5 00            lda $00,x
002DE9r 2  75 02            adc $02,x
002DEBr 2  95 00            sta $00,x
002DEDr 2  B5 01            lda $01,x
002DEFr 2  75 03            adc $03,x
002DF1r 2  95 01            sta $01,x
002DF3r 2               
002DF3r 2               ; src/prelude.fth:16:21 in `-`
002DF3r 2               @OPCODE_2465:   ; [c64_ir] InlineExit
002DF3r 2                   ; inline exit
002DF3r 2  68               pla
002DF4r 2  68               pla
002DF5r 2               
002DF5r 2               @target_727:
002DF5r 2               
002DF5r 2               ; src/prelude.fth:22:10 in `=`
002DF5r 2               @OPCODE_2467:   ; [c64_ir] InlineCall("0=")
002DF5r 2                   ; inline call(0=)
002DF5r 2  48               pha
002DF6r 2  48               pha
002DF7r 2               
002DF7r 2               @target_728:
002DF7r 2               
002DF7r 2               ; src/prelude.fth:21:8 in `0=`
002DF7r 2               @OPCODE_2469:   ; [c64_ir] JumpIf0(730)
002DF7r 2  CA               dex
002DF8r 2  CA               dex
002DF9r 2  B5 02            lda $02,x
002DFBr 2  15 03            ora $03,x
002DFDr 2  D0 03            bne *+5
002DFFr 2  4C rr rr         jmp @target_730
002E02r 2               
002E02r 2               @target_729:
002E02r 2               
002E02r 2               ; src/prelude.fth:21:11 in `0=`
002E02r 2               @OPCODE_2471:   ; [c64_ir] PushLiteral(0)
002E02r 2  E8               inx
002E03r 2  E8               inx
002E04r 2  A9 00            lda #0
002E06r 2  95 00            sta $00,x
002E08r 2  A9 00            lda #0
002E0Ar 2  95 01            sta $01,x
002E0Cr 2               
002E0Cr 2               ; src/prelude.fth:21:13 in `0=`
002E0Cr 2               @OPCODE_2472:   ; [c64_ir] JumpElse(731)
002E0Cr 2  4C rr rr         jmp @target_731
002E0Fr 2               
002E0Fr 2               @target_730:
002E0Fr 2               
002E0Fr 2               ; src/prelude.fth:21:18 in `0=`
002E0Fr 2               @OPCODE_2474:   ; [c64_ir] PushLiteral(-1)
002E0Fr 2  E8               inx
002E10r 2  E8               inx
002E11r 2  A9 FF            lda #255
002E13r 2  95 00            sta $00,x
002E15r 2  A9 FF            lda #255
002E17r 2  95 01            sta $01,x
002E19r 2               
002E19r 2               ; src/prelude.fth:21:21 in `0=`
002E19r 2               @OPCODE_2475:   ; [c64_ir] JumpTarget(730)
002E19r 2               
002E19r 2               @target_731:
002E19r 2               
002E19r 2               ; src/prelude.fth:21:26 in `0=`
002E19r 2               @OPCODE_2477:   ; [c64_ir] InlineExit
002E19r 2                   ; inline exit
002E19r 2  68               pla
002E1Ar 2  68               pla
002E1Br 2               
002E1Br 2               @target_732:
002E1Br 2               
002E1Br 2               ; src/prelude.fth:22:13 in `=`
002E1Br 2               @OPCODE_2479:   ; [c64_ir] InlineExit
002E1Br 2                   ; inline exit
002E1Br 2  68               pla
002E1Cr 2  68               pla
002E1Dr 2               
002E1Dr 2               @target_733:
002E1Dr 2               
002E1Dr 2               ; snake.fth:162:16 in `change-direction`
002E1Dr 2               @OPCODE_2481:   ; [c64_ir] JumpIf0(779)
002E1Dr 2  CA               dex
002E1Er 2  CA               dex
002E1Fr 2  B5 02            lda $02,x
002E21r 2  15 03            ora $03,x
002E23r 2  D0 03            bne *+5
002E25r 2  4C rr rr         jmp @target_779
002E28r 2               
002E28r 2               @target_734:
002E28r 2               
002E28r 2               ; snake.fth:162:19 in `change-direction`
002E28r 2               @OPCODE_2483:   ; [c64_ir] InlineCall("turn-right")
002E28r 2                   ; inline call(turn-right)
002E28r 2  48               pha
002E29r 2  48               pha
002E2Ar 2               
002E2Ar 2               @target_735:
002E2Ar 2               
002E2Ar 2               ; snake.fth:157:15 in `turn-right`
002E2Ar 2               @OPCODE_2485:   ; [c64_ir] InlineCall("is-vertical")
002E2Ar 2                   ; inline call(is-vertical)
002E2Ar 2  48               pha
002E2Br 2  48               pha
002E2Cr 2               
002E2Cr 2               @target_736:
002E2Cr 2               
002E2Cr 2               ; snake.fth:150:16 in `is-vertical`
002E2Cr 2               @OPCODE_2487:   ; [c64_ir] PushLiteral(-26660)
002E2Cr 2  E8               inx
002E2Dr 2  E8               inx
002E2Er 2  A9 DC            lda #220
002E30r 2  95 00            sta $00,x
002E32r 2  A9 97            lda #151
002E34r 2  95 01            sta $01,x
002E36r 2               
002E36r 2               ; snake.fth:150:26 in `is-vertical`
002E36r 2               @OPCODE_2488:   ; [c64_ir] Load
002E36r 2  A1 00            lda ($00,x)
002E38r 2  95 00            sta $00,x
002E3Ar 2  A9 00            lda #0
002E3Cr 2  95 01            sta $01,x
002E3Er 2               
002E3Er 2               ; snake.fth:150:28 in `is-vertical`
002E3Er 2               @OPCODE_2489:   ; [c64_ir] InlineCall("dup")
002E3Er 2                   ; inline call(dup)
002E3Er 2  48               pha
002E3Fr 2  48               pha
002E40r 2               
002E40r 2               @target_737:
002E40r 2               
002E40r 2               ; src/prelude.fth:6:10 in `dup`
002E40r 2               @OPCODE_2491:   ; [c64_ir] TempStore
002E40r 2  CA               dex
002E41r 2  CA               dex
002E42r 2  B5 03            lda $03,x
002E44r 2  85 96            sta TEMP_PAX2
002E46r 2  B5 02            lda $02,x
002E48r 2  85 95            sta TEMP_PAX1
002E4Ar 2               
002E4Ar 2               ; src/prelude.fth:6:16 in `dup`
002E4Ar 2               @OPCODE_2492:   ; [c64_ir] TempLoad
002E4Ar 2  E8               inx
002E4Br 2  E8               inx
002E4Cr 2  A5 95            lda TEMP_PAX1
002E4Er 2  95 00            sta $00,x
002E50r 2  A5 96            lda TEMP_PAX2
002E52r 2  95 01            sta $01,x
002E54r 2               
002E54r 2               ; src/prelude.fth:6:22 in `dup`
002E54r 2               @OPCODE_2493:   ; [c64_ir] TempLoad
002E54r 2  E8               inx
002E55r 2  E8               inx
002E56r 2  A5 95            lda TEMP_PAX1
002E58r 2  95 00            sta $00,x
002E5Ar 2  A5 96            lda TEMP_PAX2
002E5Cr 2  95 01            sta $01,x
002E5Er 2               
002E5Er 2               ; src/prelude.fth:6:28 in `dup`
002E5Er 2               @OPCODE_2494:   ; [c64_ir] InlineExit
002E5Er 2                   ; inline exit
002E5Er 2  68               pla
002E5Fr 2  68               pla
002E60r 2               
002E60r 2               @target_738:
002E60r 2               
002E60r 2               ; snake.fth:151:3 in `is-vertical`
002E60r 2               @OPCODE_2496:   ; [c64_ir] PushLiteral(38)
002E60r 2  E8               inx
002E61r 2  E8               inx
002E62r 2  A9 26            lda #38
002E64r 2  95 00            sta $00,x
002E66r 2  A9 00            lda #0
002E68r 2  95 01            sta $01,x
002E6Ar 2               
002E6Ar 2               ; snake.fth:151:6 in `is-vertical`
002E6Ar 2               @OPCODE_2497:   ; [c64_ir] InlineCall("=")
002E6Ar 2                   ; inline call(=)
002E6Ar 2  48               pha
002E6Br 2  48               pha
002E6Cr 2               
002E6Cr 2               @target_739:
002E6Cr 2               
002E6Cr 2               ; src/prelude.fth:22:8 in `=`
002E6Cr 2               @OPCODE_2499:   ; [c64_ir] InlineCall("-")
002E6Cr 2                   ; inline call(-)
002E6Cr 2  48               pha
002E6Dr 2  48               pha
002E6Er 2               
002E6Er 2               @target_740:
002E6Er 2               
002E6Er 2               ; src/prelude.fth:16:12 in `-`
002E6Er 2               @OPCODE_2501:   ; [c64_ir] InlineCall("negate")
002E6Er 2                   ; inline call(negate)
002E6Er 2  48               pha
002E6Fr 2  48               pha
002E70r 2               
002E70r 2               @target_741:
002E70r 2               
002E70r 2               ; src/prelude.fth:15:12 in `negate`
002E70r 2               @OPCODE_2503:   ; [c64_ir] InlineCall("invert")
002E70r 2                   ; inline call(invert)
002E70r 2  48               pha
002E71r 2  48               pha
002E72r 2               
002E72r 2               @target_742:
002E72r 2               
002E72r 2               ; src/prelude.fth:14:12 in `invert`
002E72r 2               @OPCODE_2505:   ; [c64_ir] PushLiteral(-1)
002E72r 2  E8               inx
002E73r 2  E8               inx
002E74r 2  A9 FF            lda #255
002E76r 2  95 00            sta $00,x
002E78r 2  A9 FF            lda #255
002E7Ar 2  95 01            sta $01,x
002E7Cr 2               
002E7Cr 2               ; src/prelude.fth:14:15 in `invert`
002E7Cr 2               @OPCODE_2506:   ; [c64_ir] Nand
002E7Cr 2                   ; 26
002E7Cr 2  CA               dex
002E7Dr 2  CA               dex
002E7Er 2  B5 00            lda $00,x
002E80r 2  35 02            and $02,x
002E82r 2  49 FF            eor #$ff
002E84r 2  95 00            sta $00,x
002E86r 2  B5 01            lda $01,x
002E88r 2  35 03            and $03,x
002E8Ar 2  49 FF            eor #$ff
002E8Cr 2  95 01            sta $01,x
002E8Er 2               
002E8Er 2               ; src/prelude.fth:14:20 in `invert`
002E8Er 2               @OPCODE_2507:   ; [c64_ir] InlineExit
002E8Er 2                   ; inline exit
002E8Er 2  68               pla
002E8Fr 2  68               pla
002E90r 2               
002E90r 2               @target_743:
002E90r 2               
002E90r 2               ; src/prelude.fth:15:19 in `negate`
002E90r 2               @OPCODE_2509:   ; [c64_ir] PushLiteral(1)
002E90r 2  E8               inx
002E91r 2  E8               inx
002E92r 2  A9 01            lda #1
002E94r 2  95 00            sta $00,x
002E96r 2  A9 00            lda #0
002E98r 2  95 01            sta $01,x
002E9Ar 2               
002E9Ar 2               ; src/prelude.fth:15:21 in `negate`
002E9Ar 2               @OPCODE_2510:   ; [c64_ir] Add
002E9Ar 2                   ; 21
002E9Ar 2  CA               dex
002E9Br 2  CA               dex
002E9Cr 2  18               clc
002E9Dr 2  B5 00            lda $00,x
002E9Fr 2  75 02            adc $02,x
002EA1r 2  95 00            sta $00,x
002EA3r 2  B5 01            lda $01,x
002EA5r 2  75 03            adc $03,x
002EA7r 2  95 01            sta $01,x
002EA9r 2               
002EA9r 2               ; src/prelude.fth:15:23 in `negate`
002EA9r 2               @OPCODE_2511:   ; [c64_ir] InlineExit
002EA9r 2                   ; inline exit
002EA9r 2  68               pla
002EAAr 2  68               pla
002EABr 2               
002EABr 2               @target_744:
002EABr 2               
002EABr 2               ; src/prelude.fth:16:19 in `-`
002EABr 2               @OPCODE_2513:   ; [c64_ir] Add
002EABr 2                   ; 21
002EABr 2  CA               dex
002EACr 2  CA               dex
002EADr 2  18               clc
002EAEr 2  B5 00            lda $00,x
002EB0r 2  75 02            adc $02,x
002EB2r 2  95 00            sta $00,x
002EB4r 2  B5 01            lda $01,x
002EB6r 2  75 03            adc $03,x
002EB8r 2  95 01            sta $01,x
002EBAr 2               
002EBAr 2               ; src/prelude.fth:16:21 in `-`
002EBAr 2               @OPCODE_2514:   ; [c64_ir] InlineExit
002EBAr 2                   ; inline exit
002EBAr 2  68               pla
002EBBr 2  68               pla
002EBCr 2               
002EBCr 2               @target_745:
002EBCr 2               
002EBCr 2               ; src/prelude.fth:22:10 in `=`
002EBCr 2               @OPCODE_2516:   ; [c64_ir] InlineCall("0=")
002EBCr 2                   ; inline call(0=)
002EBCr 2  48               pha
002EBDr 2  48               pha
002EBEr 2               
002EBEr 2               @target_746:
002EBEr 2               
002EBEr 2               ; src/prelude.fth:21:8 in `0=`
002EBEr 2               @OPCODE_2518:   ; [c64_ir] JumpIf0(748)
002EBEr 2  CA               dex
002EBFr 2  CA               dex
002EC0r 2  B5 02            lda $02,x
002EC2r 2  15 03            ora $03,x
002EC4r 2  D0 03            bne *+5
002EC6r 2  4C rr rr         jmp @target_748
002EC9r 2               
002EC9r 2               @target_747:
002EC9r 2               
002EC9r 2               ; src/prelude.fth:21:11 in `0=`
002EC9r 2               @OPCODE_2520:   ; [c64_ir] PushLiteral(0)
002EC9r 2  E8               inx
002ECAr 2  E8               inx
002ECBr 2  A9 00            lda #0
002ECDr 2  95 00            sta $00,x
002ECFr 2  A9 00            lda #0
002ED1r 2  95 01            sta $01,x
002ED3r 2               
002ED3r 2               ; src/prelude.fth:21:13 in `0=`
002ED3r 2               @OPCODE_2521:   ; [c64_ir] JumpElse(749)
002ED3r 2  4C rr rr         jmp @target_749
002ED6r 2               
002ED6r 2               @target_748:
002ED6r 2               
002ED6r 2               ; src/prelude.fth:21:18 in `0=`
002ED6r 2               @OPCODE_2523:   ; [c64_ir] PushLiteral(-1)
002ED6r 2  E8               inx
002ED7r 2  E8               inx
002ED8r 2  A9 FF            lda #255
002EDAr 2  95 00            sta $00,x
002EDCr 2  A9 FF            lda #255
002EDEr 2  95 01            sta $01,x
002EE0r 2               
002EE0r 2               ; src/prelude.fth:21:21 in `0=`
002EE0r 2               @OPCODE_2524:   ; [c64_ir] JumpTarget(748)
002EE0r 2               
002EE0r 2               @target_749:
002EE0r 2               
002EE0r 2               ; src/prelude.fth:21:26 in `0=`
002EE0r 2               @OPCODE_2526:   ; [c64_ir] InlineExit
002EE0r 2                   ; inline exit
002EE0r 2  68               pla
002EE1r 2  68               pla
002EE2r 2               
002EE2r 2               @target_750:
002EE2r 2               
002EE2r 2               ; src/prelude.fth:22:13 in `=`
002EE2r 2               @OPCODE_2528:   ; [c64_ir] InlineExit
002EE2r 2                   ; inline exit
002EE2r 2  68               pla
002EE3r 2  68               pla
002EE4r 2               
002EE4r 2               @target_751:
002EE4r 2               
002EE4r 2               ; snake.fth:151:8 in `is-vertical`
002EE4r 2               @OPCODE_2530:   ; [c64_ir] InlineCall("swap")
002EE4r 2                   ; inline call(swap)
002EE4r 2  48               pha
002EE5r 2  48               pha
002EE6r 2               
002EE6r 2               @target_752:
002EE6r 2               
002EE6r 2               ; src/prelude.fth:3:10 in `swap`
002EE6r 2               @OPCODE_2532:   ; [c64_ir] AltPush
002EE6r 2  CA               dex
002EE7r 2  CA               dex
002EE8r 2  B5 03            lda $03,x
002EEAr 2  48               pha
002EEBr 2  B5 02            lda $02,x
002EEDr 2  48               pha
002EEEr 2               
002EEEr 2               ; src/prelude.fth:3:13 in `swap`
002EEEr 2               @OPCODE_2533:   ; [c64_ir] TempStore
002EEEr 2  CA               dex
002EEFr 2  CA               dex
002EF0r 2  B5 03            lda $03,x
002EF2r 2  85 96            sta TEMP_PAX2
002EF4r 2  B5 02            lda $02,x
002EF6r 2  85 95            sta TEMP_PAX1
002EF8r 2               
002EF8r 2               ; src/prelude.fth:3:19 in `swap`
002EF8r 2               @OPCODE_2534:   ; [c64_ir] AltPop
002EF8r 2  E8               inx
002EF9r 2  E8               inx
002EFAr 2  68               pla
002EFBr 2  95 00            sta $00,x
002EFDr 2  68               pla
002EFEr 2  95 01            sta $01,x
002F00r 2               
002F00r 2               ; src/prelude.fth:3:22 in `swap`
002F00r 2               @OPCODE_2535:   ; [c64_ir] TempLoad
002F00r 2  E8               inx
002F01r 2  E8               inx
002F02r 2  A5 95            lda TEMP_PAX1
002F04r 2  95 00            sta $00,x
002F06r 2  A5 96            lda TEMP_PAX2
002F08r 2  95 01            sta $01,x
002F0Ar 2               
002F0Ar 2               ; src/prelude.fth:3:28 in `swap`
002F0Ar 2               @OPCODE_2536:   ; [c64_ir] InlineExit
002F0Ar 2                   ; inline exit
002F0Ar 2  68               pla
002F0Br 2  68               pla
002F0Cr 2               
002F0Cr 2               @target_753:
002F0Cr 2               
002F0Cr 2               ; snake.fth:152:3 in `is-vertical`
002F0Cr 2               @OPCODE_2538:   ; [c64_ir] PushLiteral(40)
002F0Cr 2  E8               inx
002F0Dr 2  E8               inx
002F0Er 2  A9 28            lda #40
002F10r 2  95 00            sta $00,x
002F12r 2  A9 00            lda #0
002F14r 2  95 01            sta $01,x
002F16r 2               
002F16r 2               ; snake.fth:152:8 in `is-vertical`
002F16r 2               @OPCODE_2539:   ; [c64_ir] InlineCall("=")
002F16r 2                   ; inline call(=)
002F16r 2  48               pha
002F17r 2  48               pha
002F18r 2               
002F18r 2               @target_754:
002F18r 2               
002F18r 2               ; src/prelude.fth:22:8 in `=`
002F18r 2               @OPCODE_2541:   ; [c64_ir] InlineCall("-")
002F18r 2                   ; inline call(-)
002F18r 2  48               pha
002F19r 2  48               pha
002F1Ar 2               
002F1Ar 2               @target_755:
002F1Ar 2               
002F1Ar 2               ; src/prelude.fth:16:12 in `-`
002F1Ar 2               @OPCODE_2543:   ; [c64_ir] InlineCall("negate")
002F1Ar 2                   ; inline call(negate)
002F1Ar 2  48               pha
002F1Br 2  48               pha
002F1Cr 2               
002F1Cr 2               @target_756:
002F1Cr 2               
002F1Cr 2               ; src/prelude.fth:15:12 in `negate`
002F1Cr 2               @OPCODE_2545:   ; [c64_ir] InlineCall("invert")
002F1Cr 2                   ; inline call(invert)
002F1Cr 2  48               pha
002F1Dr 2  48               pha
002F1Er 2               
002F1Er 2               @target_757:
002F1Er 2               
002F1Er 2               ; src/prelude.fth:14:12 in `invert`
002F1Er 2               @OPCODE_2547:   ; [c64_ir] PushLiteral(-1)
002F1Er 2  E8               inx
002F1Fr 2  E8               inx
002F20r 2  A9 FF            lda #255
002F22r 2  95 00            sta $00,x
002F24r 2  A9 FF            lda #255
002F26r 2  95 01            sta $01,x
002F28r 2               
002F28r 2               ; src/prelude.fth:14:15 in `invert`
002F28r 2               @OPCODE_2548:   ; [c64_ir] Nand
002F28r 2                   ; 26
002F28r 2  CA               dex
002F29r 2  CA               dex
002F2Ar 2  B5 00            lda $00,x
002F2Cr 2  35 02            and $02,x
002F2Er 2  49 FF            eor #$ff
002F30r 2  95 00            sta $00,x
002F32r 2  B5 01            lda $01,x
002F34r 2  35 03            and $03,x
002F36r 2  49 FF            eor #$ff
002F38r 2  95 01            sta $01,x
002F3Ar 2               
002F3Ar 2               ; src/prelude.fth:14:20 in `invert`
002F3Ar 2               @OPCODE_2549:   ; [c64_ir] InlineExit
002F3Ar 2                   ; inline exit
002F3Ar 2  68               pla
002F3Br 2  68               pla
002F3Cr 2               
002F3Cr 2               @target_758:
002F3Cr 2               
002F3Cr 2               ; src/prelude.fth:15:19 in `negate`
002F3Cr 2               @OPCODE_2551:   ; [c64_ir] PushLiteral(1)
002F3Cr 2  E8               inx
002F3Dr 2  E8               inx
002F3Er 2  A9 01            lda #1
002F40r 2  95 00            sta $00,x
002F42r 2  A9 00            lda #0
002F44r 2  95 01            sta $01,x
002F46r 2               
002F46r 2               ; src/prelude.fth:15:21 in `negate`
002F46r 2               @OPCODE_2552:   ; [c64_ir] Add
002F46r 2                   ; 21
002F46r 2  CA               dex
002F47r 2  CA               dex
002F48r 2  18               clc
002F49r 2  B5 00            lda $00,x
002F4Br 2  75 02            adc $02,x
002F4Dr 2  95 00            sta $00,x
002F4Fr 2  B5 01            lda $01,x
002F51r 2  75 03            adc $03,x
002F53r 2  95 01            sta $01,x
002F55r 2               
002F55r 2               ; src/prelude.fth:15:23 in `negate`
002F55r 2               @OPCODE_2553:   ; [c64_ir] InlineExit
002F55r 2                   ; inline exit
002F55r 2  68               pla
002F56r 2  68               pla
002F57r 2               
002F57r 2               @target_759:
002F57r 2               
002F57r 2               ; src/prelude.fth:16:19 in `-`
002F57r 2               @OPCODE_2555:   ; [c64_ir] Add
002F57r 2                   ; 21
002F57r 2  CA               dex
002F58r 2  CA               dex
002F59r 2  18               clc
002F5Ar 2  B5 00            lda $00,x
002F5Cr 2  75 02            adc $02,x
002F5Er 2  95 00            sta $00,x
002F60r 2  B5 01            lda $01,x
002F62r 2  75 03            adc $03,x
002F64r 2  95 01            sta $01,x
002F66r 2               
002F66r 2               ; src/prelude.fth:16:21 in `-`
002F66r 2               @OPCODE_2556:   ; [c64_ir] InlineExit
002F66r 2                   ; inline exit
002F66r 2  68               pla
002F67r 2  68               pla
002F68r 2               
002F68r 2               @target_760:
002F68r 2               
002F68r 2               ; src/prelude.fth:22:10 in `=`
002F68r 2               @OPCODE_2558:   ; [c64_ir] InlineCall("0=")
002F68r 2                   ; inline call(0=)
002F68r 2  48               pha
002F69r 2  48               pha
002F6Ar 2               
002F6Ar 2               @target_761:
002F6Ar 2               
002F6Ar 2               ; src/prelude.fth:21:8 in `0=`
002F6Ar 2               @OPCODE_2560:   ; [c64_ir] JumpIf0(763)
002F6Ar 2  CA               dex
002F6Br 2  CA               dex
002F6Cr 2  B5 02            lda $02,x
002F6Er 2  15 03            ora $03,x
002F70r 2  D0 03            bne *+5
002F72r 2  4C rr rr         jmp @target_763
002F75r 2               
002F75r 2               @target_762:
002F75r 2               
002F75r 2               ; src/prelude.fth:21:11 in `0=`
002F75r 2               @OPCODE_2562:   ; [c64_ir] PushLiteral(0)
002F75r 2  E8               inx
002F76r 2  E8               inx
002F77r 2  A9 00            lda #0
002F79r 2  95 00            sta $00,x
002F7Br 2  A9 00            lda #0
002F7Dr 2  95 01            sta $01,x
002F7Fr 2               
002F7Fr 2               ; src/prelude.fth:21:13 in `0=`
002F7Fr 2               @OPCODE_2563:   ; [c64_ir] JumpElse(764)
002F7Fr 2  4C rr rr         jmp @target_764
002F82r 2               
002F82r 2               @target_763:
002F82r 2               
002F82r 2               ; src/prelude.fth:21:18 in `0=`
002F82r 2               @OPCODE_2565:   ; [c64_ir] PushLiteral(-1)
002F82r 2  E8               inx
002F83r 2  E8               inx
002F84r 2  A9 FF            lda #255
002F86r 2  95 00            sta $00,x
002F88r 2  A9 FF            lda #255
002F8Ar 2  95 01            sta $01,x
002F8Cr 2               
002F8Cr 2               ; src/prelude.fth:21:21 in `0=`
002F8Cr 2               @OPCODE_2566:   ; [c64_ir] JumpTarget(763)
002F8Cr 2               
002F8Cr 2               @target_764:
002F8Cr 2               
002F8Cr 2               ; src/prelude.fth:21:26 in `0=`
002F8Cr 2               @OPCODE_2568:   ; [c64_ir] InlineExit
002F8Cr 2                   ; inline exit
002F8Cr 2  68               pla
002F8Dr 2  68               pla
002F8Er 2               
002F8Er 2               @target_765:
002F8Er 2               
002F8Er 2               ; src/prelude.fth:22:13 in `=`
002F8Er 2               @OPCODE_2570:   ; [c64_ir] InlineExit
002F8Er 2                   ; inline exit
002F8Er 2  68               pla
002F8Fr 2  68               pla
002F90r 2               
002F90r 2               @target_766:
002F90r 2               
002F90r 2               ; snake.fth:152:10 in `is-vertical`
002F90r 2               @OPCODE_2572:   ; [c64_ir] InlineCall("or")
002F90r 2                   ; inline call(or)
002F90r 2  48               pha
002F91r 2  48               pha
002F92r 2               
002F92r 2               @target_767:
002F92r 2               
002F92r 2               ; src/prelude.fth:26:8 in `or`
002F92r 2               @OPCODE_2574:   ; [c64_ir] InlineCall("invert")
002F92r 2                   ; inline call(invert)
002F92r 2  48               pha
002F93r 2  48               pha
002F94r 2               
002F94r 2               @target_768:
002F94r 2               
002F94r 2               ; src/prelude.fth:14:12 in `invert`
002F94r 2               @OPCODE_2576:   ; [c64_ir] PushLiteral(-1)
002F94r 2  E8               inx
002F95r 2  E8               inx
002F96r 2  A9 FF            lda #255
002F98r 2  95 00            sta $00,x
002F9Ar 2  A9 FF            lda #255
002F9Cr 2  95 01            sta $01,x
002F9Er 2               
002F9Er 2               ; src/prelude.fth:14:15 in `invert`
002F9Er 2               @OPCODE_2577:   ; [c64_ir] Nand
002F9Er 2                   ; 26
002F9Er 2  CA               dex
002F9Fr 2  CA               dex
002FA0r 2  B5 00            lda $00,x
002FA2r 2  35 02            and $02,x
002FA4r 2  49 FF            eor #$ff
002FA6r 2  95 00            sta $00,x
002FA8r 2  B5 01            lda $01,x
002FAAr 2  35 03            and $03,x
002FACr 2  49 FF            eor #$ff
002FAEr 2  95 01            sta $01,x
002FB0r 2               
002FB0r 2               ; src/prelude.fth:14:20 in `invert`
002FB0r 2               @OPCODE_2578:   ; [c64_ir] InlineExit
002FB0r 2                   ; inline exit
002FB0r 2  68               pla
002FB1r 2  68               pla
002FB2r 2               
002FB2r 2               @target_769:
002FB2r 2               
002FB2r 2               ; src/prelude.fth:26:15 in `or`
002FB2r 2               @OPCODE_2580:   ; [c64_ir] InlineCall("swap")
002FB2r 2                   ; inline call(swap)
002FB2r 2  48               pha
002FB3r 2  48               pha
002FB4r 2               
002FB4r 2               @target_770:
002FB4r 2               
002FB4r 2               ; src/prelude.fth:3:10 in `swap`
002FB4r 2               @OPCODE_2582:   ; [c64_ir] AltPush
002FB4r 2  CA               dex
002FB5r 2  CA               dex
002FB6r 2  B5 03            lda $03,x
002FB8r 2  48               pha
002FB9r 2  B5 02            lda $02,x
002FBBr 2  48               pha
002FBCr 2               
002FBCr 2               ; src/prelude.fth:3:13 in `swap`
002FBCr 2               @OPCODE_2583:   ; [c64_ir] TempStore
002FBCr 2  CA               dex
002FBDr 2  CA               dex
002FBEr 2  B5 03            lda $03,x
002FC0r 2  85 96            sta TEMP_PAX2
002FC2r 2  B5 02            lda $02,x
002FC4r 2  85 95            sta TEMP_PAX1
002FC6r 2               
002FC6r 2               ; src/prelude.fth:3:19 in `swap`
002FC6r 2               @OPCODE_2584:   ; [c64_ir] AltPop
002FC6r 2  E8               inx
002FC7r 2  E8               inx
002FC8r 2  68               pla
002FC9r 2  95 00            sta $00,x
002FCBr 2  68               pla
002FCCr 2  95 01            sta $01,x
002FCEr 2               
002FCEr 2               ; src/prelude.fth:3:22 in `swap`
002FCEr 2               @OPCODE_2585:   ; [c64_ir] TempLoad
002FCEr 2  E8               inx
002FCFr 2  E8               inx
002FD0r 2  A5 95            lda TEMP_PAX1
002FD2r 2  95 00            sta $00,x
002FD4r 2  A5 96            lda TEMP_PAX2
002FD6r 2  95 01            sta $01,x
002FD8r 2               
002FD8r 2               ; src/prelude.fth:3:28 in `swap`
002FD8r 2               @OPCODE_2586:   ; [c64_ir] InlineExit
002FD8r 2                   ; inline exit
002FD8r 2  68               pla
002FD9r 2  68               pla
002FDAr 2               
002FDAr 2               @target_771:
002FDAr 2               
002FDAr 2               ; src/prelude.fth:26:20 in `or`
002FDAr 2               @OPCODE_2588:   ; [c64_ir] InlineCall("invert")
002FDAr 2                   ; inline call(invert)
002FDAr 2  48               pha
002FDBr 2  48               pha
002FDCr 2               
002FDCr 2               @target_772:
002FDCr 2               
002FDCr 2               ; src/prelude.fth:14:12 in `invert`
002FDCr 2               @OPCODE_2590:   ; [c64_ir] PushLiteral(-1)
002FDCr 2  E8               inx
002FDDr 2  E8               inx
002FDEr 2  A9 FF            lda #255
002FE0r 2  95 00            sta $00,x
002FE2r 2  A9 FF            lda #255
002FE4r 2  95 01            sta $01,x
002FE6r 2               
002FE6r 2               ; src/prelude.fth:14:15 in `invert`
002FE6r 2               @OPCODE_2591:   ; [c64_ir] Nand
002FE6r 2                   ; 26
002FE6r 2  CA               dex
002FE7r 2  CA               dex
002FE8r 2  B5 00            lda $00,x
002FEAr 2  35 02            and $02,x
002FECr 2  49 FF            eor #$ff
002FEEr 2  95 00            sta $00,x
002FF0r 2  B5 01            lda $01,x
002FF2r 2  35 03            and $03,x
002FF4r 2  49 FF            eor #$ff
002FF6r 2  95 01            sta $01,x
002FF8r 2               
002FF8r 2               ; src/prelude.fth:14:20 in `invert`
002FF8r 2               @OPCODE_2592:   ; [c64_ir] InlineExit
002FF8r 2                   ; inline exit
002FF8r 2  68               pla
002FF9r 2  68               pla
002FFAr 2               
002FFAr 2               @target_773:
002FFAr 2               
002FFAr 2               ; src/prelude.fth:26:27 in `or`
002FFAr 2               @OPCODE_2594:   ; [c64_ir] Nand
002FFAr 2                   ; 26
002FFAr 2  CA               dex
002FFBr 2  CA               dex
002FFCr 2  B5 00            lda $00,x
002FFEr 2  35 02            and $02,x
003000r 2  49 FF            eor #$ff
003002r 2  95 00            sta $00,x
003004r 2  B5 01            lda $01,x
003006r 2  35 03            and $03,x
003008r 2  49 FF            eor #$ff
00300Ar 2  95 01            sta $01,x
00300Cr 2               
00300Cr 2               ; src/prelude.fth:26:32 in `or`
00300Cr 2               @OPCODE_2595:   ; [c64_ir] InlineExit
00300Cr 2                   ; inline exit
00300Cr 2  68               pla
00300Dr 2  68               pla
00300Er 2               
00300Er 2               @target_774:
00300Er 2               
00300Er 2               ; snake.fth:152:13 in `is-vertical`
00300Er 2               @OPCODE_2597:   ; [c64_ir] InlineExit
00300Er 2                   ; inline exit
00300Er 2  68               pla
00300Fr 2  68               pla
003010r 2               
003010r 2               @target_775:
003010r 2               
003010r 2               ; snake.fth:157:27 in `turn-right`
003010r 2               @OPCODE_2599:   ; [c64_ir] JumpIf0(777)
003010r 2  CA               dex
003011r 2  CA               dex
003012r 2  B5 02            lda $02,x
003014r 2  15 03            ora $03,x
003016r 2  D0 03            bne *+5
003018r 2  4C rr rr         jmp @target_777
00301Br 2               
00301Br 2               @target_776:
00301Br 2               
00301Br 2               ; snake.fth:157:30 in `turn-right`
00301Br 2               @OPCODE_2601:   ; [c64_ir] PushLiteral(39)
00301Br 2  E8               inx
00301Cr 2  E8               inx
00301Dr 2  A9 27            lda #39
00301Fr 2  95 00            sta $00,x
003021r 2  A9 00            lda #0
003023r 2  95 01            sta $01,x
003025r 2               
003025r 2               ; snake.fth:157:36 in `turn-right`
003025r 2               @OPCODE_2602:   ; [c64_ir] PushLiteral(-26660)
003025r 2  E8               inx
003026r 2  E8               inx
003027r 2  A9 DC            lda #220
003029r 2  95 00            sta $00,x
00302Br 2  A9 97            lda #151
00302Dr 2  95 01            sta $01,x
00302Fr 2               
00302Fr 2               ; snake.fth:157:46 in `turn-right`
00302Fr 2               @OPCODE_2603:   ; [c64_ir] Store
00302Fr 2  CA               dex
003030r 2  CA               dex
003031r 2  CA               dex
003032r 2  CA               dex
003033r 2  B5 02            lda $02,x
003035r 2  81 04            sta ($04,x)
003037r 2                   ; TODO high byte
003037r 2               
003037r 2               ; snake.fth:157:48 in `turn-right`
003037r 2               @OPCODE_2604:   ; [c64_ir] JumpTarget(776)
003037r 2               
003037r 2               @target_777:
003037r 2               
003037r 2               ; snake.fth:157:53 in `turn-right`
003037r 2               @OPCODE_2606:   ; [c64_ir] InlineExit
003037r 2                   ; inline exit
003037r 2  68               pla
003038r 2  68               pla
003039r 2               
003039r 2               @target_778:
003039r 2               
003039r 2               ; snake.fth:162:30 in `change-direction`
003039r 2               @OPCODE_2608:   ; [c64_ir] JumpElse(841)
003039r 2  4C rr rr         jmp @target_841
00303Cr 2               
00303Cr 2               @target_779:
00303Cr 2               
00303Cr 2               ; snake.fth:163:3 in `change-direction`
00303Cr 2               @OPCODE_2610:   ; [c64_ir] PushLiteral(40)
00303Cr 2  E8               inx
00303Dr 2  E8               inx
00303Er 2  A9 28            lda #40
003040r 2  95 00            sta $00,x
003042r 2  A9 00            lda #0
003044r 2  95 01            sta $01,x
003046r 2               
003046r 2               ; snake.fth:163:8 in `change-direction`
003046r 2               @OPCODE_2611:   ; [c64_ir] InlineCall("over")
003046r 2                   ; inline call(over)
003046r 2  48               pha
003047r 2  48               pha
003048r 2               
003048r 2               @target_780:
003048r 2               
003048r 2               ; src/prelude.fth:4:10 in `over`
003048r 2               @OPCODE_2613:   ; [c64_ir] AltPush
003048r 2  CA               dex
003049r 2  CA               dex
00304Ar 2  B5 03            lda $03,x
00304Cr 2  48               pha
00304Dr 2  B5 02            lda $02,x
00304Fr 2  48               pha
003050r 2               
003050r 2               ; src/prelude.fth:4:13 in `over`
003050r 2               @OPCODE_2614:   ; [c64_ir] TempStore
003050r 2  CA               dex
003051r 2  CA               dex
003052r 2  B5 03            lda $03,x
003054r 2  85 96            sta TEMP_PAX2
003056r 2  B5 02            lda $02,x
003058r 2  85 95            sta TEMP_PAX1
00305Ar 2               
00305Ar 2               ; src/prelude.fth:4:19 in `over`
00305Ar 2               @OPCODE_2615:   ; [c64_ir] TempLoad
00305Ar 2  E8               inx
00305Br 2  E8               inx
00305Cr 2  A5 95            lda TEMP_PAX1
00305Er 2  95 00            sta $00,x
003060r 2  A5 96            lda TEMP_PAX2
003062r 2  95 01            sta $01,x
003064r 2               
003064r 2               ; src/prelude.fth:4:25 in `over`
003064r 2               @OPCODE_2616:   ; [c64_ir] AltPop
003064r 2  E8               inx
003065r 2  E8               inx
003066r 2  68               pla
003067r 2  95 00            sta $00,x
003069r 2  68               pla
00306Ar 2  95 01            sta $01,x
00306Cr 2               
00306Cr 2               ; src/prelude.fth:4:28 in `over`
00306Cr 2               @OPCODE_2617:   ; [c64_ir] TempLoad
00306Cr 2  E8               inx
00306Dr 2  E8               inx
00306Er 2  A5 95            lda TEMP_PAX1
003070r 2  95 00            sta $00,x
003072r 2  A5 96            lda TEMP_PAX2
003074r 2  95 01            sta $01,x
003076r 2               
003076r 2               ; src/prelude.fth:4:34 in `over`
003076r 2               @OPCODE_2618:   ; [c64_ir] InlineExit
003076r 2                   ; inline exit
003076r 2  68               pla
003077r 2  68               pla
003078r 2               
003078r 2               @target_781:
003078r 2               
003078r 2               ; snake.fth:163:13 in `change-direction`
003078r 2               @OPCODE_2620:   ; [c64_ir] InlineCall("=")
003078r 2                   ; inline call(=)
003078r 2  48               pha
003079r 2  48               pha
00307Ar 2               
00307Ar 2               @target_782:
00307Ar 2               
00307Ar 2               ; src/prelude.fth:22:8 in `=`
00307Ar 2               @OPCODE_2622:   ; [c64_ir] InlineCall("-")
00307Ar 2                   ; inline call(-)
00307Ar 2  48               pha
00307Br 2  48               pha
00307Cr 2               
00307Cr 2               @target_783:
00307Cr 2               
00307Cr 2               ; src/prelude.fth:16:12 in `-`
00307Cr 2               @OPCODE_2624:   ; [c64_ir] InlineCall("negate")
00307Cr 2                   ; inline call(negate)
00307Cr 2  48               pha
00307Dr 2  48               pha
00307Er 2               
00307Er 2               @target_784:
00307Er 2               
00307Er 2               ; src/prelude.fth:15:12 in `negate`
00307Er 2               @OPCODE_2626:   ; [c64_ir] InlineCall("invert")
00307Er 2                   ; inline call(invert)
00307Er 2  48               pha
00307Fr 2  48               pha
003080r 2               
003080r 2               @target_785:
003080r 2               
003080r 2               ; src/prelude.fth:14:12 in `invert`
003080r 2               @OPCODE_2628:   ; [c64_ir] PushLiteral(-1)
003080r 2  E8               inx
003081r 2  E8               inx
003082r 2  A9 FF            lda #255
003084r 2  95 00            sta $00,x
003086r 2  A9 FF            lda #255
003088r 2  95 01            sta $01,x
00308Ar 2               
00308Ar 2               ; src/prelude.fth:14:15 in `invert`
00308Ar 2               @OPCODE_2629:   ; [c64_ir] Nand
00308Ar 2                   ; 26
00308Ar 2  CA               dex
00308Br 2  CA               dex
00308Cr 2  B5 00            lda $00,x
00308Er 2  35 02            and $02,x
003090r 2  49 FF            eor #$ff
003092r 2  95 00            sta $00,x
003094r 2  B5 01            lda $01,x
003096r 2  35 03            and $03,x
003098r 2  49 FF            eor #$ff
00309Ar 2  95 01            sta $01,x
00309Cr 2               
00309Cr 2               ; src/prelude.fth:14:20 in `invert`
00309Cr 2               @OPCODE_2630:   ; [c64_ir] InlineExit
00309Cr 2                   ; inline exit
00309Cr 2  68               pla
00309Dr 2  68               pla
00309Er 2               
00309Er 2               @target_786:
00309Er 2               
00309Er 2               ; src/prelude.fth:15:19 in `negate`
00309Er 2               @OPCODE_2632:   ; [c64_ir] PushLiteral(1)
00309Er 2  E8               inx
00309Fr 2  E8               inx
0030A0r 2  A9 01            lda #1
0030A2r 2  95 00            sta $00,x
0030A4r 2  A9 00            lda #0
0030A6r 2  95 01            sta $01,x
0030A8r 2               
0030A8r 2               ; src/prelude.fth:15:21 in `negate`
0030A8r 2               @OPCODE_2633:   ; [c64_ir] Add
0030A8r 2                   ; 21
0030A8r 2  CA               dex
0030A9r 2  CA               dex
0030AAr 2  18               clc
0030ABr 2  B5 00            lda $00,x
0030ADr 2  75 02            adc $02,x
0030AFr 2  95 00            sta $00,x
0030B1r 2  B5 01            lda $01,x
0030B3r 2  75 03            adc $03,x
0030B5r 2  95 01            sta $01,x
0030B7r 2               
0030B7r 2               ; src/prelude.fth:15:23 in `negate`
0030B7r 2               @OPCODE_2634:   ; [c64_ir] InlineExit
0030B7r 2                   ; inline exit
0030B7r 2  68               pla
0030B8r 2  68               pla
0030B9r 2               
0030B9r 2               @target_787:
0030B9r 2               
0030B9r 2               ; src/prelude.fth:16:19 in `-`
0030B9r 2               @OPCODE_2636:   ; [c64_ir] Add
0030B9r 2                   ; 21
0030B9r 2  CA               dex
0030BAr 2  CA               dex
0030BBr 2  18               clc
0030BCr 2  B5 00            lda $00,x
0030BEr 2  75 02            adc $02,x
0030C0r 2  95 00            sta $00,x
0030C2r 2  B5 01            lda $01,x
0030C4r 2  75 03            adc $03,x
0030C6r 2  95 01            sta $01,x
0030C8r 2               
0030C8r 2               ; src/prelude.fth:16:21 in `-`
0030C8r 2               @OPCODE_2637:   ; [c64_ir] InlineExit
0030C8r 2                   ; inline exit
0030C8r 2  68               pla
0030C9r 2  68               pla
0030CAr 2               
0030CAr 2               @target_788:
0030CAr 2               
0030CAr 2               ; src/prelude.fth:22:10 in `=`
0030CAr 2               @OPCODE_2639:   ; [c64_ir] InlineCall("0=")
0030CAr 2                   ; inline call(0=)
0030CAr 2  48               pha
0030CBr 2  48               pha
0030CCr 2               
0030CCr 2               @target_789:
0030CCr 2               
0030CCr 2               ; src/prelude.fth:21:8 in `0=`
0030CCr 2               @OPCODE_2641:   ; [c64_ir] JumpIf0(791)
0030CCr 2  CA               dex
0030CDr 2  CA               dex
0030CEr 2  B5 02            lda $02,x
0030D0r 2  15 03            ora $03,x
0030D2r 2  D0 03            bne *+5
0030D4r 2  4C rr rr         jmp @target_791
0030D7r 2               
0030D7r 2               @target_790:
0030D7r 2               
0030D7r 2               ; src/prelude.fth:21:11 in `0=`
0030D7r 2               @OPCODE_2643:   ; [c64_ir] PushLiteral(0)
0030D7r 2  E8               inx
0030D8r 2  E8               inx
0030D9r 2  A9 00            lda #0
0030DBr 2  95 00            sta $00,x
0030DDr 2  A9 00            lda #0
0030DFr 2  95 01            sta $01,x
0030E1r 2               
0030E1r 2               ; src/prelude.fth:21:13 in `0=`
0030E1r 2               @OPCODE_2644:   ; [c64_ir] JumpElse(792)
0030E1r 2  4C rr rr         jmp @target_792
0030E4r 2               
0030E4r 2               @target_791:
0030E4r 2               
0030E4r 2               ; src/prelude.fth:21:18 in `0=`
0030E4r 2               @OPCODE_2646:   ; [c64_ir] PushLiteral(-1)
0030E4r 2  E8               inx
0030E5r 2  E8               inx
0030E6r 2  A9 FF            lda #255
0030E8r 2  95 00            sta $00,x
0030EAr 2  A9 FF            lda #255
0030ECr 2  95 01            sta $01,x
0030EEr 2               
0030EEr 2               ; src/prelude.fth:21:21 in `0=`
0030EEr 2               @OPCODE_2647:   ; [c64_ir] JumpTarget(791)
0030EEr 2               
0030EEr 2               @target_792:
0030EEr 2               
0030EEr 2               ; src/prelude.fth:21:26 in `0=`
0030EEr 2               @OPCODE_2649:   ; [c64_ir] InlineExit
0030EEr 2                   ; inline exit
0030EEr 2  68               pla
0030EFr 2  68               pla
0030F0r 2               
0030F0r 2               @target_793:
0030F0r 2               
0030F0r 2               ; src/prelude.fth:22:13 in `=`
0030F0r 2               @OPCODE_2651:   ; [c64_ir] InlineExit
0030F0r 2                   ; inline exit
0030F0r 2  68               pla
0030F1r 2  68               pla
0030F2r 2               
0030F2r 2               @target_794:
0030F2r 2               
0030F2r 2               ; snake.fth:163:15 in `change-direction`
0030F2r 2               @OPCODE_2653:   ; [c64_ir] JumpIf0(840)
0030F2r 2  CA               dex
0030F3r 2  CA               dex
0030F4r 2  B5 02            lda $02,x
0030F6r 2  15 03            ora $03,x
0030F8r 2  D0 03            bne *+5
0030FAr 2  4C rr rr         jmp @target_840
0030FDr 2               
0030FDr 2               @target_795:
0030FDr 2               
0030FDr 2               ; snake.fth:163:18 in `change-direction`
0030FDr 2               @OPCODE_2655:   ; [c64_ir] InlineCall("turn-down")
0030FDr 2                   ; inline call(turn-down)
0030FDr 2  48               pha
0030FEr 2  48               pha
0030FFr 2               
0030FFr 2               @target_796:
0030FFr 2               
0030FFr 2               ; snake.fth:156:15 in `turn-down`
0030FFr 2               @OPCODE_2657:   ; [c64_ir] InlineCall("is-horizontal")
0030FFr 2                   ; inline call(is-horizontal)
0030FFr 2  48               pha
003100r 2  48               pha
003101r 2               
003101r 2               @target_797:
003101r 2               
003101r 2               ; snake.fth:146:18 in `is-horizontal`
003101r 2               @OPCODE_2659:   ; [c64_ir] PushLiteral(-26660)
003101r 2  E8               inx
003102r 2  E8               inx
003103r 2  A9 DC            lda #220
003105r 2  95 00            sta $00,x
003107r 2  A9 97            lda #151
003109r 2  95 01            sta $01,x
00310Br 2               
00310Br 2               ; snake.fth:146:28 in `is-horizontal`
00310Br 2               @OPCODE_2660:   ; [c64_ir] Load
00310Br 2  A1 00            lda ($00,x)
00310Dr 2  95 00            sta $00,x
00310Fr 2  A9 00            lda #0
003111r 2  95 01            sta $01,x
003113r 2               
003113r 2               ; snake.fth:146:30 in `is-horizontal`
003113r 2               @OPCODE_2661:   ; [c64_ir] InlineCall("dup")
003113r 2                   ; inline call(dup)
003113r 2  48               pha
003114r 2  48               pha
003115r 2               
003115r 2               @target_798:
003115r 2               
003115r 2               ; src/prelude.fth:6:10 in `dup`
003115r 2               @OPCODE_2663:   ; [c64_ir] TempStore
003115r 2  CA               dex
003116r 2  CA               dex
003117r 2  B5 03            lda $03,x
003119r 2  85 96            sta TEMP_PAX2
00311Br 2  B5 02            lda $02,x
00311Dr 2  85 95            sta TEMP_PAX1
00311Fr 2               
00311Fr 2               ; src/prelude.fth:6:16 in `dup`
00311Fr 2               @OPCODE_2664:   ; [c64_ir] TempLoad
00311Fr 2  E8               inx
003120r 2  E8               inx
003121r 2  A5 95            lda TEMP_PAX1
003123r 2  95 00            sta $00,x
003125r 2  A5 96            lda TEMP_PAX2
003127r 2  95 01            sta $01,x
003129r 2               
003129r 2               ; src/prelude.fth:6:22 in `dup`
003129r 2               @OPCODE_2665:   ; [c64_ir] TempLoad
003129r 2  E8               inx
00312Ar 2  E8               inx
00312Br 2  A5 95            lda TEMP_PAX1
00312Dr 2  95 00            sta $00,x
00312Fr 2  A5 96            lda TEMP_PAX2
003131r 2  95 01            sta $01,x
003133r 2               
003133r 2               ; src/prelude.fth:6:28 in `dup`
003133r 2               @OPCODE_2666:   ; [c64_ir] InlineExit
003133r 2                   ; inline exit
003133r 2  68               pla
003134r 2  68               pla
003135r 2               
003135r 2               @target_799:
003135r 2               
003135r 2               ; snake.fth:147:3 in `is-horizontal`
003135r 2               @OPCODE_2668:   ; [c64_ir] PushLiteral(37)
003135r 2  E8               inx
003136r 2  E8               inx
003137r 2  A9 25            lda #37
003139r 2  95 00            sta $00,x
00313Br 2  A9 00            lda #0
00313Dr 2  95 01            sta $01,x
00313Fr 2               
00313Fr 2               ; snake.fth:147:8 in `is-horizontal`
00313Fr 2               @OPCODE_2669:   ; [c64_ir] InlineCall("=")
00313Fr 2                   ; inline call(=)
00313Fr 2  48               pha
003140r 2  48               pha
003141r 2               
003141r 2               @target_800:
003141r 2               
003141r 2               ; src/prelude.fth:22:8 in `=`
003141r 2               @OPCODE_2671:   ; [c64_ir] InlineCall("-")
003141r 2                   ; inline call(-)
003141r 2  48               pha
003142r 2  48               pha
003143r 2               
003143r 2               @target_801:
003143r 2               
003143r 2               ; src/prelude.fth:16:12 in `-`
003143r 2               @OPCODE_2673:   ; [c64_ir] InlineCall("negate")
003143r 2                   ; inline call(negate)
003143r 2  48               pha
003144r 2  48               pha
003145r 2               
003145r 2               @target_802:
003145r 2               
003145r 2               ; src/prelude.fth:15:12 in `negate`
003145r 2               @OPCODE_2675:   ; [c64_ir] InlineCall("invert")
003145r 2                   ; inline call(invert)
003145r 2  48               pha
003146r 2  48               pha
003147r 2               
003147r 2               @target_803:
003147r 2               
003147r 2               ; src/prelude.fth:14:12 in `invert`
003147r 2               @OPCODE_2677:   ; [c64_ir] PushLiteral(-1)
003147r 2  E8               inx
003148r 2  E8               inx
003149r 2  A9 FF            lda #255
00314Br 2  95 00            sta $00,x
00314Dr 2  A9 FF            lda #255
00314Fr 2  95 01            sta $01,x
003151r 2               
003151r 2               ; src/prelude.fth:14:15 in `invert`
003151r 2               @OPCODE_2678:   ; [c64_ir] Nand
003151r 2                   ; 26
003151r 2  CA               dex
003152r 2  CA               dex
003153r 2  B5 00            lda $00,x
003155r 2  35 02            and $02,x
003157r 2  49 FF            eor #$ff
003159r 2  95 00            sta $00,x
00315Br 2  B5 01            lda $01,x
00315Dr 2  35 03            and $03,x
00315Fr 2  49 FF            eor #$ff
003161r 2  95 01            sta $01,x
003163r 2               
003163r 2               ; src/prelude.fth:14:20 in `invert`
003163r 2               @OPCODE_2679:   ; [c64_ir] InlineExit
003163r 2                   ; inline exit
003163r 2  68               pla
003164r 2  68               pla
003165r 2               
003165r 2               @target_804:
003165r 2               
003165r 2               ; src/prelude.fth:15:19 in `negate`
003165r 2               @OPCODE_2681:   ; [c64_ir] PushLiteral(1)
003165r 2  E8               inx
003166r 2  E8               inx
003167r 2  A9 01            lda #1
003169r 2  95 00            sta $00,x
00316Br 2  A9 00            lda #0
00316Dr 2  95 01            sta $01,x
00316Fr 2               
00316Fr 2               ; src/prelude.fth:15:21 in `negate`
00316Fr 2               @OPCODE_2682:   ; [c64_ir] Add
00316Fr 2                   ; 21
00316Fr 2  CA               dex
003170r 2  CA               dex
003171r 2  18               clc
003172r 2  B5 00            lda $00,x
003174r 2  75 02            adc $02,x
003176r 2  95 00            sta $00,x
003178r 2  B5 01            lda $01,x
00317Ar 2  75 03            adc $03,x
00317Cr 2  95 01            sta $01,x
00317Er 2               
00317Er 2               ; src/prelude.fth:15:23 in `negate`
00317Er 2               @OPCODE_2683:   ; [c64_ir] InlineExit
00317Er 2                   ; inline exit
00317Er 2  68               pla
00317Fr 2  68               pla
003180r 2               
003180r 2               @target_805:
003180r 2               
003180r 2               ; src/prelude.fth:16:19 in `-`
003180r 2               @OPCODE_2685:   ; [c64_ir] Add
003180r 2                   ; 21
003180r 2  CA               dex
003181r 2  CA               dex
003182r 2  18               clc
003183r 2  B5 00            lda $00,x
003185r 2  75 02            adc $02,x
003187r 2  95 00            sta $00,x
003189r 2  B5 01            lda $01,x
00318Br 2  75 03            adc $03,x
00318Dr 2  95 01            sta $01,x
00318Fr 2               
00318Fr 2               ; src/prelude.fth:16:21 in `-`
00318Fr 2               @OPCODE_2686:   ; [c64_ir] InlineExit
00318Fr 2                   ; inline exit
00318Fr 2  68               pla
003190r 2  68               pla
003191r 2               
003191r 2               @target_806:
003191r 2               
003191r 2               ; src/prelude.fth:22:10 in `=`
003191r 2               @OPCODE_2688:   ; [c64_ir] InlineCall("0=")
003191r 2                   ; inline call(0=)
003191r 2  48               pha
003192r 2  48               pha
003193r 2               
003193r 2               @target_807:
003193r 2               
003193r 2               ; src/prelude.fth:21:8 in `0=`
003193r 2               @OPCODE_2690:   ; [c64_ir] JumpIf0(809)
003193r 2  CA               dex
003194r 2  CA               dex
003195r 2  B5 02            lda $02,x
003197r 2  15 03            ora $03,x
003199r 2  D0 03            bne *+5
00319Br 2  4C rr rr         jmp @target_809
00319Er 2               
00319Er 2               @target_808:
00319Er 2               
00319Er 2               ; src/prelude.fth:21:11 in `0=`
00319Er 2               @OPCODE_2692:   ; [c64_ir] PushLiteral(0)
00319Er 2  E8               inx
00319Fr 2  E8               inx
0031A0r 2  A9 00            lda #0
0031A2r 2  95 00            sta $00,x
0031A4r 2  A9 00            lda #0
0031A6r 2  95 01            sta $01,x
0031A8r 2               
0031A8r 2               ; src/prelude.fth:21:13 in `0=`
0031A8r 2               @OPCODE_2693:   ; [c64_ir] JumpElse(810)
0031A8r 2  4C rr rr         jmp @target_810
0031ABr 2               
0031ABr 2               @target_809:
0031ABr 2               
0031ABr 2               ; src/prelude.fth:21:18 in `0=`
0031ABr 2               @OPCODE_2695:   ; [c64_ir] PushLiteral(-1)
0031ABr 2  E8               inx
0031ACr 2  E8               inx
0031ADr 2  A9 FF            lda #255
0031AFr 2  95 00            sta $00,x
0031B1r 2  A9 FF            lda #255
0031B3r 2  95 01            sta $01,x
0031B5r 2               
0031B5r 2               ; src/prelude.fth:21:21 in `0=`
0031B5r 2               @OPCODE_2696:   ; [c64_ir] JumpTarget(809)
0031B5r 2               
0031B5r 2               @target_810:
0031B5r 2               
0031B5r 2               ; src/prelude.fth:21:26 in `0=`
0031B5r 2               @OPCODE_2698:   ; [c64_ir] InlineExit
0031B5r 2                   ; inline exit
0031B5r 2  68               pla
0031B6r 2  68               pla
0031B7r 2               
0031B7r 2               @target_811:
0031B7r 2               
0031B7r 2               ; src/prelude.fth:22:13 in `=`
0031B7r 2               @OPCODE_2700:   ; [c64_ir] InlineExit
0031B7r 2                   ; inline exit
0031B7r 2  68               pla
0031B8r 2  68               pla
0031B9r 2               
0031B9r 2               @target_812:
0031B9r 2               
0031B9r 2               ; snake.fth:147:10 in `is-horizontal`
0031B9r 2               @OPCODE_2702:   ; [c64_ir] InlineCall("swap")
0031B9r 2                   ; inline call(swap)
0031B9r 2  48               pha
0031BAr 2  48               pha
0031BBr 2               
0031BBr 2               @target_813:
0031BBr 2               
0031BBr 2               ; src/prelude.fth:3:10 in `swap`
0031BBr 2               @OPCODE_2704:   ; [c64_ir] AltPush
0031BBr 2  CA               dex
0031BCr 2  CA               dex
0031BDr 2  B5 03            lda $03,x
0031BFr 2  48               pha
0031C0r 2  B5 02            lda $02,x
0031C2r 2  48               pha
0031C3r 2               
0031C3r 2               ; src/prelude.fth:3:13 in `swap`
0031C3r 2               @OPCODE_2705:   ; [c64_ir] TempStore
0031C3r 2  CA               dex
0031C4r 2  CA               dex
0031C5r 2  B5 03            lda $03,x
0031C7r 2  85 96            sta TEMP_PAX2
0031C9r 2  B5 02            lda $02,x
0031CBr 2  85 95            sta TEMP_PAX1
0031CDr 2               
0031CDr 2               ; src/prelude.fth:3:19 in `swap`
0031CDr 2               @OPCODE_2706:   ; [c64_ir] AltPop
0031CDr 2  E8               inx
0031CEr 2  E8               inx
0031CFr 2  68               pla
0031D0r 2  95 00            sta $00,x
0031D2r 2  68               pla
0031D3r 2  95 01            sta $01,x
0031D5r 2               
0031D5r 2               ; src/prelude.fth:3:22 in `swap`
0031D5r 2               @OPCODE_2707:   ; [c64_ir] TempLoad
0031D5r 2  E8               inx
0031D6r 2  E8               inx
0031D7r 2  A5 95            lda TEMP_PAX1
0031D9r 2  95 00            sta $00,x
0031DBr 2  A5 96            lda TEMP_PAX2
0031DDr 2  95 01            sta $01,x
0031DFr 2               
0031DFr 2               ; src/prelude.fth:3:28 in `swap`
0031DFr 2               @OPCODE_2708:   ; [c64_ir] InlineExit
0031DFr 2                   ; inline exit
0031DFr 2  68               pla
0031E0r 2  68               pla
0031E1r 2               
0031E1r 2               @target_814:
0031E1r 2               
0031E1r 2               ; snake.fth:148:3 in `is-horizontal`
0031E1r 2               @OPCODE_2710:   ; [c64_ir] PushLiteral(39)
0031E1r 2  E8               inx
0031E2r 2  E8               inx
0031E3r 2  A9 27            lda #39
0031E5r 2  95 00            sta $00,x
0031E7r 2  A9 00            lda #0
0031E9r 2  95 01            sta $01,x
0031EBr 2               
0031EBr 2               ; snake.fth:148:9 in `is-horizontal`
0031EBr 2               @OPCODE_2711:   ; [c64_ir] InlineCall("=")
0031EBr 2                   ; inline call(=)
0031EBr 2  48               pha
0031ECr 2  48               pha
0031EDr 2               
0031EDr 2               @target_815:
0031EDr 2               
0031EDr 2               ; src/prelude.fth:22:8 in `=`
0031EDr 2               @OPCODE_2713:   ; [c64_ir] InlineCall("-")
0031EDr 2                   ; inline call(-)
0031EDr 2  48               pha
0031EEr 2  48               pha
0031EFr 2               
0031EFr 2               @target_816:
0031EFr 2               
0031EFr 2               ; src/prelude.fth:16:12 in `-`
0031EFr 2               @OPCODE_2715:   ; [c64_ir] InlineCall("negate")
0031EFr 2                   ; inline call(negate)
0031EFr 2  48               pha
0031F0r 2  48               pha
0031F1r 2               
0031F1r 2               @target_817:
0031F1r 2               
0031F1r 2               ; src/prelude.fth:15:12 in `negate`
0031F1r 2               @OPCODE_2717:   ; [c64_ir] InlineCall("invert")
0031F1r 2                   ; inline call(invert)
0031F1r 2  48               pha
0031F2r 2  48               pha
0031F3r 2               
0031F3r 2               @target_818:
0031F3r 2               
0031F3r 2               ; src/prelude.fth:14:12 in `invert`
0031F3r 2               @OPCODE_2719:   ; [c64_ir] PushLiteral(-1)
0031F3r 2  E8               inx
0031F4r 2  E8               inx
0031F5r 2  A9 FF            lda #255
0031F7r 2  95 00            sta $00,x
0031F9r 2  A9 FF            lda #255
0031FBr 2  95 01            sta $01,x
0031FDr 2               
0031FDr 2               ; src/prelude.fth:14:15 in `invert`
0031FDr 2               @OPCODE_2720:   ; [c64_ir] Nand
0031FDr 2                   ; 26
0031FDr 2  CA               dex
0031FEr 2  CA               dex
0031FFr 2  B5 00            lda $00,x
003201r 2  35 02            and $02,x
003203r 2  49 FF            eor #$ff
003205r 2  95 00            sta $00,x
003207r 2  B5 01            lda $01,x
003209r 2  35 03            and $03,x
00320Br 2  49 FF            eor #$ff
00320Dr 2  95 01            sta $01,x
00320Fr 2               
00320Fr 2               ; src/prelude.fth:14:20 in `invert`
00320Fr 2               @OPCODE_2721:   ; [c64_ir] InlineExit
00320Fr 2                   ; inline exit
00320Fr 2  68               pla
003210r 2  68               pla
003211r 2               
003211r 2               @target_819:
003211r 2               
003211r 2               ; src/prelude.fth:15:19 in `negate`
003211r 2               @OPCODE_2723:   ; [c64_ir] PushLiteral(1)
003211r 2  E8               inx
003212r 2  E8               inx
003213r 2  A9 01            lda #1
003215r 2  95 00            sta $00,x
003217r 2  A9 00            lda #0
003219r 2  95 01            sta $01,x
00321Br 2               
00321Br 2               ; src/prelude.fth:15:21 in `negate`
00321Br 2               @OPCODE_2724:   ; [c64_ir] Add
00321Br 2                   ; 21
00321Br 2  CA               dex
00321Cr 2  CA               dex
00321Dr 2  18               clc
00321Er 2  B5 00            lda $00,x
003220r 2  75 02            adc $02,x
003222r 2  95 00            sta $00,x
003224r 2  B5 01            lda $01,x
003226r 2  75 03            adc $03,x
003228r 2  95 01            sta $01,x
00322Ar 2               
00322Ar 2               ; src/prelude.fth:15:23 in `negate`
00322Ar 2               @OPCODE_2725:   ; [c64_ir] InlineExit
00322Ar 2                   ; inline exit
00322Ar 2  68               pla
00322Br 2  68               pla
00322Cr 2               
00322Cr 2               @target_820:
00322Cr 2               
00322Cr 2               ; src/prelude.fth:16:19 in `-`
00322Cr 2               @OPCODE_2727:   ; [c64_ir] Add
00322Cr 2                   ; 21
00322Cr 2  CA               dex
00322Dr 2  CA               dex
00322Er 2  18               clc
00322Fr 2  B5 00            lda $00,x
003231r 2  75 02            adc $02,x
003233r 2  95 00            sta $00,x
003235r 2  B5 01            lda $01,x
003237r 2  75 03            adc $03,x
003239r 2  95 01            sta $01,x
00323Br 2               
00323Br 2               ; src/prelude.fth:16:21 in `-`
00323Br 2               @OPCODE_2728:   ; [c64_ir] InlineExit
00323Br 2                   ; inline exit
00323Br 2  68               pla
00323Cr 2  68               pla
00323Dr 2               
00323Dr 2               @target_821:
00323Dr 2               
00323Dr 2               ; src/prelude.fth:22:10 in `=`
00323Dr 2               @OPCODE_2730:   ; [c64_ir] InlineCall("0=")
00323Dr 2                   ; inline call(0=)
00323Dr 2  48               pha
00323Er 2  48               pha
00323Fr 2               
00323Fr 2               @target_822:
00323Fr 2               
00323Fr 2               ; src/prelude.fth:21:8 in `0=`
00323Fr 2               @OPCODE_2732:   ; [c64_ir] JumpIf0(824)
00323Fr 2  CA               dex
003240r 2  CA               dex
003241r 2  B5 02            lda $02,x
003243r 2  15 03            ora $03,x
003245r 2  D0 03            bne *+5
003247r 2  4C rr rr         jmp @target_824
00324Ar 2               
00324Ar 2               @target_823:
00324Ar 2               
00324Ar 2               ; src/prelude.fth:21:11 in `0=`
00324Ar 2               @OPCODE_2734:   ; [c64_ir] PushLiteral(0)
00324Ar 2  E8               inx
00324Br 2  E8               inx
00324Cr 2  A9 00            lda #0
00324Er 2  95 00            sta $00,x
003250r 2  A9 00            lda #0
003252r 2  95 01            sta $01,x
003254r 2               
003254r 2               ; src/prelude.fth:21:13 in `0=`
003254r 2               @OPCODE_2735:   ; [c64_ir] JumpElse(825)
003254r 2  4C rr rr         jmp @target_825
003257r 2               
003257r 2               @target_824:
003257r 2               
003257r 2               ; src/prelude.fth:21:18 in `0=`
003257r 2               @OPCODE_2737:   ; [c64_ir] PushLiteral(-1)
003257r 2  E8               inx
003258r 2  E8               inx
003259r 2  A9 FF            lda #255
00325Br 2  95 00            sta $00,x
00325Dr 2  A9 FF            lda #255
00325Fr 2  95 01            sta $01,x
003261r 2               
003261r 2               ; src/prelude.fth:21:21 in `0=`
003261r 2               @OPCODE_2738:   ; [c64_ir] JumpTarget(824)
003261r 2               
003261r 2               @target_825:
003261r 2               
003261r 2               ; src/prelude.fth:21:26 in `0=`
003261r 2               @OPCODE_2740:   ; [c64_ir] InlineExit
003261r 2                   ; inline exit
003261r 2  68               pla
003262r 2  68               pla
003263r 2               
003263r 2               @target_826:
003263r 2               
003263r 2               ; src/prelude.fth:22:13 in `=`
003263r 2               @OPCODE_2742:   ; [c64_ir] InlineExit
003263r 2                   ; inline exit
003263r 2  68               pla
003264r 2  68               pla
003265r 2               
003265r 2               @target_827:
003265r 2               
003265r 2               ; snake.fth:148:11 in `is-horizontal`
003265r 2               @OPCODE_2744:   ; [c64_ir] InlineCall("or")
003265r 2                   ; inline call(or)
003265r 2  48               pha
003266r 2  48               pha
003267r 2               
003267r 2               @target_828:
003267r 2               
003267r 2               ; src/prelude.fth:26:8 in `or`
003267r 2               @OPCODE_2746:   ; [c64_ir] InlineCall("invert")
003267r 2                   ; inline call(invert)
003267r 2  48               pha
003268r 2  48               pha
003269r 2               
003269r 2               @target_829:
003269r 2               
003269r 2               ; src/prelude.fth:14:12 in `invert`
003269r 2               @OPCODE_2748:   ; [c64_ir] PushLiteral(-1)
003269r 2  E8               inx
00326Ar 2  E8               inx
00326Br 2  A9 FF            lda #255
00326Dr 2  95 00            sta $00,x
00326Fr 2  A9 FF            lda #255
003271r 2  95 01            sta $01,x
003273r 2               
003273r 2               ; src/prelude.fth:14:15 in `invert`
003273r 2               @OPCODE_2749:   ; [c64_ir] Nand
003273r 2                   ; 26
003273r 2  CA               dex
003274r 2  CA               dex
003275r 2  B5 00            lda $00,x
003277r 2  35 02            and $02,x
003279r 2  49 FF            eor #$ff
00327Br 2  95 00            sta $00,x
00327Dr 2  B5 01            lda $01,x
00327Fr 2  35 03            and $03,x
003281r 2  49 FF            eor #$ff
003283r 2  95 01            sta $01,x
003285r 2               
003285r 2               ; src/prelude.fth:14:20 in `invert`
003285r 2               @OPCODE_2750:   ; [c64_ir] InlineExit
003285r 2                   ; inline exit
003285r 2  68               pla
003286r 2  68               pla
003287r 2               
003287r 2               @target_830:
003287r 2               
003287r 2               ; src/prelude.fth:26:15 in `or`
003287r 2               @OPCODE_2752:   ; [c64_ir] InlineCall("swap")
003287r 2                   ; inline call(swap)
003287r 2  48               pha
003288r 2  48               pha
003289r 2               
003289r 2               @target_831:
003289r 2               
003289r 2               ; src/prelude.fth:3:10 in `swap`
003289r 2               @OPCODE_2754:   ; [c64_ir] AltPush
003289r 2  CA               dex
00328Ar 2  CA               dex
00328Br 2  B5 03            lda $03,x
00328Dr 2  48               pha
00328Er 2  B5 02            lda $02,x
003290r 2  48               pha
003291r 2               
003291r 2               ; src/prelude.fth:3:13 in `swap`
003291r 2               @OPCODE_2755:   ; [c64_ir] TempStore
003291r 2  CA               dex
003292r 2  CA               dex
003293r 2  B5 03            lda $03,x
003295r 2  85 96            sta TEMP_PAX2
003297r 2  B5 02            lda $02,x
003299r 2  85 95            sta TEMP_PAX1
00329Br 2               
00329Br 2               ; src/prelude.fth:3:19 in `swap`
00329Br 2               @OPCODE_2756:   ; [c64_ir] AltPop
00329Br 2  E8               inx
00329Cr 2  E8               inx
00329Dr 2  68               pla
00329Er 2  95 00            sta $00,x
0032A0r 2  68               pla
0032A1r 2  95 01            sta $01,x
0032A3r 2               
0032A3r 2               ; src/prelude.fth:3:22 in `swap`
0032A3r 2               @OPCODE_2757:   ; [c64_ir] TempLoad
0032A3r 2  E8               inx
0032A4r 2  E8               inx
0032A5r 2  A5 95            lda TEMP_PAX1
0032A7r 2  95 00            sta $00,x
0032A9r 2  A5 96            lda TEMP_PAX2
0032ABr 2  95 01            sta $01,x
0032ADr 2               
0032ADr 2               ; src/prelude.fth:3:28 in `swap`
0032ADr 2               @OPCODE_2758:   ; [c64_ir] InlineExit
0032ADr 2                   ; inline exit
0032ADr 2  68               pla
0032AEr 2  68               pla
0032AFr 2               
0032AFr 2               @target_832:
0032AFr 2               
0032AFr 2               ; src/prelude.fth:26:20 in `or`
0032AFr 2               @OPCODE_2760:   ; [c64_ir] InlineCall("invert")
0032AFr 2                   ; inline call(invert)
0032AFr 2  48               pha
0032B0r 2  48               pha
0032B1r 2               
0032B1r 2               @target_833:
0032B1r 2               
0032B1r 2               ; src/prelude.fth:14:12 in `invert`
0032B1r 2               @OPCODE_2762:   ; [c64_ir] PushLiteral(-1)
0032B1r 2  E8               inx
0032B2r 2  E8               inx
0032B3r 2  A9 FF            lda #255
0032B5r 2  95 00            sta $00,x
0032B7r 2  A9 FF            lda #255
0032B9r 2  95 01            sta $01,x
0032BBr 2               
0032BBr 2               ; src/prelude.fth:14:15 in `invert`
0032BBr 2               @OPCODE_2763:   ; [c64_ir] Nand
0032BBr 2                   ; 26
0032BBr 2  CA               dex
0032BCr 2  CA               dex
0032BDr 2  B5 00            lda $00,x
0032BFr 2  35 02            and $02,x
0032C1r 2  49 FF            eor #$ff
0032C3r 2  95 00            sta $00,x
0032C5r 2  B5 01            lda $01,x
0032C7r 2  35 03            and $03,x
0032C9r 2  49 FF            eor #$ff
0032CBr 2  95 01            sta $01,x
0032CDr 2               
0032CDr 2               ; src/prelude.fth:14:20 in `invert`
0032CDr 2               @OPCODE_2764:   ; [c64_ir] InlineExit
0032CDr 2                   ; inline exit
0032CDr 2  68               pla
0032CEr 2  68               pla
0032CFr 2               
0032CFr 2               @target_834:
0032CFr 2               
0032CFr 2               ; src/prelude.fth:26:27 in `or`
0032CFr 2               @OPCODE_2766:   ; [c64_ir] Nand
0032CFr 2                   ; 26
0032CFr 2  CA               dex
0032D0r 2  CA               dex
0032D1r 2  B5 00            lda $00,x
0032D3r 2  35 02            and $02,x
0032D5r 2  49 FF            eor #$ff
0032D7r 2  95 00            sta $00,x
0032D9r 2  B5 01            lda $01,x
0032DBr 2  35 03            and $03,x
0032DDr 2  49 FF            eor #$ff
0032DFr 2  95 01            sta $01,x
0032E1r 2               
0032E1r 2               ; src/prelude.fth:26:32 in `or`
0032E1r 2               @OPCODE_2767:   ; [c64_ir] InlineExit
0032E1r 2                   ; inline exit
0032E1r 2  68               pla
0032E2r 2  68               pla
0032E3r 2               
0032E3r 2               @target_835:
0032E3r 2               
0032E3r 2               ; snake.fth:148:14 in `is-horizontal`
0032E3r 2               @OPCODE_2769:   ; [c64_ir] InlineExit
0032E3r 2                   ; inline exit
0032E3r 2  68               pla
0032E4r 2  68               pla
0032E5r 2               
0032E5r 2               @target_836:
0032E5r 2               
0032E5r 2               ; snake.fth:156:29 in `turn-down`
0032E5r 2               @OPCODE_2771:   ; [c64_ir] JumpIf0(838)
0032E5r 2  CA               dex
0032E6r 2  CA               dex
0032E7r 2  B5 02            lda $02,x
0032E9r 2  15 03            ora $03,x
0032EBr 2  D0 03            bne *+5
0032EDr 2  4C rr rr         jmp @target_838
0032F0r 2               
0032F0r 2               @target_837:
0032F0r 2               
0032F0r 2               ; snake.fth:156:32 in `turn-down`
0032F0r 2               @OPCODE_2773:   ; [c64_ir] PushLiteral(40)
0032F0r 2  E8               inx
0032F1r 2  E8               inx
0032F2r 2  A9 28            lda #40
0032F4r 2  95 00            sta $00,x
0032F6r 2  A9 00            lda #0
0032F8r 2  95 01            sta $01,x
0032FAr 2               
0032FAr 2               ; snake.fth:156:37 in `turn-down`
0032FAr 2               @OPCODE_2774:   ; [c64_ir] PushLiteral(-26660)
0032FAr 2  E8               inx
0032FBr 2  E8               inx
0032FCr 2  A9 DC            lda #220
0032FEr 2  95 00            sta $00,x
003300r 2  A9 97            lda #151
003302r 2  95 01            sta $01,x
003304r 2               
003304r 2               ; snake.fth:156:47 in `turn-down`
003304r 2               @OPCODE_2775:   ; [c64_ir] Store
003304r 2  CA               dex
003305r 2  CA               dex
003306r 2  CA               dex
003307r 2  CA               dex
003308r 2  B5 02            lda $02,x
00330Ar 2  81 04            sta ($04,x)
00330Cr 2                   ; TODO high byte
00330Cr 2               
00330Cr 2               ; snake.fth:156:49 in `turn-down`
00330Cr 2               @OPCODE_2776:   ; [c64_ir] JumpTarget(837)
00330Cr 2               
00330Cr 2               @target_838:
00330Cr 2               
00330Cr 2               ; snake.fth:156:54 in `turn-down`
00330Cr 2               @OPCODE_2778:   ; [c64_ir] InlineExit
00330Cr 2                   ; inline exit
00330Cr 2  68               pla
00330Dr 2  68               pla
00330Er 2               
00330Er 2               @target_839:
00330Er 2               
00330Er 2               ; snake.fth:164:3 in `change-direction`
00330Er 2               @OPCODE_2780:   ; [c64_ir] JumpTarget(839)
00330Er 2               
00330Er 2               @target_840:
00330Er 2               
00330Er 2               ; snake.fth:164:8 in `change-direction`
00330Er 2               @OPCODE_2782:   ; [c64_ir] JumpTarget(840)
00330Er 2               
00330Er 2               @target_841:
00330Er 2               
00330Er 2               ; snake.fth:164:13 in `change-direction`
00330Er 2               @OPCODE_2784:   ; [c64_ir] JumpTarget(841)
00330Er 2               
00330Er 2               @target_842:
00330Er 2               
00330Er 2               ; snake.fth:164:18 in `change-direction`
00330Er 2               @OPCODE_2786:   ; [c64_ir] JumpTarget(842)
00330Er 2               
00330Er 2               @target_843:
00330Er 2               
00330Er 2               ; snake.fth:164:23 in `change-direction`
00330Er 2               @OPCODE_2788:   ; [c64_ir] Drop
00330Er 2  CA               dex
00330Fr 2  CA               dex
003310r 2               
003310r 2               ; snake.fth:164:28 in `change-direction`
003310r 2               @OPCODE_2789:   ; [c64_ir] InlineExit
003310r 2                   ; inline exit
003310r 2  68               pla
003311r 2  68               pla
003312r 2               
003312r 2               @target_844:
003312r 2               
003312r 2               ; snake.fth:168:3 in `check-input`
003312r 2               @OPCODE_2791:   ; [c64_ir] PushLiteral(0)
003312r 2  E8               inx
003313r 2  E8               inx
003314r 2  A9 00            lda #0
003316r 2  95 00            sta $00,x
003318r 2  A9 00            lda #0
00331Ar 2  95 01            sta $01,x
00331Cr 2               
00331Cr 2               ; snake.fth:168:5 in `check-input`
00331Cr 2               @OPCODE_2792:   ; [c64_ir] PushLiteral(126)
00331Cr 2  E8               inx
00331Dr 2  E8               inx
00331Er 2  A9 7E            lda #126
003320r 2  95 00            sta $00,x
003322r 2  A9 00            lda #0
003324r 2  95 01            sta $01,x
003326r 2               
003326r 2               ; snake.fth:168:14 in `check-input`
003326r 2               @OPCODE_2793:   ; [c64_ir] Store
003326r 2  CA               dex
003327r 2  CA               dex
003328r 2  CA               dex
003329r 2  CA               dex
00332Ar 2  B5 02            lda $02,x
00332Cr 2  81 04            sta ($04,x)
00332Er 2                   ; TODO high byte
00332Er 2               
00332Er 2               ; snake.fth:168:16 in `check-input`
00332Er 2               @OPCODE_2794:   ; [c64_ir] InlineExit
00332Er 2                   ; inline exit
00332Er 2  68               pla
00332Fr 2  68               pla
003330r 2               
003330r 2               @target_845:
003330r 2               
003330r 2               ; snake.fth:219:1 in `main`
003330r 2               @OPCODE_2796:   ; [c64_ir] InlineCall("move-snake-tail")
003330r 2                   ; inline call(move-snake-tail)
003330r 2  48               pha
003331r 2  48               pha
003332r 2               
003332r 2               @target_846:
003332r 2               
003332r 2               ; snake.fth:140:3 in `move-snake-tail`
003332r 2               @OPCODE_2798:   ; [c64_ir] PushLiteral(-1)
003332r 2  E8               inx
003333r 2  E8               inx
003334r 2  A9 FF            lda #255
003336r 2  95 00            sta $00,x
003338r 2  A9 FF            lda #255
00333Ar 2  95 01            sta $01,x
00333Cr 2               
00333Cr 2               ; snake.fth:140:6 in `move-snake-tail`
00333Cr 2               @OPCODE_2799:   ; [c64_ir] PushLiteral(-26658)
00333Cr 2  E8               inx
00333Dr 2  E8               inx
00333Er 2  A9 DE            lda #222
003340r 2  95 00            sta $00,x
003342r 2  A9 97            lda #151
003344r 2  95 01            sta $01,x
003346r 2               
003346r 2               ; snake.fth:140:13 in `move-snake-tail`
003346r 2               @OPCODE_2800:   ; [c64_ir] Load
003346r 2  A1 00            lda ($00,x)
003348r 2  95 00            sta $00,x
00334Ar 2  A9 00            lda #0
00334Cr 2  95 01            sta $01,x
00334Er 2               
00334Er 2               ; snake.fth:140:15 in `move-snake-tail`
00334Er 2               @OPCODE_2801:   ; [c64_ir] AltPush
00334Er 2  CA               dex
00334Fr 2  CA               dex
003350r 2  B5 03            lda $03,x
003352r 2  48               pha
003353r 2  B5 02            lda $02,x
003355r 2  48               pha
003356r 2               
003356r 2               ; snake.fth:140:15 in `move-snake-tail`
003356r 2               @OPCODE_2802:   ; [c64_ir] AltPush
003356r 2  CA               dex
003357r 2  CA               dex
003358r 2  B5 03            lda $03,x
00335Ar 2  48               pha
00335Br 2  B5 02            lda $02,x
00335Dr 2  48               pha
00335Er 2               
00335Er 2               ; snake.fth:140:15 in `move-snake-tail`
00335Er 2               @OPCODE_2803:   ; [c64_ir] LoopTarget(846)
00335Er 2               
00335Er 2               @target_847:
00335Er 2               
00335Er 2               ; snake.fth:141:7 in `move-snake-tail`
00335Er 2               @OPCODE_2805:   ; [c64_ir] InlineCall("i")
00335Er 2                   ; inline call(i)
00335Er 2  48               pha
00335Fr 2  48               pha
003360r 2               
003360r 2               @target_848:
003360r 2               
003360r 2               ; src/prelude.fth:38:5 in `i`
003360r 2               @OPCODE_2807:   ; [c64_ir] AltPop
003360r 2  E8               inx
003361r 2  E8               inx
003362r 2  68               pla
003363r 2  95 00            sta $00,x
003365r 2  68               pla
003366r 2  95 01            sta $01,x
003368r 2               
003368r 2               ; src/prelude.fth:38:8 in `i`
003368r 2               @OPCODE_2808:   ; [c64_ir] AltPop
003368r 2  E8               inx
003369r 2  E8               inx
00336Ar 2  68               pla
00336Br 2  95 00            sta $00,x
00336Dr 2  68               pla
00336Er 2  95 01            sta $01,x
003370r 2               
003370r 2               ; src/prelude.fth:38:11 in `i`
003370r 2               @OPCODE_2809:   ; [c64_ir] AltPop
003370r 2  E8               inx
003371r 2  E8               inx
003372r 2  68               pla
003373r 2  95 00            sta $00,x
003375r 2  68               pla
003376r 2  95 01            sta $01,x
003378r 2               
003378r 2               ; src/prelude.fth:38:14 in `i`
003378r 2               @OPCODE_2810:   ; [c64_ir] TempStore
003378r 2  CA               dex
003379r 2  CA               dex
00337Ar 2  B5 03            lda $03,x
00337Cr 2  85 96            sta TEMP_PAX2
00337Er 2  B5 02            lda $02,x
003380r 2  85 95            sta TEMP_PAX1
003382r 2               
003382r 2               ; src/prelude.fth:38:20 in `i`
003382r 2               @OPCODE_2811:   ; [c64_ir] TempLoad
003382r 2  E8               inx
003383r 2  E8               inx
003384r 2  A5 95            lda TEMP_PAX1
003386r 2  95 00            sta $00,x
003388r 2  A5 96            lda TEMP_PAX2
00338Ar 2  95 01            sta $01,x
00338Cr 2               
00338Cr 2               ; src/prelude.fth:38:26 in `i`
00338Cr 2               @OPCODE_2812:   ; [c64_ir] AltPush
00338Cr 2  CA               dex
00338Dr 2  CA               dex
00338Er 2  B5 03            lda $03,x
003390r 2  48               pha
003391r 2  B5 02            lda $02,x
003393r 2  48               pha
003394r 2               
003394r 2               ; src/prelude.fth:38:29 in `i`
003394r 2               @OPCODE_2813:   ; [c64_ir] AltPush
003394r 2  CA               dex
003395r 2  CA               dex
003396r 2  B5 03            lda $03,x
003398r 2  48               pha
003399r 2  B5 02            lda $02,x
00339Br 2  48               pha
00339Cr 2               
00339Cr 2               ; src/prelude.fth:38:32 in `i`
00339Cr 2               @OPCODE_2814:   ; [c64_ir] AltPush
00339Cr 2  CA               dex
00339Dr 2  CA               dex
00339Er 2  B5 03            lda $03,x
0033A0r 2  48               pha
0033A1r 2  B5 02            lda $02,x
0033A3r 2  48               pha
0033A4r 2               
0033A4r 2               ; src/prelude.fth:38:35 in `i`
0033A4r 2               @OPCODE_2815:   ; [c64_ir] TempLoad
0033A4r 2  E8               inx
0033A5r 2  E8               inx
0033A6r 2  A5 95            lda TEMP_PAX1
0033A8r 2  95 00            sta $00,x
0033AAr 2  A5 96            lda TEMP_PAX2
0033ACr 2  95 01            sta $01,x
0033AEr 2               
0033AEr 2               ; src/prelude.fth:38:41 in `i`
0033AEr 2               @OPCODE_2816:   ; [c64_ir] InlineExit
0033AEr 2                   ; inline exit
0033AEr 2  68               pla
0033AFr 2  68               pla
0033B0r 2               
0033B0r 2               @target_849:
0033B0r 2               
0033B0r 2               ; snake.fth:141:9 in `move-snake-tail`
0033B0r 2               @OPCODE_2818:   ; [c64_ir] Drop
0033B0r 2  CA               dex
0033B1r 2  CA               dex
0033B2r 2               
0033B2r 2               ; snake.fth:141:14 in `move-snake-tail`
0033B2r 2               @OPCODE_2819:   ; [c64_ir] InlineCall("i")
0033B2r 2                   ; inline call(i)
0033B2r 2  48               pha
0033B3r 2  48               pha
0033B4r 2               
0033B4r 2               @target_850:
0033B4r 2               
0033B4r 2               ; src/prelude.fth:38:5 in `i`
0033B4r 2               @OPCODE_2821:   ; [c64_ir] AltPop
0033B4r 2  E8               inx
0033B5r 2  E8               inx
0033B6r 2  68               pla
0033B7r 2  95 00            sta $00,x
0033B9r 2  68               pla
0033BAr 2  95 01            sta $01,x
0033BCr 2               
0033BCr 2               ; src/prelude.fth:38:8 in `i`
0033BCr 2               @OPCODE_2822:   ; [c64_ir] AltPop
0033BCr 2  E8               inx
0033BDr 2  E8               inx
0033BEr 2  68               pla
0033BFr 2  95 00            sta $00,x
0033C1r 2  68               pla
0033C2r 2  95 01            sta $01,x
0033C4r 2               
0033C4r 2               ; src/prelude.fth:38:11 in `i`
0033C4r 2               @OPCODE_2823:   ; [c64_ir] AltPop
0033C4r 2  E8               inx
0033C5r 2  E8               inx
0033C6r 2  68               pla
0033C7r 2  95 00            sta $00,x
0033C9r 2  68               pla
0033CAr 2  95 01            sta $01,x
0033CCr 2               
0033CCr 2               ; src/prelude.fth:38:14 in `i`
0033CCr 2               @OPCODE_2824:   ; [c64_ir] TempStore
0033CCr 2  CA               dex
0033CDr 2  CA               dex
0033CEr 2  B5 03            lda $03,x
0033D0r 2  85 96            sta TEMP_PAX2
0033D2r 2  B5 02            lda $02,x
0033D4r 2  85 95            sta TEMP_PAX1
0033D6r 2               
0033D6r 2               ; src/prelude.fth:38:20 in `i`
0033D6r 2               @OPCODE_2825:   ; [c64_ir] TempLoad
0033D6r 2  E8               inx
0033D7r 2  E8               inx
0033D8r 2  A5 95            lda TEMP_PAX1
0033DAr 2  95 00            sta $00,x
0033DCr 2  A5 96            lda TEMP_PAX2
0033DEr 2  95 01            sta $01,x
0033E0r 2               
0033E0r 2               ; src/prelude.fth:38:26 in `i`
0033E0r 2               @OPCODE_2826:   ; [c64_ir] AltPush
0033E0r 2  CA               dex
0033E1r 2  CA               dex
0033E2r 2  B5 03            lda $03,x
0033E4r 2  48               pha
0033E5r 2  B5 02            lda $02,x
0033E7r 2  48               pha
0033E8r 2               
0033E8r 2               ; src/prelude.fth:38:29 in `i`
0033E8r 2               @OPCODE_2827:   ; [c64_ir] AltPush
0033E8r 2  CA               dex
0033E9r 2  CA               dex
0033EAr 2  B5 03            lda $03,x
0033ECr 2  48               pha
0033EDr 2  B5 02            lda $02,x
0033EFr 2  48               pha
0033F0r 2               
0033F0r 2               ; src/prelude.fth:38:32 in `i`
0033F0r 2               @OPCODE_2828:   ; [c64_ir] AltPush
0033F0r 2  CA               dex
0033F1r 2  CA               dex
0033F2r 2  B5 03            lda $03,x
0033F4r 2  48               pha
0033F5r 2  B5 02            lda $02,x
0033F7r 2  48               pha
0033F8r 2               
0033F8r 2               ; src/prelude.fth:38:35 in `i`
0033F8r 2               @OPCODE_2829:   ; [c64_ir] TempLoad
0033F8r 2  E8               inx
0033F9r 2  E8               inx
0033FAr 2  A5 95            lda TEMP_PAX1
0033FCr 2  95 00            sta $00,x
0033FEr 2  A5 96            lda TEMP_PAX2
003400r 2  95 01            sta $01,x
003402r 2               
003402r 2               ; src/prelude.fth:38:41 in `i`
003402r 2               @OPCODE_2830:   ; [c64_ir] InlineExit
003402r 2                   ; inline exit
003402r 2  68               pla
003403r 2  68               pla
003404r 2               
003404r 2               @target_851:
003404r 2               
003404r 2               ; snake.fth:141:16 in `move-snake-tail`
003404r 2               @OPCODE_2832:   ; [c64_ir] InlineCall("snake-x")
003404r 2                   ; inline call(snake-x)
003404r 2  48               pha
003405r 2  48               pha
003406r 2               
003406r 2               @target_852:
003406r 2               
003406r 2               ; snake.fth:42:3 in `snake-x`
003406r 2               @OPCODE_2834:   ; [c64_ir] InlineCall("cells")
003406r 2                   ; inline call(cells)
003406r 2  48               pha
003407r 2  48               pha
003408r 2               
003408r 2               @target_853:
003408r 2               
003408r 2               ; src/prelude.fth:41:9 in `cells`
003408r 2               @OPCODE_2836:   ; [c64_ir] InlineCall("dup")
003408r 2                   ; inline call(dup)
003408r 2  48               pha
003409r 2  48               pha
00340Ar 2               
00340Ar 2               @target_854:
00340Ar 2               
00340Ar 2               ; src/prelude.fth:6:10 in `dup`
00340Ar 2               @OPCODE_2838:   ; [c64_ir] TempStore
00340Ar 2  CA               dex
00340Br 2  CA               dex
00340Cr 2  B5 03            lda $03,x
00340Er 2  85 96            sta TEMP_PAX2
003410r 2  B5 02            lda $02,x
003412r 2  85 95            sta TEMP_PAX1
003414r 2               
003414r 2               ; src/prelude.fth:6:16 in `dup`
003414r 2               @OPCODE_2839:   ; [c64_ir] TempLoad
003414r 2  E8               inx
003415r 2  E8               inx
003416r 2  A5 95            lda TEMP_PAX1
003418r 2  95 00            sta $00,x
00341Ar 2  A5 96            lda TEMP_PAX2
00341Cr 2  95 01            sta $01,x
00341Er 2               
00341Er 2               ; src/prelude.fth:6:22 in `dup`
00341Er 2               @OPCODE_2840:   ; [c64_ir] TempLoad
00341Er 2  E8               inx
00341Fr 2  E8               inx
003420r 2  A5 95            lda TEMP_PAX1
003422r 2  95 00            sta $00,x
003424r 2  A5 96            lda TEMP_PAX2
003426r 2  95 01            sta $01,x
003428r 2               
003428r 2               ; src/prelude.fth:6:28 in `dup`
003428r 2               @OPCODE_2841:   ; [c64_ir] InlineExit
003428r 2                   ; inline exit
003428r 2  68               pla
003429r 2  68               pla
00342Ar 2               
00342Ar 2               @target_855:
00342Ar 2               
00342Ar 2               ; src/prelude.fth:41:13 in `cells`
00342Ar 2               @OPCODE_2843:   ; [c64_ir] Add
00342Ar 2                   ; 21
00342Ar 2  CA               dex
00342Br 2  CA               dex
00342Cr 2  18               clc
00342Dr 2  B5 00            lda $00,x
00342Fr 2  75 02            adc $02,x
003431r 2  95 00            sta $00,x
003433r 2  B5 01            lda $01,x
003435r 2  75 03            adc $03,x
003437r 2  95 01            sta $01,x
003439r 2               
003439r 2               ; src/prelude.fth:41:15 in `cells`
003439r 2               @OPCODE_2844:   ; [c64_ir] InlineExit
003439r 2                   ; inline exit
003439r 2  68               pla
00343Ar 2  68               pla
00343Br 2               
00343Br 2               @target_856:
00343Br 2               
00343Br 2               ; snake.fth:42:9 in `snake-x`
00343Br 2               @OPCODE_2846:   ; [c64_ir] PushLiteral(-28668)
00343Br 2  E8               inx
00343Cr 2  E8               inx
00343Dr 2  A9 04            lda #4
00343Fr 2  95 00            sta $00,x
003441r 2  A9 90            lda #144
003443r 2  95 01            sta $01,x
003445r 2               
003445r 2               ; snake.fth:42:22 in `snake-x`
003445r 2               @OPCODE_2847:   ; [c64_ir] Add
003445r 2                   ; 21
003445r 2  CA               dex
003446r 2  CA               dex
003447r 2  18               clc
003448r 2  B5 00            lda $00,x
00344Ar 2  75 02            adc $02,x
00344Cr 2  95 00            sta $00,x
00344Er 2  B5 01            lda $01,x
003450r 2  75 03            adc $03,x
003452r 2  95 01            sta $01,x
003454r 2               
003454r 2               ; snake.fth:42:24 in `snake-x`
003454r 2               @OPCODE_2848:   ; [c64_ir] InlineExit
003454r 2                   ; inline exit
003454r 2  68               pla
003455r 2  68               pla
003456r 2               
003456r 2               @target_857:
003456r 2               
003456r 2               ; snake.fth:141:24 in `move-snake-tail`
003456r 2               @OPCODE_2850:   ; [c64_ir] Load
003456r 2  A1 00            lda ($00,x)
003458r 2  95 00            sta $00,x
00345Ar 2  A9 00            lda #0
00345Cr 2  95 01            sta $01,x
00345Er 2               
00345Er 2               ; snake.fth:141:26 in `move-snake-tail`
00345Er 2               @OPCODE_2851:   ; [c64_ir] InlineCall("i")
00345Er 2                   ; inline call(i)
00345Er 2  48               pha
00345Fr 2  48               pha
003460r 2               
003460r 2               @target_858:
003460r 2               
003460r 2               ; src/prelude.fth:38:5 in `i`
003460r 2               @OPCODE_2853:   ; [c64_ir] AltPop
003460r 2  E8               inx
003461r 2  E8               inx
003462r 2  68               pla
003463r 2  95 00            sta $00,x
003465r 2  68               pla
003466r 2  95 01            sta $01,x
003468r 2               
003468r 2               ; src/prelude.fth:38:8 in `i`
003468r 2               @OPCODE_2854:   ; [c64_ir] AltPop
003468r 2  E8               inx
003469r 2  E8               inx
00346Ar 2  68               pla
00346Br 2  95 00            sta $00,x
00346Dr 2  68               pla
00346Er 2  95 01            sta $01,x
003470r 2               
003470r 2               ; src/prelude.fth:38:11 in `i`
003470r 2               @OPCODE_2855:   ; [c64_ir] AltPop
003470r 2  E8               inx
003471r 2  E8               inx
003472r 2  68               pla
003473r 2  95 00            sta $00,x
003475r 2  68               pla
003476r 2  95 01            sta $01,x
003478r 2               
003478r 2               ; src/prelude.fth:38:14 in `i`
003478r 2               @OPCODE_2856:   ; [c64_ir] TempStore
003478r 2  CA               dex
003479r 2  CA               dex
00347Ar 2  B5 03            lda $03,x
00347Cr 2  85 96            sta TEMP_PAX2
00347Er 2  B5 02            lda $02,x
003480r 2  85 95            sta TEMP_PAX1
003482r 2               
003482r 2               ; src/prelude.fth:38:20 in `i`
003482r 2               @OPCODE_2857:   ; [c64_ir] TempLoad
003482r 2  E8               inx
003483r 2  E8               inx
003484r 2  A5 95            lda TEMP_PAX1
003486r 2  95 00            sta $00,x
003488r 2  A5 96            lda TEMP_PAX2
00348Ar 2  95 01            sta $01,x
00348Cr 2               
00348Cr 2               ; src/prelude.fth:38:26 in `i`
00348Cr 2               @OPCODE_2858:   ; [c64_ir] AltPush
00348Cr 2  CA               dex
00348Dr 2  CA               dex
00348Er 2  B5 03            lda $03,x
003490r 2  48               pha
003491r 2  B5 02            lda $02,x
003493r 2  48               pha
003494r 2               
003494r 2               ; src/prelude.fth:38:29 in `i`
003494r 2               @OPCODE_2859:   ; [c64_ir] AltPush
003494r 2  CA               dex
003495r 2  CA               dex
003496r 2  B5 03            lda $03,x
003498r 2  48               pha
003499r 2  B5 02            lda $02,x
00349Br 2  48               pha
00349Cr 2               
00349Cr 2               ; src/prelude.fth:38:32 in `i`
00349Cr 2               @OPCODE_2860:   ; [c64_ir] AltPush
00349Cr 2  CA               dex
00349Dr 2  CA               dex
00349Er 2  B5 03            lda $03,x
0034A0r 2  48               pha
0034A1r 2  B5 02            lda $02,x
0034A3r 2  48               pha
0034A4r 2               
0034A4r 2               ; src/prelude.fth:38:35 in `i`
0034A4r 2               @OPCODE_2861:   ; [c64_ir] TempLoad
0034A4r 2  E8               inx
0034A5r 2  E8               inx
0034A6r 2  A5 95            lda TEMP_PAX1
0034A8r 2  95 00            sta $00,x
0034AAr 2  A5 96            lda TEMP_PAX2
0034ACr 2  95 01            sta $01,x
0034AEr 2               
0034AEr 2               ; src/prelude.fth:38:41 in `i`
0034AEr 2               @OPCODE_2862:   ; [c64_ir] InlineExit
0034AEr 2                   ; inline exit
0034AEr 2  68               pla
0034AFr 2  68               pla
0034B0r 2               
0034B0r 2               @target_859:
0034B0r 2               
0034B0r 2               ; snake.fth:141:28 in `move-snake-tail`
0034B0r 2               @OPCODE_2864:   ; [c64_ir] PushLiteral(1)
0034B0r 2  E8               inx
0034B1r 2  E8               inx
0034B2r 2  A9 01            lda #1
0034B4r 2  95 00            sta $00,x
0034B6r 2  A9 00            lda #0
0034B8r 2  95 01            sta $01,x
0034BAr 2               
0034BAr 2               ; snake.fth:141:30 in `move-snake-tail`
0034BAr 2               @OPCODE_2865:   ; [c64_ir] Add
0034BAr 2                   ; 21
0034BAr 2  CA               dex
0034BBr 2  CA               dex
0034BCr 2  18               clc
0034BDr 2  B5 00            lda $00,x
0034BFr 2  75 02            adc $02,x
0034C1r 2  95 00            sta $00,x
0034C3r 2  B5 01            lda $01,x
0034C5r 2  75 03            adc $03,x
0034C7r 2  95 01            sta $01,x
0034C9r 2               
0034C9r 2               ; snake.fth:141:32 in `move-snake-tail`
0034C9r 2               @OPCODE_2866:   ; [c64_ir] InlineCall("snake-x")
0034C9r 2                   ; inline call(snake-x)
0034C9r 2  48               pha
0034CAr 2  48               pha
0034CBr 2               
0034CBr 2               @target_860:
0034CBr 2               
0034CBr 2               ; snake.fth:42:3 in `snake-x`
0034CBr 2               @OPCODE_2868:   ; [c64_ir] InlineCall("cells")
0034CBr 2                   ; inline call(cells)
0034CBr 2  48               pha
0034CCr 2  48               pha
0034CDr 2               
0034CDr 2               @target_861:
0034CDr 2               
0034CDr 2               ; src/prelude.fth:41:9 in `cells`
0034CDr 2               @OPCODE_2870:   ; [c64_ir] InlineCall("dup")
0034CDr 2                   ; inline call(dup)
0034CDr 2  48               pha
0034CEr 2  48               pha
0034CFr 2               
0034CFr 2               @target_862:
0034CFr 2               
0034CFr 2               ; src/prelude.fth:6:10 in `dup`
0034CFr 2               @OPCODE_2872:   ; [c64_ir] TempStore
0034CFr 2  CA               dex
0034D0r 2  CA               dex
0034D1r 2  B5 03            lda $03,x
0034D3r 2  85 96            sta TEMP_PAX2
0034D5r 2  B5 02            lda $02,x
0034D7r 2  85 95            sta TEMP_PAX1
0034D9r 2               
0034D9r 2               ; src/prelude.fth:6:16 in `dup`
0034D9r 2               @OPCODE_2873:   ; [c64_ir] TempLoad
0034D9r 2  E8               inx
0034DAr 2  E8               inx
0034DBr 2  A5 95            lda TEMP_PAX1
0034DDr 2  95 00            sta $00,x
0034DFr 2  A5 96            lda TEMP_PAX2
0034E1r 2  95 01            sta $01,x
0034E3r 2               
0034E3r 2               ; src/prelude.fth:6:22 in `dup`
0034E3r 2               @OPCODE_2874:   ; [c64_ir] TempLoad
0034E3r 2  E8               inx
0034E4r 2  E8               inx
0034E5r 2  A5 95            lda TEMP_PAX1
0034E7r 2  95 00            sta $00,x
0034E9r 2  A5 96            lda TEMP_PAX2
0034EBr 2  95 01            sta $01,x
0034EDr 2               
0034EDr 2               ; src/prelude.fth:6:28 in `dup`
0034EDr 2               @OPCODE_2875:   ; [c64_ir] InlineExit
0034EDr 2                   ; inline exit
0034EDr 2  68               pla
0034EEr 2  68               pla
0034EFr 2               
0034EFr 2               @target_863:
0034EFr 2               
0034EFr 2               ; src/prelude.fth:41:13 in `cells`
0034EFr 2               @OPCODE_2877:   ; [c64_ir] Add
0034EFr 2                   ; 21
0034EFr 2  CA               dex
0034F0r 2  CA               dex
0034F1r 2  18               clc
0034F2r 2  B5 00            lda $00,x
0034F4r 2  75 02            adc $02,x
0034F6r 2  95 00            sta $00,x
0034F8r 2  B5 01            lda $01,x
0034FAr 2  75 03            adc $03,x
0034FCr 2  95 01            sta $01,x
0034FEr 2               
0034FEr 2               ; src/prelude.fth:41:15 in `cells`
0034FEr 2               @OPCODE_2878:   ; [c64_ir] InlineExit
0034FEr 2                   ; inline exit
0034FEr 2  68               pla
0034FFr 2  68               pla
003500r 2               
003500r 2               @target_864:
003500r 2               
003500r 2               ; snake.fth:42:9 in `snake-x`
003500r 2               @OPCODE_2880:   ; [c64_ir] PushLiteral(-28668)
003500r 2  E8               inx
003501r 2  E8               inx
003502r 2  A9 04            lda #4
003504r 2  95 00            sta $00,x
003506r 2  A9 90            lda #144
003508r 2  95 01            sta $01,x
00350Ar 2               
00350Ar 2               ; snake.fth:42:22 in `snake-x`
00350Ar 2               @OPCODE_2881:   ; [c64_ir] Add
00350Ar 2                   ; 21
00350Ar 2  CA               dex
00350Br 2  CA               dex
00350Cr 2  18               clc
00350Dr 2  B5 00            lda $00,x
00350Fr 2  75 02            adc $02,x
003511r 2  95 00            sta $00,x
003513r 2  B5 01            lda $01,x
003515r 2  75 03            adc $03,x
003517r 2  95 01            sta $01,x
003519r 2               
003519r 2               ; snake.fth:42:24 in `snake-x`
003519r 2               @OPCODE_2882:   ; [c64_ir] InlineExit
003519r 2                   ; inline exit
003519r 2  68               pla
00351Ar 2  68               pla
00351Br 2               
00351Br 2               @target_865:
00351Br 2               
00351Br 2               ; snake.fth:141:40 in `move-snake-tail`
00351Br 2               @OPCODE_2884:   ; [c64_ir] Store
00351Br 2  CA               dex
00351Cr 2  CA               dex
00351Dr 2  CA               dex
00351Er 2  CA               dex
00351Fr 2  B5 02            lda $02,x
003521r 2  81 04            sta ($04,x)
003523r 2                   ; TODO high byte
003523r 2               
003523r 2               ; snake.fth:142:7 in `move-snake-tail`
003523r 2               @OPCODE_2885:   ; [c64_ir] InlineCall("i")
003523r 2                   ; inline call(i)
003523r 2  48               pha
003524r 2  48               pha
003525r 2               
003525r 2               @target_866:
003525r 2               
003525r 2               ; src/prelude.fth:38:5 in `i`
003525r 2               @OPCODE_2887:   ; [c64_ir] AltPop
003525r 2  E8               inx
003526r 2  E8               inx
003527r 2  68               pla
003528r 2  95 00            sta $00,x
00352Ar 2  68               pla
00352Br 2  95 01            sta $01,x
00352Dr 2               
00352Dr 2               ; src/prelude.fth:38:8 in `i`
00352Dr 2               @OPCODE_2888:   ; [c64_ir] AltPop
00352Dr 2  E8               inx
00352Er 2  E8               inx
00352Fr 2  68               pla
003530r 2  95 00            sta $00,x
003532r 2  68               pla
003533r 2  95 01            sta $01,x
003535r 2               
003535r 2               ; src/prelude.fth:38:11 in `i`
003535r 2               @OPCODE_2889:   ; [c64_ir] AltPop
003535r 2  E8               inx
003536r 2  E8               inx
003537r 2  68               pla
003538r 2  95 00            sta $00,x
00353Ar 2  68               pla
00353Br 2  95 01            sta $01,x
00353Dr 2               
00353Dr 2               ; src/prelude.fth:38:14 in `i`
00353Dr 2               @OPCODE_2890:   ; [c64_ir] TempStore
00353Dr 2  CA               dex
00353Er 2  CA               dex
00353Fr 2  B5 03            lda $03,x
003541r 2  85 96            sta TEMP_PAX2
003543r 2  B5 02            lda $02,x
003545r 2  85 95            sta TEMP_PAX1
003547r 2               
003547r 2               ; src/prelude.fth:38:20 in `i`
003547r 2               @OPCODE_2891:   ; [c64_ir] TempLoad
003547r 2  E8               inx
003548r 2  E8               inx
003549r 2  A5 95            lda TEMP_PAX1
00354Br 2  95 00            sta $00,x
00354Dr 2  A5 96            lda TEMP_PAX2
00354Fr 2  95 01            sta $01,x
003551r 2               
003551r 2               ; src/prelude.fth:38:26 in `i`
003551r 2               @OPCODE_2892:   ; [c64_ir] AltPush
003551r 2  CA               dex
003552r 2  CA               dex
003553r 2  B5 03            lda $03,x
003555r 2  48               pha
003556r 2  B5 02            lda $02,x
003558r 2  48               pha
003559r 2               
003559r 2               ; src/prelude.fth:38:29 in `i`
003559r 2               @OPCODE_2893:   ; [c64_ir] AltPush
003559r 2  CA               dex
00355Ar 2  CA               dex
00355Br 2  B5 03            lda $03,x
00355Dr 2  48               pha
00355Er 2  B5 02            lda $02,x
003560r 2  48               pha
003561r 2               
003561r 2               ; src/prelude.fth:38:32 in `i`
003561r 2               @OPCODE_2894:   ; [c64_ir] AltPush
003561r 2  CA               dex
003562r 2  CA               dex
003563r 2  B5 03            lda $03,x
003565r 2  48               pha
003566r 2  B5 02            lda $02,x
003568r 2  48               pha
003569r 2               
003569r 2               ; src/prelude.fth:38:35 in `i`
003569r 2               @OPCODE_2895:   ; [c64_ir] TempLoad
003569r 2  E8               inx
00356Ar 2  E8               inx
00356Br 2  A5 95            lda TEMP_PAX1
00356Dr 2  95 00            sta $00,x
00356Fr 2  A5 96            lda TEMP_PAX2
003571r 2  95 01            sta $01,x
003573r 2               
003573r 2               ; src/prelude.fth:38:41 in `i`
003573r 2               @OPCODE_2896:   ; [c64_ir] InlineExit
003573r 2                   ; inline exit
003573r 2  68               pla
003574r 2  68               pla
003575r 2               
003575r 2               @target_867:
003575r 2               
003575r 2               ; snake.fth:142:9 in `move-snake-tail`
003575r 2               @OPCODE_2898:   ; [c64_ir] InlineCall("snake-y")
003575r 2                   ; inline call(snake-y)
003575r 2  48               pha
003576r 2  48               pha
003577r 2               
003577r 2               @target_868:
003577r 2               
003577r 2               ; snake.fth:45:3 in `snake-y`
003577r 2               @OPCODE_2900:   ; [c64_ir] InlineCall("cells")
003577r 2                   ; inline call(cells)
003577r 2  48               pha
003578r 2  48               pha
003579r 2               
003579r 2               @target_869:
003579r 2               
003579r 2               ; src/prelude.fth:41:9 in `cells`
003579r 2               @OPCODE_2902:   ; [c64_ir] InlineCall("dup")
003579r 2                   ; inline call(dup)
003579r 2  48               pha
00357Ar 2  48               pha
00357Br 2               
00357Br 2               @target_870:
00357Br 2               
00357Br 2               ; src/prelude.fth:6:10 in `dup`
00357Br 2               @OPCODE_2904:   ; [c64_ir] TempStore
00357Br 2  CA               dex
00357Cr 2  CA               dex
00357Dr 2  B5 03            lda $03,x
00357Fr 2  85 96            sta TEMP_PAX2
003581r 2  B5 02            lda $02,x
003583r 2  85 95            sta TEMP_PAX1
003585r 2               
003585r 2               ; src/prelude.fth:6:16 in `dup`
003585r 2               @OPCODE_2905:   ; [c64_ir] TempLoad
003585r 2  E8               inx
003586r 2  E8               inx
003587r 2  A5 95            lda TEMP_PAX1
003589r 2  95 00            sta $00,x
00358Br 2  A5 96            lda TEMP_PAX2
00358Dr 2  95 01            sta $01,x
00358Fr 2               
00358Fr 2               ; src/prelude.fth:6:22 in `dup`
00358Fr 2               @OPCODE_2906:   ; [c64_ir] TempLoad
00358Fr 2  E8               inx
003590r 2  E8               inx
003591r 2  A5 95            lda TEMP_PAX1
003593r 2  95 00            sta $00,x
003595r 2  A5 96            lda TEMP_PAX2
003597r 2  95 01            sta $01,x
003599r 2               
003599r 2               ; src/prelude.fth:6:28 in `dup`
003599r 2               @OPCODE_2907:   ; [c64_ir] InlineExit
003599r 2                   ; inline exit
003599r 2  68               pla
00359Ar 2  68               pla
00359Br 2               
00359Br 2               @target_871:
00359Br 2               
00359Br 2               ; src/prelude.fth:41:13 in `cells`
00359Br 2               @OPCODE_2909:   ; [c64_ir] Add
00359Br 2                   ; 21
00359Br 2  CA               dex
00359Cr 2  CA               dex
00359Dr 2  18               clc
00359Er 2  B5 00            lda $00,x
0035A0r 2  75 02            adc $02,x
0035A2r 2  95 00            sta $00,x
0035A4r 2  B5 01            lda $01,x
0035A6r 2  75 03            adc $03,x
0035A8r 2  95 01            sta $01,x
0035AAr 2               
0035AAr 2               ; src/prelude.fth:41:15 in `cells`
0035AAr 2               @OPCODE_2910:   ; [c64_ir] InlineExit
0035AAr 2                   ; inline exit
0035AAr 2  68               pla
0035ABr 2  68               pla
0035ACr 2               
0035ACr 2               @target_872:
0035ACr 2               
0035ACr 2               ; snake.fth:45:9 in `snake-y`
0035ACr 2               @OPCODE_2912:   ; [c64_ir] PushLiteral(-27666)
0035ACr 2  E8               inx
0035ADr 2  E8               inx
0035AEr 2  A9 EE            lda #238
0035B0r 2  95 00            sta $00,x
0035B2r 2  A9 93            lda #147
0035B4r 2  95 01            sta $01,x
0035B6r 2               
0035B6r 2               ; snake.fth:45:22 in `snake-y`
0035B6r 2               @OPCODE_2913:   ; [c64_ir] Add
0035B6r 2                   ; 21
0035B6r 2  CA               dex
0035B7r 2  CA               dex
0035B8r 2  18               clc
0035B9r 2  B5 00            lda $00,x
0035BBr 2  75 02            adc $02,x
0035BDr 2  95 00            sta $00,x
0035BFr 2  B5 01            lda $01,x
0035C1r 2  75 03            adc $03,x
0035C3r 2  95 01            sta $01,x
0035C5r 2               
0035C5r 2               ; snake.fth:45:24 in `snake-y`
0035C5r 2               @OPCODE_2914:   ; [c64_ir] InlineExit
0035C5r 2                   ; inline exit
0035C5r 2  68               pla
0035C6r 2  68               pla
0035C7r 2               
0035C7r 2               @target_873:
0035C7r 2               
0035C7r 2               ; snake.fth:142:17 in `move-snake-tail`
0035C7r 2               @OPCODE_2916:   ; [c64_ir] Load
0035C7r 2  A1 00            lda ($00,x)
0035C9r 2  95 00            sta $00,x
0035CBr 2  A9 00            lda #0
0035CDr 2  95 01            sta $01,x
0035CFr 2               
0035CFr 2               ; snake.fth:142:19 in `move-snake-tail`
0035CFr 2               @OPCODE_2917:   ; [c64_ir] InlineCall("i")
0035CFr 2                   ; inline call(i)
0035CFr 2  48               pha
0035D0r 2  48               pha
0035D1r 2               
0035D1r 2               @target_874:
0035D1r 2               
0035D1r 2               ; src/prelude.fth:38:5 in `i`
0035D1r 2               @OPCODE_2919:   ; [c64_ir] AltPop
0035D1r 2  E8               inx
0035D2r 2  E8               inx
0035D3r 2  68               pla
0035D4r 2  95 00            sta $00,x
0035D6r 2  68               pla
0035D7r 2  95 01            sta $01,x
0035D9r 2               
0035D9r 2               ; src/prelude.fth:38:8 in `i`
0035D9r 2               @OPCODE_2920:   ; [c64_ir] AltPop
0035D9r 2  E8               inx
0035DAr 2  E8               inx
0035DBr 2  68               pla
0035DCr 2  95 00            sta $00,x
0035DEr 2  68               pla
0035DFr 2  95 01            sta $01,x
0035E1r 2               
0035E1r 2               ; src/prelude.fth:38:11 in `i`
0035E1r 2               @OPCODE_2921:   ; [c64_ir] AltPop
0035E1r 2  E8               inx
0035E2r 2  E8               inx
0035E3r 2  68               pla
0035E4r 2  95 00            sta $00,x
0035E6r 2  68               pla
0035E7r 2  95 01            sta $01,x
0035E9r 2               
0035E9r 2               ; src/prelude.fth:38:14 in `i`
0035E9r 2               @OPCODE_2922:   ; [c64_ir] TempStore
0035E9r 2  CA               dex
0035EAr 2  CA               dex
0035EBr 2  B5 03            lda $03,x
0035EDr 2  85 96            sta TEMP_PAX2
0035EFr 2  B5 02            lda $02,x
0035F1r 2  85 95            sta TEMP_PAX1
0035F3r 2               
0035F3r 2               ; src/prelude.fth:38:20 in `i`
0035F3r 2               @OPCODE_2923:   ; [c64_ir] TempLoad
0035F3r 2  E8               inx
0035F4r 2  E8               inx
0035F5r 2  A5 95            lda TEMP_PAX1
0035F7r 2  95 00            sta $00,x
0035F9r 2  A5 96            lda TEMP_PAX2
0035FBr 2  95 01            sta $01,x
0035FDr 2               
0035FDr 2               ; src/prelude.fth:38:26 in `i`
0035FDr 2               @OPCODE_2924:   ; [c64_ir] AltPush
0035FDr 2  CA               dex
0035FEr 2  CA               dex
0035FFr 2  B5 03            lda $03,x
003601r 2  48               pha
003602r 2  B5 02            lda $02,x
003604r 2  48               pha
003605r 2               
003605r 2               ; src/prelude.fth:38:29 in `i`
003605r 2               @OPCODE_2925:   ; [c64_ir] AltPush
003605r 2  CA               dex
003606r 2  CA               dex
003607r 2  B5 03            lda $03,x
003609r 2  48               pha
00360Ar 2  B5 02            lda $02,x
00360Cr 2  48               pha
00360Dr 2               
00360Dr 2               ; src/prelude.fth:38:32 in `i`
00360Dr 2               @OPCODE_2926:   ; [c64_ir] AltPush
00360Dr 2  CA               dex
00360Er 2  CA               dex
00360Fr 2  B5 03            lda $03,x
003611r 2  48               pha
003612r 2  B5 02            lda $02,x
003614r 2  48               pha
003615r 2               
003615r 2               ; src/prelude.fth:38:35 in `i`
003615r 2               @OPCODE_2927:   ; [c64_ir] TempLoad
003615r 2  E8               inx
003616r 2  E8               inx
003617r 2  A5 95            lda TEMP_PAX1
003619r 2  95 00            sta $00,x
00361Br 2  A5 96            lda TEMP_PAX2
00361Dr 2  95 01            sta $01,x
00361Fr 2               
00361Fr 2               ; src/prelude.fth:38:41 in `i`
00361Fr 2               @OPCODE_2928:   ; [c64_ir] InlineExit
00361Fr 2                   ; inline exit
00361Fr 2  68               pla
003620r 2  68               pla
003621r 2               
003621r 2               @target_875:
003621r 2               
003621r 2               ; snake.fth:142:21 in `move-snake-tail`
003621r 2               @OPCODE_2930:   ; [c64_ir] PushLiteral(1)
003621r 2  E8               inx
003622r 2  E8               inx
003623r 2  A9 01            lda #1
003625r 2  95 00            sta $00,x
003627r 2  A9 00            lda #0
003629r 2  95 01            sta $01,x
00362Br 2               
00362Br 2               ; snake.fth:142:23 in `move-snake-tail`
00362Br 2               @OPCODE_2931:   ; [c64_ir] Add
00362Br 2                   ; 21
00362Br 2  CA               dex
00362Cr 2  CA               dex
00362Dr 2  18               clc
00362Er 2  B5 00            lda $00,x
003630r 2  75 02            adc $02,x
003632r 2  95 00            sta $00,x
003634r 2  B5 01            lda $01,x
003636r 2  75 03            adc $03,x
003638r 2  95 01            sta $01,x
00363Ar 2               
00363Ar 2               ; snake.fth:142:25 in `move-snake-tail`
00363Ar 2               @OPCODE_2932:   ; [c64_ir] InlineCall("snake-y")
00363Ar 2                   ; inline call(snake-y)
00363Ar 2  48               pha
00363Br 2  48               pha
00363Cr 2               
00363Cr 2               @target_876:
00363Cr 2               
00363Cr 2               ; snake.fth:45:3 in `snake-y`
00363Cr 2               @OPCODE_2934:   ; [c64_ir] InlineCall("cells")
00363Cr 2                   ; inline call(cells)
00363Cr 2  48               pha
00363Dr 2  48               pha
00363Er 2               
00363Er 2               @target_877:
00363Er 2               
00363Er 2               ; src/prelude.fth:41:9 in `cells`
00363Er 2               @OPCODE_2936:   ; [c64_ir] InlineCall("dup")
00363Er 2                   ; inline call(dup)
00363Er 2  48               pha
00363Fr 2  48               pha
003640r 2               
003640r 2               @target_878:
003640r 2               
003640r 2               ; src/prelude.fth:6:10 in `dup`
003640r 2               @OPCODE_2938:   ; [c64_ir] TempStore
003640r 2  CA               dex
003641r 2  CA               dex
003642r 2  B5 03            lda $03,x
003644r 2  85 96            sta TEMP_PAX2
003646r 2  B5 02            lda $02,x
003648r 2  85 95            sta TEMP_PAX1
00364Ar 2               
00364Ar 2               ; src/prelude.fth:6:16 in `dup`
00364Ar 2               @OPCODE_2939:   ; [c64_ir] TempLoad
00364Ar 2  E8               inx
00364Br 2  E8               inx
00364Cr 2  A5 95            lda TEMP_PAX1
00364Er 2  95 00            sta $00,x
003650r 2  A5 96            lda TEMP_PAX2
003652r 2  95 01            sta $01,x
003654r 2               
003654r 2               ; src/prelude.fth:6:22 in `dup`
003654r 2               @OPCODE_2940:   ; [c64_ir] TempLoad
003654r 2  E8               inx
003655r 2  E8               inx
003656r 2  A5 95            lda TEMP_PAX1
003658r 2  95 00            sta $00,x
00365Ar 2  A5 96            lda TEMP_PAX2
00365Cr 2  95 01            sta $01,x
00365Er 2               
00365Er 2               ; src/prelude.fth:6:28 in `dup`
00365Er 2               @OPCODE_2941:   ; [c64_ir] InlineExit
00365Er 2                   ; inline exit
00365Er 2  68               pla
00365Fr 2  68               pla
003660r 2               
003660r 2               @target_879:
003660r 2               
003660r 2               ; src/prelude.fth:41:13 in `cells`
003660r 2               @OPCODE_2943:   ; [c64_ir] Add
003660r 2                   ; 21
003660r 2  CA               dex
003661r 2  CA               dex
003662r 2  18               clc
003663r 2  B5 00            lda $00,x
003665r 2  75 02            adc $02,x
003667r 2  95 00            sta $00,x
003669r 2  B5 01            lda $01,x
00366Br 2  75 03            adc $03,x
00366Dr 2  95 01            sta $01,x
00366Fr 2               
00366Fr 2               ; src/prelude.fth:41:15 in `cells`
00366Fr 2               @OPCODE_2944:   ; [c64_ir] InlineExit
00366Fr 2                   ; inline exit
00366Fr 2  68               pla
003670r 2  68               pla
003671r 2               
003671r 2               @target_880:
003671r 2               
003671r 2               ; snake.fth:45:9 in `snake-y`
003671r 2               @OPCODE_2946:   ; [c64_ir] PushLiteral(-27666)
003671r 2  E8               inx
003672r 2  E8               inx
003673r 2  A9 EE            lda #238
003675r 2  95 00            sta $00,x
003677r 2  A9 93            lda #147
003679r 2  95 01            sta $01,x
00367Br 2               
00367Br 2               ; snake.fth:45:22 in `snake-y`
00367Br 2               @OPCODE_2947:   ; [c64_ir] Add
00367Br 2                   ; 21
00367Br 2  CA               dex
00367Cr 2  CA               dex
00367Dr 2  18               clc
00367Er 2  B5 00            lda $00,x
003680r 2  75 02            adc $02,x
003682r 2  95 00            sta $00,x
003684r 2  B5 01            lda $01,x
003686r 2  75 03            adc $03,x
003688r 2  95 01            sta $01,x
00368Ar 2               
00368Ar 2               ; snake.fth:45:24 in `snake-y`
00368Ar 2               @OPCODE_2948:   ; [c64_ir] InlineExit
00368Ar 2                   ; inline exit
00368Ar 2  68               pla
00368Br 2  68               pla
00368Cr 2               
00368Cr 2               @target_881:
00368Cr 2               
00368Cr 2               ; snake.fth:142:33 in `move-snake-tail`
00368Cr 2               @OPCODE_2950:   ; [c64_ir] Store
00368Cr 2  CA               dex
00368Dr 2  CA               dex
00368Er 2  CA               dex
00368Fr 2  CA               dex
003690r 2  B5 02            lda $02,x
003692r 2  81 04            sta ($04,x)
003694r 2                   ; TODO high byte
003694r 2               
003694r 2               ; snake.fth:143:3 in `move-snake-tail`
003694r 2               @OPCODE_2951:   ; [c64_ir] PushLiteral(1)
003694r 2  E8               inx
003695r 2  E8               inx
003696r 2  A9 01            lda #1
003698r 2  95 00            sta $00,x
00369Ar 2  A9 00            lda #0
00369Cr 2  95 01            sta $01,x
00369Er 2               
00369Er 2               ; snake.fth:143:5 in `move-snake-tail`
00369Er 2               @OPCODE_2952:   ; [c64_ir] InlineCall("-loopimpl")
00369Er 2                   ; inline call(-loopimpl)
00369Er 2  48               pha
00369Fr 2  48               pha
0036A0r 2               
0036A0r 2               @target_882:
0036A0r 2               
0036A0r 2               ; src/prelude.fth:35:13 in `-loopimpl`
0036A0r 2               @OPCODE_2954:   ; [c64_ir] AltPop
0036A0r 2  E8               inx
0036A1r 2  E8               inx
0036A2r 2  68               pla
0036A3r 2  95 00            sta $00,x
0036A5r 2  68               pla
0036A6r 2  95 01            sta $01,x
0036A8r 2               
0036A8r 2               ; src/prelude.fth:35:16 in `-loopimpl`
0036A8r 2               @OPCODE_2955:   ; [c64_ir] InlineCall("swap")
0036A8r 2                   ; inline call(swap)
0036A8r 2  48               pha
0036A9r 2  48               pha
0036AAr 2               
0036AAr 2               @target_883:
0036AAr 2               
0036AAr 2               ; src/prelude.fth:3:10 in `swap`
0036AAr 2               @OPCODE_2957:   ; [c64_ir] AltPush
0036AAr 2  CA               dex
0036ABr 2  CA               dex
0036ACr 2  B5 03            lda $03,x
0036AEr 2  48               pha
0036AFr 2  B5 02            lda $02,x
0036B1r 2  48               pha
0036B2r 2               
0036B2r 2               ; src/prelude.fth:3:13 in `swap`
0036B2r 2               @OPCODE_2958:   ; [c64_ir] TempStore
0036B2r 2  CA               dex
0036B3r 2  CA               dex
0036B4r 2  B5 03            lda $03,x
0036B6r 2  85 96            sta TEMP_PAX2
0036B8r 2  B5 02            lda $02,x
0036BAr 2  85 95            sta TEMP_PAX1
0036BCr 2               
0036BCr 2               ; src/prelude.fth:3:19 in `swap`
0036BCr 2               @OPCODE_2959:   ; [c64_ir] AltPop
0036BCr 2  E8               inx
0036BDr 2  E8               inx
0036BEr 2  68               pla
0036BFr 2  95 00            sta $00,x
0036C1r 2  68               pla
0036C2r 2  95 01            sta $01,x
0036C4r 2               
0036C4r 2               ; src/prelude.fth:3:22 in `swap`
0036C4r 2               @OPCODE_2960:   ; [c64_ir] TempLoad
0036C4r 2  E8               inx
0036C5r 2  E8               inx
0036C6r 2  A5 95            lda TEMP_PAX1
0036C8r 2  95 00            sta $00,x
0036CAr 2  A5 96            lda TEMP_PAX2
0036CCr 2  95 01            sta $01,x
0036CEr 2               
0036CEr 2               ; src/prelude.fth:3:28 in `swap`
0036CEr 2               @OPCODE_2961:   ; [c64_ir] InlineExit
0036CEr 2                   ; inline exit
0036CEr 2  68               pla
0036CFr 2  68               pla
0036D0r 2               
0036D0r 2               @target_884:
0036D0r 2               
0036D0r 2               ; src/prelude.fth:35:21 in `-loopimpl`
0036D0r 2               @OPCODE_2963:   ; [c64_ir] AltPop
0036D0r 2  E8               inx
0036D1r 2  E8               inx
0036D2r 2  68               pla
0036D3r 2  95 00            sta $00,x
0036D5r 2  68               pla
0036D6r 2  95 01            sta $01,x
0036D8r 2               
0036D8r 2               ; src/prelude.fth:35:24 in `-loopimpl`
0036D8r 2               @OPCODE_2964:   ; [c64_ir] InlineCall("swap")
0036D8r 2                   ; inline call(swap)
0036D8r 2  48               pha
0036D9r 2  48               pha
0036DAr 2               
0036DAr 2               @target_885:
0036DAr 2               
0036DAr 2               ; src/prelude.fth:3:10 in `swap`
0036DAr 2               @OPCODE_2966:   ; [c64_ir] AltPush
0036DAr 2  CA               dex
0036DBr 2  CA               dex
0036DCr 2  B5 03            lda $03,x
0036DEr 2  48               pha
0036DFr 2  B5 02            lda $02,x
0036E1r 2  48               pha
0036E2r 2               
0036E2r 2               ; src/prelude.fth:3:13 in `swap`
0036E2r 2               @OPCODE_2967:   ; [c64_ir] TempStore
0036E2r 2  CA               dex
0036E3r 2  CA               dex
0036E4r 2  B5 03            lda $03,x
0036E6r 2  85 96            sta TEMP_PAX2
0036E8r 2  B5 02            lda $02,x
0036EAr 2  85 95            sta TEMP_PAX1
0036ECr 2               
0036ECr 2               ; src/prelude.fth:3:19 in `swap`
0036ECr 2               @OPCODE_2968:   ; [c64_ir] AltPop
0036ECr 2  E8               inx
0036EDr 2  E8               inx
0036EEr 2  68               pla
0036EFr 2  95 00            sta $00,x
0036F1r 2  68               pla
0036F2r 2  95 01            sta $01,x
0036F4r 2               
0036F4r 2               ; src/prelude.fth:3:22 in `swap`
0036F4r 2               @OPCODE_2969:   ; [c64_ir] TempLoad
0036F4r 2  E8               inx
0036F5r 2  E8               inx
0036F6r 2  A5 95            lda TEMP_PAX1
0036F8r 2  95 00            sta $00,x
0036FAr 2  A5 96            lda TEMP_PAX2
0036FCr 2  95 01            sta $01,x
0036FEr 2               
0036FEr 2               ; src/prelude.fth:3:28 in `swap`
0036FEr 2               @OPCODE_2970:   ; [c64_ir] InlineExit
0036FEr 2                   ; inline exit
0036FEr 2  68               pla
0036FFr 2  68               pla
003700r 2               
003700r 2               @target_886:
003700r 2               
003700r 2               ; src/prelude.fth:35:29 in `-loopimpl`
003700r 2               @OPCODE_2972:   ; [c64_ir] AltPop
003700r 2  E8               inx
003701r 2  E8               inx
003702r 2  68               pla
003703r 2  95 00            sta $00,x
003705r 2  68               pla
003706r 2  95 01            sta $01,x
003708r 2               
003708r 2               ; src/prelude.fth:35:32 in `-loopimpl`
003708r 2               @OPCODE_2973:   ; [c64_ir] InlineCall("swap")
003708r 2                   ; inline call(swap)
003708r 2  48               pha
003709r 2  48               pha
00370Ar 2               
00370Ar 2               @target_887:
00370Ar 2               
00370Ar 2               ; src/prelude.fth:3:10 in `swap`
00370Ar 2               @OPCODE_2975:   ; [c64_ir] AltPush
00370Ar 2  CA               dex
00370Br 2  CA               dex
00370Cr 2  B5 03            lda $03,x
00370Er 2  48               pha
00370Fr 2  B5 02            lda $02,x
003711r 2  48               pha
003712r 2               
003712r 2               ; src/prelude.fth:3:13 in `swap`
003712r 2               @OPCODE_2976:   ; [c64_ir] TempStore
003712r 2  CA               dex
003713r 2  CA               dex
003714r 2  B5 03            lda $03,x
003716r 2  85 96            sta TEMP_PAX2
003718r 2  B5 02            lda $02,x
00371Ar 2  85 95            sta TEMP_PAX1
00371Cr 2               
00371Cr 2               ; src/prelude.fth:3:19 in `swap`
00371Cr 2               @OPCODE_2977:   ; [c64_ir] AltPop
00371Cr 2  E8               inx
00371Dr 2  E8               inx
00371Er 2  68               pla
00371Fr 2  95 00            sta $00,x
003721r 2  68               pla
003722r 2  95 01            sta $01,x
003724r 2               
003724r 2               ; src/prelude.fth:3:22 in `swap`
003724r 2               @OPCODE_2978:   ; [c64_ir] TempLoad
003724r 2  E8               inx
003725r 2  E8               inx
003726r 2  A5 95            lda TEMP_PAX1
003728r 2  95 00            sta $00,x
00372Ar 2  A5 96            lda TEMP_PAX2
00372Cr 2  95 01            sta $01,x
00372Er 2               
00372Er 2               ; src/prelude.fth:3:28 in `swap`
00372Er 2               @OPCODE_2979:   ; [c64_ir] InlineExit
00372Er 2                   ; inline exit
00372Er 2  68               pla
00372Fr 2  68               pla
003730r 2               
003730r 2               @target_888:
003730r 2               
003730r 2               ; src/prelude.fth:35:37 in `-loopimpl`
003730r 2               @OPCODE_2981:   ; [c64_ir] InlineCall("-")
003730r 2                   ; inline call(-)
003730r 2  48               pha
003731r 2  48               pha
003732r 2               
003732r 2               @target_889:
003732r 2               
003732r 2               ; src/prelude.fth:16:12 in `-`
003732r 2               @OPCODE_2983:   ; [c64_ir] InlineCall("negate")
003732r 2                   ; inline call(negate)
003732r 2  48               pha
003733r 2  48               pha
003734r 2               
003734r 2               @target_890:
003734r 2               
003734r 2               ; src/prelude.fth:15:12 in `negate`
003734r 2               @OPCODE_2985:   ; [c64_ir] InlineCall("invert")
003734r 2                   ; inline call(invert)
003734r 2  48               pha
003735r 2  48               pha
003736r 2               
003736r 2               @target_891:
003736r 2               
003736r 2               ; src/prelude.fth:14:12 in `invert`
003736r 2               @OPCODE_2987:   ; [c64_ir] PushLiteral(-1)
003736r 2  E8               inx
003737r 2  E8               inx
003738r 2  A9 FF            lda #255
00373Ar 2  95 00            sta $00,x
00373Cr 2  A9 FF            lda #255
00373Er 2  95 01            sta $01,x
003740r 2               
003740r 2               ; src/prelude.fth:14:15 in `invert`
003740r 2               @OPCODE_2988:   ; [c64_ir] Nand
003740r 2                   ; 26
003740r 2  CA               dex
003741r 2  CA               dex
003742r 2  B5 00            lda $00,x
003744r 2  35 02            and $02,x
003746r 2  49 FF            eor #$ff
003748r 2  95 00            sta $00,x
00374Ar 2  B5 01            lda $01,x
00374Cr 2  35 03            and $03,x
00374Er 2  49 FF            eor #$ff
003750r 2  95 01            sta $01,x
003752r 2               
003752r 2               ; src/prelude.fth:14:20 in `invert`
003752r 2               @OPCODE_2989:   ; [c64_ir] InlineExit
003752r 2                   ; inline exit
003752r 2  68               pla
003753r 2  68               pla
003754r 2               
003754r 2               @target_892:
003754r 2               
003754r 2               ; src/prelude.fth:15:19 in `negate`
003754r 2               @OPCODE_2991:   ; [c64_ir] PushLiteral(1)
003754r 2  E8               inx
003755r 2  E8               inx
003756r 2  A9 01            lda #1
003758r 2  95 00            sta $00,x
00375Ar 2  A9 00            lda #0
00375Cr 2  95 01            sta $01,x
00375Er 2               
00375Er 2               ; src/prelude.fth:15:21 in `negate`
00375Er 2               @OPCODE_2992:   ; [c64_ir] Add
00375Er 2                   ; 21
00375Er 2  CA               dex
00375Fr 2  CA               dex
003760r 2  18               clc
003761r 2  B5 00            lda $00,x
003763r 2  75 02            adc $02,x
003765r 2  95 00            sta $00,x
003767r 2  B5 01            lda $01,x
003769r 2  75 03            adc $03,x
00376Br 2  95 01            sta $01,x
00376Dr 2               
00376Dr 2               ; src/prelude.fth:15:23 in `negate`
00376Dr 2               @OPCODE_2993:   ; [c64_ir] InlineExit
00376Dr 2                   ; inline exit
00376Dr 2  68               pla
00376Er 2  68               pla
00376Fr 2               
00376Fr 2               @target_893:
00376Fr 2               
00376Fr 2               ; src/prelude.fth:16:19 in `-`
00376Fr 2               @OPCODE_2995:   ; [c64_ir] Add
00376Fr 2                   ; 21
00376Fr 2  CA               dex
003770r 2  CA               dex
003771r 2  18               clc
003772r 2  B5 00            lda $00,x
003774r 2  75 02            adc $02,x
003776r 2  95 00            sta $00,x
003778r 2  B5 01            lda $01,x
00377Ar 2  75 03            adc $03,x
00377Cr 2  95 01            sta $01,x
00377Er 2               
00377Er 2               ; src/prelude.fth:16:21 in `-`
00377Er 2               @OPCODE_2996:   ; [c64_ir] InlineExit
00377Er 2                   ; inline exit
00377Er 2  68               pla
00377Fr 2  68               pla
003780r 2               
003780r 2               @target_894:
003780r 2               
003780r 2               ; src/prelude.fth:35:39 in `-loopimpl`
003780r 2               @OPCODE_2998:   ; [c64_ir] InlineCall("2dup")
003780r 2                   ; inline call(2dup)
003780r 2  48               pha
003781r 2  48               pha
003782r 2               
003782r 2               @target_895:
003782r 2               
003782r 2               ; src/prelude.fth:8:10 in `2dup`
003782r 2               @OPCODE_3000:   ; [c64_ir] InlineCall("over")
003782r 2                   ; inline call(over)
003782r 2  48               pha
003783r 2  48               pha
003784r 2               
003784r 2               @target_896:
003784r 2               
003784r 2               ; src/prelude.fth:4:10 in `over`
003784r 2               @OPCODE_3002:   ; [c64_ir] AltPush
003784r 2  CA               dex
003785r 2  CA               dex
003786r 2  B5 03            lda $03,x
003788r 2  48               pha
003789r 2  B5 02            lda $02,x
00378Br 2  48               pha
00378Cr 2               
00378Cr 2               ; src/prelude.fth:4:13 in `over`
00378Cr 2               @OPCODE_3003:   ; [c64_ir] TempStore
00378Cr 2  CA               dex
00378Dr 2  CA               dex
00378Er 2  B5 03            lda $03,x
003790r 2  85 96            sta TEMP_PAX2
003792r 2  B5 02            lda $02,x
003794r 2  85 95            sta TEMP_PAX1
003796r 2               
003796r 2               ; src/prelude.fth:4:19 in `over`
003796r 2               @OPCODE_3004:   ; [c64_ir] TempLoad
003796r 2  E8               inx
003797r 2  E8               inx
003798r 2  A5 95            lda TEMP_PAX1
00379Ar 2  95 00            sta $00,x
00379Cr 2  A5 96            lda TEMP_PAX2
00379Er 2  95 01            sta $01,x
0037A0r 2               
0037A0r 2               ; src/prelude.fth:4:25 in `over`
0037A0r 2               @OPCODE_3005:   ; [c64_ir] AltPop
0037A0r 2  E8               inx
0037A1r 2  E8               inx
0037A2r 2  68               pla
0037A3r 2  95 00            sta $00,x
0037A5r 2  68               pla
0037A6r 2  95 01            sta $01,x
0037A8r 2               
0037A8r 2               ; src/prelude.fth:4:28 in `over`
0037A8r 2               @OPCODE_3006:   ; [c64_ir] TempLoad
0037A8r 2  E8               inx
0037A9r 2  E8               inx
0037AAr 2  A5 95            lda TEMP_PAX1
0037ACr 2  95 00            sta $00,x
0037AEr 2  A5 96            lda TEMP_PAX2
0037B0r 2  95 01            sta $01,x
0037B2r 2               
0037B2r 2               ; src/prelude.fth:4:34 in `over`
0037B2r 2               @OPCODE_3007:   ; [c64_ir] InlineExit
0037B2r 2                   ; inline exit
0037B2r 2  68               pla
0037B3r 2  68               pla
0037B4r 2               
0037B4r 2               @target_897:
0037B4r 2               
0037B4r 2               ; src/prelude.fth:8:15 in `2dup`
0037B4r 2               @OPCODE_3009:   ; [c64_ir] InlineCall("over")
0037B4r 2                   ; inline call(over)
0037B4r 2  48               pha
0037B5r 2  48               pha
0037B6r 2               
0037B6r 2               @target_898:
0037B6r 2               
0037B6r 2               ; src/prelude.fth:4:10 in `over`
0037B6r 2               @OPCODE_3011:   ; [c64_ir] AltPush
0037B6r 2  CA               dex
0037B7r 2  CA               dex
0037B8r 2  B5 03            lda $03,x
0037BAr 2  48               pha
0037BBr 2  B5 02            lda $02,x
0037BDr 2  48               pha
0037BEr 2               
0037BEr 2               ; src/prelude.fth:4:13 in `over`
0037BEr 2               @OPCODE_3012:   ; [c64_ir] TempStore
0037BEr 2  CA               dex
0037BFr 2  CA               dex
0037C0r 2  B5 03            lda $03,x
0037C2r 2  85 96            sta TEMP_PAX2
0037C4r 2  B5 02            lda $02,x
0037C6r 2  85 95            sta TEMP_PAX1
0037C8r 2               
0037C8r 2               ; src/prelude.fth:4:19 in `over`
0037C8r 2               @OPCODE_3013:   ; [c64_ir] TempLoad
0037C8r 2  E8               inx
0037C9r 2  E8               inx
0037CAr 2  A5 95            lda TEMP_PAX1
0037CCr 2  95 00            sta $00,x
0037CEr 2  A5 96            lda TEMP_PAX2
0037D0r 2  95 01            sta $01,x
0037D2r 2               
0037D2r 2               ; src/prelude.fth:4:25 in `over`
0037D2r 2               @OPCODE_3014:   ; [c64_ir] AltPop
0037D2r 2  E8               inx
0037D3r 2  E8               inx
0037D4r 2  68               pla
0037D5r 2  95 00            sta $00,x
0037D7r 2  68               pla
0037D8r 2  95 01            sta $01,x
0037DAr 2               
0037DAr 2               ; src/prelude.fth:4:28 in `over`
0037DAr 2               @OPCODE_3015:   ; [c64_ir] TempLoad
0037DAr 2  E8               inx
0037DBr 2  E8               inx
0037DCr 2  A5 95            lda TEMP_PAX1
0037DEr 2  95 00            sta $00,x
0037E0r 2  A5 96            lda TEMP_PAX2
0037E2r 2  95 01            sta $01,x
0037E4r 2               
0037E4r 2               ; src/prelude.fth:4:34 in `over`
0037E4r 2               @OPCODE_3016:   ; [c64_ir] InlineExit
0037E4r 2                   ; inline exit
0037E4r 2  68               pla
0037E5r 2  68               pla
0037E6r 2               
0037E6r 2               @target_899:
0037E6r 2               
0037E6r 2               ; src/prelude.fth:8:20 in `2dup`
0037E6r 2               @OPCODE_3018:   ; [c64_ir] InlineExit
0037E6r 2                   ; inline exit
0037E6r 2  68               pla
0037E7r 2  68               pla
0037E8r 2               
0037E8r 2               @target_900:
0037E8r 2               
0037E8r 2               ; src/prelude.fth:35:44 in `-loopimpl`
0037E8r 2               @OPCODE_3020:   ; [c64_ir] AltPush
0037E8r 2  CA               dex
0037E9r 2  CA               dex
0037EAr 2  B5 03            lda $03,x
0037ECr 2  48               pha
0037EDr 2  B5 02            lda $02,x
0037EFr 2  48               pha
0037F0r 2               
0037F0r 2               ; src/prelude.fth:35:47 in `-loopimpl`
0037F0r 2               @OPCODE_3021:   ; [c64_ir] AltPush
0037F0r 2  CA               dex
0037F1r 2  CA               dex
0037F2r 2  B5 03            lda $03,x
0037F4r 2  48               pha
0037F5r 2  B5 02            lda $02,x
0037F7r 2  48               pha
0037F8r 2               
0037F8r 2               ; src/prelude.fth:35:50 in `-loopimpl`
0037F8r 2               @OPCODE_3022:   ; [c64_ir] InlineCall("=")
0037F8r 2                   ; inline call(=)
0037F8r 2  48               pha
0037F9r 2  48               pha
0037FAr 2               
0037FAr 2               @target_901:
0037FAr 2               
0037FAr 2               ; src/prelude.fth:22:8 in `=`
0037FAr 2               @OPCODE_3024:   ; [c64_ir] InlineCall("-")
0037FAr 2                   ; inline call(-)
0037FAr 2  48               pha
0037FBr 2  48               pha
0037FCr 2               
0037FCr 2               @target_902:
0037FCr 2               
0037FCr 2               ; src/prelude.fth:16:12 in `-`
0037FCr 2               @OPCODE_3026:   ; [c64_ir] InlineCall("negate")
0037FCr 2                   ; inline call(negate)
0037FCr 2  48               pha
0037FDr 2  48               pha
0037FEr 2               
0037FEr 2               @target_903:
0037FEr 2               
0037FEr 2               ; src/prelude.fth:15:12 in `negate`
0037FEr 2               @OPCODE_3028:   ; [c64_ir] InlineCall("invert")
0037FEr 2                   ; inline call(invert)
0037FEr 2  48               pha
0037FFr 2  48               pha
003800r 2               
003800r 2               @target_904:
003800r 2               
003800r 2               ; src/prelude.fth:14:12 in `invert`
003800r 2               @OPCODE_3030:   ; [c64_ir] PushLiteral(-1)
003800r 2  E8               inx
003801r 2  E8               inx
003802r 2  A9 FF            lda #255
003804r 2  95 00            sta $00,x
003806r 2  A9 FF            lda #255
003808r 2  95 01            sta $01,x
00380Ar 2               
00380Ar 2               ; src/prelude.fth:14:15 in `invert`
00380Ar 2               @OPCODE_3031:   ; [c64_ir] Nand
00380Ar 2                   ; 26
00380Ar 2  CA               dex
00380Br 2  CA               dex
00380Cr 2  B5 00            lda $00,x
00380Er 2  35 02            and $02,x
003810r 2  49 FF            eor #$ff
003812r 2  95 00            sta $00,x
003814r 2  B5 01            lda $01,x
003816r 2  35 03            and $03,x
003818r 2  49 FF            eor #$ff
00381Ar 2  95 01            sta $01,x
00381Cr 2               
00381Cr 2               ; src/prelude.fth:14:20 in `invert`
00381Cr 2               @OPCODE_3032:   ; [c64_ir] InlineExit
00381Cr 2                   ; inline exit
00381Cr 2  68               pla
00381Dr 2  68               pla
00381Er 2               
00381Er 2               @target_905:
00381Er 2               
00381Er 2               ; src/prelude.fth:15:19 in `negate`
00381Er 2               @OPCODE_3034:   ; [c64_ir] PushLiteral(1)
00381Er 2  E8               inx
00381Fr 2  E8               inx
003820r 2  A9 01            lda #1
003822r 2  95 00            sta $00,x
003824r 2  A9 00            lda #0
003826r 2  95 01            sta $01,x
003828r 2               
003828r 2               ; src/prelude.fth:15:21 in `negate`
003828r 2               @OPCODE_3035:   ; [c64_ir] Add
003828r 2                   ; 21
003828r 2  CA               dex
003829r 2  CA               dex
00382Ar 2  18               clc
00382Br 2  B5 00            lda $00,x
00382Dr 2  75 02            adc $02,x
00382Fr 2  95 00            sta $00,x
003831r 2  B5 01            lda $01,x
003833r 2  75 03            adc $03,x
003835r 2  95 01            sta $01,x
003837r 2               
003837r 2               ; src/prelude.fth:15:23 in `negate`
003837r 2               @OPCODE_3036:   ; [c64_ir] InlineExit
003837r 2                   ; inline exit
003837r 2  68               pla
003838r 2  68               pla
003839r 2               
003839r 2               @target_906:
003839r 2               
003839r 2               ; src/prelude.fth:16:19 in `-`
003839r 2               @OPCODE_3038:   ; [c64_ir] Add
003839r 2                   ; 21
003839r 2  CA               dex
00383Ar 2  CA               dex
00383Br 2  18               clc
00383Cr 2  B5 00            lda $00,x
00383Er 2  75 02            adc $02,x
003840r 2  95 00            sta $00,x
003842r 2  B5 01            lda $01,x
003844r 2  75 03            adc $03,x
003846r 2  95 01            sta $01,x
003848r 2               
003848r 2               ; src/prelude.fth:16:21 in `-`
003848r 2               @OPCODE_3039:   ; [c64_ir] InlineExit
003848r 2                   ; inline exit
003848r 2  68               pla
003849r 2  68               pla
00384Ar 2               
00384Ar 2               @target_907:
00384Ar 2               
00384Ar 2               ; src/prelude.fth:22:10 in `=`
00384Ar 2               @OPCODE_3041:   ; [c64_ir] InlineCall("0=")
00384Ar 2                   ; inline call(0=)
00384Ar 2  48               pha
00384Br 2  48               pha
00384Cr 2               
00384Cr 2               @target_908:
00384Cr 2               
00384Cr 2               ; src/prelude.fth:21:8 in `0=`
00384Cr 2               @OPCODE_3043:   ; [c64_ir] JumpIf0(910)
00384Cr 2  CA               dex
00384Dr 2  CA               dex
00384Er 2  B5 02            lda $02,x
003850r 2  15 03            ora $03,x
003852r 2  D0 03            bne *+5
003854r 2  4C rr rr         jmp @target_910
003857r 2               
003857r 2               @target_909:
003857r 2               
003857r 2               ; src/prelude.fth:21:11 in `0=`
003857r 2               @OPCODE_3045:   ; [c64_ir] PushLiteral(0)
003857r 2  E8               inx
003858r 2  E8               inx
003859r 2  A9 00            lda #0
00385Br 2  95 00            sta $00,x
00385Dr 2  A9 00            lda #0
00385Fr 2  95 01            sta $01,x
003861r 2               
003861r 2               ; src/prelude.fth:21:13 in `0=`
003861r 2               @OPCODE_3046:   ; [c64_ir] JumpElse(911)
003861r 2  4C rr rr         jmp @target_911
003864r 2               
003864r 2               @target_910:
003864r 2               
003864r 2               ; src/prelude.fth:21:18 in `0=`
003864r 2               @OPCODE_3048:   ; [c64_ir] PushLiteral(-1)
003864r 2  E8               inx
003865r 2  E8               inx
003866r 2  A9 FF            lda #255
003868r 2  95 00            sta $00,x
00386Ar 2  A9 FF            lda #255
00386Cr 2  95 01            sta $01,x
00386Er 2               
00386Er 2               ; src/prelude.fth:21:21 in `0=`
00386Er 2               @OPCODE_3049:   ; [c64_ir] JumpTarget(910)
00386Er 2               
00386Er 2               @target_911:
00386Er 2               
00386Er 2               ; src/prelude.fth:21:26 in `0=`
00386Er 2               @OPCODE_3051:   ; [c64_ir] InlineExit
00386Er 2                   ; inline exit
00386Er 2  68               pla
00386Fr 2  68               pla
003870r 2               
003870r 2               @target_912:
003870r 2               
003870r 2               ; src/prelude.fth:22:13 in `=`
003870r 2               @OPCODE_3053:   ; [c64_ir] InlineExit
003870r 2                   ; inline exit
003870r 2  68               pla
003871r 2  68               pla
003872r 2               
003872r 2               @target_913:
003872r 2               
003872r 2               ; src/prelude.fth:35:52 in `-loopimpl`
003872r 2               @OPCODE_3055:   ; [c64_ir] InlineCall("swap")
003872r 2                   ; inline call(swap)
003872r 2  48               pha
003873r 2  48               pha
003874r 2               
003874r 2               @target_914:
003874r 2               
003874r 2               ; src/prelude.fth:3:10 in `swap`
003874r 2               @OPCODE_3057:   ; [c64_ir] AltPush
003874r 2  CA               dex
003875r 2  CA               dex
003876r 2  B5 03            lda $03,x
003878r 2  48               pha
003879r 2  B5 02            lda $02,x
00387Br 2  48               pha
00387Cr 2               
00387Cr 2               ; src/prelude.fth:3:13 in `swap`
00387Cr 2               @OPCODE_3058:   ; [c64_ir] TempStore
00387Cr 2  CA               dex
00387Dr 2  CA               dex
00387Er 2  B5 03            lda $03,x
003880r 2  85 96            sta TEMP_PAX2
003882r 2  B5 02            lda $02,x
003884r 2  85 95            sta TEMP_PAX1
003886r 2               
003886r 2               ; src/prelude.fth:3:19 in `swap`
003886r 2               @OPCODE_3059:   ; [c64_ir] AltPop
003886r 2  E8               inx
003887r 2  E8               inx
003888r 2  68               pla
003889r 2  95 00            sta $00,x
00388Br 2  68               pla
00388Cr 2  95 01            sta $01,x
00388Er 2               
00388Er 2               ; src/prelude.fth:3:22 in `swap`
00388Er 2               @OPCODE_3060:   ; [c64_ir] TempLoad
00388Er 2  E8               inx
00388Fr 2  E8               inx
003890r 2  A5 95            lda TEMP_PAX1
003892r 2  95 00            sta $00,x
003894r 2  A5 96            lda TEMP_PAX2
003896r 2  95 01            sta $01,x
003898r 2               
003898r 2               ; src/prelude.fth:3:28 in `swap`
003898r 2               @OPCODE_3061:   ; [c64_ir] InlineExit
003898r 2                   ; inline exit
003898r 2  68               pla
003899r 2  68               pla
00389Ar 2               
00389Ar 2               @target_915:
00389Ar 2               
00389Ar 2               ; src/prelude.fth:35:57 in `-loopimpl`
00389Ar 2               @OPCODE_3063:   ; [c64_ir] AltPush
00389Ar 2  CA               dex
00389Br 2  CA               dex
00389Cr 2  B5 03            lda $03,x
00389Er 2  48               pha
00389Fr 2  B5 02            lda $02,x
0038A1r 2  48               pha
0038A2r 2               
0038A2r 2               ; src/prelude.fth:35:60 in `-loopimpl`
0038A2r 2               @OPCODE_3064:   ; [c64_ir] InlineExit
0038A2r 2                   ; inline exit
0038A2r 2  68               pla
0038A3r 2  68               pla
0038A4r 2               
0038A4r 2               @target_916:
0038A4r 2               
0038A4r 2               ; snake.fth:143:5 in `move-snake-tail`
0038A4r 2               @OPCODE_3066:   ; [c64_ir] LoopIf0(847)
0038A4r 2  CA               dex
0038A5r 2  CA               dex
0038A6r 2  B5 02            lda $02,x
0038A8r 2  15 03            ora $03,x
0038AAr 2  D0 03            bne *+5
0038ACr 2  4C rr rr         jmp @target_847
0038AFr 2               
0038AFr 2               @target_917:
0038AFr 2               
0038AFr 2               ; snake.fth:143:5 in `move-snake-tail`
0038AFr 2               @OPCODE_3068:   ; [c64_ir] AltPop
0038AFr 2  E8               inx
0038B0r 2  E8               inx
0038B1r 2  68               pla
0038B2r 2  95 00            sta $00,x
0038B4r 2  68               pla
0038B5r 2  95 01            sta $01,x
0038B7r 2               
0038B7r 2               ; snake.fth:143:5 in `move-snake-tail`
0038B7r 2               @OPCODE_3069:   ; [c64_ir] Drop
0038B7r 2  CA               dex
0038B8r 2  CA               dex
0038B9r 2               
0038B9r 2               ; snake.fth:143:5 in `move-snake-tail`
0038B9r 2               @OPCODE_3070:   ; [c64_ir] AltPop
0038B9r 2  E8               inx
0038BAr 2  E8               inx
0038BBr 2  68               pla
0038BCr 2  95 00            sta $00,x
0038BEr 2  68               pla
0038BFr 2  95 01            sta $01,x
0038C1r 2               
0038C1r 2               ; snake.fth:143:5 in `move-snake-tail`
0038C1r 2               @OPCODE_3071:   ; [c64_ir] Drop
0038C1r 2  CA               dex
0038C2r 2  CA               dex
0038C3r 2               
0038C3r 2               ; snake.fth:144:3 in `move-snake-tail`
0038C3r 2               @OPCODE_3072:   ; [c64_ir] InlineExit
0038C3r 2                   ; inline exit
0038C3r 2  68               pla
0038C4r 2  68               pla
0038C5r 2               
0038C5r 2               @target_918:
0038C5r 2               
0038C5r 2               ; snake.fth:220:1 in `main`
0038C5r 2               @OPCODE_3074:   ; [c64_ir] InlineCall("move-snake-head")
0038C5r 2                   ; inline call(move-snake-head)
0038C5r 2  48               pha
0038C6r 2  48               pha
0038C7r 2               
0038C7r 2               @target_919:
0038C7r 2               
0038C7r 2               ; snake.fth:131:20 in `move-snake-head`
0038C7r 2               @OPCODE_3076:   ; [c64_ir] PushLiteral(-26660)
0038C7r 2  E8               inx
0038C8r 2  E8               inx
0038C9r 2  A9 DC            lda #220
0038CBr 2  95 00            sta $00,x
0038CDr 2  A9 97            lda #151
0038CFr 2  95 01            sta $01,x
0038D1r 2               
0038D1r 2               ; snake.fth:131:30 in `move-snake-head`
0038D1r 2               @OPCODE_3077:   ; [c64_ir] Load
0038D1r 2  A1 00            lda ($00,x)
0038D3r 2  95 00            sta $00,x
0038D5r 2  A9 00            lda #0
0038D7r 2  95 01            sta $01,x
0038D9r 2               
0038D9r 2               ; snake.fth:132:3 in `move-snake-head`
0038D9r 2               @OPCODE_3078:   ; [c64_ir] PushLiteral(37)
0038D9r 2  E8               inx
0038DAr 2  E8               inx
0038DBr 2  A9 25            lda #37
0038DDr 2  95 00            sta $00,x
0038DFr 2  A9 00            lda #0
0038E1r 2  95 01            sta $01,x
0038E3r 2               
0038E3r 2               ; snake.fth:132:8 in `move-snake-head`
0038E3r 2               @OPCODE_3079:   ; [c64_ir] InlineCall("over")
0038E3r 2                   ; inline call(over)
0038E3r 2  48               pha
0038E4r 2  48               pha
0038E5r 2               
0038E5r 2               @target_920:
0038E5r 2               
0038E5r 2               ; src/prelude.fth:4:10 in `over`
0038E5r 2               @OPCODE_3081:   ; [c64_ir] AltPush
0038E5r 2  CA               dex
0038E6r 2  CA               dex
0038E7r 2  B5 03            lda $03,x
0038E9r 2  48               pha
0038EAr 2  B5 02            lda $02,x
0038ECr 2  48               pha
0038EDr 2               
0038EDr 2               ; src/prelude.fth:4:13 in `over`
0038EDr 2               @OPCODE_3082:   ; [c64_ir] TempStore
0038EDr 2  CA               dex
0038EEr 2  CA               dex
0038EFr 2  B5 03            lda $03,x
0038F1r 2  85 96            sta TEMP_PAX2
0038F3r 2  B5 02            lda $02,x
0038F5r 2  85 95            sta TEMP_PAX1
0038F7r 2               
0038F7r 2               ; src/prelude.fth:4:19 in `over`
0038F7r 2               @OPCODE_3083:   ; [c64_ir] TempLoad
0038F7r 2  E8               inx
0038F8r 2  E8               inx
0038F9r 2  A5 95            lda TEMP_PAX1
0038FBr 2  95 00            sta $00,x
0038FDr 2  A5 96            lda TEMP_PAX2
0038FFr 2  95 01            sta $01,x
003901r 2               
003901r 2               ; src/prelude.fth:4:25 in `over`
003901r 2               @OPCODE_3084:   ; [c64_ir] AltPop
003901r 2  E8               inx
003902r 2  E8               inx
003903r 2  68               pla
003904r 2  95 00            sta $00,x
003906r 2  68               pla
003907r 2  95 01            sta $01,x
003909r 2               
003909r 2               ; src/prelude.fth:4:28 in `over`
003909r 2               @OPCODE_3085:   ; [c64_ir] TempLoad
003909r 2  E8               inx
00390Ar 2  E8               inx
00390Br 2  A5 95            lda TEMP_PAX1
00390Dr 2  95 00            sta $00,x
00390Fr 2  A5 96            lda TEMP_PAX2
003911r 2  95 01            sta $01,x
003913r 2               
003913r 2               ; src/prelude.fth:4:34 in `over`
003913r 2               @OPCODE_3086:   ; [c64_ir] InlineExit
003913r 2                   ; inline exit
003913r 2  68               pla
003914r 2  68               pla
003915r 2               
003915r 2               @target_921:
003915r 2               
003915r 2               ; snake.fth:132:14 in `move-snake-head`
003915r 2               @OPCODE_3088:   ; [c64_ir] InlineCall("=")
003915r 2                   ; inline call(=)
003915r 2  48               pha
003916r 2  48               pha
003917r 2               
003917r 2               @target_922:
003917r 2               
003917r 2               ; src/prelude.fth:22:8 in `=`
003917r 2               @OPCODE_3090:   ; [c64_ir] InlineCall("-")
003917r 2                   ; inline call(-)
003917r 2  48               pha
003918r 2  48               pha
003919r 2               
003919r 2               @target_923:
003919r 2               
003919r 2               ; src/prelude.fth:16:12 in `-`
003919r 2               @OPCODE_3092:   ; [c64_ir] InlineCall("negate")
003919r 2                   ; inline call(negate)
003919r 2  48               pha
00391Ar 2  48               pha
00391Br 2               
00391Br 2               @target_924:
00391Br 2               
00391Br 2               ; src/prelude.fth:15:12 in `negate`
00391Br 2               @OPCODE_3094:   ; [c64_ir] InlineCall("invert")
00391Br 2                   ; inline call(invert)
00391Br 2  48               pha
00391Cr 2  48               pha
00391Dr 2               
00391Dr 2               @target_925:
00391Dr 2               
00391Dr 2               ; src/prelude.fth:14:12 in `invert`
00391Dr 2               @OPCODE_3096:   ; [c64_ir] PushLiteral(-1)
00391Dr 2  E8               inx
00391Er 2  E8               inx
00391Fr 2  A9 FF            lda #255
003921r 2  95 00            sta $00,x
003923r 2  A9 FF            lda #255
003925r 2  95 01            sta $01,x
003927r 2               
003927r 2               ; src/prelude.fth:14:15 in `invert`
003927r 2               @OPCODE_3097:   ; [c64_ir] Nand
003927r 2                   ; 26
003927r 2  CA               dex
003928r 2  CA               dex
003929r 2  B5 00            lda $00,x
00392Br 2  35 02            and $02,x
00392Dr 2  49 FF            eor #$ff
00392Fr 2  95 00            sta $00,x
003931r 2  B5 01            lda $01,x
003933r 2  35 03            and $03,x
003935r 2  49 FF            eor #$ff
003937r 2  95 01            sta $01,x
003939r 2               
003939r 2               ; src/prelude.fth:14:20 in `invert`
003939r 2               @OPCODE_3098:   ; [c64_ir] InlineExit
003939r 2                   ; inline exit
003939r 2  68               pla
00393Ar 2  68               pla
00393Br 2               
00393Br 2               @target_926:
00393Br 2               
00393Br 2               ; src/prelude.fth:15:19 in `negate`
00393Br 2               @OPCODE_3100:   ; [c64_ir] PushLiteral(1)
00393Br 2  E8               inx
00393Cr 2  E8               inx
00393Dr 2  A9 01            lda #1
00393Fr 2  95 00            sta $00,x
003941r 2  A9 00            lda #0
003943r 2  95 01            sta $01,x
003945r 2               
003945r 2               ; src/prelude.fth:15:21 in `negate`
003945r 2               @OPCODE_3101:   ; [c64_ir] Add
003945r 2                   ; 21
003945r 2  CA               dex
003946r 2  CA               dex
003947r 2  18               clc
003948r 2  B5 00            lda $00,x
00394Ar 2  75 02            adc $02,x
00394Cr 2  95 00            sta $00,x
00394Er 2  B5 01            lda $01,x
003950r 2  75 03            adc $03,x
003952r 2  95 01            sta $01,x
003954r 2               
003954r 2               ; src/prelude.fth:15:23 in `negate`
003954r 2               @OPCODE_3102:   ; [c64_ir] InlineExit
003954r 2                   ; inline exit
003954r 2  68               pla
003955r 2  68               pla
003956r 2               
003956r 2               @target_927:
003956r 2               
003956r 2               ; src/prelude.fth:16:19 in `-`
003956r 2               @OPCODE_3104:   ; [c64_ir] Add
003956r 2                   ; 21
003956r 2  CA               dex
003957r 2  CA               dex
003958r 2  18               clc
003959r 2  B5 00            lda $00,x
00395Br 2  75 02            adc $02,x
00395Dr 2  95 00            sta $00,x
00395Fr 2  B5 01            lda $01,x
003961r 2  75 03            adc $03,x
003963r 2  95 01            sta $01,x
003965r 2               
003965r 2               ; src/prelude.fth:16:21 in `-`
003965r 2               @OPCODE_3105:   ; [c64_ir] InlineExit
003965r 2                   ; inline exit
003965r 2  68               pla
003966r 2  68               pla
003967r 2               
003967r 2               @target_928:
003967r 2               
003967r 2               ; src/prelude.fth:22:10 in `=`
003967r 2               @OPCODE_3107:   ; [c64_ir] InlineCall("0=")
003967r 2                   ; inline call(0=)
003967r 2  48               pha
003968r 2  48               pha
003969r 2               
003969r 2               @target_929:
003969r 2               
003969r 2               ; src/prelude.fth:21:8 in `0=`
003969r 2               @OPCODE_3109:   ; [c64_ir] JumpIf0(931)
003969r 2  CA               dex
00396Ar 2  CA               dex
00396Br 2  B5 02            lda $02,x
00396Dr 2  15 03            ora $03,x
00396Fr 2  D0 03            bne *+5
003971r 2  4C rr rr         jmp @target_931
003974r 2               
003974r 2               @target_930:
003974r 2               
003974r 2               ; src/prelude.fth:21:11 in `0=`
003974r 2               @OPCODE_3111:   ; [c64_ir] PushLiteral(0)
003974r 2  E8               inx
003975r 2  E8               inx
003976r 2  A9 00            lda #0
003978r 2  95 00            sta $00,x
00397Ar 2  A9 00            lda #0
00397Cr 2  95 01            sta $01,x
00397Er 2               
00397Er 2               ; src/prelude.fth:21:13 in `0=`
00397Er 2               @OPCODE_3112:   ; [c64_ir] JumpElse(932)
00397Er 2  4C rr rr         jmp @target_932
003981r 2               
003981r 2               @target_931:
003981r 2               
003981r 2               ; src/prelude.fth:21:18 in `0=`
003981r 2               @OPCODE_3114:   ; [c64_ir] PushLiteral(-1)
003981r 2  E8               inx
003982r 2  E8               inx
003983r 2  A9 FF            lda #255
003985r 2  95 00            sta $00,x
003987r 2  A9 FF            lda #255
003989r 2  95 01            sta $01,x
00398Br 2               
00398Br 2               ; src/prelude.fth:21:21 in `0=`
00398Br 2               @OPCODE_3115:   ; [c64_ir] JumpTarget(931)
00398Br 2               
00398Br 2               @target_932:
00398Br 2               
00398Br 2               ; src/prelude.fth:21:26 in `0=`
00398Br 2               @OPCODE_3117:   ; [c64_ir] InlineExit
00398Br 2                   ; inline exit
00398Br 2  68               pla
00398Cr 2  68               pla
00398Dr 2               
00398Dr 2               @target_933:
00398Dr 2               
00398Dr 2               ; src/prelude.fth:22:13 in `=`
00398Dr 2               @OPCODE_3119:   ; [c64_ir] InlineExit
00398Dr 2                   ; inline exit
00398Dr 2  68               pla
00398Er 2  68               pla
00398Fr 2               
00398Fr 2               @target_934:
00398Fr 2               
00398Fr 2               ; snake.fth:132:16 in `move-snake-head`
00398Fr 2               @OPCODE_3121:   ; [c64_ir] JumpIf0(942)
00398Fr 2  CA               dex
003990r 2  CA               dex
003991r 2  B5 02            lda $02,x
003993r 2  15 03            ora $03,x
003995r 2  D0 03            bne *+5
003997r 2  4C rr rr         jmp @target_942
00399Ar 2               
00399Ar 2               @target_935:
00399Ar 2               
00399Ar 2               ; snake.fth:132:19 in `move-snake-head`
00399Ar 2               @OPCODE_3123:   ; [c64_ir] InlineCall("move-left")
00399Ar 2                   ; inline call(move-left)
00399Ar 2  48               pha
00399Br 2  48               pha
00399Cr 2               
00399Cr 2               @target_936:
00399Cr 2               
00399Cr 2               ; snake.fth:127:14 in `move-left`
00399Cr 2               @OPCODE_3125:   ; [c64_ir] PushLiteral(-1)
00399Cr 2  E8               inx
00399Dr 2  E8               inx
00399Er 2  A9 FF            lda #255
0039A0r 2  95 00            sta $00,x
0039A2r 2  A9 FF            lda #255
0039A4r 2  95 01            sta $01,x
0039A6r 2               
0039A6r 2               ; snake.fth:127:17 in `move-left`
0039A6r 2               @OPCODE_3126:   ; [c64_ir] PushLiteral(-28668)
0039A6r 2  E8               inx
0039A7r 2  E8               inx
0039A8r 2  A9 04            lda #4
0039AAr 2  95 00            sta $00,x
0039ACr 2  A9 90            lda #144
0039AEr 2  95 01            sta $01,x
0039B0r 2               
0039B0r 2               ; snake.fth:127:30 in `move-left`
0039B0r 2               @OPCODE_3127:   ; [c64_ir] InlineCall("+!")
0039B0r 2                   ; inline call(+!)
0039B0r 2  48               pha
0039B1r 2  48               pha
0039B2r 2               
0039B2r 2               @target_937:
0039B2r 2               
0039B2r 2               ; src/prelude.fth:20:8 in `+!`
0039B2r 2               @OPCODE_3129:   ; [c64_ir] InlineCall("dup")
0039B2r 2                   ; inline call(dup)
0039B2r 2  48               pha
0039B3r 2  48               pha
0039B4r 2               
0039B4r 2               @target_938:
0039B4r 2               
0039B4r 2               ; src/prelude.fth:6:10 in `dup`
0039B4r 2               @OPCODE_3131:   ; [c64_ir] TempStore
0039B4r 2  CA               dex
0039B5r 2  CA               dex
0039B6r 2  B5 03            lda $03,x
0039B8r 2  85 96            sta TEMP_PAX2
0039BAr 2  B5 02            lda $02,x
0039BCr 2  85 95            sta TEMP_PAX1
0039BEr 2               
0039BEr 2               ; src/prelude.fth:6:16 in `dup`
0039BEr 2               @OPCODE_3132:   ; [c64_ir] TempLoad
0039BEr 2  E8               inx
0039BFr 2  E8               inx
0039C0r 2  A5 95            lda TEMP_PAX1
0039C2r 2  95 00            sta $00,x
0039C4r 2  A5 96            lda TEMP_PAX2
0039C6r 2  95 01            sta $01,x
0039C8r 2               
0039C8r 2               ; src/prelude.fth:6:22 in `dup`
0039C8r 2               @OPCODE_3133:   ; [c64_ir] TempLoad
0039C8r 2  E8               inx
0039C9r 2  E8               inx
0039CAr 2  A5 95            lda TEMP_PAX1
0039CCr 2  95 00            sta $00,x
0039CEr 2  A5 96            lda TEMP_PAX2
0039D0r 2  95 01            sta $01,x
0039D2r 2               
0039D2r 2               ; src/prelude.fth:6:28 in `dup`
0039D2r 2               @OPCODE_3134:   ; [c64_ir] InlineExit
0039D2r 2                   ; inline exit
0039D2r 2  68               pla
0039D3r 2  68               pla
0039D4r 2               
0039D4r 2               @target_939:
0039D4r 2               
0039D4r 2               ; src/prelude.fth:20:12 in `+!`
0039D4r 2               @OPCODE_3136:   ; [c64_ir] AltPush
0039D4r 2  CA               dex
0039D5r 2  CA               dex
0039D6r 2  B5 03            lda $03,x
0039D8r 2  48               pha
0039D9r 2  B5 02            lda $02,x
0039DBr 2  48               pha
0039DCr 2               
0039DCr 2               ; src/prelude.fth:20:15 in `+!`
0039DCr 2               @OPCODE_3137:   ; [c64_ir] Load
0039DCr 2  A1 00            lda ($00,x)
0039DEr 2  95 00            sta $00,x
0039E0r 2  A9 00            lda #0
0039E2r 2  95 01            sta $01,x
0039E4r 2               
0039E4r 2               ; src/prelude.fth:20:17 in `+!`
0039E4r 2               @OPCODE_3138:   ; [c64_ir] Add
0039E4r 2                   ; 21
0039E4r 2  CA               dex
0039E5r 2  CA               dex
0039E6r 2  18               clc
0039E7r 2  B5 00            lda $00,x
0039E9r 2  75 02            adc $02,x
0039EBr 2  95 00            sta $00,x
0039EDr 2  B5 01            lda $01,x
0039EFr 2  75 03            adc $03,x
0039F1r 2  95 01            sta $01,x
0039F3r 2               
0039F3r 2               ; src/prelude.fth:20:19 in `+!`
0039F3r 2               @OPCODE_3139:   ; [c64_ir] AltPop
0039F3r 2  E8               inx
0039F4r 2  E8               inx
0039F5r 2  68               pla
0039F6r 2  95 00            sta $00,x
0039F8r 2  68               pla
0039F9r 2  95 01            sta $01,x
0039FBr 2               
0039FBr 2               ; src/prelude.fth:20:22 in `+!`
0039FBr 2               @OPCODE_3140:   ; [c64_ir] Store
0039FBr 2  CA               dex
0039FCr 2  CA               dex
0039FDr 2  CA               dex
0039FEr 2  CA               dex
0039FFr 2  B5 02            lda $02,x
003A01r 2  81 04            sta ($04,x)
003A03r 2                   ; TODO high byte
003A03r 2               
003A03r 2               ; src/prelude.fth:20:24 in `+!`
003A03r 2               @OPCODE_3141:   ; [c64_ir] InlineExit
003A03r 2                   ; inline exit
003A03r 2  68               pla
003A04r 2  68               pla
003A05r 2               
003A05r 2               @target_940:
003A05r 2               
003A05r 2               ; snake.fth:127:33 in `move-left`
003A05r 2               @OPCODE_3143:   ; [c64_ir] InlineExit
003A05r 2                   ; inline exit
003A05r 2  68               pla
003A06r 2  68               pla
003A07r 2               
003A07r 2               @target_941:
003A07r 2               
003A07r 2               ; snake.fth:132:29 in `move-snake-head`
003A07r 2               @OPCODE_3145:   ; [c64_ir] JumpElse(1014)
003A07r 2  4C rr rr         jmp @target_1014
003A0Ar 2               
003A0Ar 2               @target_942:
003A0Ar 2               
003A0Ar 2               ; snake.fth:133:3 in `move-snake-head`
003A0Ar 2               @OPCODE_3147:   ; [c64_ir] PushLiteral(38)
003A0Ar 2  E8               inx
003A0Br 2  E8               inx
003A0Cr 2  A9 26            lda #38
003A0Er 2  95 00            sta $00,x
003A10r 2  A9 00            lda #0
003A12r 2  95 01            sta $01,x
003A14r 2               
003A14r 2               ; snake.fth:133:6 in `move-snake-head`
003A14r 2               @OPCODE_3148:   ; [c64_ir] InlineCall("over")
003A14r 2                   ; inline call(over)
003A14r 2  48               pha
003A15r 2  48               pha
003A16r 2               
003A16r 2               @target_943:
003A16r 2               
003A16r 2               ; src/prelude.fth:4:10 in `over`
003A16r 2               @OPCODE_3150:   ; [c64_ir] AltPush
003A16r 2  CA               dex
003A17r 2  CA               dex
003A18r 2  B5 03            lda $03,x
003A1Ar 2  48               pha
003A1Br 2  B5 02            lda $02,x
003A1Dr 2  48               pha
003A1Er 2               
003A1Er 2               ; src/prelude.fth:4:13 in `over`
003A1Er 2               @OPCODE_3151:   ; [c64_ir] TempStore
003A1Er 2  CA               dex
003A1Fr 2  CA               dex
003A20r 2  B5 03            lda $03,x
003A22r 2  85 96            sta TEMP_PAX2
003A24r 2  B5 02            lda $02,x
003A26r 2  85 95            sta TEMP_PAX1
003A28r 2               
003A28r 2               ; src/prelude.fth:4:19 in `over`
003A28r 2               @OPCODE_3152:   ; [c64_ir] TempLoad
003A28r 2  E8               inx
003A29r 2  E8               inx
003A2Ar 2  A5 95            lda TEMP_PAX1
003A2Cr 2  95 00            sta $00,x
003A2Er 2  A5 96            lda TEMP_PAX2
003A30r 2  95 01            sta $01,x
003A32r 2               
003A32r 2               ; src/prelude.fth:4:25 in `over`
003A32r 2               @OPCODE_3153:   ; [c64_ir] AltPop
003A32r 2  E8               inx
003A33r 2  E8               inx
003A34r 2  68               pla
003A35r 2  95 00            sta $00,x
003A37r 2  68               pla
003A38r 2  95 01            sta $01,x
003A3Ar 2               
003A3Ar 2               ; src/prelude.fth:4:28 in `over`
003A3Ar 2               @OPCODE_3154:   ; [c64_ir] TempLoad
003A3Ar 2  E8               inx
003A3Br 2  E8               inx
003A3Cr 2  A5 95            lda TEMP_PAX1
003A3Er 2  95 00            sta $00,x
003A40r 2  A5 96            lda TEMP_PAX2
003A42r 2  95 01            sta $01,x
003A44r 2               
003A44r 2               ; src/prelude.fth:4:34 in `over`
003A44r 2               @OPCODE_3155:   ; [c64_ir] InlineExit
003A44r 2                   ; inline exit
003A44r 2  68               pla
003A45r 2  68               pla
003A46r 2               
003A46r 2               @target_944:
003A46r 2               
003A46r 2               ; snake.fth:133:14 in `move-snake-head`
003A46r 2               @OPCODE_3157:   ; [c64_ir] InlineCall("=")
003A46r 2                   ; inline call(=)
003A46r 2  48               pha
003A47r 2  48               pha
003A48r 2               
003A48r 2               @target_945:
003A48r 2               
003A48r 2               ; src/prelude.fth:22:8 in `=`
003A48r 2               @OPCODE_3159:   ; [c64_ir] InlineCall("-")
003A48r 2                   ; inline call(-)
003A48r 2  48               pha
003A49r 2  48               pha
003A4Ar 2               
003A4Ar 2               @target_946:
003A4Ar 2               
003A4Ar 2               ; src/prelude.fth:16:12 in `-`
003A4Ar 2               @OPCODE_3161:   ; [c64_ir] InlineCall("negate")
003A4Ar 2                   ; inline call(negate)
003A4Ar 2  48               pha
003A4Br 2  48               pha
003A4Cr 2               
003A4Cr 2               @target_947:
003A4Cr 2               
003A4Cr 2               ; src/prelude.fth:15:12 in `negate`
003A4Cr 2               @OPCODE_3163:   ; [c64_ir] InlineCall("invert")
003A4Cr 2                   ; inline call(invert)
003A4Cr 2  48               pha
003A4Dr 2  48               pha
003A4Er 2               
003A4Er 2               @target_948:
003A4Er 2               
003A4Er 2               ; src/prelude.fth:14:12 in `invert`
003A4Er 2               @OPCODE_3165:   ; [c64_ir] PushLiteral(-1)
003A4Er 2  E8               inx
003A4Fr 2  E8               inx
003A50r 2  A9 FF            lda #255
003A52r 2  95 00            sta $00,x
003A54r 2  A9 FF            lda #255
003A56r 2  95 01            sta $01,x
003A58r 2               
003A58r 2               ; src/prelude.fth:14:15 in `invert`
003A58r 2               @OPCODE_3166:   ; [c64_ir] Nand
003A58r 2                   ; 26
003A58r 2  CA               dex
003A59r 2  CA               dex
003A5Ar 2  B5 00            lda $00,x
003A5Cr 2  35 02            and $02,x
003A5Er 2  49 FF            eor #$ff
003A60r 2  95 00            sta $00,x
003A62r 2  B5 01            lda $01,x
003A64r 2  35 03            and $03,x
003A66r 2  49 FF            eor #$ff
003A68r 2  95 01            sta $01,x
003A6Ar 2               
003A6Ar 2               ; src/prelude.fth:14:20 in `invert`
003A6Ar 2               @OPCODE_3167:   ; [c64_ir] InlineExit
003A6Ar 2                   ; inline exit
003A6Ar 2  68               pla
003A6Br 2  68               pla
003A6Cr 2               
003A6Cr 2               @target_949:
003A6Cr 2               
003A6Cr 2               ; src/prelude.fth:15:19 in `negate`
003A6Cr 2               @OPCODE_3169:   ; [c64_ir] PushLiteral(1)
003A6Cr 2  E8               inx
003A6Dr 2  E8               inx
003A6Er 2  A9 01            lda #1
003A70r 2  95 00            sta $00,x
003A72r 2  A9 00            lda #0
003A74r 2  95 01            sta $01,x
003A76r 2               
003A76r 2               ; src/prelude.fth:15:21 in `negate`
003A76r 2               @OPCODE_3170:   ; [c64_ir] Add
003A76r 2                   ; 21
003A76r 2  CA               dex
003A77r 2  CA               dex
003A78r 2  18               clc
003A79r 2  B5 00            lda $00,x
003A7Br 2  75 02            adc $02,x
003A7Dr 2  95 00            sta $00,x
003A7Fr 2  B5 01            lda $01,x
003A81r 2  75 03            adc $03,x
003A83r 2  95 01            sta $01,x
003A85r 2               
003A85r 2               ; src/prelude.fth:15:23 in `negate`
003A85r 2               @OPCODE_3171:   ; [c64_ir] InlineExit
003A85r 2                   ; inline exit
003A85r 2  68               pla
003A86r 2  68               pla
003A87r 2               
003A87r 2               @target_950:
003A87r 2               
003A87r 2               ; src/prelude.fth:16:19 in `-`
003A87r 2               @OPCODE_3173:   ; [c64_ir] Add
003A87r 2                   ; 21
003A87r 2  CA               dex
003A88r 2  CA               dex
003A89r 2  18               clc
003A8Ar 2  B5 00            lda $00,x
003A8Cr 2  75 02            adc $02,x
003A8Er 2  95 00            sta $00,x
003A90r 2  B5 01            lda $01,x
003A92r 2  75 03            adc $03,x
003A94r 2  95 01            sta $01,x
003A96r 2               
003A96r 2               ; src/prelude.fth:16:21 in `-`
003A96r 2               @OPCODE_3174:   ; [c64_ir] InlineExit
003A96r 2                   ; inline exit
003A96r 2  68               pla
003A97r 2  68               pla
003A98r 2               
003A98r 2               @target_951:
003A98r 2               
003A98r 2               ; src/prelude.fth:22:10 in `=`
003A98r 2               @OPCODE_3176:   ; [c64_ir] InlineCall("0=")
003A98r 2                   ; inline call(0=)
003A98r 2  48               pha
003A99r 2  48               pha
003A9Ar 2               
003A9Ar 2               @target_952:
003A9Ar 2               
003A9Ar 2               ; src/prelude.fth:21:8 in `0=`
003A9Ar 2               @OPCODE_3178:   ; [c64_ir] JumpIf0(954)
003A9Ar 2  CA               dex
003A9Br 2  CA               dex
003A9Cr 2  B5 02            lda $02,x
003A9Er 2  15 03            ora $03,x
003AA0r 2  D0 03            bne *+5
003AA2r 2  4C rr rr         jmp @target_954
003AA5r 2               
003AA5r 2               @target_953:
003AA5r 2               
003AA5r 2               ; src/prelude.fth:21:11 in `0=`
003AA5r 2               @OPCODE_3180:   ; [c64_ir] PushLiteral(0)
003AA5r 2  E8               inx
003AA6r 2  E8               inx
003AA7r 2  A9 00            lda #0
003AA9r 2  95 00            sta $00,x
003AABr 2  A9 00            lda #0
003AADr 2  95 01            sta $01,x
003AAFr 2               
003AAFr 2               ; src/prelude.fth:21:13 in `0=`
003AAFr 2               @OPCODE_3181:   ; [c64_ir] JumpElse(955)
003AAFr 2  4C rr rr         jmp @target_955
003AB2r 2               
003AB2r 2               @target_954:
003AB2r 2               
003AB2r 2               ; src/prelude.fth:21:18 in `0=`
003AB2r 2               @OPCODE_3183:   ; [c64_ir] PushLiteral(-1)
003AB2r 2  E8               inx
003AB3r 2  E8               inx
003AB4r 2  A9 FF            lda #255
003AB6r 2  95 00            sta $00,x
003AB8r 2  A9 FF            lda #255
003ABAr 2  95 01            sta $01,x
003ABCr 2               
003ABCr 2               ; src/prelude.fth:21:21 in `0=`
003ABCr 2               @OPCODE_3184:   ; [c64_ir] JumpTarget(954)
003ABCr 2               
003ABCr 2               @target_955:
003ABCr 2               
003ABCr 2               ; src/prelude.fth:21:26 in `0=`
003ABCr 2               @OPCODE_3186:   ; [c64_ir] InlineExit
003ABCr 2                   ; inline exit
003ABCr 2  68               pla
003ABDr 2  68               pla
003ABEr 2               
003ABEr 2               @target_956:
003ABEr 2               
003ABEr 2               ; src/prelude.fth:22:13 in `=`
003ABEr 2               @OPCODE_3188:   ; [c64_ir] InlineExit
003ABEr 2                   ; inline exit
003ABEr 2  68               pla
003ABFr 2  68               pla
003AC0r 2               
003AC0r 2               @target_957:
003AC0r 2               
003AC0r 2               ; snake.fth:133:16 in `move-snake-head`
003AC0r 2               @OPCODE_3190:   ; [c64_ir] JumpIf0(965)
003AC0r 2  CA               dex
003AC1r 2  CA               dex
003AC2r 2  B5 02            lda $02,x
003AC4r 2  15 03            ora $03,x
003AC6r 2  D0 03            bne *+5
003AC8r 2  4C rr rr         jmp @target_965
003ACBr 2               
003ACBr 2               @target_958:
003ACBr 2               
003ACBr 2               ; snake.fth:133:19 in `move-snake-head`
003ACBr 2               @OPCODE_3192:   ; [c64_ir] InlineCall("move-up")
003ACBr 2                   ; inline call(move-up)
003ACBr 2  48               pha
003ACCr 2  48               pha
003ACDr 2               
003ACDr 2               @target_959:
003ACDr 2               
003ACDr 2               ; snake.fth:126:12 in `move-up`
003ACDr 2               @OPCODE_3194:   ; [c64_ir] PushLiteral(-1)
003ACDr 2  E8               inx
003ACEr 2  E8               inx
003ACFr 2  A9 FF            lda #255
003AD1r 2  95 00            sta $00,x
003AD3r 2  A9 FF            lda #255
003AD5r 2  95 01            sta $01,x
003AD7r 2               
003AD7r 2               ; snake.fth:126:15 in `move-up`
003AD7r 2               @OPCODE_3195:   ; [c64_ir] PushLiteral(-27666)
003AD7r 2  E8               inx
003AD8r 2  E8               inx
003AD9r 2  A9 EE            lda #238
003ADBr 2  95 00            sta $00,x
003ADDr 2  A9 93            lda #147
003ADFr 2  95 01            sta $01,x
003AE1r 2               
003AE1r 2               ; snake.fth:126:28 in `move-up`
003AE1r 2               @OPCODE_3196:   ; [c64_ir] InlineCall("+!")
003AE1r 2                   ; inline call(+!)
003AE1r 2  48               pha
003AE2r 2  48               pha
003AE3r 2               
003AE3r 2               @target_960:
003AE3r 2               
003AE3r 2               ; src/prelude.fth:20:8 in `+!`
003AE3r 2               @OPCODE_3198:   ; [c64_ir] InlineCall("dup")
003AE3r 2                   ; inline call(dup)
003AE3r 2  48               pha
003AE4r 2  48               pha
003AE5r 2               
003AE5r 2               @target_961:
003AE5r 2               
003AE5r 2               ; src/prelude.fth:6:10 in `dup`
003AE5r 2               @OPCODE_3200:   ; [c64_ir] TempStore
003AE5r 2  CA               dex
003AE6r 2  CA               dex
003AE7r 2  B5 03            lda $03,x
003AE9r 2  85 96            sta TEMP_PAX2
003AEBr 2  B5 02            lda $02,x
003AEDr 2  85 95            sta TEMP_PAX1
003AEFr 2               
003AEFr 2               ; src/prelude.fth:6:16 in `dup`
003AEFr 2               @OPCODE_3201:   ; [c64_ir] TempLoad
003AEFr 2  E8               inx
003AF0r 2  E8               inx
003AF1r 2  A5 95            lda TEMP_PAX1
003AF3r 2  95 00            sta $00,x
003AF5r 2  A5 96            lda TEMP_PAX2
003AF7r 2  95 01            sta $01,x
003AF9r 2               
003AF9r 2               ; src/prelude.fth:6:22 in `dup`
003AF9r 2               @OPCODE_3202:   ; [c64_ir] TempLoad
003AF9r 2  E8               inx
003AFAr 2  E8               inx
003AFBr 2  A5 95            lda TEMP_PAX1
003AFDr 2  95 00            sta $00,x
003AFFr 2  A5 96            lda TEMP_PAX2
003B01r 2  95 01            sta $01,x
003B03r 2               
003B03r 2               ; src/prelude.fth:6:28 in `dup`
003B03r 2               @OPCODE_3203:   ; [c64_ir] InlineExit
003B03r 2                   ; inline exit
003B03r 2  68               pla
003B04r 2  68               pla
003B05r 2               
003B05r 2               @target_962:
003B05r 2               
003B05r 2               ; src/prelude.fth:20:12 in `+!`
003B05r 2               @OPCODE_3205:   ; [c64_ir] AltPush
003B05r 2  CA               dex
003B06r 2  CA               dex
003B07r 2  B5 03            lda $03,x
003B09r 2  48               pha
003B0Ar 2  B5 02            lda $02,x
003B0Cr 2  48               pha
003B0Dr 2               
003B0Dr 2               ; src/prelude.fth:20:15 in `+!`
003B0Dr 2               @OPCODE_3206:   ; [c64_ir] Load
003B0Dr 2  A1 00            lda ($00,x)
003B0Fr 2  95 00            sta $00,x
003B11r 2  A9 00            lda #0
003B13r 2  95 01            sta $01,x
003B15r 2               
003B15r 2               ; src/prelude.fth:20:17 in `+!`
003B15r 2               @OPCODE_3207:   ; [c64_ir] Add
003B15r 2                   ; 21
003B15r 2  CA               dex
003B16r 2  CA               dex
003B17r 2  18               clc
003B18r 2  B5 00            lda $00,x
003B1Ar 2  75 02            adc $02,x
003B1Cr 2  95 00            sta $00,x
003B1Er 2  B5 01            lda $01,x
003B20r 2  75 03            adc $03,x
003B22r 2  95 01            sta $01,x
003B24r 2               
003B24r 2               ; src/prelude.fth:20:19 in `+!`
003B24r 2               @OPCODE_3208:   ; [c64_ir] AltPop
003B24r 2  E8               inx
003B25r 2  E8               inx
003B26r 2  68               pla
003B27r 2  95 00            sta $00,x
003B29r 2  68               pla
003B2Ar 2  95 01            sta $01,x
003B2Cr 2               
003B2Cr 2               ; src/prelude.fth:20:22 in `+!`
003B2Cr 2               @OPCODE_3209:   ; [c64_ir] Store
003B2Cr 2  CA               dex
003B2Dr 2  CA               dex
003B2Er 2  CA               dex
003B2Fr 2  CA               dex
003B30r 2  B5 02            lda $02,x
003B32r 2  81 04            sta ($04,x)
003B34r 2                   ; TODO high byte
003B34r 2               
003B34r 2               ; src/prelude.fth:20:24 in `+!`
003B34r 2               @OPCODE_3210:   ; [c64_ir] InlineExit
003B34r 2                   ; inline exit
003B34r 2  68               pla
003B35r 2  68               pla
003B36r 2               
003B36r 2               @target_963:
003B36r 2               
003B36r 2               ; snake.fth:126:31 in `move-up`
003B36r 2               @OPCODE_3212:   ; [c64_ir] InlineExit
003B36r 2                   ; inline exit
003B36r 2  68               pla
003B37r 2  68               pla
003B38r 2               
003B38r 2               @target_964:
003B38r 2               
003B38r 2               ; snake.fth:133:27 in `move-snake-head`
003B38r 2               @OPCODE_3214:   ; [c64_ir] JumpElse(1013)
003B38r 2  4C rr rr         jmp @target_1013
003B3Br 2               
003B3Br 2               @target_965:
003B3Br 2               
003B3Br 2               ; snake.fth:134:3 in `move-snake-head`
003B3Br 2               @OPCODE_3216:   ; [c64_ir] PushLiteral(39)
003B3Br 2  E8               inx
003B3Cr 2  E8               inx
003B3Dr 2  A9 27            lda #39
003B3Fr 2  95 00            sta $00,x
003B41r 2  A9 00            lda #0
003B43r 2  95 01            sta $01,x
003B45r 2               
003B45r 2               ; snake.fth:134:9 in `move-snake-head`
003B45r 2               @OPCODE_3217:   ; [c64_ir] InlineCall("over")
003B45r 2                   ; inline call(over)
003B45r 2  48               pha
003B46r 2  48               pha
003B47r 2               
003B47r 2               @target_966:
003B47r 2               
003B47r 2               ; src/prelude.fth:4:10 in `over`
003B47r 2               @OPCODE_3219:   ; [c64_ir] AltPush
003B47r 2  CA               dex
003B48r 2  CA               dex
003B49r 2  B5 03            lda $03,x
003B4Br 2  48               pha
003B4Cr 2  B5 02            lda $02,x
003B4Er 2  48               pha
003B4Fr 2               
003B4Fr 2               ; src/prelude.fth:4:13 in `over`
003B4Fr 2               @OPCODE_3220:   ; [c64_ir] TempStore
003B4Fr 2  CA               dex
003B50r 2  CA               dex
003B51r 2  B5 03            lda $03,x
003B53r 2  85 96            sta TEMP_PAX2
003B55r 2  B5 02            lda $02,x
003B57r 2  85 95            sta TEMP_PAX1
003B59r 2               
003B59r 2               ; src/prelude.fth:4:19 in `over`
003B59r 2               @OPCODE_3221:   ; [c64_ir] TempLoad
003B59r 2  E8               inx
003B5Ar 2  E8               inx
003B5Br 2  A5 95            lda TEMP_PAX1
003B5Dr 2  95 00            sta $00,x
003B5Fr 2  A5 96            lda TEMP_PAX2
003B61r 2  95 01            sta $01,x
003B63r 2               
003B63r 2               ; src/prelude.fth:4:25 in `over`
003B63r 2               @OPCODE_3222:   ; [c64_ir] AltPop
003B63r 2  E8               inx
003B64r 2  E8               inx
003B65r 2  68               pla
003B66r 2  95 00            sta $00,x
003B68r 2  68               pla
003B69r 2  95 01            sta $01,x
003B6Br 2               
003B6Br 2               ; src/prelude.fth:4:28 in `over`
003B6Br 2               @OPCODE_3223:   ; [c64_ir] TempLoad
003B6Br 2  E8               inx
003B6Cr 2  E8               inx
003B6Dr 2  A5 95            lda TEMP_PAX1
003B6Fr 2  95 00            sta $00,x
003B71r 2  A5 96            lda TEMP_PAX2
003B73r 2  95 01            sta $01,x
003B75r 2               
003B75r 2               ; src/prelude.fth:4:34 in `over`
003B75r 2               @OPCODE_3224:   ; [c64_ir] InlineExit
003B75r 2                   ; inline exit
003B75r 2  68               pla
003B76r 2  68               pla
003B77r 2               
003B77r 2               @target_967:
003B77r 2               
003B77r 2               ; snake.fth:134:14 in `move-snake-head`
003B77r 2               @OPCODE_3226:   ; [c64_ir] InlineCall("=")
003B77r 2                   ; inline call(=)
003B77r 2  48               pha
003B78r 2  48               pha
003B79r 2               
003B79r 2               @target_968:
003B79r 2               
003B79r 2               ; src/prelude.fth:22:8 in `=`
003B79r 2               @OPCODE_3228:   ; [c64_ir] InlineCall("-")
003B79r 2                   ; inline call(-)
003B79r 2  48               pha
003B7Ar 2  48               pha
003B7Br 2               
003B7Br 2               @target_969:
003B7Br 2               
003B7Br 2               ; src/prelude.fth:16:12 in `-`
003B7Br 2               @OPCODE_3230:   ; [c64_ir] InlineCall("negate")
003B7Br 2                   ; inline call(negate)
003B7Br 2  48               pha
003B7Cr 2  48               pha
003B7Dr 2               
003B7Dr 2               @target_970:
003B7Dr 2               
003B7Dr 2               ; src/prelude.fth:15:12 in `negate`
003B7Dr 2               @OPCODE_3232:   ; [c64_ir] InlineCall("invert")
003B7Dr 2                   ; inline call(invert)
003B7Dr 2  48               pha
003B7Er 2  48               pha
003B7Fr 2               
003B7Fr 2               @target_971:
003B7Fr 2               
003B7Fr 2               ; src/prelude.fth:14:12 in `invert`
003B7Fr 2               @OPCODE_3234:   ; [c64_ir] PushLiteral(-1)
003B7Fr 2  E8               inx
003B80r 2  E8               inx
003B81r 2  A9 FF            lda #255
003B83r 2  95 00            sta $00,x
003B85r 2  A9 FF            lda #255
003B87r 2  95 01            sta $01,x
003B89r 2               
003B89r 2               ; src/prelude.fth:14:15 in `invert`
003B89r 2               @OPCODE_3235:   ; [c64_ir] Nand
003B89r 2                   ; 26
003B89r 2  CA               dex
003B8Ar 2  CA               dex
003B8Br 2  B5 00            lda $00,x
003B8Dr 2  35 02            and $02,x
003B8Fr 2  49 FF            eor #$ff
003B91r 2  95 00            sta $00,x
003B93r 2  B5 01            lda $01,x
003B95r 2  35 03            and $03,x
003B97r 2  49 FF            eor #$ff
003B99r 2  95 01            sta $01,x
003B9Br 2               
003B9Br 2               ; src/prelude.fth:14:20 in `invert`
003B9Br 2               @OPCODE_3236:   ; [c64_ir] InlineExit
003B9Br 2                   ; inline exit
003B9Br 2  68               pla
003B9Cr 2  68               pla
003B9Dr 2               
003B9Dr 2               @target_972:
003B9Dr 2               
003B9Dr 2               ; src/prelude.fth:15:19 in `negate`
003B9Dr 2               @OPCODE_3238:   ; [c64_ir] PushLiteral(1)
003B9Dr 2  E8               inx
003B9Er 2  E8               inx
003B9Fr 2  A9 01            lda #1
003BA1r 2  95 00            sta $00,x
003BA3r 2  A9 00            lda #0
003BA5r 2  95 01            sta $01,x
003BA7r 2               
003BA7r 2               ; src/prelude.fth:15:21 in `negate`
003BA7r 2               @OPCODE_3239:   ; [c64_ir] Add
003BA7r 2                   ; 21
003BA7r 2  CA               dex
003BA8r 2  CA               dex
003BA9r 2  18               clc
003BAAr 2  B5 00            lda $00,x
003BACr 2  75 02            adc $02,x
003BAEr 2  95 00            sta $00,x
003BB0r 2  B5 01            lda $01,x
003BB2r 2  75 03            adc $03,x
003BB4r 2  95 01            sta $01,x
003BB6r 2               
003BB6r 2               ; src/prelude.fth:15:23 in `negate`
003BB6r 2               @OPCODE_3240:   ; [c64_ir] InlineExit
003BB6r 2                   ; inline exit
003BB6r 2  68               pla
003BB7r 2  68               pla
003BB8r 2               
003BB8r 2               @target_973:
003BB8r 2               
003BB8r 2               ; src/prelude.fth:16:19 in `-`
003BB8r 2               @OPCODE_3242:   ; [c64_ir] Add
003BB8r 2                   ; 21
003BB8r 2  CA               dex
003BB9r 2  CA               dex
003BBAr 2  18               clc
003BBBr 2  B5 00            lda $00,x
003BBDr 2  75 02            adc $02,x
003BBFr 2  95 00            sta $00,x
003BC1r 2  B5 01            lda $01,x
003BC3r 2  75 03            adc $03,x
003BC5r 2  95 01            sta $01,x
003BC7r 2               
003BC7r 2               ; src/prelude.fth:16:21 in `-`
003BC7r 2               @OPCODE_3243:   ; [c64_ir] InlineExit
003BC7r 2                   ; inline exit
003BC7r 2  68               pla
003BC8r 2  68               pla
003BC9r 2               
003BC9r 2               @target_974:
003BC9r 2               
003BC9r 2               ; src/prelude.fth:22:10 in `=`
003BC9r 2               @OPCODE_3245:   ; [c64_ir] InlineCall("0=")
003BC9r 2                   ; inline call(0=)
003BC9r 2  48               pha
003BCAr 2  48               pha
003BCBr 2               
003BCBr 2               @target_975:
003BCBr 2               
003BCBr 2               ; src/prelude.fth:21:8 in `0=`
003BCBr 2               @OPCODE_3247:   ; [c64_ir] JumpIf0(977)
003BCBr 2  CA               dex
003BCCr 2  CA               dex
003BCDr 2  B5 02            lda $02,x
003BCFr 2  15 03            ora $03,x
003BD1r 2  D0 03            bne *+5
003BD3r 2  4C rr rr         jmp @target_977
003BD6r 2               
003BD6r 2               @target_976:
003BD6r 2               
003BD6r 2               ; src/prelude.fth:21:11 in `0=`
003BD6r 2               @OPCODE_3249:   ; [c64_ir] PushLiteral(0)
003BD6r 2  E8               inx
003BD7r 2  E8               inx
003BD8r 2  A9 00            lda #0
003BDAr 2  95 00            sta $00,x
003BDCr 2  A9 00            lda #0
003BDEr 2  95 01            sta $01,x
003BE0r 2               
003BE0r 2               ; src/prelude.fth:21:13 in `0=`
003BE0r 2               @OPCODE_3250:   ; [c64_ir] JumpElse(978)
003BE0r 2  4C rr rr         jmp @target_978
003BE3r 2               
003BE3r 2               @target_977:
003BE3r 2               
003BE3r 2               ; src/prelude.fth:21:18 in `0=`
003BE3r 2               @OPCODE_3252:   ; [c64_ir] PushLiteral(-1)
003BE3r 2  E8               inx
003BE4r 2  E8               inx
003BE5r 2  A9 FF            lda #255
003BE7r 2  95 00            sta $00,x
003BE9r 2  A9 FF            lda #255
003BEBr 2  95 01            sta $01,x
003BEDr 2               
003BEDr 2               ; src/prelude.fth:21:21 in `0=`
003BEDr 2               @OPCODE_3253:   ; [c64_ir] JumpTarget(977)
003BEDr 2               
003BEDr 2               @target_978:
003BEDr 2               
003BEDr 2               ; src/prelude.fth:21:26 in `0=`
003BEDr 2               @OPCODE_3255:   ; [c64_ir] InlineExit
003BEDr 2                   ; inline exit
003BEDr 2  68               pla
003BEEr 2  68               pla
003BEFr 2               
003BEFr 2               @target_979:
003BEFr 2               
003BEFr 2               ; src/prelude.fth:22:13 in `=`
003BEFr 2               @OPCODE_3257:   ; [c64_ir] InlineExit
003BEFr 2                   ; inline exit
003BEFr 2  68               pla
003BF0r 2  68               pla
003BF1r 2               
003BF1r 2               @target_980:
003BF1r 2               
003BF1r 2               ; snake.fth:134:16 in `move-snake-head`
003BF1r 2               @OPCODE_3259:   ; [c64_ir] JumpIf0(988)
003BF1r 2  CA               dex
003BF2r 2  CA               dex
003BF3r 2  B5 02            lda $02,x
003BF5r 2  15 03            ora $03,x
003BF7r 2  D0 03            bne *+5
003BF9r 2  4C rr rr         jmp @target_988
003BFCr 2               
003BFCr 2               @target_981:
003BFCr 2               
003BFCr 2               ; snake.fth:134:19 in `move-snake-head`
003BFCr 2               @OPCODE_3261:   ; [c64_ir] InlineCall("move-right")
003BFCr 2                   ; inline call(move-right)
003BFCr 2  48               pha
003BFDr 2  48               pha
003BFEr 2               
003BFEr 2               @target_982:
003BFEr 2               
003BFEr 2               ; snake.fth:129:15 in `move-right`
003BFEr 2               @OPCODE_3263:   ; [c64_ir] PushLiteral(1)
003BFEr 2  E8               inx
003BFFr 2  E8               inx
003C00r 2  A9 01            lda #1
003C02r 2  95 00            sta $00,x
003C04r 2  A9 00            lda #0
003C06r 2  95 01            sta $01,x
003C08r 2               
003C08r 2               ; snake.fth:129:17 in `move-right`
003C08r 2               @OPCODE_3264:   ; [c64_ir] PushLiteral(-28668)
003C08r 2  E8               inx
003C09r 2  E8               inx
003C0Ar 2  A9 04            lda #4
003C0Cr 2  95 00            sta $00,x
003C0Er 2  A9 90            lda #144
003C10r 2  95 01            sta $01,x
003C12r 2               
003C12r 2               ; snake.fth:129:30 in `move-right`
003C12r 2               @OPCODE_3265:   ; [c64_ir] InlineCall("+!")
003C12r 2                   ; inline call(+!)
003C12r 2  48               pha
003C13r 2  48               pha
003C14r 2               
003C14r 2               @target_983:
003C14r 2               
003C14r 2               ; src/prelude.fth:20:8 in `+!`
003C14r 2               @OPCODE_3267:   ; [c64_ir] InlineCall("dup")
003C14r 2                   ; inline call(dup)
003C14r 2  48               pha
003C15r 2  48               pha
003C16r 2               
003C16r 2               @target_984:
003C16r 2               
003C16r 2               ; src/prelude.fth:6:10 in `dup`
003C16r 2               @OPCODE_3269:   ; [c64_ir] TempStore
003C16r 2  CA               dex
003C17r 2  CA               dex
003C18r 2  B5 03            lda $03,x
003C1Ar 2  85 96            sta TEMP_PAX2
003C1Cr 2  B5 02            lda $02,x
003C1Er 2  85 95            sta TEMP_PAX1
003C20r 2               
003C20r 2               ; src/prelude.fth:6:16 in `dup`
003C20r 2               @OPCODE_3270:   ; [c64_ir] TempLoad
003C20r 2  E8               inx
003C21r 2  E8               inx
003C22r 2  A5 95            lda TEMP_PAX1
003C24r 2  95 00            sta $00,x
003C26r 2  A5 96            lda TEMP_PAX2
003C28r 2  95 01            sta $01,x
003C2Ar 2               
003C2Ar 2               ; src/prelude.fth:6:22 in `dup`
003C2Ar 2               @OPCODE_3271:   ; [c64_ir] TempLoad
003C2Ar 2  E8               inx
003C2Br 2  E8               inx
003C2Cr 2  A5 95            lda TEMP_PAX1
003C2Er 2  95 00            sta $00,x
003C30r 2  A5 96            lda TEMP_PAX2
003C32r 2  95 01            sta $01,x
003C34r 2               
003C34r 2               ; src/prelude.fth:6:28 in `dup`
003C34r 2               @OPCODE_3272:   ; [c64_ir] InlineExit
003C34r 2                   ; inline exit
003C34r 2  68               pla
003C35r 2  68               pla
003C36r 2               
003C36r 2               @target_985:
003C36r 2               
003C36r 2               ; src/prelude.fth:20:12 in `+!`
003C36r 2               @OPCODE_3274:   ; [c64_ir] AltPush
003C36r 2  CA               dex
003C37r 2  CA               dex
003C38r 2  B5 03            lda $03,x
003C3Ar 2  48               pha
003C3Br 2  B5 02            lda $02,x
003C3Dr 2  48               pha
003C3Er 2               
003C3Er 2               ; src/prelude.fth:20:15 in `+!`
003C3Er 2               @OPCODE_3275:   ; [c64_ir] Load
003C3Er 2  A1 00            lda ($00,x)
003C40r 2  95 00            sta $00,x
003C42r 2  A9 00            lda #0
003C44r 2  95 01            sta $01,x
003C46r 2               
003C46r 2               ; src/prelude.fth:20:17 in `+!`
003C46r 2               @OPCODE_3276:   ; [c64_ir] Add
003C46r 2                   ; 21
003C46r 2  CA               dex
003C47r 2  CA               dex
003C48r 2  18               clc
003C49r 2  B5 00            lda $00,x
003C4Br 2  75 02            adc $02,x
003C4Dr 2  95 00            sta $00,x
003C4Fr 2  B5 01            lda $01,x
003C51r 2  75 03            adc $03,x
003C53r 2  95 01            sta $01,x
003C55r 2               
003C55r 2               ; src/prelude.fth:20:19 in `+!`
003C55r 2               @OPCODE_3277:   ; [c64_ir] AltPop
003C55r 2  E8               inx
003C56r 2  E8               inx
003C57r 2  68               pla
003C58r 2  95 00            sta $00,x
003C5Ar 2  68               pla
003C5Br 2  95 01            sta $01,x
003C5Dr 2               
003C5Dr 2               ; src/prelude.fth:20:22 in `+!`
003C5Dr 2               @OPCODE_3278:   ; [c64_ir] Store
003C5Dr 2  CA               dex
003C5Er 2  CA               dex
003C5Fr 2  CA               dex
003C60r 2  CA               dex
003C61r 2  B5 02            lda $02,x
003C63r 2  81 04            sta ($04,x)
003C65r 2                   ; TODO high byte
003C65r 2               
003C65r 2               ; src/prelude.fth:20:24 in `+!`
003C65r 2               @OPCODE_3279:   ; [c64_ir] InlineExit
003C65r 2                   ; inline exit
003C65r 2  68               pla
003C66r 2  68               pla
003C67r 2               
003C67r 2               @target_986:
003C67r 2               
003C67r 2               ; snake.fth:129:33 in `move-right`
003C67r 2               @OPCODE_3281:   ; [c64_ir] InlineExit
003C67r 2                   ; inline exit
003C67r 2  68               pla
003C68r 2  68               pla
003C69r 2               
003C69r 2               @target_987:
003C69r 2               
003C69r 2               ; snake.fth:134:30 in `move-snake-head`
003C69r 2               @OPCODE_3283:   ; [c64_ir] JumpElse(1012)
003C69r 2  4C rr rr         jmp @target_1012
003C6Cr 2               
003C6Cr 2               @target_988:
003C6Cr 2               
003C6Cr 2               ; snake.fth:135:3 in `move-snake-head`
003C6Cr 2               @OPCODE_3285:   ; [c64_ir] PushLiteral(40)
003C6Cr 2  E8               inx
003C6Dr 2  E8               inx
003C6Er 2  A9 28            lda #40
003C70r 2  95 00            sta $00,x
003C72r 2  A9 00            lda #0
003C74r 2  95 01            sta $01,x
003C76r 2               
003C76r 2               ; snake.fth:135:8 in `move-snake-head`
003C76r 2               @OPCODE_3286:   ; [c64_ir] InlineCall("over")
003C76r 2                   ; inline call(over)
003C76r 2  48               pha
003C77r 2  48               pha
003C78r 2               
003C78r 2               @target_989:
003C78r 2               
003C78r 2               ; src/prelude.fth:4:10 in `over`
003C78r 2               @OPCODE_3288:   ; [c64_ir] AltPush
003C78r 2  CA               dex
003C79r 2  CA               dex
003C7Ar 2  B5 03            lda $03,x
003C7Cr 2  48               pha
003C7Dr 2  B5 02            lda $02,x
003C7Fr 2  48               pha
003C80r 2               
003C80r 2               ; src/prelude.fth:4:13 in `over`
003C80r 2               @OPCODE_3289:   ; [c64_ir] TempStore
003C80r 2  CA               dex
003C81r 2  CA               dex
003C82r 2  B5 03            lda $03,x
003C84r 2  85 96            sta TEMP_PAX2
003C86r 2  B5 02            lda $02,x
003C88r 2  85 95            sta TEMP_PAX1
003C8Ar 2               
003C8Ar 2               ; src/prelude.fth:4:19 in `over`
003C8Ar 2               @OPCODE_3290:   ; [c64_ir] TempLoad
003C8Ar 2  E8               inx
003C8Br 2  E8               inx
003C8Cr 2  A5 95            lda TEMP_PAX1
003C8Er 2  95 00            sta $00,x
003C90r 2  A5 96            lda TEMP_PAX2
003C92r 2  95 01            sta $01,x
003C94r 2               
003C94r 2               ; src/prelude.fth:4:25 in `over`
003C94r 2               @OPCODE_3291:   ; [c64_ir] AltPop
003C94r 2  E8               inx
003C95r 2  E8               inx
003C96r 2  68               pla
003C97r 2  95 00            sta $00,x
003C99r 2  68               pla
003C9Ar 2  95 01            sta $01,x
003C9Cr 2               
003C9Cr 2               ; src/prelude.fth:4:28 in `over`
003C9Cr 2               @OPCODE_3292:   ; [c64_ir] TempLoad
003C9Cr 2  E8               inx
003C9Dr 2  E8               inx
003C9Er 2  A5 95            lda TEMP_PAX1
003CA0r 2  95 00            sta $00,x
003CA2r 2  A5 96            lda TEMP_PAX2
003CA4r 2  95 01            sta $01,x
003CA6r 2               
003CA6r 2               ; src/prelude.fth:4:34 in `over`
003CA6r 2               @OPCODE_3293:   ; [c64_ir] InlineExit
003CA6r 2                   ; inline exit
003CA6r 2  68               pla
003CA7r 2  68               pla
003CA8r 2               
003CA8r 2               @target_990:
003CA8r 2               
003CA8r 2               ; snake.fth:135:14 in `move-snake-head`
003CA8r 2               @OPCODE_3295:   ; [c64_ir] InlineCall("=")
003CA8r 2                   ; inline call(=)
003CA8r 2  48               pha
003CA9r 2  48               pha
003CAAr 2               
003CAAr 2               @target_991:
003CAAr 2               
003CAAr 2               ; src/prelude.fth:22:8 in `=`
003CAAr 2               @OPCODE_3297:   ; [c64_ir] InlineCall("-")
003CAAr 2                   ; inline call(-)
003CAAr 2  48               pha
003CABr 2  48               pha
003CACr 2               
003CACr 2               @target_992:
003CACr 2               
003CACr 2               ; src/prelude.fth:16:12 in `-`
003CACr 2               @OPCODE_3299:   ; [c64_ir] InlineCall("negate")
003CACr 2                   ; inline call(negate)
003CACr 2  48               pha
003CADr 2  48               pha
003CAEr 2               
003CAEr 2               @target_993:
003CAEr 2               
003CAEr 2               ; src/prelude.fth:15:12 in `negate`
003CAEr 2               @OPCODE_3301:   ; [c64_ir] InlineCall("invert")
003CAEr 2                   ; inline call(invert)
003CAEr 2  48               pha
003CAFr 2  48               pha
003CB0r 2               
003CB0r 2               @target_994:
003CB0r 2               
003CB0r 2               ; src/prelude.fth:14:12 in `invert`
003CB0r 2               @OPCODE_3303:   ; [c64_ir] PushLiteral(-1)
003CB0r 2  E8               inx
003CB1r 2  E8               inx
003CB2r 2  A9 FF            lda #255
003CB4r 2  95 00            sta $00,x
003CB6r 2  A9 FF            lda #255
003CB8r 2  95 01            sta $01,x
003CBAr 2               
003CBAr 2               ; src/prelude.fth:14:15 in `invert`
003CBAr 2               @OPCODE_3304:   ; [c64_ir] Nand
003CBAr 2                   ; 26
003CBAr 2  CA               dex
003CBBr 2  CA               dex
003CBCr 2  B5 00            lda $00,x
003CBEr 2  35 02            and $02,x
003CC0r 2  49 FF            eor #$ff
003CC2r 2  95 00            sta $00,x
003CC4r 2  B5 01            lda $01,x
003CC6r 2  35 03            and $03,x
003CC8r 2  49 FF            eor #$ff
003CCAr 2  95 01            sta $01,x
003CCCr 2               
003CCCr 2               ; src/prelude.fth:14:20 in `invert`
003CCCr 2               @OPCODE_3305:   ; [c64_ir] InlineExit
003CCCr 2                   ; inline exit
003CCCr 2  68               pla
003CCDr 2  68               pla
003CCEr 2               
003CCEr 2               @target_995:
003CCEr 2               
003CCEr 2               ; src/prelude.fth:15:19 in `negate`
003CCEr 2               @OPCODE_3307:   ; [c64_ir] PushLiteral(1)
003CCEr 2  E8               inx
003CCFr 2  E8               inx
003CD0r 2  A9 01            lda #1
003CD2r 2  95 00            sta $00,x
003CD4r 2  A9 00            lda #0
003CD6r 2  95 01            sta $01,x
003CD8r 2               
003CD8r 2               ; src/prelude.fth:15:21 in `negate`
003CD8r 2               @OPCODE_3308:   ; [c64_ir] Add
003CD8r 2                   ; 21
003CD8r 2  CA               dex
003CD9r 2  CA               dex
003CDAr 2  18               clc
003CDBr 2  B5 00            lda $00,x
003CDDr 2  75 02            adc $02,x
003CDFr 2  95 00            sta $00,x
003CE1r 2  B5 01            lda $01,x
003CE3r 2  75 03            adc $03,x
003CE5r 2  95 01            sta $01,x
003CE7r 2               
003CE7r 2               ; src/prelude.fth:15:23 in `negate`
003CE7r 2               @OPCODE_3309:   ; [c64_ir] InlineExit
003CE7r 2                   ; inline exit
003CE7r 2  68               pla
003CE8r 2  68               pla
003CE9r 2               
003CE9r 2               @target_996:
003CE9r 2               
003CE9r 2               ; src/prelude.fth:16:19 in `-`
003CE9r 2               @OPCODE_3311:   ; [c64_ir] Add
003CE9r 2                   ; 21
003CE9r 2  CA               dex
003CEAr 2  CA               dex
003CEBr 2  18               clc
003CECr 2  B5 00            lda $00,x
003CEEr 2  75 02            adc $02,x
003CF0r 2  95 00            sta $00,x
003CF2r 2  B5 01            lda $01,x
003CF4r 2  75 03            adc $03,x
003CF6r 2  95 01            sta $01,x
003CF8r 2               
003CF8r 2               ; src/prelude.fth:16:21 in `-`
003CF8r 2               @OPCODE_3312:   ; [c64_ir] InlineExit
003CF8r 2                   ; inline exit
003CF8r 2  68               pla
003CF9r 2  68               pla
003CFAr 2               
003CFAr 2               @target_997:
003CFAr 2               
003CFAr 2               ; src/prelude.fth:22:10 in `=`
003CFAr 2               @OPCODE_3314:   ; [c64_ir] InlineCall("0=")
003CFAr 2                   ; inline call(0=)
003CFAr 2  48               pha
003CFBr 2  48               pha
003CFCr 2               
003CFCr 2               @target_998:
003CFCr 2               
003CFCr 2               ; src/prelude.fth:21:8 in `0=`
003CFCr 2               @OPCODE_3316:   ; [c64_ir] JumpIf0(1000)
003CFCr 2  CA               dex
003CFDr 2  CA               dex
003CFEr 2  B5 02            lda $02,x
003D00r 2  15 03            ora $03,x
003D02r 2  D0 03            bne *+5
003D04r 2  4C rr rr         jmp @target_1000
003D07r 2               
003D07r 2               @target_999:
003D07r 2               
003D07r 2               ; src/prelude.fth:21:11 in `0=`
003D07r 2               @OPCODE_3318:   ; [c64_ir] PushLiteral(0)
003D07r 2  E8               inx
003D08r 2  E8               inx
003D09r 2  A9 00            lda #0
003D0Br 2  95 00            sta $00,x
003D0Dr 2  A9 00            lda #0
003D0Fr 2  95 01            sta $01,x
003D11r 2               
003D11r 2               ; src/prelude.fth:21:13 in `0=`
003D11r 2               @OPCODE_3319:   ; [c64_ir] JumpElse(1001)
003D11r 2  4C rr rr         jmp @target_1001
003D14r 2               
003D14r 2               @target_1000:
003D14r 2               
003D14r 2               ; src/prelude.fth:21:18 in `0=`
003D14r 2               @OPCODE_3321:   ; [c64_ir] PushLiteral(-1)
003D14r 2  E8               inx
003D15r 2  E8               inx
003D16r 2  A9 FF            lda #255
003D18r 2  95 00            sta $00,x
003D1Ar 2  A9 FF            lda #255
003D1Cr 2  95 01            sta $01,x
003D1Er 2               
003D1Er 2               ; src/prelude.fth:21:21 in `0=`
003D1Er 2               @OPCODE_3322:   ; [c64_ir] JumpTarget(1000)
003D1Er 2               
003D1Er 2               @target_1001:
003D1Er 2               
003D1Er 2               ; src/prelude.fth:21:26 in `0=`
003D1Er 2               @OPCODE_3324:   ; [c64_ir] InlineExit
003D1Er 2                   ; inline exit
003D1Er 2  68               pla
003D1Fr 2  68               pla
003D20r 2               
003D20r 2               @target_1002:
003D20r 2               
003D20r 2               ; src/prelude.fth:22:13 in `=`
003D20r 2               @OPCODE_3326:   ; [c64_ir] InlineExit
003D20r 2                   ; inline exit
003D20r 2  68               pla
003D21r 2  68               pla
003D22r 2               
003D22r 2               @target_1003:
003D22r 2               
003D22r 2               ; snake.fth:135:16 in `move-snake-head`
003D22r 2               @OPCODE_3328:   ; [c64_ir] JumpIf0(1011)
003D22r 2  CA               dex
003D23r 2  CA               dex
003D24r 2  B5 02            lda $02,x
003D26r 2  15 03            ora $03,x
003D28r 2  D0 03            bne *+5
003D2Ar 2  4C rr rr         jmp @target_1011
003D2Dr 2               
003D2Dr 2               @target_1004:
003D2Dr 2               
003D2Dr 2               ; snake.fth:135:19 in `move-snake-head`
003D2Dr 2               @OPCODE_3330:   ; [c64_ir] InlineCall("move-down")
003D2Dr 2                   ; inline call(move-down)
003D2Dr 2  48               pha
003D2Er 2  48               pha
003D2Fr 2               
003D2Fr 2               @target_1005:
003D2Fr 2               
003D2Fr 2               ; snake.fth:128:14 in `move-down`
003D2Fr 2               @OPCODE_3332:   ; [c64_ir] PushLiteral(1)
003D2Fr 2  E8               inx
003D30r 2  E8               inx
003D31r 2  A9 01            lda #1
003D33r 2  95 00            sta $00,x
003D35r 2  A9 00            lda #0
003D37r 2  95 01            sta $01,x
003D39r 2               
003D39r 2               ; snake.fth:128:16 in `move-down`
003D39r 2               @OPCODE_3333:   ; [c64_ir] PushLiteral(-27666)
003D39r 2  E8               inx
003D3Ar 2  E8               inx
003D3Br 2  A9 EE            lda #238
003D3Dr 2  95 00            sta $00,x
003D3Fr 2  A9 93            lda #147
003D41r 2  95 01            sta $01,x
003D43r 2               
003D43r 2               ; snake.fth:128:29 in `move-down`
003D43r 2               @OPCODE_3334:   ; [c64_ir] InlineCall("+!")
003D43r 2                   ; inline call(+!)
003D43r 2  48               pha
003D44r 2  48               pha
003D45r 2               
003D45r 2               @target_1006:
003D45r 2               
003D45r 2               ; src/prelude.fth:20:8 in `+!`
003D45r 2               @OPCODE_3336:   ; [c64_ir] InlineCall("dup")
003D45r 2                   ; inline call(dup)
003D45r 2  48               pha
003D46r 2  48               pha
003D47r 2               
003D47r 2               @target_1007:
003D47r 2               
003D47r 2               ; src/prelude.fth:6:10 in `dup`
003D47r 2               @OPCODE_3338:   ; [c64_ir] TempStore
003D47r 2  CA               dex
003D48r 2  CA               dex
003D49r 2  B5 03            lda $03,x
003D4Br 2  85 96            sta TEMP_PAX2
003D4Dr 2  B5 02            lda $02,x
003D4Fr 2  85 95            sta TEMP_PAX1
003D51r 2               
003D51r 2               ; src/prelude.fth:6:16 in `dup`
003D51r 2               @OPCODE_3339:   ; [c64_ir] TempLoad
003D51r 2  E8               inx
003D52r 2  E8               inx
003D53r 2  A5 95            lda TEMP_PAX1
003D55r 2  95 00            sta $00,x
003D57r 2  A5 96            lda TEMP_PAX2
003D59r 2  95 01            sta $01,x
003D5Br 2               
003D5Br 2               ; src/prelude.fth:6:22 in `dup`
003D5Br 2               @OPCODE_3340:   ; [c64_ir] TempLoad
003D5Br 2  E8               inx
003D5Cr 2  E8               inx
003D5Dr 2  A5 95            lda TEMP_PAX1
003D5Fr 2  95 00            sta $00,x
003D61r 2  A5 96            lda TEMP_PAX2
003D63r 2  95 01            sta $01,x
003D65r 2               
003D65r 2               ; src/prelude.fth:6:28 in `dup`
003D65r 2               @OPCODE_3341:   ; [c64_ir] InlineExit
003D65r 2                   ; inline exit
003D65r 2  68               pla
003D66r 2  68               pla
003D67r 2               
003D67r 2               @target_1008:
003D67r 2               
003D67r 2               ; src/prelude.fth:20:12 in `+!`
003D67r 2               @OPCODE_3343:   ; [c64_ir] AltPush
003D67r 2  CA               dex
003D68r 2  CA               dex
003D69r 2  B5 03            lda $03,x
003D6Br 2  48               pha
003D6Cr 2  B5 02            lda $02,x
003D6Er 2  48               pha
003D6Fr 2               
003D6Fr 2               ; src/prelude.fth:20:15 in `+!`
003D6Fr 2               @OPCODE_3344:   ; [c64_ir] Load
003D6Fr 2  A1 00            lda ($00,x)
003D71r 2  95 00            sta $00,x
003D73r 2  A9 00            lda #0
003D75r 2  95 01            sta $01,x
003D77r 2               
003D77r 2               ; src/prelude.fth:20:17 in `+!`
003D77r 2               @OPCODE_3345:   ; [c64_ir] Add
003D77r 2                   ; 21
003D77r 2  CA               dex
003D78r 2  CA               dex
003D79r 2  18               clc
003D7Ar 2  B5 00            lda $00,x
003D7Cr 2  75 02            adc $02,x
003D7Er 2  95 00            sta $00,x
003D80r 2  B5 01            lda $01,x
003D82r 2  75 03            adc $03,x
003D84r 2  95 01            sta $01,x
003D86r 2               
003D86r 2               ; src/prelude.fth:20:19 in `+!`
003D86r 2               @OPCODE_3346:   ; [c64_ir] AltPop
003D86r 2  E8               inx
003D87r 2  E8               inx
003D88r 2  68               pla
003D89r 2  95 00            sta $00,x
003D8Br 2  68               pla
003D8Cr 2  95 01            sta $01,x
003D8Er 2               
003D8Er 2               ; src/prelude.fth:20:22 in `+!`
003D8Er 2               @OPCODE_3347:   ; [c64_ir] Store
003D8Er 2  CA               dex
003D8Fr 2  CA               dex
003D90r 2  CA               dex
003D91r 2  CA               dex
003D92r 2  B5 02            lda $02,x
003D94r 2  81 04            sta ($04,x)
003D96r 2                   ; TODO high byte
003D96r 2               
003D96r 2               ; src/prelude.fth:20:24 in `+!`
003D96r 2               @OPCODE_3348:   ; [c64_ir] InlineExit
003D96r 2                   ; inline exit
003D96r 2  68               pla
003D97r 2  68               pla
003D98r 2               
003D98r 2               @target_1009:
003D98r 2               
003D98r 2               ; snake.fth:128:32 in `move-down`
003D98r 2               @OPCODE_3350:   ; [c64_ir] InlineExit
003D98r 2                   ; inline exit
003D98r 2  68               pla
003D99r 2  68               pla
003D9Ar 2               
003D9Ar 2               @target_1010:
003D9Ar 2               
003D9Ar 2               ; snake.fth:136:3 in `move-snake-head`
003D9Ar 2               @OPCODE_3352:   ; [c64_ir] JumpTarget(1010)
003D9Ar 2               
003D9Ar 2               @target_1011:
003D9Ar 2               
003D9Ar 2               ; snake.fth:136:8 in `move-snake-head`
003D9Ar 2               @OPCODE_3354:   ; [c64_ir] JumpTarget(1011)
003D9Ar 2               
003D9Ar 2               @target_1012:
003D9Ar 2               
003D9Ar 2               ; snake.fth:136:13 in `move-snake-head`
003D9Ar 2               @OPCODE_3356:   ; [c64_ir] JumpTarget(1012)
003D9Ar 2               
003D9Ar 2               @target_1013:
003D9Ar 2               
003D9Ar 2               ; snake.fth:136:18 in `move-snake-head`
003D9Ar 2               @OPCODE_3358:   ; [c64_ir] JumpTarget(1013)
003D9Ar 2               
003D9Ar 2               @target_1014:
003D9Ar 2               
003D9Ar 2               ; snake.fth:136:23 in `move-snake-head`
003D9Ar 2               @OPCODE_3360:   ; [c64_ir] Drop
003D9Ar 2  CA               dex
003D9Br 2  CA               dex
003D9Cr 2               
003D9Cr 2               ; snake.fth:136:28 in `move-snake-head`
003D9Cr 2               @OPCODE_3361:   ; [c64_ir] InlineExit
003D9Cr 2                   ; inline exit
003D9Cr 2  68               pla
003D9Dr 2  68               pla
003D9Er 2               
003D9Er 2               @target_1015:
003D9Er 2               
003D9Er 2               ; snake.fth:221:1 in `main`
003D9Er 2               @OPCODE_3363:   ; [c64_ir] InlineCall("check-apple")
003D9Er 2                   ; inline call(check-apple)
003D9Er 2  48               pha
003D9Fr 2  48               pha
003DA0r 2               
003DA0r 2               @target_1016:
003DA0r 2               
003DA0r 2               ; snake.fth:184:3 in `check-apple`
003DA0r 2               @OPCODE_3365:   ; [c64_ir] PushLiteral(-28668)
003DA0r 2  E8               inx
003DA1r 2  E8               inx
003DA2r 2  A9 04            lda #4
003DA4r 2  95 00            sta $00,x
003DA6r 2  A9 90            lda #144
003DA8r 2  95 01            sta $01,x
003DAAr 2               
003DAAr 2               ; snake.fth:184:16 in `check-apple`
003DAAr 2               @OPCODE_3366:   ; [c64_ir] Load
003DAAr 2  A1 00            lda ($00,x)
003DACr 2  95 00            sta $00,x
003DAEr 2  A9 00            lda #0
003DB0r 2  95 01            sta $01,x
003DB2r 2               
003DB2r 2               ; snake.fth:184:18 in `check-apple`
003DB2r 2               @OPCODE_3367:   ; [c64_ir] PushLiteral(-26664)
003DB2r 2  E8               inx
003DB3r 2  E8               inx
003DB4r 2  A9 D8            lda #216
003DB6r 2  95 00            sta $00,x
003DB8r 2  A9 97            lda #151
003DBAr 2  95 01            sta $01,x
003DBCr 2               
003DBCr 2               ; snake.fth:184:26 in `check-apple`
003DBCr 2               @OPCODE_3368:   ; [c64_ir] Load
003DBCr 2  A1 00            lda ($00,x)
003DBEr 2  95 00            sta $00,x
003DC0r 2  A9 00            lda #0
003DC2r 2  95 01            sta $01,x
003DC4r 2               
003DC4r 2               ; snake.fth:184:28 in `check-apple`
003DC4r 2               @OPCODE_3369:   ; [c64_ir] InlineCall("=")
003DC4r 2                   ; inline call(=)
003DC4r 2  48               pha
003DC5r 2  48               pha
003DC6r 2               
003DC6r 2               @target_1017:
003DC6r 2               
003DC6r 2               ; src/prelude.fth:22:8 in `=`
003DC6r 2               @OPCODE_3371:   ; [c64_ir] InlineCall("-")
003DC6r 2                   ; inline call(-)
003DC6r 2  48               pha
003DC7r 2  48               pha
003DC8r 2               
003DC8r 2               @target_1018:
003DC8r 2               
003DC8r 2               ; src/prelude.fth:16:12 in `-`
003DC8r 2               @OPCODE_3373:   ; [c64_ir] InlineCall("negate")
003DC8r 2                   ; inline call(negate)
003DC8r 2  48               pha
003DC9r 2  48               pha
003DCAr 2               
003DCAr 2               @target_1019:
003DCAr 2               
003DCAr 2               ; src/prelude.fth:15:12 in `negate`
003DCAr 2               @OPCODE_3375:   ; [c64_ir] InlineCall("invert")
003DCAr 2                   ; inline call(invert)
003DCAr 2  48               pha
003DCBr 2  48               pha
003DCCr 2               
003DCCr 2               @target_1020:
003DCCr 2               
003DCCr 2               ; src/prelude.fth:14:12 in `invert`
003DCCr 2               @OPCODE_3377:   ; [c64_ir] PushLiteral(-1)
003DCCr 2  E8               inx
003DCDr 2  E8               inx
003DCEr 2  A9 FF            lda #255
003DD0r 2  95 00            sta $00,x
003DD2r 2  A9 FF            lda #255
003DD4r 2  95 01            sta $01,x
003DD6r 2               
003DD6r 2               ; src/prelude.fth:14:15 in `invert`
003DD6r 2               @OPCODE_3378:   ; [c64_ir] Nand
003DD6r 2                   ; 26
003DD6r 2  CA               dex
003DD7r 2  CA               dex
003DD8r 2  B5 00            lda $00,x
003DDAr 2  35 02            and $02,x
003DDCr 2  49 FF            eor #$ff
003DDEr 2  95 00            sta $00,x
003DE0r 2  B5 01            lda $01,x
003DE2r 2  35 03            and $03,x
003DE4r 2  49 FF            eor #$ff
003DE6r 2  95 01            sta $01,x
003DE8r 2               
003DE8r 2               ; src/prelude.fth:14:20 in `invert`
003DE8r 2               @OPCODE_3379:   ; [c64_ir] InlineExit
003DE8r 2                   ; inline exit
003DE8r 2  68               pla
003DE9r 2  68               pla
003DEAr 2               
003DEAr 2               @target_1021:
003DEAr 2               
003DEAr 2               ; src/prelude.fth:15:19 in `negate`
003DEAr 2               @OPCODE_3381:   ; [c64_ir] PushLiteral(1)
003DEAr 2  E8               inx
003DEBr 2  E8               inx
003DECr 2  A9 01            lda #1
003DEEr 2  95 00            sta $00,x
003DF0r 2  A9 00            lda #0
003DF2r 2  95 01            sta $01,x
003DF4r 2               
003DF4r 2               ; src/prelude.fth:15:21 in `negate`
003DF4r 2               @OPCODE_3382:   ; [c64_ir] Add
003DF4r 2                   ; 21
003DF4r 2  CA               dex
003DF5r 2  CA               dex
003DF6r 2  18               clc
003DF7r 2  B5 00            lda $00,x
003DF9r 2  75 02            adc $02,x
003DFBr 2  95 00            sta $00,x
003DFDr 2  B5 01            lda $01,x
003DFFr 2  75 03            adc $03,x
003E01r 2  95 01            sta $01,x
003E03r 2               
003E03r 2               ; src/prelude.fth:15:23 in `negate`
003E03r 2               @OPCODE_3383:   ; [c64_ir] InlineExit
003E03r 2                   ; inline exit
003E03r 2  68               pla
003E04r 2  68               pla
003E05r 2               
003E05r 2               @target_1022:
003E05r 2               
003E05r 2               ; src/prelude.fth:16:19 in `-`
003E05r 2               @OPCODE_3385:   ; [c64_ir] Add
003E05r 2                   ; 21
003E05r 2  CA               dex
003E06r 2  CA               dex
003E07r 2  18               clc
003E08r 2  B5 00            lda $00,x
003E0Ar 2  75 02            adc $02,x
003E0Cr 2  95 00            sta $00,x
003E0Er 2  B5 01            lda $01,x
003E10r 2  75 03            adc $03,x
003E12r 2  95 01            sta $01,x
003E14r 2               
003E14r 2               ; src/prelude.fth:16:21 in `-`
003E14r 2               @OPCODE_3386:   ; [c64_ir] InlineExit
003E14r 2                   ; inline exit
003E14r 2  68               pla
003E15r 2  68               pla
003E16r 2               
003E16r 2               @target_1023:
003E16r 2               
003E16r 2               ; src/prelude.fth:22:10 in `=`
003E16r 2               @OPCODE_3388:   ; [c64_ir] InlineCall("0=")
003E16r 2                   ; inline call(0=)
003E16r 2  48               pha
003E17r 2  48               pha
003E18r 2               
003E18r 2               @target_1024:
003E18r 2               
003E18r 2               ; src/prelude.fth:21:8 in `0=`
003E18r 2               @OPCODE_3390:   ; [c64_ir] JumpIf0(1026)
003E18r 2  CA               dex
003E19r 2  CA               dex
003E1Ar 2  B5 02            lda $02,x
003E1Cr 2  15 03            ora $03,x
003E1Er 2  D0 03            bne *+5
003E20r 2  4C rr rr         jmp @target_1026
003E23r 2               
003E23r 2               @target_1025:
003E23r 2               
003E23r 2               ; src/prelude.fth:21:11 in `0=`
003E23r 2               @OPCODE_3392:   ; [c64_ir] PushLiteral(0)
003E23r 2  E8               inx
003E24r 2  E8               inx
003E25r 2  A9 00            lda #0
003E27r 2  95 00            sta $00,x
003E29r 2  A9 00            lda #0
003E2Br 2  95 01            sta $01,x
003E2Dr 2               
003E2Dr 2               ; src/prelude.fth:21:13 in `0=`
003E2Dr 2               @OPCODE_3393:   ; [c64_ir] JumpElse(1027)
003E2Dr 2  4C rr rr         jmp @target_1027
003E30r 2               
003E30r 2               @target_1026:
003E30r 2               
003E30r 2               ; src/prelude.fth:21:18 in `0=`
003E30r 2               @OPCODE_3395:   ; [c64_ir] PushLiteral(-1)
003E30r 2  E8               inx
003E31r 2  E8               inx
003E32r 2  A9 FF            lda #255
003E34r 2  95 00            sta $00,x
003E36r 2  A9 FF            lda #255
003E38r 2  95 01            sta $01,x
003E3Ar 2               
003E3Ar 2               ; src/prelude.fth:21:21 in `0=`
003E3Ar 2               @OPCODE_3396:   ; [c64_ir] JumpTarget(1026)
003E3Ar 2               
003E3Ar 2               @target_1027:
003E3Ar 2               
003E3Ar 2               ; src/prelude.fth:21:26 in `0=`
003E3Ar 2               @OPCODE_3398:   ; [c64_ir] InlineExit
003E3Ar 2                   ; inline exit
003E3Ar 2  68               pla
003E3Br 2  68               pla
003E3Cr 2               
003E3Cr 2               @target_1028:
003E3Cr 2               
003E3Cr 2               ; src/prelude.fth:22:13 in `=`
003E3Cr 2               @OPCODE_3400:   ; [c64_ir] InlineExit
003E3Cr 2                   ; inline exit
003E3Cr 2  68               pla
003E3Dr 2  68               pla
003E3Er 2               
003E3Er 2               @target_1029:
003E3Er 2               
003E3Er 2               ; snake.fth:185:3 in `check-apple`
003E3Er 2               @OPCODE_3402:   ; [c64_ir] PushLiteral(-27666)
003E3Er 2  E8               inx
003E3Fr 2  E8               inx
003E40r 2  A9 EE            lda #238
003E42r 2  95 00            sta $00,x
003E44r 2  A9 93            lda #147
003E46r 2  95 01            sta $01,x
003E48r 2               
003E48r 2               ; snake.fth:185:16 in `check-apple`
003E48r 2               @OPCODE_3403:   ; [c64_ir] Load
003E48r 2  A1 00            lda ($00,x)
003E4Ar 2  95 00            sta $00,x
003E4Cr 2  A9 00            lda #0
003E4Er 2  95 01            sta $01,x
003E50r 2               
003E50r 2               ; snake.fth:185:18 in `check-apple`
003E50r 2               @OPCODE_3404:   ; [c64_ir] PushLiteral(-26662)
003E50r 2  E8               inx
003E51r 2  E8               inx
003E52r 2  A9 DA            lda #218
003E54r 2  95 00            sta $00,x
003E56r 2  A9 97            lda #151
003E58r 2  95 01            sta $01,x
003E5Ar 2               
003E5Ar 2               ; snake.fth:185:26 in `check-apple`
003E5Ar 2               @OPCODE_3405:   ; [c64_ir] Load
003E5Ar 2  A1 00            lda ($00,x)
003E5Cr 2  95 00            sta $00,x
003E5Er 2  A9 00            lda #0
003E60r 2  95 01            sta $01,x
003E62r 2               
003E62r 2               ; snake.fth:185:28 in `check-apple`
003E62r 2               @OPCODE_3406:   ; [c64_ir] InlineCall("=")
003E62r 2                   ; inline call(=)
003E62r 2  48               pha
003E63r 2  48               pha
003E64r 2               
003E64r 2               @target_1030:
003E64r 2               
003E64r 2               ; src/prelude.fth:22:8 in `=`
003E64r 2               @OPCODE_3408:   ; [c64_ir] InlineCall("-")
003E64r 2                   ; inline call(-)
003E64r 2  48               pha
003E65r 2  48               pha
003E66r 2               
003E66r 2               @target_1031:
003E66r 2               
003E66r 2               ; src/prelude.fth:16:12 in `-`
003E66r 2               @OPCODE_3410:   ; [c64_ir] InlineCall("negate")
003E66r 2                   ; inline call(negate)
003E66r 2  48               pha
003E67r 2  48               pha
003E68r 2               
003E68r 2               @target_1032:
003E68r 2               
003E68r 2               ; src/prelude.fth:15:12 in `negate`
003E68r 2               @OPCODE_3412:   ; [c64_ir] InlineCall("invert")
003E68r 2                   ; inline call(invert)
003E68r 2  48               pha
003E69r 2  48               pha
003E6Ar 2               
003E6Ar 2               @target_1033:
003E6Ar 2               
003E6Ar 2               ; src/prelude.fth:14:12 in `invert`
003E6Ar 2               @OPCODE_3414:   ; [c64_ir] PushLiteral(-1)
003E6Ar 2  E8               inx
003E6Br 2  E8               inx
003E6Cr 2  A9 FF            lda #255
003E6Er 2  95 00            sta $00,x
003E70r 2  A9 FF            lda #255
003E72r 2  95 01            sta $01,x
003E74r 2               
003E74r 2               ; src/prelude.fth:14:15 in `invert`
003E74r 2               @OPCODE_3415:   ; [c64_ir] Nand
003E74r 2                   ; 26
003E74r 2  CA               dex
003E75r 2  CA               dex
003E76r 2  B5 00            lda $00,x
003E78r 2  35 02            and $02,x
003E7Ar 2  49 FF            eor #$ff
003E7Cr 2  95 00            sta $00,x
003E7Er 2  B5 01            lda $01,x
003E80r 2  35 03            and $03,x
003E82r 2  49 FF            eor #$ff
003E84r 2  95 01            sta $01,x
003E86r 2               
003E86r 2               ; src/prelude.fth:14:20 in `invert`
003E86r 2               @OPCODE_3416:   ; [c64_ir] InlineExit
003E86r 2                   ; inline exit
003E86r 2  68               pla
003E87r 2  68               pla
003E88r 2               
003E88r 2               @target_1034:
003E88r 2               
003E88r 2               ; src/prelude.fth:15:19 in `negate`
003E88r 2               @OPCODE_3418:   ; [c64_ir] PushLiteral(1)
003E88r 2  E8               inx
003E89r 2  E8               inx
003E8Ar 2  A9 01            lda #1
003E8Cr 2  95 00            sta $00,x
003E8Er 2  A9 00            lda #0
003E90r 2  95 01            sta $01,x
003E92r 2               
003E92r 2               ; src/prelude.fth:15:21 in `negate`
003E92r 2               @OPCODE_3419:   ; [c64_ir] Add
003E92r 2                   ; 21
003E92r 2  CA               dex
003E93r 2  CA               dex
003E94r 2  18               clc
003E95r 2  B5 00            lda $00,x
003E97r 2  75 02            adc $02,x
003E99r 2  95 00            sta $00,x
003E9Br 2  B5 01            lda $01,x
003E9Dr 2  75 03            adc $03,x
003E9Fr 2  95 01            sta $01,x
003EA1r 2               
003EA1r 2               ; src/prelude.fth:15:23 in `negate`
003EA1r 2               @OPCODE_3420:   ; [c64_ir] InlineExit
003EA1r 2                   ; inline exit
003EA1r 2  68               pla
003EA2r 2  68               pla
003EA3r 2               
003EA3r 2               @target_1035:
003EA3r 2               
003EA3r 2               ; src/prelude.fth:16:19 in `-`
003EA3r 2               @OPCODE_3422:   ; [c64_ir] Add
003EA3r 2                   ; 21
003EA3r 2  CA               dex
003EA4r 2  CA               dex
003EA5r 2  18               clc
003EA6r 2  B5 00            lda $00,x
003EA8r 2  75 02            adc $02,x
003EAAr 2  95 00            sta $00,x
003EACr 2  B5 01            lda $01,x
003EAEr 2  75 03            adc $03,x
003EB0r 2  95 01            sta $01,x
003EB2r 2               
003EB2r 2               ; src/prelude.fth:16:21 in `-`
003EB2r 2               @OPCODE_3423:   ; [c64_ir] InlineExit
003EB2r 2                   ; inline exit
003EB2r 2  68               pla
003EB3r 2  68               pla
003EB4r 2               
003EB4r 2               @target_1036:
003EB4r 2               
003EB4r 2               ; src/prelude.fth:22:10 in `=`
003EB4r 2               @OPCODE_3425:   ; [c64_ir] InlineCall("0=")
003EB4r 2                   ; inline call(0=)
003EB4r 2  48               pha
003EB5r 2  48               pha
003EB6r 2               
003EB6r 2               @target_1037:
003EB6r 2               
003EB6r 2               ; src/prelude.fth:21:8 in `0=`
003EB6r 2               @OPCODE_3427:   ; [c64_ir] JumpIf0(1039)
003EB6r 2  CA               dex
003EB7r 2  CA               dex
003EB8r 2  B5 02            lda $02,x
003EBAr 2  15 03            ora $03,x
003EBCr 2  D0 03            bne *+5
003EBEr 2  4C rr rr         jmp @target_1039
003EC1r 2               
003EC1r 2               @target_1038:
003EC1r 2               
003EC1r 2               ; src/prelude.fth:21:11 in `0=`
003EC1r 2               @OPCODE_3429:   ; [c64_ir] PushLiteral(0)
003EC1r 2  E8               inx
003EC2r 2  E8               inx
003EC3r 2  A9 00            lda #0
003EC5r 2  95 00            sta $00,x
003EC7r 2  A9 00            lda #0
003EC9r 2  95 01            sta $01,x
003ECBr 2               
003ECBr 2               ; src/prelude.fth:21:13 in `0=`
003ECBr 2               @OPCODE_3430:   ; [c64_ir] JumpElse(1040)
003ECBr 2  4C rr rr         jmp @target_1040
003ECEr 2               
003ECEr 2               @target_1039:
003ECEr 2               
003ECEr 2               ; src/prelude.fth:21:18 in `0=`
003ECEr 2               @OPCODE_3432:   ; [c64_ir] PushLiteral(-1)
003ECEr 2  E8               inx
003ECFr 2  E8               inx
003ED0r 2  A9 FF            lda #255
003ED2r 2  95 00            sta $00,x
003ED4r 2  A9 FF            lda #255
003ED6r 2  95 01            sta $01,x
003ED8r 2               
003ED8r 2               ; src/prelude.fth:21:21 in `0=`
003ED8r 2               @OPCODE_3433:   ; [c64_ir] JumpTarget(1039)
003ED8r 2               
003ED8r 2               @target_1040:
003ED8r 2               
003ED8r 2               ; src/prelude.fth:21:26 in `0=`
003ED8r 2               @OPCODE_3435:   ; [c64_ir] InlineExit
003ED8r 2                   ; inline exit
003ED8r 2  68               pla
003ED9r 2  68               pla
003EDAr 2               
003EDAr 2               @target_1041:
003EDAr 2               
003EDAr 2               ; src/prelude.fth:22:13 in `=`
003EDAr 2               @OPCODE_3437:   ; [c64_ir] InlineExit
003EDAr 2                   ; inline exit
003EDAr 2  68               pla
003EDBr 2  68               pla
003EDCr 2               
003EDCr 2               @target_1042:
003EDCr 2               
003EDCr 2               ; snake.fth:186:3 in `check-apple`
003EDCr 2               @OPCODE_3439:   ; [c64_ir] InlineCall("and")
003EDCr 2                   ; inline call(and)
003EDCr 2  48               pha
003EDDr 2  48               pha
003EDEr 2               
003EDEr 2               @target_1043:
003EDEr 2               
003EDEr 2               ; src/prelude.fth:28:9 in `and`
003EDEr 2               @OPCODE_3441:   ; [c64_ir] Nand
003EDEr 2                   ; 26
003EDEr 2  CA               dex
003EDFr 2  CA               dex
003EE0r 2  B5 00            lda $00,x
003EE2r 2  35 02            and $02,x
003EE4r 2  49 FF            eor #$ff
003EE6r 2  95 00            sta $00,x
003EE8r 2  B5 01            lda $01,x
003EEAr 2  35 03            and $03,x
003EECr 2  49 FF            eor #$ff
003EEEr 2  95 01            sta $01,x
003EF0r 2               
003EF0r 2               ; src/prelude.fth:28:14 in `and`
003EF0r 2               @OPCODE_3442:   ; [c64_ir] InlineCall("invert")
003EF0r 2                   ; inline call(invert)
003EF0r 2  48               pha
003EF1r 2  48               pha
003EF2r 2               
003EF2r 2               @target_1044:
003EF2r 2               
003EF2r 2               ; src/prelude.fth:14:12 in `invert`
003EF2r 2               @OPCODE_3444:   ; [c64_ir] PushLiteral(-1)
003EF2r 2  E8               inx
003EF3r 2  E8               inx
003EF4r 2  A9 FF            lda #255
003EF6r 2  95 00            sta $00,x
003EF8r 2  A9 FF            lda #255
003EFAr 2  95 01            sta $01,x
003EFCr 2               
003EFCr 2               ; src/prelude.fth:14:15 in `invert`
003EFCr 2               @OPCODE_3445:   ; [c64_ir] Nand
003EFCr 2                   ; 26
003EFCr 2  CA               dex
003EFDr 2  CA               dex
003EFEr 2  B5 00            lda $00,x
003F00r 2  35 02            and $02,x
003F02r 2  49 FF            eor #$ff
003F04r 2  95 00            sta $00,x
003F06r 2  B5 01            lda $01,x
003F08r 2  35 03            and $03,x
003F0Ar 2  49 FF            eor #$ff
003F0Cr 2  95 01            sta $01,x
003F0Er 2               
003F0Er 2               ; src/prelude.fth:14:20 in `invert`
003F0Er 2               @OPCODE_3446:   ; [c64_ir] InlineExit
003F0Er 2                   ; inline exit
003F0Er 2  68               pla
003F0Fr 2  68               pla
003F10r 2               
003F10r 2               @target_1045:
003F10r 2               
003F10r 2               ; src/prelude.fth:28:21 in `and`
003F10r 2               @OPCODE_3448:   ; [c64_ir] InlineExit
003F10r 2                   ; inline exit
003F10r 2  68               pla
003F11r 2  68               pla
003F12r 2               
003F12r 2               @target_1046:
003F12r 2               
003F12r 2               ; snake.fth:186:7 in `check-apple`
003F12r 2               @OPCODE_3450:   ; [c64_ir] JumpIf0(1219)
003F12r 2  CA               dex
003F13r 2  CA               dex
003F14r 2  B5 02            lda $02,x
003F16r 2  15 03            ora $03,x
003F18r 2  D0 03            bne *+5
003F1Ar 2  4C rr rr         jmp @target_1219
003F1Dr 2               
003F1Dr 2               @target_1047:
003F1Dr 2               
003F1Dr 2               ; snake.fth:187:5 in `check-apple`
003F1Dr 2               @OPCODE_3452:   ; [c64_ir] InlineCall("move-apple")
003F1Dr 2                   ; inline call(move-apple)
003F1Dr 2  48               pha
003F1Er 2  48               pha
003F1Fr 2               
003F1Fr 2               @target_1048:
003F1Fr 2               
003F1Fr 2               ; snake.fth:177:3 in `move-apple`
003F1Fr 2               @OPCODE_3454:   ; [c64_ir] PushLiteral(-26664)
003F1Fr 2  E8               inx
003F20r 2  E8               inx
003F21r 2  A9 D8            lda #216
003F23r 2  95 00            sta $00,x
003F25r 2  A9 97            lda #151
003F27r 2  95 01            sta $01,x
003F29r 2               
003F29r 2               ; snake.fth:177:11 in `move-apple`
003F29r 2               @OPCODE_3455:   ; [c64_ir] Load
003F29r 2  A1 00            lda ($00,x)
003F2Br 2  95 00            sta $00,x
003F2Dr 2  A9 00            lda #0
003F2Fr 2  95 01            sta $01,x
003F31r 2               
003F31r 2               ; snake.fth:177:13 in `move-apple`
003F31r 2               @OPCODE_3456:   ; [c64_ir] PushLiteral(-26662)
003F31r 2  E8               inx
003F32r 2  E8               inx
003F33r 2  A9 DA            lda #218
003F35r 2  95 00            sta $00,x
003F37r 2  A9 97            lda #151
003F39r 2  95 01            sta $01,x
003F3Br 2               
003F3Br 2               ; snake.fth:177:21 in `move-apple`
003F3Br 2               @OPCODE_3457:   ; [c64_ir] Load
003F3Br 2  A1 00            lda ($00,x)
003F3Dr 2  95 00            sta $00,x
003F3Fr 2  A9 00            lda #0
003F41r 2  95 01            sta $01,x
003F43r 2               
003F43r 2               ; snake.fth:177:23 in `move-apple`
003F43r 2               @OPCODE_3458:   ; [c64_ir] InlineCall("draw-white")
003F43r 2                   ; inline call(draw-white)
003F43r 2  48               pha
003F44r 2  48               pha
003F45r 2               
003F45r 2               @target_1049:
003F45r 2               
003F45r 2               ; snake.fth:51:26 in `draw-white`
003F45r 2               @OPCODE_3460:   ; [c64_ir] PushLiteral(32)
003F45r 2  E8               inx
003F46r 2  E8               inx
003F47r 2  A9 20            lda #32
003F49r 2  95 00            sta $00,x
003F4Br 2  A9 00            lda #0
003F4Dr 2  95 01            sta $01,x
003F4Fr 2               
003F4Fr 2               ; snake.fth:51:38 in `draw-white`
003F4Fr 2               @OPCODE_3461:   ; [c64_ir] InlineCall("rot")
003F4Fr 2                   ; inline call(rot)
003F4Fr 2  48               pha
003F50r 2  48               pha
003F51r 2               
003F51r 2               @target_1050:
003F51r 2               
003F51r 2               ; src/prelude.fth:5:10 in `rot`
003F51r 2               @OPCODE_3463:   ; [c64_ir] AltPush
003F51r 2  CA               dex
003F52r 2  CA               dex
003F53r 2  B5 03            lda $03,x
003F55r 2  48               pha
003F56r 2  B5 02            lda $02,x
003F58r 2  48               pha
003F59r 2               
003F59r 2               ; src/prelude.fth:5:13 in `rot`
003F59r 2               @OPCODE_3464:   ; [c64_ir] InlineCall("swap")
003F59r 2                   ; inline call(swap)
003F59r 2  48               pha
003F5Ar 2  48               pha
003F5Br 2               
003F5Br 2               @target_1051:
003F5Br 2               
003F5Br 2               ; src/prelude.fth:3:10 in `swap`
003F5Br 2               @OPCODE_3466:   ; [c64_ir] AltPush
003F5Br 2  CA               dex
003F5Cr 2  CA               dex
003F5Dr 2  B5 03            lda $03,x
003F5Fr 2  48               pha
003F60r 2  B5 02            lda $02,x
003F62r 2  48               pha
003F63r 2               
003F63r 2               ; src/prelude.fth:3:13 in `swap`
003F63r 2               @OPCODE_3467:   ; [c64_ir] TempStore
003F63r 2  CA               dex
003F64r 2  CA               dex
003F65r 2  B5 03            lda $03,x
003F67r 2  85 96            sta TEMP_PAX2
003F69r 2  B5 02            lda $02,x
003F6Br 2  85 95            sta TEMP_PAX1
003F6Dr 2               
003F6Dr 2               ; src/prelude.fth:3:19 in `swap`
003F6Dr 2               @OPCODE_3468:   ; [c64_ir] AltPop
003F6Dr 2  E8               inx
003F6Er 2  E8               inx
003F6Fr 2  68               pla
003F70r 2  95 00            sta $00,x
003F72r 2  68               pla
003F73r 2  95 01            sta $01,x
003F75r 2               
003F75r 2               ; src/prelude.fth:3:22 in `swap`
003F75r 2               @OPCODE_3469:   ; [c64_ir] TempLoad
003F75r 2  E8               inx
003F76r 2  E8               inx
003F77r 2  A5 95            lda TEMP_PAX1
003F79r 2  95 00            sta $00,x
003F7Br 2  A5 96            lda TEMP_PAX2
003F7Dr 2  95 01            sta $01,x
003F7Fr 2               
003F7Fr 2               ; src/prelude.fth:3:28 in `swap`
003F7Fr 2               @OPCODE_3470:   ; [c64_ir] InlineExit
003F7Fr 2                   ; inline exit
003F7Fr 2  68               pla
003F80r 2  68               pla
003F81r 2               
003F81r 2               @target_1052:
003F81r 2               
003F81r 2               ; src/prelude.fth:5:18 in `rot`
003F81r 2               @OPCODE_3472:   ; [c64_ir] AltPop
003F81r 2  E8               inx
003F82r 2  E8               inx
003F83r 2  68               pla
003F84r 2  95 00            sta $00,x
003F86r 2  68               pla
003F87r 2  95 01            sta $01,x
003F89r 2               
003F89r 2               ; src/prelude.fth:5:21 in `rot`
003F89r 2               @OPCODE_3473:   ; [c64_ir] InlineCall("swap")
003F89r 2                   ; inline call(swap)
003F89r 2  48               pha
003F8Ar 2  48               pha
003F8Br 2               
003F8Br 2               @target_1053:
003F8Br 2               
003F8Br 2               ; src/prelude.fth:3:10 in `swap`
003F8Br 2               @OPCODE_3475:   ; [c64_ir] AltPush
003F8Br 2  CA               dex
003F8Cr 2  CA               dex
003F8Dr 2  B5 03            lda $03,x
003F8Fr 2  48               pha
003F90r 2  B5 02            lda $02,x
003F92r 2  48               pha
003F93r 2               
003F93r 2               ; src/prelude.fth:3:13 in `swap`
003F93r 2               @OPCODE_3476:   ; [c64_ir] TempStore
003F93r 2  CA               dex
003F94r 2  CA               dex
003F95r 2  B5 03            lda $03,x
003F97r 2  85 96            sta TEMP_PAX2
003F99r 2  B5 02            lda $02,x
003F9Br 2  85 95            sta TEMP_PAX1
003F9Dr 2               
003F9Dr 2               ; src/prelude.fth:3:19 in `swap`
003F9Dr 2               @OPCODE_3477:   ; [c64_ir] AltPop
003F9Dr 2  E8               inx
003F9Er 2  E8               inx
003F9Fr 2  68               pla
003FA0r 2  95 00            sta $00,x
003FA2r 2  68               pla
003FA3r 2  95 01            sta $01,x
003FA5r 2               
003FA5r 2               ; src/prelude.fth:3:22 in `swap`
003FA5r 2               @OPCODE_3478:   ; [c64_ir] TempLoad
003FA5r 2  E8               inx
003FA6r 2  E8               inx
003FA7r 2  A5 95            lda TEMP_PAX1
003FA9r 2  95 00            sta $00,x
003FABr 2  A5 96            lda TEMP_PAX2
003FADr 2  95 01            sta $01,x
003FAFr 2               
003FAFr 2               ; src/prelude.fth:3:28 in `swap`
003FAFr 2               @OPCODE_3479:   ; [c64_ir] InlineExit
003FAFr 2                   ; inline exit
003FAFr 2  68               pla
003FB0r 2  68               pla
003FB1r 2               
003FB1r 2               @target_1054:
003FB1r 2               
003FB1r 2               ; src/prelude.fth:5:26 in `rot`
003FB1r 2               @OPCODE_3481:   ; [c64_ir] InlineExit
003FB1r 2                   ; inline exit
003FB1r 2  68               pla
003FB2r 2  68               pla
003FB3r 2               
003FB3r 2               @target_1055:
003FB3r 2               
003FB3r 2               ; snake.fth:51:42 in `draw-white`
003FB3r 2               @OPCODE_3483:   ; [c64_ir] InlineCall("rot")
003FB3r 2                   ; inline call(rot)
003FB3r 2  48               pha
003FB4r 2  48               pha
003FB5r 2               
003FB5r 2               @target_1056:
003FB5r 2               
003FB5r 2               ; src/prelude.fth:5:10 in `rot`
003FB5r 2               @OPCODE_3485:   ; [c64_ir] AltPush
003FB5r 2  CA               dex
003FB6r 2  CA               dex
003FB7r 2  B5 03            lda $03,x
003FB9r 2  48               pha
003FBAr 2  B5 02            lda $02,x
003FBCr 2  48               pha
003FBDr 2               
003FBDr 2               ; src/prelude.fth:5:13 in `rot`
003FBDr 2               @OPCODE_3486:   ; [c64_ir] InlineCall("swap")
003FBDr 2                   ; inline call(swap)
003FBDr 2  48               pha
003FBEr 2  48               pha
003FBFr 2               
003FBFr 2               @target_1057:
003FBFr 2               
003FBFr 2               ; src/prelude.fth:3:10 in `swap`
003FBFr 2               @OPCODE_3488:   ; [c64_ir] AltPush
003FBFr 2  CA               dex
003FC0r 2  CA               dex
003FC1r 2  B5 03            lda $03,x
003FC3r 2  48               pha
003FC4r 2  B5 02            lda $02,x
003FC6r 2  48               pha
003FC7r 2               
003FC7r 2               ; src/prelude.fth:3:13 in `swap`
003FC7r 2               @OPCODE_3489:   ; [c64_ir] TempStore
003FC7r 2  CA               dex
003FC8r 2  CA               dex
003FC9r 2  B5 03            lda $03,x
003FCBr 2  85 96            sta TEMP_PAX2
003FCDr 2  B5 02            lda $02,x
003FCFr 2  85 95            sta TEMP_PAX1
003FD1r 2               
003FD1r 2               ; src/prelude.fth:3:19 in `swap`
003FD1r 2               @OPCODE_3490:   ; [c64_ir] AltPop
003FD1r 2  E8               inx
003FD2r 2  E8               inx
003FD3r 2  68               pla
003FD4r 2  95 00            sta $00,x
003FD6r 2  68               pla
003FD7r 2  95 01            sta $01,x
003FD9r 2               
003FD9r 2               ; src/prelude.fth:3:22 in `swap`
003FD9r 2               @OPCODE_3491:   ; [c64_ir] TempLoad
003FD9r 2  E8               inx
003FDAr 2  E8               inx
003FDBr 2  A5 95            lda TEMP_PAX1
003FDDr 2  95 00            sta $00,x
003FDFr 2  A5 96            lda TEMP_PAX2
003FE1r 2  95 01            sta $01,x
003FE3r 2               
003FE3r 2               ; src/prelude.fth:3:28 in `swap`
003FE3r 2               @OPCODE_3492:   ; [c64_ir] InlineExit
003FE3r 2                   ; inline exit
003FE3r 2  68               pla
003FE4r 2  68               pla
003FE5r 2               
003FE5r 2               @target_1058:
003FE5r 2               
003FE5r 2               ; src/prelude.fth:5:18 in `rot`
003FE5r 2               @OPCODE_3494:   ; [c64_ir] AltPop
003FE5r 2  E8               inx
003FE6r 2  E8               inx
003FE7r 2  68               pla
003FE8r 2  95 00            sta $00,x
003FEAr 2  68               pla
003FEBr 2  95 01            sta $01,x
003FEDr 2               
003FEDr 2               ; src/prelude.fth:5:21 in `rot`
003FEDr 2               @OPCODE_3495:   ; [c64_ir] InlineCall("swap")
003FEDr 2                   ; inline call(swap)
003FEDr 2  48               pha
003FEEr 2  48               pha
003FEFr 2               
003FEFr 2               @target_1059:
003FEFr 2               
003FEFr 2               ; src/prelude.fth:3:10 in `swap`
003FEFr 2               @OPCODE_3497:   ; [c64_ir] AltPush
003FEFr 2  CA               dex
003FF0r 2  CA               dex
003FF1r 2  B5 03            lda $03,x
003FF3r 2  48               pha
003FF4r 2  B5 02            lda $02,x
003FF6r 2  48               pha
003FF7r 2               
003FF7r 2               ; src/prelude.fth:3:13 in `swap`
003FF7r 2               @OPCODE_3498:   ; [c64_ir] TempStore
003FF7r 2  CA               dex
003FF8r 2  CA               dex
003FF9r 2  B5 03            lda $03,x
003FFBr 2  85 96            sta TEMP_PAX2
003FFDr 2  B5 02            lda $02,x
003FFFr 2  85 95            sta TEMP_PAX1
004001r 2               
004001r 2               ; src/prelude.fth:3:19 in `swap`
004001r 2               @OPCODE_3499:   ; [c64_ir] AltPop
004001r 2  E8               inx
004002r 2  E8               inx
004003r 2  68               pla
004004r 2  95 00            sta $00,x
004006r 2  68               pla
004007r 2  95 01            sta $01,x
004009r 2               
004009r 2               ; src/prelude.fth:3:22 in `swap`
004009r 2               @OPCODE_3500:   ; [c64_ir] TempLoad
004009r 2  E8               inx
00400Ar 2  E8               inx
00400Br 2  A5 95            lda TEMP_PAX1
00400Dr 2  95 00            sta $00,x
00400Fr 2  A5 96            lda TEMP_PAX2
004011r 2  95 01            sta $01,x
004013r 2               
004013r 2               ; src/prelude.fth:3:28 in `swap`
004013r 2               @OPCODE_3501:   ; [c64_ir] InlineExit
004013r 2                   ; inline exit
004013r 2  68               pla
004014r 2  68               pla
004015r 2               
004015r 2               @target_1060:
004015r 2               
004015r 2               ; src/prelude.fth:5:26 in `rot`
004015r 2               @OPCODE_3503:   ; [c64_ir] InlineExit
004015r 2                   ; inline exit
004015r 2  68               pla
004016r 2  68               pla
004017r 2               
004017r 2               @target_1061:
004017r 2               
004017r 2               ; snake.fth:51:46 in `draw-white`
004017r 2               @OPCODE_3505:   ; [c64_ir] InlineCall("draw")
004017r 2                   ; inline call(draw)
004017r 2  48               pha
004018r 2  48               pha
004019r 2               
004019r 2               @target_1062:
004019r 2               
004019r 2               ; snake.fth:50:26 in `draw`
004019r 2               @OPCODE_3507:   ; [c64_ir] InlineCall("convert-x-y")
004019r 2                   ; inline call(convert-x-y)
004019r 2  48               pha
00401Ar 2  48               pha
00401Br 2               
00401Br 2               @target_1063:
00401Br 2               
00401Br 2               ; snake.fth:48:34 in `convert-x-y`
00401Br 2               @OPCODE_3509:   ; [c64_ir] PushLiteral(40)
00401Br 2  E8               inx
00401Cr 2  E8               inx
00401Dr 2  A9 28            lda #40
00401Fr 2  95 00            sta $00,x
004021r 2  A9 00            lda #0
004023r 2  95 01            sta $01,x
004025r 2               
004025r 2               ; snake.fth:48:37 in `convert-x-y`
004025r 2               @OPCODE_3510:   ; [c64_ir] InlineCall("*")
004025r 2                   ; inline call(*)
004025r 2  48               pha
004026r 2  48               pha
004027r 2               
004027r 2               @target_1064:
004027r 2               
004027r 2               ; src/prelude.fth:44:5 in `*`
004027r 2               @OPCODE_3512:   ; [c64_ir] AltPush
004027r 2  CA               dex
004028r 2  CA               dex
004029r 2  B5 03            lda $03,x
00402Br 2  48               pha
00402Cr 2  B5 02            lda $02,x
00402Er 2  48               pha
00402Fr 2               
00402Fr 2               ; src/prelude.fth:44:8 in `*`
00402Fr 2               @OPCODE_3513:   ; [c64_ir] PushLiteral(0)
00402Fr 2  E8               inx
004030r 2  E8               inx
004031r 2  A9 00            lda #0
004033r 2  95 00            sta $00,x
004035r 2  A9 00            lda #0
004037r 2  95 01            sta $01,x
004039r 2               
004039r 2               ; src/prelude.fth:44:10 in `*`
004039r 2               @OPCODE_3514:   ; [c64_ir] AltPop
004039r 2  E8               inx
00403Ar 2  E8               inx
00403Br 2  68               pla
00403Cr 2  95 00            sta $00,x
00403Er 2  68               pla
00403Fr 2  95 01            sta $01,x
004041r 2               
004041r 2               ; src/prelude.fth:44:13 in `*`
004041r 2               @OPCODE_3515:   ; [c64_ir] PushLiteral(0)
004041r 2  E8               inx
004042r 2  E8               inx
004043r 2  A9 00            lda #0
004045r 2  95 00            sta $00,x
004047r 2  A9 00            lda #0
004049r 2  95 01            sta $01,x
00404Br 2               
00404Br 2               ; src/prelude.fth:44:15 in `*`
00404Br 2               @OPCODE_3516:   ; [c64_ir] AltPush
00404Br 2  CA               dex
00404Cr 2  CA               dex
00404Dr 2  B5 03            lda $03,x
00404Fr 2  48               pha
004050r 2  B5 02            lda $02,x
004052r 2  48               pha
004053r 2               
004053r 2               ; src/prelude.fth:44:15 in `*`
004053r 2               @OPCODE_3517:   ; [c64_ir] AltPush
004053r 2  CA               dex
004054r 2  CA               dex
004055r 2  B5 03            lda $03,x
004057r 2  48               pha
004058r 2  B5 02            lda $02,x
00405Ar 2  48               pha
00405Br 2               
00405Br 2               ; src/prelude.fth:44:15 in `*`
00405Br 2               @OPCODE_3518:   ; [c64_ir] LoopTarget(1064)
00405Br 2               
00405Br 2               @target_1065:
00405Br 2               
00405Br 2               ; src/prelude.fth:44:18 in `*`
00405Br 2               @OPCODE_3520:   ; [c64_ir] InlineCall("over")
00405Br 2                   ; inline call(over)
00405Br 2  48               pha
00405Cr 2  48               pha
00405Dr 2               
00405Dr 2               @target_1066:
00405Dr 2               
00405Dr 2               ; src/prelude.fth:4:10 in `over`
00405Dr 2               @OPCODE_3522:   ; [c64_ir] AltPush
00405Dr 2  CA               dex
00405Er 2  CA               dex
00405Fr 2  B5 03            lda $03,x
004061r 2  48               pha
004062r 2  B5 02            lda $02,x
004064r 2  48               pha
004065r 2               
004065r 2               ; src/prelude.fth:4:13 in `over`
004065r 2               @OPCODE_3523:   ; [c64_ir] TempStore
004065r 2  CA               dex
004066r 2  CA               dex
004067r 2  B5 03            lda $03,x
004069r 2  85 96            sta TEMP_PAX2
00406Br 2  B5 02            lda $02,x
00406Dr 2  85 95            sta TEMP_PAX1
00406Fr 2               
00406Fr 2               ; src/prelude.fth:4:19 in `over`
00406Fr 2               @OPCODE_3524:   ; [c64_ir] TempLoad
00406Fr 2  E8               inx
004070r 2  E8               inx
004071r 2  A5 95            lda TEMP_PAX1
004073r 2  95 00            sta $00,x
004075r 2  A5 96            lda TEMP_PAX2
004077r 2  95 01            sta $01,x
004079r 2               
004079r 2               ; src/prelude.fth:4:25 in `over`
004079r 2               @OPCODE_3525:   ; [c64_ir] AltPop
004079r 2  E8               inx
00407Ar 2  E8               inx
00407Br 2  68               pla
00407Cr 2  95 00            sta $00,x
00407Er 2  68               pla
00407Fr 2  95 01            sta $01,x
004081r 2               
004081r 2               ; src/prelude.fth:4:28 in `over`
004081r 2               @OPCODE_3526:   ; [c64_ir] TempLoad
004081r 2  E8               inx
004082r 2  E8               inx
004083r 2  A5 95            lda TEMP_PAX1
004085r 2  95 00            sta $00,x
004087r 2  A5 96            lda TEMP_PAX2
004089r 2  95 01            sta $01,x
00408Br 2               
00408Br 2               ; src/prelude.fth:4:34 in `over`
00408Br 2               @OPCODE_3527:   ; [c64_ir] InlineExit
00408Br 2                   ; inline exit
00408Br 2  68               pla
00408Cr 2  68               pla
00408Dr 2               
00408Dr 2               @target_1067:
00408Dr 2               
00408Dr 2               ; src/prelude.fth:44:23 in `*`
00408Dr 2               @OPCODE_3529:   ; [c64_ir] Add
00408Dr 2                   ; 21
00408Dr 2  CA               dex
00408Er 2  CA               dex
00408Fr 2  18               clc
004090r 2  B5 00            lda $00,x
004092r 2  75 02            adc $02,x
004094r 2  95 00            sta $00,x
004096r 2  B5 01            lda $01,x
004098r 2  75 03            adc $03,x
00409Ar 2  95 01            sta $01,x
00409Cr 2               
00409Cr 2               ; src/prelude.fth:44:25 in `*`
00409Cr 2               @OPCODE_3530:   ; [c64_ir] InlineCall("loopimpl")
00409Cr 2                   ; inline call(loopimpl)
00409Cr 2  48               pha
00409Dr 2  48               pha
00409Er 2               
00409Er 2               @target_1068:
00409Er 2               
00409Er 2               ; src/prelude.fth:33:12 in `loopimpl`
00409Er 2               @OPCODE_3532:   ; [c64_ir] AltPop
00409Er 2  E8               inx
00409Fr 2  E8               inx
0040A0r 2  68               pla
0040A1r 2  95 00            sta $00,x
0040A3r 2  68               pla
0040A4r 2  95 01            sta $01,x
0040A6r 2               
0040A6r 2               ; src/prelude.fth:33:15 in `loopimpl`
0040A6r 2               @OPCODE_3533:   ; [c64_ir] AltPop
0040A6r 2  E8               inx
0040A7r 2  E8               inx
0040A8r 2  68               pla
0040A9r 2  95 00            sta $00,x
0040ABr 2  68               pla
0040ACr 2  95 01            sta $01,x
0040AEr 2               
0040AEr 2               ; src/prelude.fth:33:18 in `loopimpl`
0040AEr 2               @OPCODE_3534:   ; [c64_ir] AltPop
0040AEr 2  E8               inx
0040AFr 2  E8               inx
0040B0r 2  68               pla
0040B1r 2  95 00            sta $00,x
0040B3r 2  68               pla
0040B4r 2  95 01            sta $01,x
0040B6r 2               
0040B6r 2               ; src/prelude.fth:33:21 in `loopimpl`
0040B6r 2               @OPCODE_3535:   ; [c64_ir] InlineCall("1+")
0040B6r 2                   ; inline call(1+)
0040B6r 2  48               pha
0040B7r 2  48               pha
0040B8r 2               
0040B8r 2               @target_1069:
0040B8r 2               
0040B8r 2               ; src/prelude.fth:18:8 in `1+`
0040B8r 2               @OPCODE_3537:   ; [c64_ir] PushLiteral(1)
0040B8r 2  E8               inx
0040B9r 2  E8               inx
0040BAr 2  A9 01            lda #1
0040BCr 2  95 00            sta $00,x
0040BEr 2  A9 00            lda #0
0040C0r 2  95 01            sta $01,x
0040C2r 2               
0040C2r 2               ; src/prelude.fth:18:10 in `1+`
0040C2r 2               @OPCODE_3538:   ; [c64_ir] Add
0040C2r 2                   ; 21
0040C2r 2  CA               dex
0040C3r 2  CA               dex
0040C4r 2  18               clc
0040C5r 2  B5 00            lda $00,x
0040C7r 2  75 02            adc $02,x
0040C9r 2  95 00            sta $00,x
0040CBr 2  B5 01            lda $01,x
0040CDr 2  75 03            adc $03,x
0040CFr 2  95 01            sta $01,x
0040D1r 2               
0040D1r 2               ; src/prelude.fth:18:12 in `1+`
0040D1r 2               @OPCODE_3539:   ; [c64_ir] InlineExit
0040D1r 2                   ; inline exit
0040D1r 2  68               pla
0040D2r 2  68               pla
0040D3r 2               
0040D3r 2               @target_1070:
0040D3r 2               
0040D3r 2               ; src/prelude.fth:33:24 in `loopimpl`
0040D3r 2               @OPCODE_3541:   ; [c64_ir] InlineCall("2dup")
0040D3r 2                   ; inline call(2dup)
0040D3r 2  48               pha
0040D4r 2  48               pha
0040D5r 2               
0040D5r 2               @target_1071:
0040D5r 2               
0040D5r 2               ; src/prelude.fth:8:10 in `2dup`
0040D5r 2               @OPCODE_3543:   ; [c64_ir] InlineCall("over")
0040D5r 2                   ; inline call(over)
0040D5r 2  48               pha
0040D6r 2  48               pha
0040D7r 2               
0040D7r 2               @target_1072:
0040D7r 2               
0040D7r 2               ; src/prelude.fth:4:10 in `over`
0040D7r 2               @OPCODE_3545:   ; [c64_ir] AltPush
0040D7r 2  CA               dex
0040D8r 2  CA               dex
0040D9r 2  B5 03            lda $03,x
0040DBr 2  48               pha
0040DCr 2  B5 02            lda $02,x
0040DEr 2  48               pha
0040DFr 2               
0040DFr 2               ; src/prelude.fth:4:13 in `over`
0040DFr 2               @OPCODE_3546:   ; [c64_ir] TempStore
0040DFr 2  CA               dex
0040E0r 2  CA               dex
0040E1r 2  B5 03            lda $03,x
0040E3r 2  85 96            sta TEMP_PAX2
0040E5r 2  B5 02            lda $02,x
0040E7r 2  85 95            sta TEMP_PAX1
0040E9r 2               
0040E9r 2               ; src/prelude.fth:4:19 in `over`
0040E9r 2               @OPCODE_3547:   ; [c64_ir] TempLoad
0040E9r 2  E8               inx
0040EAr 2  E8               inx
0040EBr 2  A5 95            lda TEMP_PAX1
0040EDr 2  95 00            sta $00,x
0040EFr 2  A5 96            lda TEMP_PAX2
0040F1r 2  95 01            sta $01,x
0040F3r 2               
0040F3r 2               ; src/prelude.fth:4:25 in `over`
0040F3r 2               @OPCODE_3548:   ; [c64_ir] AltPop
0040F3r 2  E8               inx
0040F4r 2  E8               inx
0040F5r 2  68               pla
0040F6r 2  95 00            sta $00,x
0040F8r 2  68               pla
0040F9r 2  95 01            sta $01,x
0040FBr 2               
0040FBr 2               ; src/prelude.fth:4:28 in `over`
0040FBr 2               @OPCODE_3549:   ; [c64_ir] TempLoad
0040FBr 2  E8               inx
0040FCr 2  E8               inx
0040FDr 2  A5 95            lda TEMP_PAX1
0040FFr 2  95 00            sta $00,x
004101r 2  A5 96            lda TEMP_PAX2
004103r 2  95 01            sta $01,x
004105r 2               
004105r 2               ; src/prelude.fth:4:34 in `over`
004105r 2               @OPCODE_3550:   ; [c64_ir] InlineExit
004105r 2                   ; inline exit
004105r 2  68               pla
004106r 2  68               pla
004107r 2               
004107r 2               @target_1073:
004107r 2               
004107r 2               ; src/prelude.fth:8:15 in `2dup`
004107r 2               @OPCODE_3552:   ; [c64_ir] InlineCall("over")
004107r 2                   ; inline call(over)
004107r 2  48               pha
004108r 2  48               pha
004109r 2               
004109r 2               @target_1074:
004109r 2               
004109r 2               ; src/prelude.fth:4:10 in `over`
004109r 2               @OPCODE_3554:   ; [c64_ir] AltPush
004109r 2  CA               dex
00410Ar 2  CA               dex
00410Br 2  B5 03            lda $03,x
00410Dr 2  48               pha
00410Er 2  B5 02            lda $02,x
004110r 2  48               pha
004111r 2               
004111r 2               ; src/prelude.fth:4:13 in `over`
004111r 2               @OPCODE_3555:   ; [c64_ir] TempStore
004111r 2  CA               dex
004112r 2  CA               dex
004113r 2  B5 03            lda $03,x
004115r 2  85 96            sta TEMP_PAX2
004117r 2  B5 02            lda $02,x
004119r 2  85 95            sta TEMP_PAX1
00411Br 2               
00411Br 2               ; src/prelude.fth:4:19 in `over`
00411Br 2               @OPCODE_3556:   ; [c64_ir] TempLoad
00411Br 2  E8               inx
00411Cr 2  E8               inx
00411Dr 2  A5 95            lda TEMP_PAX1
00411Fr 2  95 00            sta $00,x
004121r 2  A5 96            lda TEMP_PAX2
004123r 2  95 01            sta $01,x
004125r 2               
004125r 2               ; src/prelude.fth:4:25 in `over`
004125r 2               @OPCODE_3557:   ; [c64_ir] AltPop
004125r 2  E8               inx
004126r 2  E8               inx
004127r 2  68               pla
004128r 2  95 00            sta $00,x
00412Ar 2  68               pla
00412Br 2  95 01            sta $01,x
00412Dr 2               
00412Dr 2               ; src/prelude.fth:4:28 in `over`
00412Dr 2               @OPCODE_3558:   ; [c64_ir] TempLoad
00412Dr 2  E8               inx
00412Er 2  E8               inx
00412Fr 2  A5 95            lda TEMP_PAX1
004131r 2  95 00            sta $00,x
004133r 2  A5 96            lda TEMP_PAX2
004135r 2  95 01            sta $01,x
004137r 2               
004137r 2               ; src/prelude.fth:4:34 in `over`
004137r 2               @OPCODE_3559:   ; [c64_ir] InlineExit
004137r 2                   ; inline exit
004137r 2  68               pla
004138r 2  68               pla
004139r 2               
004139r 2               @target_1075:
004139r 2               
004139r 2               ; src/prelude.fth:8:20 in `2dup`
004139r 2               @OPCODE_3561:   ; [c64_ir] InlineExit
004139r 2                   ; inline exit
004139r 2  68               pla
00413Ar 2  68               pla
00413Br 2               
00413Br 2               @target_1076:
00413Br 2               
00413Br 2               ; src/prelude.fth:33:29 in `loopimpl`
00413Br 2               @OPCODE_3563:   ; [c64_ir] AltPush
00413Br 2  CA               dex
00413Cr 2  CA               dex
00413Dr 2  B5 03            lda $03,x
00413Fr 2  48               pha
004140r 2  B5 02            lda $02,x
004142r 2  48               pha
004143r 2               
004143r 2               ; src/prelude.fth:33:32 in `loopimpl`
004143r 2               @OPCODE_3564:   ; [c64_ir] AltPush
004143r 2  CA               dex
004144r 2  CA               dex
004145r 2  B5 03            lda $03,x
004147r 2  48               pha
004148r 2  B5 02            lda $02,x
00414Ar 2  48               pha
00414Br 2               
00414Br 2               ; src/prelude.fth:33:35 in `loopimpl`
00414Br 2               @OPCODE_3565:   ; [c64_ir] InlineCall("=")
00414Br 2                   ; inline call(=)
00414Br 2  48               pha
00414Cr 2  48               pha
00414Dr 2               
00414Dr 2               @target_1077:
00414Dr 2               
00414Dr 2               ; src/prelude.fth:22:8 in `=`
00414Dr 2               @OPCODE_3567:   ; [c64_ir] InlineCall("-")
00414Dr 2                   ; inline call(-)
00414Dr 2  48               pha
00414Er 2  48               pha
00414Fr 2               
00414Fr 2               @target_1078:
00414Fr 2               
00414Fr 2               ; src/prelude.fth:16:12 in `-`
00414Fr 2               @OPCODE_3569:   ; [c64_ir] InlineCall("negate")
00414Fr 2                   ; inline call(negate)
00414Fr 2  48               pha
004150r 2  48               pha
004151r 2               
004151r 2               @target_1079:
004151r 2               
004151r 2               ; src/prelude.fth:15:12 in `negate`
004151r 2               @OPCODE_3571:   ; [c64_ir] InlineCall("invert")
004151r 2                   ; inline call(invert)
004151r 2  48               pha
004152r 2  48               pha
004153r 2               
004153r 2               @target_1080:
004153r 2               
004153r 2               ; src/prelude.fth:14:12 in `invert`
004153r 2               @OPCODE_3573:   ; [c64_ir] PushLiteral(-1)
004153r 2  E8               inx
004154r 2  E8               inx
004155r 2  A9 FF            lda #255
004157r 2  95 00            sta $00,x
004159r 2  A9 FF            lda #255
00415Br 2  95 01            sta $01,x
00415Dr 2               
00415Dr 2               ; src/prelude.fth:14:15 in `invert`
00415Dr 2               @OPCODE_3574:   ; [c64_ir] Nand
00415Dr 2                   ; 26
00415Dr 2  CA               dex
00415Er 2  CA               dex
00415Fr 2  B5 00            lda $00,x
004161r 2  35 02            and $02,x
004163r 2  49 FF            eor #$ff
004165r 2  95 00            sta $00,x
004167r 2  B5 01            lda $01,x
004169r 2  35 03            and $03,x
00416Br 2  49 FF            eor #$ff
00416Dr 2  95 01            sta $01,x
00416Fr 2               
00416Fr 2               ; src/prelude.fth:14:20 in `invert`
00416Fr 2               @OPCODE_3575:   ; [c64_ir] InlineExit
00416Fr 2                   ; inline exit
00416Fr 2  68               pla
004170r 2  68               pla
004171r 2               
004171r 2               @target_1081:
004171r 2               
004171r 2               ; src/prelude.fth:15:19 in `negate`
004171r 2               @OPCODE_3577:   ; [c64_ir] PushLiteral(1)
004171r 2  E8               inx
004172r 2  E8               inx
004173r 2  A9 01            lda #1
004175r 2  95 00            sta $00,x
004177r 2  A9 00            lda #0
004179r 2  95 01            sta $01,x
00417Br 2               
00417Br 2               ; src/prelude.fth:15:21 in `negate`
00417Br 2               @OPCODE_3578:   ; [c64_ir] Add
00417Br 2                   ; 21
00417Br 2  CA               dex
00417Cr 2  CA               dex
00417Dr 2  18               clc
00417Er 2  B5 00            lda $00,x
004180r 2  75 02            adc $02,x
004182r 2  95 00            sta $00,x
004184r 2  B5 01            lda $01,x
004186r 2  75 03            adc $03,x
004188r 2  95 01            sta $01,x
00418Ar 2               
00418Ar 2               ; src/prelude.fth:15:23 in `negate`
00418Ar 2               @OPCODE_3579:   ; [c64_ir] InlineExit
00418Ar 2                   ; inline exit
00418Ar 2  68               pla
00418Br 2  68               pla
00418Cr 2               
00418Cr 2               @target_1082:
00418Cr 2               
00418Cr 2               ; src/prelude.fth:16:19 in `-`
00418Cr 2               @OPCODE_3581:   ; [c64_ir] Add
00418Cr 2                   ; 21
00418Cr 2  CA               dex
00418Dr 2  CA               dex
00418Er 2  18               clc
00418Fr 2  B5 00            lda $00,x
004191r 2  75 02            adc $02,x
004193r 2  95 00            sta $00,x
004195r 2  B5 01            lda $01,x
004197r 2  75 03            adc $03,x
004199r 2  95 01            sta $01,x
00419Br 2               
00419Br 2               ; src/prelude.fth:16:21 in `-`
00419Br 2               @OPCODE_3582:   ; [c64_ir] InlineExit
00419Br 2                   ; inline exit
00419Br 2  68               pla
00419Cr 2  68               pla
00419Dr 2               
00419Dr 2               @target_1083:
00419Dr 2               
00419Dr 2               ; src/prelude.fth:22:10 in `=`
00419Dr 2               @OPCODE_3584:   ; [c64_ir] InlineCall("0=")
00419Dr 2                   ; inline call(0=)
00419Dr 2  48               pha
00419Er 2  48               pha
00419Fr 2               
00419Fr 2               @target_1084:
00419Fr 2               
00419Fr 2               ; src/prelude.fth:21:8 in `0=`
00419Fr 2               @OPCODE_3586:   ; [c64_ir] JumpIf0(1086)
00419Fr 2  CA               dex
0041A0r 2  CA               dex
0041A1r 2  B5 02            lda $02,x
0041A3r 2  15 03            ora $03,x
0041A5r 2  D0 03            bne *+5
0041A7r 2  4C rr rr         jmp @target_1086
0041AAr 2               
0041AAr 2               @target_1085:
0041AAr 2               
0041AAr 2               ; src/prelude.fth:21:11 in `0=`
0041AAr 2               @OPCODE_3588:   ; [c64_ir] PushLiteral(0)
0041AAr 2  E8               inx
0041ABr 2  E8               inx
0041ACr 2  A9 00            lda #0
0041AEr 2  95 00            sta $00,x
0041B0r 2  A9 00            lda #0
0041B2r 2  95 01            sta $01,x
0041B4r 2               
0041B4r 2               ; src/prelude.fth:21:13 in `0=`
0041B4r 2               @OPCODE_3589:   ; [c64_ir] JumpElse(1087)
0041B4r 2  4C rr rr         jmp @target_1087
0041B7r 2               
0041B7r 2               @target_1086:
0041B7r 2               
0041B7r 2               ; src/prelude.fth:21:18 in `0=`
0041B7r 2               @OPCODE_3591:   ; [c64_ir] PushLiteral(-1)
0041B7r 2  E8               inx
0041B8r 2  E8               inx
0041B9r 2  A9 FF            lda #255
0041BBr 2  95 00            sta $00,x
0041BDr 2  A9 FF            lda #255
0041BFr 2  95 01            sta $01,x
0041C1r 2               
0041C1r 2               ; src/prelude.fth:21:21 in `0=`
0041C1r 2               @OPCODE_3592:   ; [c64_ir] JumpTarget(1086)
0041C1r 2               
0041C1r 2               @target_1087:
0041C1r 2               
0041C1r 2               ; src/prelude.fth:21:26 in `0=`
0041C1r 2               @OPCODE_3594:   ; [c64_ir] InlineExit
0041C1r 2                   ; inline exit
0041C1r 2  68               pla
0041C2r 2  68               pla
0041C3r 2               
0041C3r 2               @target_1088:
0041C3r 2               
0041C3r 2               ; src/prelude.fth:22:13 in `=`
0041C3r 2               @OPCODE_3596:   ; [c64_ir] InlineExit
0041C3r 2                   ; inline exit
0041C3r 2  68               pla
0041C4r 2  68               pla
0041C5r 2               
0041C5r 2               @target_1089:
0041C5r 2               
0041C5r 2               ; src/prelude.fth:33:37 in `loopimpl`
0041C5r 2               @OPCODE_3598:   ; [c64_ir] InlineCall("swap")
0041C5r 2                   ; inline call(swap)
0041C5r 2  48               pha
0041C6r 2  48               pha
0041C7r 2               
0041C7r 2               @target_1090:
0041C7r 2               
0041C7r 2               ; src/prelude.fth:3:10 in `swap`
0041C7r 2               @OPCODE_3600:   ; [c64_ir] AltPush
0041C7r 2  CA               dex
0041C8r 2  CA               dex
0041C9r 2  B5 03            lda $03,x
0041CBr 2  48               pha
0041CCr 2  B5 02            lda $02,x
0041CEr 2  48               pha
0041CFr 2               
0041CFr 2               ; src/prelude.fth:3:13 in `swap`
0041CFr 2               @OPCODE_3601:   ; [c64_ir] TempStore
0041CFr 2  CA               dex
0041D0r 2  CA               dex
0041D1r 2  B5 03            lda $03,x
0041D3r 2  85 96            sta TEMP_PAX2
0041D5r 2  B5 02            lda $02,x
0041D7r 2  85 95            sta TEMP_PAX1
0041D9r 2               
0041D9r 2               ; src/prelude.fth:3:19 in `swap`
0041D9r 2               @OPCODE_3602:   ; [c64_ir] AltPop
0041D9r 2  E8               inx
0041DAr 2  E8               inx
0041DBr 2  68               pla
0041DCr 2  95 00            sta $00,x
0041DEr 2  68               pla
0041DFr 2  95 01            sta $01,x
0041E1r 2               
0041E1r 2               ; src/prelude.fth:3:22 in `swap`
0041E1r 2               @OPCODE_3603:   ; [c64_ir] TempLoad
0041E1r 2  E8               inx
0041E2r 2  E8               inx
0041E3r 2  A5 95            lda TEMP_PAX1
0041E5r 2  95 00            sta $00,x
0041E7r 2  A5 96            lda TEMP_PAX2
0041E9r 2  95 01            sta $01,x
0041EBr 2               
0041EBr 2               ; src/prelude.fth:3:28 in `swap`
0041EBr 2               @OPCODE_3604:   ; [c64_ir] InlineExit
0041EBr 2                   ; inline exit
0041EBr 2  68               pla
0041ECr 2  68               pla
0041EDr 2               
0041EDr 2               @target_1091:
0041EDr 2               
0041EDr 2               ; src/prelude.fth:33:42 in `loopimpl`
0041EDr 2               @OPCODE_3606:   ; [c64_ir] AltPush
0041EDr 2  CA               dex
0041EEr 2  CA               dex
0041EFr 2  B5 03            lda $03,x
0041F1r 2  48               pha
0041F2r 2  B5 02            lda $02,x
0041F4r 2  48               pha
0041F5r 2               
0041F5r 2               ; src/prelude.fth:33:45 in `loopimpl`
0041F5r 2               @OPCODE_3607:   ; [c64_ir] InlineExit
0041F5r 2                   ; inline exit
0041F5r 2  68               pla
0041F6r 2  68               pla
0041F7r 2               
0041F7r 2               @target_1092:
0041F7r 2               
0041F7r 2               ; src/prelude.fth:44:25 in `*`
0041F7r 2               @OPCODE_3609:   ; [c64_ir] LoopIf0(1065)
0041F7r 2  CA               dex
0041F8r 2  CA               dex
0041F9r 2  B5 02            lda $02,x
0041FBr 2  15 03            ora $03,x
0041FDr 2  D0 03            bne *+5
0041FFr 2  4C rr rr         jmp @target_1065
004202r 2               
004202r 2               @target_1093:
004202r 2               
004202r 2               ; src/prelude.fth:44:25 in `*`
004202r 2               @OPCODE_3611:   ; [c64_ir] AltPop
004202r 2  E8               inx
004203r 2  E8               inx
004204r 2  68               pla
004205r 2  95 00            sta $00,x
004207r 2  68               pla
004208r 2  95 01            sta $01,x
00420Ar 2               
00420Ar 2               ; src/prelude.fth:44:25 in `*`
00420Ar 2               @OPCODE_3612:   ; [c64_ir] Drop
00420Ar 2  CA               dex
00420Br 2  CA               dex
00420Cr 2               
00420Cr 2               ; src/prelude.fth:44:25 in `*`
00420Cr 2               @OPCODE_3613:   ; [c64_ir] AltPop
00420Cr 2  E8               inx
00420Dr 2  E8               inx
00420Er 2  68               pla
00420Fr 2  95 00            sta $00,x
004211r 2  68               pla
004212r 2  95 01            sta $01,x
004214r 2               
004214r 2               ; src/prelude.fth:44:25 in `*`
004214r 2               @OPCODE_3614:   ; [c64_ir] Drop
004214r 2  CA               dex
004215r 2  CA               dex
004216r 2               
004216r 2               ; src/prelude.fth:44:30 in `*`
004216r 2               @OPCODE_3615:   ; [c64_ir] InlineCall("swap")
004216r 2                   ; inline call(swap)
004216r 2  48               pha
004217r 2  48               pha
004218r 2               
004218r 2               @target_1094:
004218r 2               
004218r 2               ; src/prelude.fth:3:10 in `swap`
004218r 2               @OPCODE_3617:   ; [c64_ir] AltPush
004218r 2  CA               dex
004219r 2  CA               dex
00421Ar 2  B5 03            lda $03,x
00421Cr 2  48               pha
00421Dr 2  B5 02            lda $02,x
00421Fr 2  48               pha
004220r 2               
004220r 2               ; src/prelude.fth:3:13 in `swap`
004220r 2               @OPCODE_3618:   ; [c64_ir] TempStore
004220r 2  CA               dex
004221r 2  CA               dex
004222r 2  B5 03            lda $03,x
004224r 2  85 96            sta TEMP_PAX2
004226r 2  B5 02            lda $02,x
004228r 2  85 95            sta TEMP_PAX1
00422Ar 2               
00422Ar 2               ; src/prelude.fth:3:19 in `swap`
00422Ar 2               @OPCODE_3619:   ; [c64_ir] AltPop
00422Ar 2  E8               inx
00422Br 2  E8               inx
00422Cr 2  68               pla
00422Dr 2  95 00            sta $00,x
00422Fr 2  68               pla
004230r 2  95 01            sta $01,x
004232r 2               
004232r 2               ; src/prelude.fth:3:22 in `swap`
004232r 2               @OPCODE_3620:   ; [c64_ir] TempLoad
004232r 2  E8               inx
004233r 2  E8               inx
004234r 2  A5 95            lda TEMP_PAX1
004236r 2  95 00            sta $00,x
004238r 2  A5 96            lda TEMP_PAX2
00423Ar 2  95 01            sta $01,x
00423Cr 2               
00423Cr 2               ; src/prelude.fth:3:28 in `swap`
00423Cr 2               @OPCODE_3621:   ; [c64_ir] InlineExit
00423Cr 2                   ; inline exit
00423Cr 2  68               pla
00423Dr 2  68               pla
00423Er 2               
00423Er 2               @target_1095:
00423Er 2               
00423Er 2               ; src/prelude.fth:44:35 in `*`
00423Er 2               @OPCODE_3623:   ; [c64_ir] Drop
00423Er 2  CA               dex
00423Fr 2  CA               dex
004240r 2               
004240r 2               ; src/prelude.fth:44:40 in `*`
004240r 2               @OPCODE_3624:   ; [c64_ir] InlineExit
004240r 2                   ; inline exit
004240r 2  68               pla
004241r 2  68               pla
004242r 2               
004242r 2               @target_1096:
004242r 2               
004242r 2               ; snake.fth:48:39 in `convert-x-y`
004242r 2               @OPCODE_3626:   ; [c64_ir] Add
004242r 2                   ; 21
004242r 2  CA               dex
004243r 2  CA               dex
004244r 2  18               clc
004245r 2  B5 00            lda $00,x
004247r 2  75 02            adc $02,x
004249r 2  95 00            sta $00,x
00424Br 2  B5 01            lda $01,x
00424Dr 2  75 03            adc $03,x
00424Fr 2  95 01            sta $01,x
004251r 2               
004251r 2               ; snake.fth:48:41 in `convert-x-y`
004251r 2               @OPCODE_3627:   ; [c64_ir] InlineExit
004251r 2                   ; inline exit
004251r 2  68               pla
004252r 2  68               pla
004253r 2               
004253r 2               @target_1097:
004253r 2               
004253r 2               ; snake.fth:50:38 in `draw`
004253r 2               @OPCODE_3629:   ; [c64_ir] InlineCall("draw-index")
004253r 2                   ; inline call(draw-index)
004253r 2  48               pha
004254r 2  48               pha
004255r 2               
004255r 2               @target_1098:
004255r 2               
004255r 2               ; snake.fth:49:34 in `draw-index`
004255r 2               @OPCODE_3631:   ; [c64_ir] PushLiteral(1024)
004255r 2  E8               inx
004256r 2  E8               inx
004257r 2  A9 00            lda #0
004259r 2  95 00            sta $00,x
00425Br 2  A9 04            lda #4
00425Dr 2  95 01            sta $01,x
00425Fr 2               
00425Fr 2               ; snake.fth:49:43 in `draw-index`
00425Fr 2               @OPCODE_3632:   ; [c64_ir] Add
00425Fr 2                   ; 21
00425Fr 2  CA               dex
004260r 2  CA               dex
004261r 2  18               clc
004262r 2  B5 00            lda $00,x
004264r 2  75 02            adc $02,x
004266r 2  95 00            sta $00,x
004268r 2  B5 01            lda $01,x
00426Ar 2  75 03            adc $03,x
00426Cr 2  95 01            sta $01,x
00426Er 2               
00426Er 2               ; snake.fth:49:45 in `draw-index`
00426Er 2               @OPCODE_3633:   ; [c64_ir] Store8
00426Er 2  CA               dex
00426Fr 2  CA               dex
004270r 2  CA               dex
004271r 2  CA               dex
004272r 2  B5 02            lda $02,x
004274r 2  81 04            sta ($04,x)
004276r 2                   ; TODO high byte
004276r 2               
004276r 2               ; snake.fth:49:48 in `draw-index`
004276r 2               @OPCODE_3634:   ; [c64_ir] InlineExit
004276r 2                   ; inline exit
004276r 2  68               pla
004277r 2  68               pla
004278r 2               
004278r 2               @target_1099:
004278r 2               
004278r 2               ; snake.fth:50:49 in `draw`
004278r 2               @OPCODE_3636:   ; [c64_ir] InlineExit
004278r 2                   ; inline exit
004278r 2  68               pla
004279r 2  68               pla
00427Ar 2               
00427Ar 2               @target_1100:
00427Ar 2               
00427Ar 2               ; snake.fth:51:51 in `draw-white`
00427Ar 2               @OPCODE_3638:   ; [c64_ir] InlineExit
00427Ar 2                   ; inline exit
00427Ar 2  68               pla
00427Br 2  68               pla
00427Cr 2               
00427Cr 2               @target_1101:
00427Cr 2               
00427Cr 2               ; snake.fth:178:3 in `move-apple`
00427Cr 2               @OPCODE_3640:   ; [c64_ir] InlineCall("random-x-position")
00427Cr 2                   ; inline call(random-x-position)
00427Cr 2  48               pha
00427Dr 2  48               pha
00427Er 2               
00427Er 2               @target_1102:
00427Er 2               
00427Er 2               ; snake.fth:172:3 in `random-x-position`
00427Er 2               @OPCODE_3642:   ; [c64_ir] PushLiteral(40)
00427Er 2  E8               inx
00427Fr 2  E8               inx
004280r 2  A9 28            lda #40
004282r 2  95 00            sta $00,x
004284r 2  A9 00            lda #0
004286r 2  95 01            sta $01,x
004288r 2               
004288r 2               ; snake.fth:172:9 in `random-x-position`
004288r 2               @OPCODE_3643:   ; [c64_ir] PushLiteral(4)
004288r 2  E8               inx
004289r 2  E8               inx
00428Ar 2  A9 04            lda #4
00428Cr 2  95 00            sta $00,x
00428Er 2  A9 00            lda #0
004290r 2  95 01            sta $01,x
004292r 2               
004292r 2               ; snake.fth:172:11 in `random-x-position`
004292r 2               @OPCODE_3644:   ; [c64_ir] InlineCall("-")
004292r 2                   ; inline call(-)
004292r 2  48               pha
004293r 2  48               pha
004294r 2               
004294r 2               @target_1103:
004294r 2               
004294r 2               ; src/prelude.fth:16:12 in `-`
004294r 2               @OPCODE_3646:   ; [c64_ir] InlineCall("negate")
004294r 2                   ; inline call(negate)
004294r 2  48               pha
004295r 2  48               pha
004296r 2               
004296r 2               @target_1104:
004296r 2               
004296r 2               ; src/prelude.fth:15:12 in `negate`
004296r 2               @OPCODE_3648:   ; [c64_ir] InlineCall("invert")
004296r 2                   ; inline call(invert)
004296r 2  48               pha
004297r 2  48               pha
004298r 2               
004298r 2               @target_1105:
004298r 2               
004298r 2               ; src/prelude.fth:14:12 in `invert`
004298r 2               @OPCODE_3650:   ; [c64_ir] PushLiteral(-1)
004298r 2  E8               inx
004299r 2  E8               inx
00429Ar 2  A9 FF            lda #255
00429Cr 2  95 00            sta $00,x
00429Er 2  A9 FF            lda #255
0042A0r 2  95 01            sta $01,x
0042A2r 2               
0042A2r 2               ; src/prelude.fth:14:15 in `invert`
0042A2r 2               @OPCODE_3651:   ; [c64_ir] Nand
0042A2r 2                   ; 26
0042A2r 2  CA               dex
0042A3r 2  CA               dex
0042A4r 2  B5 00            lda $00,x
0042A6r 2  35 02            and $02,x
0042A8r 2  49 FF            eor #$ff
0042AAr 2  95 00            sta $00,x
0042ACr 2  B5 01            lda $01,x
0042AEr 2  35 03            and $03,x
0042B0r 2  49 FF            eor #$ff
0042B2r 2  95 01            sta $01,x
0042B4r 2               
0042B4r 2               ; src/prelude.fth:14:20 in `invert`
0042B4r 2               @OPCODE_3652:   ; [c64_ir] InlineExit
0042B4r 2                   ; inline exit
0042B4r 2  68               pla
0042B5r 2  68               pla
0042B6r 2               
0042B6r 2               @target_1106:
0042B6r 2               
0042B6r 2               ; src/prelude.fth:15:19 in `negate`
0042B6r 2               @OPCODE_3654:   ; [c64_ir] PushLiteral(1)
0042B6r 2  E8               inx
0042B7r 2  E8               inx
0042B8r 2  A9 01            lda #1
0042BAr 2  95 00            sta $00,x
0042BCr 2  A9 00            lda #0
0042BEr 2  95 01            sta $01,x
0042C0r 2               
0042C0r 2               ; src/prelude.fth:15:21 in `negate`
0042C0r 2               @OPCODE_3655:   ; [c64_ir] Add
0042C0r 2                   ; 21
0042C0r 2  CA               dex
0042C1r 2  CA               dex
0042C2r 2  18               clc
0042C3r 2  B5 00            lda $00,x
0042C5r 2  75 02            adc $02,x
0042C7r 2  95 00            sta $00,x
0042C9r 2  B5 01            lda $01,x
0042CBr 2  75 03            adc $03,x
0042CDr 2  95 01            sta $01,x
0042CFr 2               
0042CFr 2               ; src/prelude.fth:15:23 in `negate`
0042CFr 2               @OPCODE_3656:   ; [c64_ir] InlineExit
0042CFr 2                   ; inline exit
0042CFr 2  68               pla
0042D0r 2  68               pla
0042D1r 2               
0042D1r 2               @target_1107:
0042D1r 2               
0042D1r 2               ; src/prelude.fth:16:19 in `-`
0042D1r 2               @OPCODE_3658:   ; [c64_ir] Add
0042D1r 2                   ; 21
0042D1r 2  CA               dex
0042D2r 2  CA               dex
0042D3r 2  18               clc
0042D4r 2  B5 00            lda $00,x
0042D6r 2  75 02            adc $02,x
0042D8r 2  95 00            sta $00,x
0042DAr 2  B5 01            lda $01,x
0042DCr 2  75 03            adc $03,x
0042DEr 2  95 01            sta $01,x
0042E0r 2               
0042E0r 2               ; src/prelude.fth:16:21 in `-`
0042E0r 2               @OPCODE_3659:   ; [c64_ir] InlineExit
0042E0r 2                   ; inline exit
0042E0r 2  68               pla
0042E1r 2  68               pla
0042E2r 2               
0042E2r 2               @target_1108:
0042E2r 2               
0042E2r 2               ; snake.fth:172:13 in `random-x-position`
0042E2r 2               @OPCODE_3661:   ; [c64_ir] InlineCall("random")
0042E2r 2                   ; inline call(random)
0042E2r 2  48               pha
0042E3r 2  48               pha
0042E4r 2               
0042E4r 2               @target_1109:
0042E4r 2               
0042E4r 2               ; snake.fth:8:10 in `random`
0042E4r 2               @OPCODE_3663:   ; [c64_ir] PushLiteral(127)
0042E4r 2  E8               inx
0042E5r 2  E8               inx
0042E6r 2  A9 7F            lda #127
0042E8r 2  95 00            sta $00,x
0042EAr 2  A9 00            lda #0
0042ECr 2  95 01            sta $01,x
0042EEr 2               
0042EEr 2               ; snake.fth:8:26 in `random`
0042EEr 2               @OPCODE_3664:   ; [c64_ir] Load
0042EEr 2  A1 00            lda ($00,x)
0042F0r 2  95 00            sta $00,x
0042F2r 2  A9 00            lda #0
0042F4r 2  95 01            sta $01,x
0042F6r 2               
0042F6r 2               ; snake.fth:8:28 in `random`
0042F6r 2               @OPCODE_3665:   ; [c64_ir] PushLiteral(255)
0042F6r 2  E8               inx
0042F7r 2  E8               inx
0042F8r 2  A9 FF            lda #255
0042FAr 2  95 00            sta $00,x
0042FCr 2  A9 00            lda #0
0042FEr 2  95 01            sta $01,x
004300r 2               
004300r 2               ; snake.fth:8:32 in `random`
004300r 2               @OPCODE_3666:   ; [c64_ir] InlineCall("and")
004300r 2                   ; inline call(and)
004300r 2  48               pha
004301r 2  48               pha
004302r 2               
004302r 2               @target_1110:
004302r 2               
004302r 2               ; src/prelude.fth:28:9 in `and`
004302r 2               @OPCODE_3668:   ; [c64_ir] Nand
004302r 2                   ; 26
004302r 2  CA               dex
004303r 2  CA               dex
004304r 2  B5 00            lda $00,x
004306r 2  35 02            and $02,x
004308r 2  49 FF            eor #$ff
00430Ar 2  95 00            sta $00,x
00430Cr 2  B5 01            lda $01,x
00430Er 2  35 03            and $03,x
004310r 2  49 FF            eor #$ff
004312r 2  95 01            sta $01,x
004314r 2               
004314r 2               ; src/prelude.fth:28:14 in `and`
004314r 2               @OPCODE_3669:   ; [c64_ir] InlineCall("invert")
004314r 2                   ; inline call(invert)
004314r 2  48               pha
004315r 2  48               pha
004316r 2               
004316r 2               @target_1111:
004316r 2               
004316r 2               ; src/prelude.fth:14:12 in `invert`
004316r 2               @OPCODE_3671:   ; [c64_ir] PushLiteral(-1)
004316r 2  E8               inx
004317r 2  E8               inx
004318r 2  A9 FF            lda #255
00431Ar 2  95 00            sta $00,x
00431Cr 2  A9 FF            lda #255
00431Er 2  95 01            sta $01,x
004320r 2               
004320r 2               ; src/prelude.fth:14:15 in `invert`
004320r 2               @OPCODE_3672:   ; [c64_ir] Nand
004320r 2                   ; 26
004320r 2  CA               dex
004321r 2  CA               dex
004322r 2  B5 00            lda $00,x
004324r 2  35 02            and $02,x
004326r 2  49 FF            eor #$ff
004328r 2  95 00            sta $00,x
00432Ar 2  B5 01            lda $01,x
00432Cr 2  35 03            and $03,x
00432Er 2  49 FF            eor #$ff
004330r 2  95 01            sta $01,x
004332r 2               
004332r 2               ; src/prelude.fth:14:20 in `invert`
004332r 2               @OPCODE_3673:   ; [c64_ir] InlineExit
004332r 2                   ; inline exit
004332r 2  68               pla
004333r 2  68               pla
004334r 2               
004334r 2               @target_1112:
004334r 2               
004334r 2               ; src/prelude.fth:28:21 in `and`
004334r 2               @OPCODE_3675:   ; [c64_ir] InlineExit
004334r 2                   ; inline exit
004334r 2  68               pla
004335r 2  68               pla
004336r 2               
004336r 2               @target_1113:
004336r 2               
004336r 2               ; snake.fth:8:36 in `random`
004336r 2               @OPCODE_3677:   ; [c64_ir] InlineCall("swap")
004336r 2                   ; inline call(swap)
004336r 2  48               pha
004337r 2  48               pha
004338r 2               
004338r 2               @target_1114:
004338r 2               
004338r 2               ; src/prelude.fth:3:10 in `swap`
004338r 2               @OPCODE_3679:   ; [c64_ir] AltPush
004338r 2  CA               dex
004339r 2  CA               dex
00433Ar 2  B5 03            lda $03,x
00433Cr 2  48               pha
00433Dr 2  B5 02            lda $02,x
00433Fr 2  48               pha
004340r 2               
004340r 2               ; src/prelude.fth:3:13 in `swap`
004340r 2               @OPCODE_3680:   ; [c64_ir] TempStore
004340r 2  CA               dex
004341r 2  CA               dex
004342r 2  B5 03            lda $03,x
004344r 2  85 96            sta TEMP_PAX2
004346r 2  B5 02            lda $02,x
004348r 2  85 95            sta TEMP_PAX1
00434Ar 2               
00434Ar 2               ; src/prelude.fth:3:19 in `swap`
00434Ar 2               @OPCODE_3681:   ; [c64_ir] AltPop
00434Ar 2  E8               inx
00434Br 2  E8               inx
00434Cr 2  68               pla
00434Dr 2  95 00            sta $00,x
00434Fr 2  68               pla
004350r 2  95 01            sta $01,x
004352r 2               
004352r 2               ; src/prelude.fth:3:22 in `swap`
004352r 2               @OPCODE_3682:   ; [c64_ir] TempLoad
004352r 2  E8               inx
004353r 2  E8               inx
004354r 2  A5 95            lda TEMP_PAX1
004356r 2  95 00            sta $00,x
004358r 2  A5 96            lda TEMP_PAX2
00435Ar 2  95 01            sta $01,x
00435Cr 2               
00435Cr 2               ; src/prelude.fth:3:28 in `swap`
00435Cr 2               @OPCODE_3683:   ; [c64_ir] InlineExit
00435Cr 2                   ; inline exit
00435Cr 2  68               pla
00435Dr 2  68               pla
00435Er 2               
00435Er 2               @target_1115:
00435Er 2               
00435Er 2               ; snake.fth:8:41 in `random`
00435Er 2               @OPCODE_3685:   ; [c64_ir] InlineCall("%")
00435Er 2                   ; inline call(%)
00435Er 2  48               pha
00435Fr 2  48               pha
004360r 2               
004360r 2               @target_1116:
004360r 2               
004360r 2               ; src/prelude.fth:48:34 in `%`
004360r 2               @OPCODE_3687:   ; [c64_ir] LoopTarget(1116)
004360r 2               
004360r 2               @target_1117:
004360r 2               
004360r 2               ; src/prelude.fth:48:40 in `%`
004360r 2               @OPCODE_3689:   ; [c64_ir] InlineCall("2dup")
004360r 2                   ; inline call(2dup)
004360r 2  48               pha
004361r 2  48               pha
004362r 2               
004362r 2               @target_1118:
004362r 2               
004362r 2               ; src/prelude.fth:8:10 in `2dup`
004362r 2               @OPCODE_3691:   ; [c64_ir] InlineCall("over")
004362r 2                   ; inline call(over)
004362r 2  48               pha
004363r 2  48               pha
004364r 2               
004364r 2               @target_1119:
004364r 2               
004364r 2               ; src/prelude.fth:4:10 in `over`
004364r 2               @OPCODE_3693:   ; [c64_ir] AltPush
004364r 2  CA               dex
004365r 2  CA               dex
004366r 2  B5 03            lda $03,x
004368r 2  48               pha
004369r 2  B5 02            lda $02,x
00436Br 2  48               pha
00436Cr 2               
00436Cr 2               ; src/prelude.fth:4:13 in `over`
00436Cr 2               @OPCODE_3694:   ; [c64_ir] TempStore
00436Cr 2  CA               dex
00436Dr 2  CA               dex
00436Er 2  B5 03            lda $03,x
004370r 2  85 96            sta TEMP_PAX2
004372r 2  B5 02            lda $02,x
004374r 2  85 95            sta TEMP_PAX1
004376r 2               
004376r 2               ; src/prelude.fth:4:19 in `over`
004376r 2               @OPCODE_3695:   ; [c64_ir] TempLoad
004376r 2  E8               inx
004377r 2  E8               inx
004378r 2  A5 95            lda TEMP_PAX1
00437Ar 2  95 00            sta $00,x
00437Cr 2  A5 96            lda TEMP_PAX2
00437Er 2  95 01            sta $01,x
004380r 2               
004380r 2               ; src/prelude.fth:4:25 in `over`
004380r 2               @OPCODE_3696:   ; [c64_ir] AltPop
004380r 2  E8               inx
004381r 2  E8               inx
004382r 2  68               pla
004383r 2  95 00            sta $00,x
004385r 2  68               pla
004386r 2  95 01            sta $01,x
004388r 2               
004388r 2               ; src/prelude.fth:4:28 in `over`
004388r 2               @OPCODE_3697:   ; [c64_ir] TempLoad
004388r 2  E8               inx
004389r 2  E8               inx
00438Ar 2  A5 95            lda TEMP_PAX1
00438Cr 2  95 00            sta $00,x
00438Er 2  A5 96            lda TEMP_PAX2
004390r 2  95 01            sta $01,x
004392r 2               
004392r 2               ; src/prelude.fth:4:34 in `over`
004392r 2               @OPCODE_3698:   ; [c64_ir] InlineExit
004392r 2                   ; inline exit
004392r 2  68               pla
004393r 2  68               pla
004394r 2               
004394r 2               @target_1120:
004394r 2               
004394r 2               ; src/prelude.fth:8:15 in `2dup`
004394r 2               @OPCODE_3700:   ; [c64_ir] InlineCall("over")
004394r 2                   ; inline call(over)
004394r 2  48               pha
004395r 2  48               pha
004396r 2               
004396r 2               @target_1121:
004396r 2               
004396r 2               ; src/prelude.fth:4:10 in `over`
004396r 2               @OPCODE_3702:   ; [c64_ir] AltPush
004396r 2  CA               dex
004397r 2  CA               dex
004398r 2  B5 03            lda $03,x
00439Ar 2  48               pha
00439Br 2  B5 02            lda $02,x
00439Dr 2  48               pha
00439Er 2               
00439Er 2               ; src/prelude.fth:4:13 in `over`
00439Er 2               @OPCODE_3703:   ; [c64_ir] TempStore
00439Er 2  CA               dex
00439Fr 2  CA               dex
0043A0r 2  B5 03            lda $03,x
0043A2r 2  85 96            sta TEMP_PAX2
0043A4r 2  B5 02            lda $02,x
0043A6r 2  85 95            sta TEMP_PAX1
0043A8r 2               
0043A8r 2               ; src/prelude.fth:4:19 in `over`
0043A8r 2               @OPCODE_3704:   ; [c64_ir] TempLoad
0043A8r 2  E8               inx
0043A9r 2  E8               inx
0043AAr 2  A5 95            lda TEMP_PAX1
0043ACr 2  95 00            sta $00,x
0043AEr 2  A5 96            lda TEMP_PAX2
0043B0r 2  95 01            sta $01,x
0043B2r 2               
0043B2r 2               ; src/prelude.fth:4:25 in `over`
0043B2r 2               @OPCODE_3705:   ; [c64_ir] AltPop
0043B2r 2  E8               inx
0043B3r 2  E8               inx
0043B4r 2  68               pla
0043B5r 2  95 00            sta $00,x
0043B7r 2  68               pla
0043B8r 2  95 01            sta $01,x
0043BAr 2               
0043BAr 2               ; src/prelude.fth:4:28 in `over`
0043BAr 2               @OPCODE_3706:   ; [c64_ir] TempLoad
0043BAr 2  E8               inx
0043BBr 2  E8               inx
0043BCr 2  A5 95            lda TEMP_PAX1
0043BEr 2  95 00            sta $00,x
0043C0r 2  A5 96            lda TEMP_PAX2
0043C2r 2  95 01            sta $01,x
0043C4r 2               
0043C4r 2               ; src/prelude.fth:4:34 in `over`
0043C4r 2               @OPCODE_3707:   ; [c64_ir] InlineExit
0043C4r 2                   ; inline exit
0043C4r 2  68               pla
0043C5r 2  68               pla
0043C6r 2               
0043C6r 2               @target_1122:
0043C6r 2               
0043C6r 2               ; src/prelude.fth:8:20 in `2dup`
0043C6r 2               @OPCODE_3709:   ; [c64_ir] InlineExit
0043C6r 2                   ; inline exit
0043C6r 2  68               pla
0043C7r 2  68               pla
0043C8r 2               
0043C8r 2               @target_1123:
0043C8r 2               
0043C8r 2               ; src/prelude.fth:48:45 in `%`
0043C8r 2               @OPCODE_3711:   ; [c64_ir] InlineCall("-")
0043C8r 2                   ; inline call(-)
0043C8r 2  48               pha
0043C9r 2  48               pha
0043CAr 2               
0043CAr 2               @target_1124:
0043CAr 2               
0043CAr 2               ; src/prelude.fth:16:12 in `-`
0043CAr 2               @OPCODE_3713:   ; [c64_ir] InlineCall("negate")
0043CAr 2                   ; inline call(negate)
0043CAr 2  48               pha
0043CBr 2  48               pha
0043CCr 2               
0043CCr 2               @target_1125:
0043CCr 2               
0043CCr 2               ; src/prelude.fth:15:12 in `negate`
0043CCr 2               @OPCODE_3715:   ; [c64_ir] InlineCall("invert")
0043CCr 2                   ; inline call(invert)
0043CCr 2  48               pha
0043CDr 2  48               pha
0043CEr 2               
0043CEr 2               @target_1126:
0043CEr 2               
0043CEr 2               ; src/prelude.fth:14:12 in `invert`
0043CEr 2               @OPCODE_3717:   ; [c64_ir] PushLiteral(-1)
0043CEr 2  E8               inx
0043CFr 2  E8               inx
0043D0r 2  A9 FF            lda #255
0043D2r 2  95 00            sta $00,x
0043D4r 2  A9 FF            lda #255
0043D6r 2  95 01            sta $01,x
0043D8r 2               
0043D8r 2               ; src/prelude.fth:14:15 in `invert`
0043D8r 2               @OPCODE_3718:   ; [c64_ir] Nand
0043D8r 2                   ; 26
0043D8r 2  CA               dex
0043D9r 2  CA               dex
0043DAr 2  B5 00            lda $00,x
0043DCr 2  35 02            and $02,x
0043DEr 2  49 FF            eor #$ff
0043E0r 2  95 00            sta $00,x
0043E2r 2  B5 01            lda $01,x
0043E4r 2  35 03            and $03,x
0043E6r 2  49 FF            eor #$ff
0043E8r 2  95 01            sta $01,x
0043EAr 2               
0043EAr 2               ; src/prelude.fth:14:20 in `invert`
0043EAr 2               @OPCODE_3719:   ; [c64_ir] InlineExit
0043EAr 2                   ; inline exit
0043EAr 2  68               pla
0043EBr 2  68               pla
0043ECr 2               
0043ECr 2               @target_1127:
0043ECr 2               
0043ECr 2               ; src/prelude.fth:15:19 in `negate`
0043ECr 2               @OPCODE_3721:   ; [c64_ir] PushLiteral(1)
0043ECr 2  E8               inx
0043EDr 2  E8               inx
0043EEr 2  A9 01            lda #1
0043F0r 2  95 00            sta $00,x
0043F2r 2  A9 00            lda #0
0043F4r 2  95 01            sta $01,x
0043F6r 2               
0043F6r 2               ; src/prelude.fth:15:21 in `negate`
0043F6r 2               @OPCODE_3722:   ; [c64_ir] Add
0043F6r 2                   ; 21
0043F6r 2  CA               dex
0043F7r 2  CA               dex
0043F8r 2  18               clc
0043F9r 2  B5 00            lda $00,x
0043FBr 2  75 02            adc $02,x
0043FDr 2  95 00            sta $00,x
0043FFr 2  B5 01            lda $01,x
004401r 2  75 03            adc $03,x
004403r 2  95 01            sta $01,x
004405r 2               
004405r 2               ; src/prelude.fth:15:23 in `negate`
004405r 2               @OPCODE_3723:   ; [c64_ir] InlineExit
004405r 2                   ; inline exit
004405r 2  68               pla
004406r 2  68               pla
004407r 2               
004407r 2               @target_1128:
004407r 2               
004407r 2               ; src/prelude.fth:16:19 in `-`
004407r 2               @OPCODE_3725:   ; [c64_ir] Add
004407r 2                   ; 21
004407r 2  CA               dex
004408r 2  CA               dex
004409r 2  18               clc
00440Ar 2  B5 00            lda $00,x
00440Cr 2  75 02            adc $02,x
00440Er 2  95 00            sta $00,x
004410r 2  B5 01            lda $01,x
004412r 2  75 03            adc $03,x
004414r 2  95 01            sta $01,x
004416r 2               
004416r 2               ; src/prelude.fth:16:21 in `-`
004416r 2               @OPCODE_3726:   ; [c64_ir] InlineExit
004416r 2                   ; inline exit
004416r 2  68               pla
004417r 2  68               pla
004418r 2               
004418r 2               @target_1129:
004418r 2               
004418r 2               ; src/prelude.fth:48:47 in `%`
004418r 2               @OPCODE_3728:   ; [c64_ir] InlineCall("dup")
004418r 2                   ; inline call(dup)
004418r 2  48               pha
004419r 2  48               pha
00441Ar 2               
00441Ar 2               @target_1130:
00441Ar 2               
00441Ar 2               ; src/prelude.fth:6:10 in `dup`
00441Ar 2               @OPCODE_3730:   ; [c64_ir] TempStore
00441Ar 2  CA               dex
00441Br 2  CA               dex
00441Cr 2  B5 03            lda $03,x
00441Er 2  85 96            sta TEMP_PAX2
004420r 2  B5 02            lda $02,x
004422r 2  85 95            sta TEMP_PAX1
004424r 2               
004424r 2               ; src/prelude.fth:6:16 in `dup`
004424r 2               @OPCODE_3731:   ; [c64_ir] TempLoad
004424r 2  E8               inx
004425r 2  E8               inx
004426r 2  A5 95            lda TEMP_PAX1
004428r 2  95 00            sta $00,x
00442Ar 2  A5 96            lda TEMP_PAX2
00442Cr 2  95 01            sta $01,x
00442Er 2               
00442Er 2               ; src/prelude.fth:6:22 in `dup`
00442Er 2               @OPCODE_3732:   ; [c64_ir] TempLoad
00442Er 2  E8               inx
00442Fr 2  E8               inx
004430r 2  A5 95            lda TEMP_PAX1
004432r 2  95 00            sta $00,x
004434r 2  A5 96            lda TEMP_PAX2
004436r 2  95 01            sta $01,x
004438r 2               
004438r 2               ; src/prelude.fth:6:28 in `dup`
004438r 2               @OPCODE_3733:   ; [c64_ir] InlineExit
004438r 2                   ; inline exit
004438r 2  68               pla
004439r 2  68               pla
00443Ar 2               
00443Ar 2               @target_1131:
00443Ar 2               
00443Ar 2               ; src/prelude.fth:48:51 in `%`
00443Ar 2               @OPCODE_3735:   ; [c64_ir] InlineCall("0<")
00443Ar 2                   ; inline call(0<)
00443Ar 2  48               pha
00443Br 2  48               pha
00443Cr 2               
00443Cr 2               @target_1132:
00443Cr 2               
00443Cr 2               ; src/prelude.fth:47:8 in `0<`
00443Cr 2               @OPCODE_3737:   ; [c64_ir] PushLiteral(-32768)
00443Cr 2  E8               inx
00443Dr 2  E8               inx
00443Er 2  A9 00            lda #0
004440r 2  95 00            sta $00,x
004442r 2  A9 80            lda #128
004444r 2  95 01            sta $01,x
004446r 2               
004446r 2               ; src/prelude.fth:47:14 in `0<`
004446r 2               @OPCODE_3738:   ; [c64_ir] Nand
004446r 2                   ; 26
004446r 2  CA               dex
004447r 2  CA               dex
004448r 2  B5 00            lda $00,x
00444Ar 2  35 02            and $02,x
00444Cr 2  49 FF            eor #$ff
00444Er 2  95 00            sta $00,x
004450r 2  B5 01            lda $01,x
004452r 2  35 03            and $03,x
004454r 2  49 FF            eor #$ff
004456r 2  95 01            sta $01,x
004458r 2               
004458r 2               ; src/prelude.fth:47:19 in `0<`
004458r 2               @OPCODE_3739:   ; [c64_ir] InlineCall("invert")
004458r 2                   ; inline call(invert)
004458r 2  48               pha
004459r 2  48               pha
00445Ar 2               
00445Ar 2               @target_1133:
00445Ar 2               
00445Ar 2               ; src/prelude.fth:14:12 in `invert`
00445Ar 2               @OPCODE_3741:   ; [c64_ir] PushLiteral(-1)
00445Ar 2  E8               inx
00445Br 2  E8               inx
00445Cr 2  A9 FF            lda #255
00445Er 2  95 00            sta $00,x
004460r 2  A9 FF            lda #255
004462r 2  95 01            sta $01,x
004464r 2               
004464r 2               ; src/prelude.fth:14:15 in `invert`
004464r 2               @OPCODE_3742:   ; [c64_ir] Nand
004464r 2                   ; 26
004464r 2  CA               dex
004465r 2  CA               dex
004466r 2  B5 00            lda $00,x
004468r 2  35 02            and $02,x
00446Ar 2  49 FF            eor #$ff
00446Cr 2  95 00            sta $00,x
00446Er 2  B5 01            lda $01,x
004470r 2  35 03            and $03,x
004472r 2  49 FF            eor #$ff
004474r 2  95 01            sta $01,x
004476r 2               
004476r 2               ; src/prelude.fth:14:20 in `invert`
004476r 2               @OPCODE_3743:   ; [c64_ir] InlineExit
004476r 2                   ; inline exit
004476r 2  68               pla
004477r 2  68               pla
004478r 2               
004478r 2               @target_1134:
004478r 2               
004478r 2               ; src/prelude.fth:47:26 in `0<`
004478r 2               @OPCODE_3745:   ; [c64_ir] JumpIf0(1136)
004478r 2  CA               dex
004479r 2  CA               dex
00447Ar 2  B5 02            lda $02,x
00447Cr 2  15 03            ora $03,x
00447Er 2  D0 03            bne *+5
004480r 2  4C rr rr         jmp @target_1136
004483r 2               
004483r 2               @target_1135:
004483r 2               
004483r 2               ; src/prelude.fth:47:29 in `0<`
004483r 2               @OPCODE_3747:   ; [c64_ir] PushLiteral(-1)
004483r 2  E8               inx
004484r 2  E8               inx
004485r 2  A9 FF            lda #255
004487r 2  95 00            sta $00,x
004489r 2  A9 FF            lda #255
00448Br 2  95 01            sta $01,x
00448Dr 2               
00448Dr 2               ; src/prelude.fth:47:32 in `0<`
00448Dr 2               @OPCODE_3748:   ; [c64_ir] JumpElse(1137)
00448Dr 2  4C rr rr         jmp @target_1137
004490r 2               
004490r 2               @target_1136:
004490r 2               
004490r 2               ; src/prelude.fth:47:37 in `0<`
004490r 2               @OPCODE_3750:   ; [c64_ir] PushLiteral(0)
004490r 2  E8               inx
004491r 2  E8               inx
004492r 2  A9 00            lda #0
004494r 2  95 00            sta $00,x
004496r 2  A9 00            lda #0
004498r 2  95 01            sta $01,x
00449Ar 2               
00449Ar 2               ; src/prelude.fth:47:39 in `0<`
00449Ar 2               @OPCODE_3751:   ; [c64_ir] JumpTarget(1136)
00449Ar 2               
00449Ar 2               @target_1137:
00449Ar 2               
00449Ar 2               ; src/prelude.fth:47:44 in `0<`
00449Ar 2               @OPCODE_3753:   ; [c64_ir] InlineExit
00449Ar 2                   ; inline exit
00449Ar 2  68               pla
00449Br 2  68               pla
00449Cr 2               
00449Cr 2               @target_1138:
00449Cr 2               
00449Cr 2               ; src/prelude.fth:48:54 in `%`
00449Cr 2               @OPCODE_3755:   ; [c64_ir] JumpIf0(1140)
00449Cr 2  CA               dex
00449Dr 2  CA               dex
00449Er 2  B5 02            lda $02,x
0044A0r 2  15 03            ora $03,x
0044A2r 2  D0 03            bne *+5
0044A4r 2  4C rr rr         jmp @target_1140
0044A7r 2               
0044A7r 2               @target_1139:
0044A7r 2               
0044A7r 2               ; src/prelude.fth:48:57 in `%`
0044A7r 2               @OPCODE_3757:   ; [c64_ir] Add
0044A7r 2                   ; 21
0044A7r 2  CA               dex
0044A8r 2  CA               dex
0044A9r 2  18               clc
0044AAr 2  B5 00            lda $00,x
0044ACr 2  75 02            adc $02,x
0044AEr 2  95 00            sta $00,x
0044B0r 2  B5 01            lda $01,x
0044B2r 2  75 03            adc $03,x
0044B4r 2  95 01            sta $01,x
0044B6r 2               
0044B6r 2               ; src/prelude.fth:48:59 in `%`
0044B6r 2               @OPCODE_3758:   ; [c64_ir] PushLiteral(-1)
0044B6r 2  E8               inx
0044B7r 2  E8               inx
0044B8r 2  A9 FF            lda #255
0044BAr 2  95 00            sta $00,x
0044BCr 2  A9 FF            lda #255
0044BEr 2  95 01            sta $01,x
0044C0r 2               
0044C0r 2               ; src/prelude.fth:48:62 in `%`
0044C0r 2               @OPCODE_3759:   ; [c64_ir] JumpElse(1149)
0044C0r 2  4C rr rr         jmp @target_1149
0044C3r 2               
0044C3r 2               @target_1140:
0044C3r 2               
0044C3r 2               ; src/prelude.fth:48:67 in `%`
0044C3r 2               @OPCODE_3761:   ; [c64_ir] InlineCall("rot")
0044C3r 2                   ; inline call(rot)
0044C3r 2  48               pha
0044C4r 2  48               pha
0044C5r 2               
0044C5r 2               @target_1141:
0044C5r 2               
0044C5r 2               ; src/prelude.fth:5:10 in `rot`
0044C5r 2               @OPCODE_3763:   ; [c64_ir] AltPush
0044C5r 2  CA               dex
0044C6r 2  CA               dex
0044C7r 2  B5 03            lda $03,x
0044C9r 2  48               pha
0044CAr 2  B5 02            lda $02,x
0044CCr 2  48               pha
0044CDr 2               
0044CDr 2               ; src/prelude.fth:5:13 in `rot`
0044CDr 2               @OPCODE_3764:   ; [c64_ir] InlineCall("swap")
0044CDr 2                   ; inline call(swap)
0044CDr 2  48               pha
0044CEr 2  48               pha
0044CFr 2               
0044CFr 2               @target_1142:
0044CFr 2               
0044CFr 2               ; src/prelude.fth:3:10 in `swap`
0044CFr 2               @OPCODE_3766:   ; [c64_ir] AltPush
0044CFr 2  CA               dex
0044D0r 2  CA               dex
0044D1r 2  B5 03            lda $03,x
0044D3r 2  48               pha
0044D4r 2  B5 02            lda $02,x
0044D6r 2  48               pha
0044D7r 2               
0044D7r 2               ; src/prelude.fth:3:13 in `swap`
0044D7r 2               @OPCODE_3767:   ; [c64_ir] TempStore
0044D7r 2  CA               dex
0044D8r 2  CA               dex
0044D9r 2  B5 03            lda $03,x
0044DBr 2  85 96            sta TEMP_PAX2
0044DDr 2  B5 02            lda $02,x
0044DFr 2  85 95            sta TEMP_PAX1
0044E1r 2               
0044E1r 2               ; src/prelude.fth:3:19 in `swap`
0044E1r 2               @OPCODE_3768:   ; [c64_ir] AltPop
0044E1r 2  E8               inx
0044E2r 2  E8               inx
0044E3r 2  68               pla
0044E4r 2  95 00            sta $00,x
0044E6r 2  68               pla
0044E7r 2  95 01            sta $01,x
0044E9r 2               
0044E9r 2               ; src/prelude.fth:3:22 in `swap`
0044E9r 2               @OPCODE_3769:   ; [c64_ir] TempLoad
0044E9r 2  E8               inx
0044EAr 2  E8               inx
0044EBr 2  A5 95            lda TEMP_PAX1
0044EDr 2  95 00            sta $00,x
0044EFr 2  A5 96            lda TEMP_PAX2
0044F1r 2  95 01            sta $01,x
0044F3r 2               
0044F3r 2               ; src/prelude.fth:3:28 in `swap`
0044F3r 2               @OPCODE_3770:   ; [c64_ir] InlineExit
0044F3r 2                   ; inline exit
0044F3r 2  68               pla
0044F4r 2  68               pla
0044F5r 2               
0044F5r 2               @target_1143:
0044F5r 2               
0044F5r 2               ; src/prelude.fth:5:18 in `rot`
0044F5r 2               @OPCODE_3772:   ; [c64_ir] AltPop
0044F5r 2  E8               inx
0044F6r 2  E8               inx
0044F7r 2  68               pla
0044F8r 2  95 00            sta $00,x
0044FAr 2  68               pla
0044FBr 2  95 01            sta $01,x
0044FDr 2               
0044FDr 2               ; src/prelude.fth:5:21 in `rot`
0044FDr 2               @OPCODE_3773:   ; [c64_ir] InlineCall("swap")
0044FDr 2                   ; inline call(swap)
0044FDr 2  48               pha
0044FEr 2  48               pha
0044FFr 2               
0044FFr 2               @target_1144:
0044FFr 2               
0044FFr 2               ; src/prelude.fth:3:10 in `swap`
0044FFr 2               @OPCODE_3775:   ; [c64_ir] AltPush
0044FFr 2  CA               dex
004500r 2  CA               dex
004501r 2  B5 03            lda $03,x
004503r 2  48               pha
004504r 2  B5 02            lda $02,x
004506r 2  48               pha
004507r 2               
004507r 2               ; src/prelude.fth:3:13 in `swap`
004507r 2               @OPCODE_3776:   ; [c64_ir] TempStore
004507r 2  CA               dex
004508r 2  CA               dex
004509r 2  B5 03            lda $03,x
00450Br 2  85 96            sta TEMP_PAX2
00450Dr 2  B5 02            lda $02,x
00450Fr 2  85 95            sta TEMP_PAX1
004511r 2               
004511r 2               ; src/prelude.fth:3:19 in `swap`
004511r 2               @OPCODE_3777:   ; [c64_ir] AltPop
004511r 2  E8               inx
004512r 2  E8               inx
004513r 2  68               pla
004514r 2  95 00            sta $00,x
004516r 2  68               pla
004517r 2  95 01            sta $01,x
004519r 2               
004519r 2               ; src/prelude.fth:3:22 in `swap`
004519r 2               @OPCODE_3778:   ; [c64_ir] TempLoad
004519r 2  E8               inx
00451Ar 2  E8               inx
00451Br 2  A5 95            lda TEMP_PAX1
00451Dr 2  95 00            sta $00,x
00451Fr 2  A5 96            lda TEMP_PAX2
004521r 2  95 01            sta $01,x
004523r 2               
004523r 2               ; src/prelude.fth:3:28 in `swap`
004523r 2               @OPCODE_3779:   ; [c64_ir] InlineExit
004523r 2                   ; inline exit
004523r 2  68               pla
004524r 2  68               pla
004525r 2               
004525r 2               @target_1145:
004525r 2               
004525r 2               ; src/prelude.fth:5:26 in `rot`
004525r 2               @OPCODE_3781:   ; [c64_ir] InlineExit
004525r 2                   ; inline exit
004525r 2  68               pla
004526r 2  68               pla
004527r 2               
004527r 2               @target_1146:
004527r 2               
004527r 2               ; src/prelude.fth:48:71 in `%`
004527r 2               @OPCODE_3783:   ; [c64_ir] Drop
004527r 2  CA               dex
004528r 2  CA               dex
004529r 2               
004529r 2               ; src/prelude.fth:48:76 in `%`
004529r 2               @OPCODE_3784:   ; [c64_ir] InlineCall("swap")
004529r 2                   ; inline call(swap)
004529r 2  48               pha
00452Ar 2  48               pha
00452Br 2               
00452Br 2               @target_1147:
00452Br 2               
00452Br 2               ; src/prelude.fth:3:10 in `swap`
00452Br 2               @OPCODE_3786:   ; [c64_ir] AltPush
00452Br 2  CA               dex
00452Cr 2  CA               dex
00452Dr 2  B5 03            lda $03,x
00452Fr 2  48               pha
004530r 2  B5 02            lda $02,x
004532r 2  48               pha
004533r 2               
004533r 2               ; src/prelude.fth:3:13 in `swap`
004533r 2               @OPCODE_3787:   ; [c64_ir] TempStore
004533r 2  CA               dex
004534r 2  CA               dex
004535r 2  B5 03            lda $03,x
004537r 2  85 96            sta TEMP_PAX2
004539r 2  B5 02            lda $02,x
00453Br 2  85 95            sta TEMP_PAX1
00453Dr 2               
00453Dr 2               ; src/prelude.fth:3:19 in `swap`
00453Dr 2               @OPCODE_3788:   ; [c64_ir] AltPop
00453Dr 2  E8               inx
00453Er 2  E8               inx
00453Fr 2  68               pla
004540r 2  95 00            sta $00,x
004542r 2  68               pla
004543r 2  95 01            sta $01,x
004545r 2               
004545r 2               ; src/prelude.fth:3:22 in `swap`
004545r 2               @OPCODE_3789:   ; [c64_ir] TempLoad
004545r 2  E8               inx
004546r 2  E8               inx
004547r 2  A5 95            lda TEMP_PAX1
004549r 2  95 00            sta $00,x
00454Br 2  A5 96            lda TEMP_PAX2
00454Dr 2  95 01            sta $01,x
00454Fr 2               
00454Fr 2               ; src/prelude.fth:3:28 in `swap`
00454Fr 2               @OPCODE_3790:   ; [c64_ir] InlineExit
00454Fr 2                   ; inline exit
00454Fr 2  68               pla
004550r 2  68               pla
004551r 2               
004551r 2               @target_1148:
004551r 2               
004551r 2               ; src/prelude.fth:48:81 in `%`
004551r 2               @OPCODE_3792:   ; [c64_ir] PushLiteral(0)
004551r 2  E8               inx
004552r 2  E8               inx
004553r 2  A9 00            lda #0
004555r 2  95 00            sta $00,x
004557r 2  A9 00            lda #0
004559r 2  95 01            sta $01,x
00455Br 2               
00455Br 2               ; src/prelude.fth:48:83 in `%`
00455Br 2               @OPCODE_3793:   ; [c64_ir] JumpTarget(1148)
00455Br 2               
00455Br 2               @target_1149:
00455Br 2               
00455Br 2               ; src/prelude.fth:48:88 in `%`
00455Br 2               @OPCODE_3795:   ; [c64_ir] LoopIf0(1117)
00455Br 2  CA               dex
00455Cr 2  CA               dex
00455Dr 2  B5 02            lda $02,x
00455Fr 2  15 03            ora $03,x
004561r 2  D0 03            bne *+5
004563r 2  4C rr rr         jmp @target_1117
004566r 2               
004566r 2               @target_1150:
004566r 2               
004566r 2               ; src/prelude.fth:48:94 in `%`
004566r 2               @OPCODE_3797:   ; [c64_ir] InlineCall("swap")
004566r 2                   ; inline call(swap)
004566r 2  48               pha
004567r 2  48               pha
004568r 2               
004568r 2               @target_1151:
004568r 2               
004568r 2               ; src/prelude.fth:3:10 in `swap`
004568r 2               @OPCODE_3799:   ; [c64_ir] AltPush
004568r 2  CA               dex
004569r 2  CA               dex
00456Ar 2  B5 03            lda $03,x
00456Cr 2  48               pha
00456Dr 2  B5 02            lda $02,x
00456Fr 2  48               pha
004570r 2               
004570r 2               ; src/prelude.fth:3:13 in `swap`
004570r 2               @OPCODE_3800:   ; [c64_ir] TempStore
004570r 2  CA               dex
004571r 2  CA               dex
004572r 2  B5 03            lda $03,x
004574r 2  85 96            sta TEMP_PAX2
004576r 2  B5 02            lda $02,x
004578r 2  85 95            sta TEMP_PAX1
00457Ar 2               
00457Ar 2               ; src/prelude.fth:3:19 in `swap`
00457Ar 2               @OPCODE_3801:   ; [c64_ir] AltPop
00457Ar 2  E8               inx
00457Br 2  E8               inx
00457Cr 2  68               pla
00457Dr 2  95 00            sta $00,x
00457Fr 2  68               pla
004580r 2  95 01            sta $01,x
004582r 2               
004582r 2               ; src/prelude.fth:3:22 in `swap`
004582r 2               @OPCODE_3802:   ; [c64_ir] TempLoad
004582r 2  E8               inx
004583r 2  E8               inx
004584r 2  A5 95            lda TEMP_PAX1
004586r 2  95 00            sta $00,x
004588r 2  A5 96            lda TEMP_PAX2
00458Ar 2  95 01            sta $01,x
00458Cr 2               
00458Cr 2               ; src/prelude.fth:3:28 in `swap`
00458Cr 2               @OPCODE_3803:   ; [c64_ir] InlineExit
00458Cr 2                   ; inline exit
00458Cr 2  68               pla
00458Dr 2  68               pla
00458Er 2               
00458Er 2               @target_1152:
00458Er 2               
00458Er 2               ; src/prelude.fth:48:99 in `%`
00458Er 2               @OPCODE_3805:   ; [c64_ir] Drop
00458Er 2  CA               dex
00458Fr 2  CA               dex
004590r 2               
004590r 2               ; src/prelude.fth:48:104 in `%`
004590r 2               @OPCODE_3806:   ; [c64_ir] InlineExit
004590r 2                   ; inline exit
004590r 2  68               pla
004591r 2  68               pla
004592r 2               
004592r 2               @target_1153:
004592r 2               
004592r 2               ; snake.fth:8:43 in `random`
004592r 2               @OPCODE_3808:   ; [c64_ir] InlineExit
004592r 2                   ; inline exit
004592r 2  68               pla
004593r 2  68               pla
004594r 2               
004594r 2               @target_1154:
004594r 2               
004594r 2               ; snake.fth:172:20 in `random-x-position`
004594r 2               @OPCODE_3810:   ; [c64_ir] PushLiteral(2)
004594r 2  E8               inx
004595r 2  E8               inx
004596r 2  A9 02            lda #2
004598r 2  95 00            sta $00,x
00459Ar 2  A9 00            lda #0
00459Cr 2  95 01            sta $01,x
00459Er 2               
00459Er 2               ; snake.fth:172:22 in `random-x-position`
00459Er 2               @OPCODE_3811:   ; [c64_ir] Add
00459Er 2                   ; 21
00459Er 2  CA               dex
00459Fr 2  CA               dex
0045A0r 2  18               clc
0045A1r 2  B5 00            lda $00,x
0045A3r 2  75 02            adc $02,x
0045A5r 2  95 00            sta $00,x
0045A7r 2  B5 01            lda $01,x
0045A9r 2  75 03            adc $03,x
0045ABr 2  95 01            sta $01,x
0045ADr 2               
0045ADr 2               ; snake.fth:172:24 in `random-x-position`
0045ADr 2               @OPCODE_3812:   ; [c64_ir] InlineExit
0045ADr 2                   ; inline exit
0045ADr 2  68               pla
0045AEr 2  68               pla
0045AFr 2               
0045AFr 2               @target_1155:
0045AFr 2               
0045AFr 2               ; snake.fth:178:21 in `move-apple`
0045AFr 2               @OPCODE_3814:   ; [c64_ir] InlineCall("random-y-position")
0045AFr 2                   ; inline call(random-y-position)
0045AFr 2  48               pha
0045B0r 2  48               pha
0045B1r 2               
0045B1r 2               @target_1156:
0045B1r 2               
0045B1r 2               ; snake.fth:174:3 in `random-y-position`
0045B1r 2               @OPCODE_3816:   ; [c64_ir] PushLiteral(25)
0045B1r 2  E8               inx
0045B2r 2  E8               inx
0045B3r 2  A9 19            lda #25
0045B5r 2  95 00            sta $00,x
0045B7r 2  A9 00            lda #0
0045B9r 2  95 01            sta $01,x
0045BBr 2               
0045BBr 2               ; snake.fth:174:10 in `random-y-position`
0045BBr 2               @OPCODE_3817:   ; [c64_ir] PushLiteral(4)
0045BBr 2  E8               inx
0045BCr 2  E8               inx
0045BDr 2  A9 04            lda #4
0045BFr 2  95 00            sta $00,x
0045C1r 2  A9 00            lda #0
0045C3r 2  95 01            sta $01,x
0045C5r 2               
0045C5r 2               ; snake.fth:174:12 in `random-y-position`
0045C5r 2               @OPCODE_3818:   ; [c64_ir] InlineCall("-")
0045C5r 2                   ; inline call(-)
0045C5r 2  48               pha
0045C6r 2  48               pha
0045C7r 2               
0045C7r 2               @target_1157:
0045C7r 2               
0045C7r 2               ; src/prelude.fth:16:12 in `-`
0045C7r 2               @OPCODE_3820:   ; [c64_ir] InlineCall("negate")
0045C7r 2                   ; inline call(negate)
0045C7r 2  48               pha
0045C8r 2  48               pha
0045C9r 2               
0045C9r 2               @target_1158:
0045C9r 2               
0045C9r 2               ; src/prelude.fth:15:12 in `negate`
0045C9r 2               @OPCODE_3822:   ; [c64_ir] InlineCall("invert")
0045C9r 2                   ; inline call(invert)
0045C9r 2  48               pha
0045CAr 2  48               pha
0045CBr 2               
0045CBr 2               @target_1159:
0045CBr 2               
0045CBr 2               ; src/prelude.fth:14:12 in `invert`
0045CBr 2               @OPCODE_3824:   ; [c64_ir] PushLiteral(-1)
0045CBr 2  E8               inx
0045CCr 2  E8               inx
0045CDr 2  A9 FF            lda #255
0045CFr 2  95 00            sta $00,x
0045D1r 2  A9 FF            lda #255
0045D3r 2  95 01            sta $01,x
0045D5r 2               
0045D5r 2               ; src/prelude.fth:14:15 in `invert`
0045D5r 2               @OPCODE_3825:   ; [c64_ir] Nand
0045D5r 2                   ; 26
0045D5r 2  CA               dex
0045D6r 2  CA               dex
0045D7r 2  B5 00            lda $00,x
0045D9r 2  35 02            and $02,x
0045DBr 2  49 FF            eor #$ff
0045DDr 2  95 00            sta $00,x
0045DFr 2  B5 01            lda $01,x
0045E1r 2  35 03            and $03,x
0045E3r 2  49 FF            eor #$ff
0045E5r 2  95 01            sta $01,x
0045E7r 2               
0045E7r 2               ; src/prelude.fth:14:20 in `invert`
0045E7r 2               @OPCODE_3826:   ; [c64_ir] InlineExit
0045E7r 2                   ; inline exit
0045E7r 2  68               pla
0045E8r 2  68               pla
0045E9r 2               
0045E9r 2               @target_1160:
0045E9r 2               
0045E9r 2               ; src/prelude.fth:15:19 in `negate`
0045E9r 2               @OPCODE_3828:   ; [c64_ir] PushLiteral(1)
0045E9r 2  E8               inx
0045EAr 2  E8               inx
0045EBr 2  A9 01            lda #1
0045EDr 2  95 00            sta $00,x
0045EFr 2  A9 00            lda #0
0045F1r 2  95 01            sta $01,x
0045F3r 2               
0045F3r 2               ; src/prelude.fth:15:21 in `negate`
0045F3r 2               @OPCODE_3829:   ; [c64_ir] Add
0045F3r 2                   ; 21
0045F3r 2  CA               dex
0045F4r 2  CA               dex
0045F5r 2  18               clc
0045F6r 2  B5 00            lda $00,x
0045F8r 2  75 02            adc $02,x
0045FAr 2  95 00            sta $00,x
0045FCr 2  B5 01            lda $01,x
0045FEr 2  75 03            adc $03,x
004600r 2  95 01            sta $01,x
004602r 2               
004602r 2               ; src/prelude.fth:15:23 in `negate`
004602r 2               @OPCODE_3830:   ; [c64_ir] InlineExit
004602r 2                   ; inline exit
004602r 2  68               pla
004603r 2  68               pla
004604r 2               
004604r 2               @target_1161:
004604r 2               
004604r 2               ; src/prelude.fth:16:19 in `-`
004604r 2               @OPCODE_3832:   ; [c64_ir] Add
004604r 2                   ; 21
004604r 2  CA               dex
004605r 2  CA               dex
004606r 2  18               clc
004607r 2  B5 00            lda $00,x
004609r 2  75 02            adc $02,x
00460Br 2  95 00            sta $00,x
00460Dr 2  B5 01            lda $01,x
00460Fr 2  75 03            adc $03,x
004611r 2  95 01            sta $01,x
004613r 2               
004613r 2               ; src/prelude.fth:16:21 in `-`
004613r 2               @OPCODE_3833:   ; [c64_ir] InlineExit
004613r 2                   ; inline exit
004613r 2  68               pla
004614r 2  68               pla
004615r 2               
004615r 2               @target_1162:
004615r 2               
004615r 2               ; snake.fth:174:14 in `random-y-position`
004615r 2               @OPCODE_3835:   ; [c64_ir] InlineCall("random")
004615r 2                   ; inline call(random)
004615r 2  48               pha
004616r 2  48               pha
004617r 2               
004617r 2               @target_1163:
004617r 2               
004617r 2               ; snake.fth:8:10 in `random`
004617r 2               @OPCODE_3837:   ; [c64_ir] PushLiteral(127)
004617r 2  E8               inx
004618r 2  E8               inx
004619r 2  A9 7F            lda #127
00461Br 2  95 00            sta $00,x
00461Dr 2  A9 00            lda #0
00461Fr 2  95 01            sta $01,x
004621r 2               
004621r 2               ; snake.fth:8:26 in `random`
004621r 2               @OPCODE_3838:   ; [c64_ir] Load
004621r 2  A1 00            lda ($00,x)
004623r 2  95 00            sta $00,x
004625r 2  A9 00            lda #0
004627r 2  95 01            sta $01,x
004629r 2               
004629r 2               ; snake.fth:8:28 in `random`
004629r 2               @OPCODE_3839:   ; [c64_ir] PushLiteral(255)
004629r 2  E8               inx
00462Ar 2  E8               inx
00462Br 2  A9 FF            lda #255
00462Dr 2  95 00            sta $00,x
00462Fr 2  A9 00            lda #0
004631r 2  95 01            sta $01,x
004633r 2               
004633r 2               ; snake.fth:8:32 in `random`
004633r 2               @OPCODE_3840:   ; [c64_ir] InlineCall("and")
004633r 2                   ; inline call(and)
004633r 2  48               pha
004634r 2  48               pha
004635r 2               
004635r 2               @target_1164:
004635r 2               
004635r 2               ; src/prelude.fth:28:9 in `and`
004635r 2               @OPCODE_3842:   ; [c64_ir] Nand
004635r 2                   ; 26
004635r 2  CA               dex
004636r 2  CA               dex
004637r 2  B5 00            lda $00,x
004639r 2  35 02            and $02,x
00463Br 2  49 FF            eor #$ff
00463Dr 2  95 00            sta $00,x
00463Fr 2  B5 01            lda $01,x
004641r 2  35 03            and $03,x
004643r 2  49 FF            eor #$ff
004645r 2  95 01            sta $01,x
004647r 2               
004647r 2               ; src/prelude.fth:28:14 in `and`
004647r 2               @OPCODE_3843:   ; [c64_ir] InlineCall("invert")
004647r 2                   ; inline call(invert)
004647r 2  48               pha
004648r 2  48               pha
004649r 2               
004649r 2               @target_1165:
004649r 2               
004649r 2               ; src/prelude.fth:14:12 in `invert`
004649r 2               @OPCODE_3845:   ; [c64_ir] PushLiteral(-1)
004649r 2  E8               inx
00464Ar 2  E8               inx
00464Br 2  A9 FF            lda #255
00464Dr 2  95 00            sta $00,x
00464Fr 2  A9 FF            lda #255
004651r 2  95 01            sta $01,x
004653r 2               
004653r 2               ; src/prelude.fth:14:15 in `invert`
004653r 2               @OPCODE_3846:   ; [c64_ir] Nand
004653r 2                   ; 26
004653r 2  CA               dex
004654r 2  CA               dex
004655r 2  B5 00            lda $00,x
004657r 2  35 02            and $02,x
004659r 2  49 FF            eor #$ff
00465Br 2  95 00            sta $00,x
00465Dr 2  B5 01            lda $01,x
00465Fr 2  35 03            and $03,x
004661r 2  49 FF            eor #$ff
004663r 2  95 01            sta $01,x
004665r 2               
004665r 2               ; src/prelude.fth:14:20 in `invert`
004665r 2               @OPCODE_3847:   ; [c64_ir] InlineExit
004665r 2                   ; inline exit
004665r 2  68               pla
004666r 2  68               pla
004667r 2               
004667r 2               @target_1166:
004667r 2               
004667r 2               ; src/prelude.fth:28:21 in `and`
004667r 2               @OPCODE_3849:   ; [c64_ir] InlineExit
004667r 2                   ; inline exit
004667r 2  68               pla
004668r 2  68               pla
004669r 2               
004669r 2               @target_1167:
004669r 2               
004669r 2               ; snake.fth:8:36 in `random`
004669r 2               @OPCODE_3851:   ; [c64_ir] InlineCall("swap")
004669r 2                   ; inline call(swap)
004669r 2  48               pha
00466Ar 2  48               pha
00466Br 2               
00466Br 2               @target_1168:
00466Br 2               
00466Br 2               ; src/prelude.fth:3:10 in `swap`
00466Br 2               @OPCODE_3853:   ; [c64_ir] AltPush
00466Br 2  CA               dex
00466Cr 2  CA               dex
00466Dr 2  B5 03            lda $03,x
00466Fr 2  48               pha
004670r 2  B5 02            lda $02,x
004672r 2  48               pha
004673r 2               
004673r 2               ; src/prelude.fth:3:13 in `swap`
004673r 2               @OPCODE_3854:   ; [c64_ir] TempStore
004673r 2  CA               dex
004674r 2  CA               dex
004675r 2  B5 03            lda $03,x
004677r 2  85 96            sta TEMP_PAX2
004679r 2  B5 02            lda $02,x
00467Br 2  85 95            sta TEMP_PAX1
00467Dr 2               
00467Dr 2               ; src/prelude.fth:3:19 in `swap`
00467Dr 2               @OPCODE_3855:   ; [c64_ir] AltPop
00467Dr 2  E8               inx
00467Er 2  E8               inx
00467Fr 2  68               pla
004680r 2  95 00            sta $00,x
004682r 2  68               pla
004683r 2  95 01            sta $01,x
004685r 2               
004685r 2               ; src/prelude.fth:3:22 in `swap`
004685r 2               @OPCODE_3856:   ; [c64_ir] TempLoad
004685r 2  E8               inx
004686r 2  E8               inx
004687r 2  A5 95            lda TEMP_PAX1
004689r 2  95 00            sta $00,x
00468Br 2  A5 96            lda TEMP_PAX2
00468Dr 2  95 01            sta $01,x
00468Fr 2               
00468Fr 2               ; src/prelude.fth:3:28 in `swap`
00468Fr 2               @OPCODE_3857:   ; [c64_ir] InlineExit
00468Fr 2                   ; inline exit
00468Fr 2  68               pla
004690r 2  68               pla
004691r 2               
004691r 2               @target_1169:
004691r 2               
004691r 2               ; snake.fth:8:41 in `random`
004691r 2               @OPCODE_3859:   ; [c64_ir] InlineCall("%")
004691r 2                   ; inline call(%)
004691r 2  48               pha
004692r 2  48               pha
004693r 2               
004693r 2               @target_1170:
004693r 2               
004693r 2               ; src/prelude.fth:48:34 in `%`
004693r 2               @OPCODE_3861:   ; [c64_ir] LoopTarget(1170)
004693r 2               
004693r 2               @target_1171:
004693r 2               
004693r 2               ; src/prelude.fth:48:40 in `%`
004693r 2               @OPCODE_3863:   ; [c64_ir] InlineCall("2dup")
004693r 2                   ; inline call(2dup)
004693r 2  48               pha
004694r 2  48               pha
004695r 2               
004695r 2               @target_1172:
004695r 2               
004695r 2               ; src/prelude.fth:8:10 in `2dup`
004695r 2               @OPCODE_3865:   ; [c64_ir] InlineCall("over")
004695r 2                   ; inline call(over)
004695r 2  48               pha
004696r 2  48               pha
004697r 2               
004697r 2               @target_1173:
004697r 2               
004697r 2               ; src/prelude.fth:4:10 in `over`
004697r 2               @OPCODE_3867:   ; [c64_ir] AltPush
004697r 2  CA               dex
004698r 2  CA               dex
004699r 2  B5 03            lda $03,x
00469Br 2  48               pha
00469Cr 2  B5 02            lda $02,x
00469Er 2  48               pha
00469Fr 2               
00469Fr 2               ; src/prelude.fth:4:13 in `over`
00469Fr 2               @OPCODE_3868:   ; [c64_ir] TempStore
00469Fr 2  CA               dex
0046A0r 2  CA               dex
0046A1r 2  B5 03            lda $03,x
0046A3r 2  85 96            sta TEMP_PAX2
0046A5r 2  B5 02            lda $02,x
0046A7r 2  85 95            sta TEMP_PAX1
0046A9r 2               
0046A9r 2               ; src/prelude.fth:4:19 in `over`
0046A9r 2               @OPCODE_3869:   ; [c64_ir] TempLoad
0046A9r 2  E8               inx
0046AAr 2  E8               inx
0046ABr 2  A5 95            lda TEMP_PAX1
0046ADr 2  95 00            sta $00,x
0046AFr 2  A5 96            lda TEMP_PAX2
0046B1r 2  95 01            sta $01,x
0046B3r 2               
0046B3r 2               ; src/prelude.fth:4:25 in `over`
0046B3r 2               @OPCODE_3870:   ; [c64_ir] AltPop
0046B3r 2  E8               inx
0046B4r 2  E8               inx
0046B5r 2  68               pla
0046B6r 2  95 00            sta $00,x
0046B8r 2  68               pla
0046B9r 2  95 01            sta $01,x
0046BBr 2               
0046BBr 2               ; src/prelude.fth:4:28 in `over`
0046BBr 2               @OPCODE_3871:   ; [c64_ir] TempLoad
0046BBr 2  E8               inx
0046BCr 2  E8               inx
0046BDr 2  A5 95            lda TEMP_PAX1
0046BFr 2  95 00            sta $00,x
0046C1r 2  A5 96            lda TEMP_PAX2
0046C3r 2  95 01            sta $01,x
0046C5r 2               
0046C5r 2               ; src/prelude.fth:4:34 in `over`
0046C5r 2               @OPCODE_3872:   ; [c64_ir] InlineExit
0046C5r 2                   ; inline exit
0046C5r 2  68               pla
0046C6r 2  68               pla
0046C7r 2               
0046C7r 2               @target_1174:
0046C7r 2               
0046C7r 2               ; src/prelude.fth:8:15 in `2dup`
0046C7r 2               @OPCODE_3874:   ; [c64_ir] InlineCall("over")
0046C7r 2                   ; inline call(over)
0046C7r 2  48               pha
0046C8r 2  48               pha
0046C9r 2               
0046C9r 2               @target_1175:
0046C9r 2               
0046C9r 2               ; src/prelude.fth:4:10 in `over`
0046C9r 2               @OPCODE_3876:   ; [c64_ir] AltPush
0046C9r 2  CA               dex
0046CAr 2  CA               dex
0046CBr 2  B5 03            lda $03,x
0046CDr 2  48               pha
0046CEr 2  B5 02            lda $02,x
0046D0r 2  48               pha
0046D1r 2               
0046D1r 2               ; src/prelude.fth:4:13 in `over`
0046D1r 2               @OPCODE_3877:   ; [c64_ir] TempStore
0046D1r 2  CA               dex
0046D2r 2  CA               dex
0046D3r 2  B5 03            lda $03,x
0046D5r 2  85 96            sta TEMP_PAX2
0046D7r 2  B5 02            lda $02,x
0046D9r 2  85 95            sta TEMP_PAX1
0046DBr 2               
0046DBr 2               ; src/prelude.fth:4:19 in `over`
0046DBr 2               @OPCODE_3878:   ; [c64_ir] TempLoad
0046DBr 2  E8               inx
0046DCr 2  E8               inx
0046DDr 2  A5 95            lda TEMP_PAX1
0046DFr 2  95 00            sta $00,x
0046E1r 2  A5 96            lda TEMP_PAX2
0046E3r 2  95 01            sta $01,x
0046E5r 2               
0046E5r 2               ; src/prelude.fth:4:25 in `over`
0046E5r 2               @OPCODE_3879:   ; [c64_ir] AltPop
0046E5r 2  E8               inx
0046E6r 2  E8               inx
0046E7r 2  68               pla
0046E8r 2  95 00            sta $00,x
0046EAr 2  68               pla
0046EBr 2  95 01            sta $01,x
0046EDr 2               
0046EDr 2               ; src/prelude.fth:4:28 in `over`
0046EDr 2               @OPCODE_3880:   ; [c64_ir] TempLoad
0046EDr 2  E8               inx
0046EEr 2  E8               inx
0046EFr 2  A5 95            lda TEMP_PAX1
0046F1r 2  95 00            sta $00,x
0046F3r 2  A5 96            lda TEMP_PAX2
0046F5r 2  95 01            sta $01,x
0046F7r 2               
0046F7r 2               ; src/prelude.fth:4:34 in `over`
0046F7r 2               @OPCODE_3881:   ; [c64_ir] InlineExit
0046F7r 2                   ; inline exit
0046F7r 2  68               pla
0046F8r 2  68               pla
0046F9r 2               
0046F9r 2               @target_1176:
0046F9r 2               
0046F9r 2               ; src/prelude.fth:8:20 in `2dup`
0046F9r 2               @OPCODE_3883:   ; [c64_ir] InlineExit
0046F9r 2                   ; inline exit
0046F9r 2  68               pla
0046FAr 2  68               pla
0046FBr 2               
0046FBr 2               @target_1177:
0046FBr 2               
0046FBr 2               ; src/prelude.fth:48:45 in `%`
0046FBr 2               @OPCODE_3885:   ; [c64_ir] InlineCall("-")
0046FBr 2                   ; inline call(-)
0046FBr 2  48               pha
0046FCr 2  48               pha
0046FDr 2               
0046FDr 2               @target_1178:
0046FDr 2               
0046FDr 2               ; src/prelude.fth:16:12 in `-`
0046FDr 2               @OPCODE_3887:   ; [c64_ir] InlineCall("negate")
0046FDr 2                   ; inline call(negate)
0046FDr 2  48               pha
0046FEr 2  48               pha
0046FFr 2               
0046FFr 2               @target_1179:
0046FFr 2               
0046FFr 2               ; src/prelude.fth:15:12 in `negate`
0046FFr 2               @OPCODE_3889:   ; [c64_ir] InlineCall("invert")
0046FFr 2                   ; inline call(invert)
0046FFr 2  48               pha
004700r 2  48               pha
004701r 2               
004701r 2               @target_1180:
004701r 2               
004701r 2               ; src/prelude.fth:14:12 in `invert`
004701r 2               @OPCODE_3891:   ; [c64_ir] PushLiteral(-1)
004701r 2  E8               inx
004702r 2  E8               inx
004703r 2  A9 FF            lda #255
004705r 2  95 00            sta $00,x
004707r 2  A9 FF            lda #255
004709r 2  95 01            sta $01,x
00470Br 2               
00470Br 2               ; src/prelude.fth:14:15 in `invert`
00470Br 2               @OPCODE_3892:   ; [c64_ir] Nand
00470Br 2                   ; 26
00470Br 2  CA               dex
00470Cr 2  CA               dex
00470Dr 2  B5 00            lda $00,x
00470Fr 2  35 02            and $02,x
004711r 2  49 FF            eor #$ff
004713r 2  95 00            sta $00,x
004715r 2  B5 01            lda $01,x
004717r 2  35 03            and $03,x
004719r 2  49 FF            eor #$ff
00471Br 2  95 01            sta $01,x
00471Dr 2               
00471Dr 2               ; src/prelude.fth:14:20 in `invert`
00471Dr 2               @OPCODE_3893:   ; [c64_ir] InlineExit
00471Dr 2                   ; inline exit
00471Dr 2  68               pla
00471Er 2  68               pla
00471Fr 2               
00471Fr 2               @target_1181:
00471Fr 2               
00471Fr 2               ; src/prelude.fth:15:19 in `negate`
00471Fr 2               @OPCODE_3895:   ; [c64_ir] PushLiteral(1)
00471Fr 2  E8               inx
004720r 2  E8               inx
004721r 2  A9 01            lda #1
004723r 2  95 00            sta $00,x
004725r 2  A9 00            lda #0
004727r 2  95 01            sta $01,x
004729r 2               
004729r 2               ; src/prelude.fth:15:21 in `negate`
004729r 2               @OPCODE_3896:   ; [c64_ir] Add
004729r 2                   ; 21
004729r 2  CA               dex
00472Ar 2  CA               dex
00472Br 2  18               clc
00472Cr 2  B5 00            lda $00,x
00472Er 2  75 02            adc $02,x
004730r 2  95 00            sta $00,x
004732r 2  B5 01            lda $01,x
004734r 2  75 03            adc $03,x
004736r 2  95 01            sta $01,x
004738r 2               
004738r 2               ; src/prelude.fth:15:23 in `negate`
004738r 2               @OPCODE_3897:   ; [c64_ir] InlineExit
004738r 2                   ; inline exit
004738r 2  68               pla
004739r 2  68               pla
00473Ar 2               
00473Ar 2               @target_1182:
00473Ar 2               
00473Ar 2               ; src/prelude.fth:16:19 in `-`
00473Ar 2               @OPCODE_3899:   ; [c64_ir] Add
00473Ar 2                   ; 21
00473Ar 2  CA               dex
00473Br 2  CA               dex
00473Cr 2  18               clc
00473Dr 2  B5 00            lda $00,x
00473Fr 2  75 02            adc $02,x
004741r 2  95 00            sta $00,x
004743r 2  B5 01            lda $01,x
004745r 2  75 03            adc $03,x
004747r 2  95 01            sta $01,x
004749r 2               
004749r 2               ; src/prelude.fth:16:21 in `-`
004749r 2               @OPCODE_3900:   ; [c64_ir] InlineExit
004749r 2                   ; inline exit
004749r 2  68               pla
00474Ar 2  68               pla
00474Br 2               
00474Br 2               @target_1183:
00474Br 2               
00474Br 2               ; src/prelude.fth:48:47 in `%`
00474Br 2               @OPCODE_3902:   ; [c64_ir] InlineCall("dup")
00474Br 2                   ; inline call(dup)
00474Br 2  48               pha
00474Cr 2  48               pha
00474Dr 2               
00474Dr 2               @target_1184:
00474Dr 2               
00474Dr 2               ; src/prelude.fth:6:10 in `dup`
00474Dr 2               @OPCODE_3904:   ; [c64_ir] TempStore
00474Dr 2  CA               dex
00474Er 2  CA               dex
00474Fr 2  B5 03            lda $03,x
004751r 2  85 96            sta TEMP_PAX2
004753r 2  B5 02            lda $02,x
004755r 2  85 95            sta TEMP_PAX1
004757r 2               
004757r 2               ; src/prelude.fth:6:16 in `dup`
004757r 2               @OPCODE_3905:   ; [c64_ir] TempLoad
004757r 2  E8               inx
004758r 2  E8               inx
004759r 2  A5 95            lda TEMP_PAX1
00475Br 2  95 00            sta $00,x
00475Dr 2  A5 96            lda TEMP_PAX2
00475Fr 2  95 01            sta $01,x
004761r 2               
004761r 2               ; src/prelude.fth:6:22 in `dup`
004761r 2               @OPCODE_3906:   ; [c64_ir] TempLoad
004761r 2  E8               inx
004762r 2  E8               inx
004763r 2  A5 95            lda TEMP_PAX1
004765r 2  95 00            sta $00,x
004767r 2  A5 96            lda TEMP_PAX2
004769r 2  95 01            sta $01,x
00476Br 2               
00476Br 2               ; src/prelude.fth:6:28 in `dup`
00476Br 2               @OPCODE_3907:   ; [c64_ir] InlineExit
00476Br 2                   ; inline exit
00476Br 2  68               pla
00476Cr 2  68               pla
00476Dr 2               
00476Dr 2               @target_1185:
00476Dr 2               
00476Dr 2               ; src/prelude.fth:48:51 in `%`
00476Dr 2               @OPCODE_3909:   ; [c64_ir] InlineCall("0<")
00476Dr 2                   ; inline call(0<)
00476Dr 2  48               pha
00476Er 2  48               pha
00476Fr 2               
00476Fr 2               @target_1186:
00476Fr 2               
00476Fr 2               ; src/prelude.fth:47:8 in `0<`
00476Fr 2               @OPCODE_3911:   ; [c64_ir] PushLiteral(-32768)
00476Fr 2  E8               inx
004770r 2  E8               inx
004771r 2  A9 00            lda #0
004773r 2  95 00            sta $00,x
004775r 2  A9 80            lda #128
004777r 2  95 01            sta $01,x
004779r 2               
004779r 2               ; src/prelude.fth:47:14 in `0<`
004779r 2               @OPCODE_3912:   ; [c64_ir] Nand
004779r 2                   ; 26
004779r 2  CA               dex
00477Ar 2  CA               dex
00477Br 2  B5 00            lda $00,x
00477Dr 2  35 02            and $02,x
00477Fr 2  49 FF            eor #$ff
004781r 2  95 00            sta $00,x
004783r 2  B5 01            lda $01,x
004785r 2  35 03            and $03,x
004787r 2  49 FF            eor #$ff
004789r 2  95 01            sta $01,x
00478Br 2               
00478Br 2               ; src/prelude.fth:47:19 in `0<`
00478Br 2               @OPCODE_3913:   ; [c64_ir] InlineCall("invert")
00478Br 2                   ; inline call(invert)
00478Br 2  48               pha
00478Cr 2  48               pha
00478Dr 2               
00478Dr 2               @target_1187:
00478Dr 2               
00478Dr 2               ; src/prelude.fth:14:12 in `invert`
00478Dr 2               @OPCODE_3915:   ; [c64_ir] PushLiteral(-1)
00478Dr 2  E8               inx
00478Er 2  E8               inx
00478Fr 2  A9 FF            lda #255
004791r 2  95 00            sta $00,x
004793r 2  A9 FF            lda #255
004795r 2  95 01            sta $01,x
004797r 2               
004797r 2               ; src/prelude.fth:14:15 in `invert`
004797r 2               @OPCODE_3916:   ; [c64_ir] Nand
004797r 2                   ; 26
004797r 2  CA               dex
004798r 2  CA               dex
004799r 2  B5 00            lda $00,x
00479Br 2  35 02            and $02,x
00479Dr 2  49 FF            eor #$ff
00479Fr 2  95 00            sta $00,x
0047A1r 2  B5 01            lda $01,x
0047A3r 2  35 03            and $03,x
0047A5r 2  49 FF            eor #$ff
0047A7r 2  95 01            sta $01,x
0047A9r 2               
0047A9r 2               ; src/prelude.fth:14:20 in `invert`
0047A9r 2               @OPCODE_3917:   ; [c64_ir] InlineExit
0047A9r 2                   ; inline exit
0047A9r 2  68               pla
0047AAr 2  68               pla
0047ABr 2               
0047ABr 2               @target_1188:
0047ABr 2               
0047ABr 2               ; src/prelude.fth:47:26 in `0<`
0047ABr 2               @OPCODE_3919:   ; [c64_ir] JumpIf0(1190)
0047ABr 2  CA               dex
0047ACr 2  CA               dex
0047ADr 2  B5 02            lda $02,x
0047AFr 2  15 03            ora $03,x
0047B1r 2  D0 03            bne *+5
0047B3r 2  4C rr rr         jmp @target_1190
0047B6r 2               
0047B6r 2               @target_1189:
0047B6r 2               
0047B6r 2               ; src/prelude.fth:47:29 in `0<`
0047B6r 2               @OPCODE_3921:   ; [c64_ir] PushLiteral(-1)
0047B6r 2  E8               inx
0047B7r 2  E8               inx
0047B8r 2  A9 FF            lda #255
0047BAr 2  95 00            sta $00,x
0047BCr 2  A9 FF            lda #255
0047BEr 2  95 01            sta $01,x
0047C0r 2               
0047C0r 2               ; src/prelude.fth:47:32 in `0<`
0047C0r 2               @OPCODE_3922:   ; [c64_ir] JumpElse(1191)
0047C0r 2  4C rr rr         jmp @target_1191
0047C3r 2               
0047C3r 2               @target_1190:
0047C3r 2               
0047C3r 2               ; src/prelude.fth:47:37 in `0<`
0047C3r 2               @OPCODE_3924:   ; [c64_ir] PushLiteral(0)
0047C3r 2  E8               inx
0047C4r 2  E8               inx
0047C5r 2  A9 00            lda #0
0047C7r 2  95 00            sta $00,x
0047C9r 2  A9 00            lda #0
0047CBr 2  95 01            sta $01,x
0047CDr 2               
0047CDr 2               ; src/prelude.fth:47:39 in `0<`
0047CDr 2               @OPCODE_3925:   ; [c64_ir] JumpTarget(1190)
0047CDr 2               
0047CDr 2               @target_1191:
0047CDr 2               
0047CDr 2               ; src/prelude.fth:47:44 in `0<`
0047CDr 2               @OPCODE_3927:   ; [c64_ir] InlineExit
0047CDr 2                   ; inline exit
0047CDr 2  68               pla
0047CEr 2  68               pla
0047CFr 2               
0047CFr 2               @target_1192:
0047CFr 2               
0047CFr 2               ; src/prelude.fth:48:54 in `%`
0047CFr 2               @OPCODE_3929:   ; [c64_ir] JumpIf0(1194)
0047CFr 2  CA               dex
0047D0r 2  CA               dex
0047D1r 2  B5 02            lda $02,x
0047D3r 2  15 03            ora $03,x
0047D5r 2  D0 03            bne *+5
0047D7r 2  4C rr rr         jmp @target_1194
0047DAr 2               
0047DAr 2               @target_1193:
0047DAr 2               
0047DAr 2               ; src/prelude.fth:48:57 in `%`
0047DAr 2               @OPCODE_3931:   ; [c64_ir] Add
0047DAr 2                   ; 21
0047DAr 2  CA               dex
0047DBr 2  CA               dex
0047DCr 2  18               clc
0047DDr 2  B5 00            lda $00,x
0047DFr 2  75 02            adc $02,x
0047E1r 2  95 00            sta $00,x
0047E3r 2  B5 01            lda $01,x
0047E5r 2  75 03            adc $03,x
0047E7r 2  95 01            sta $01,x
0047E9r 2               
0047E9r 2               ; src/prelude.fth:48:59 in `%`
0047E9r 2               @OPCODE_3932:   ; [c64_ir] PushLiteral(-1)
0047E9r 2  E8               inx
0047EAr 2  E8               inx
0047EBr 2  A9 FF            lda #255
0047EDr 2  95 00            sta $00,x
0047EFr 2  A9 FF            lda #255
0047F1r 2  95 01            sta $01,x
0047F3r 2               
0047F3r 2               ; src/prelude.fth:48:62 in `%`
0047F3r 2               @OPCODE_3933:   ; [c64_ir] JumpElse(1203)
0047F3r 2  4C rr rr         jmp @target_1203
0047F6r 2               
0047F6r 2               @target_1194:
0047F6r 2               
0047F6r 2               ; src/prelude.fth:48:67 in `%`
0047F6r 2               @OPCODE_3935:   ; [c64_ir] InlineCall("rot")
0047F6r 2                   ; inline call(rot)
0047F6r 2  48               pha
0047F7r 2  48               pha
0047F8r 2               
0047F8r 2               @target_1195:
0047F8r 2               
0047F8r 2               ; src/prelude.fth:5:10 in `rot`
0047F8r 2               @OPCODE_3937:   ; [c64_ir] AltPush
0047F8r 2  CA               dex
0047F9r 2  CA               dex
0047FAr 2  B5 03            lda $03,x
0047FCr 2  48               pha
0047FDr 2  B5 02            lda $02,x
0047FFr 2  48               pha
004800r 2               
004800r 2               ; src/prelude.fth:5:13 in `rot`
004800r 2               @OPCODE_3938:   ; [c64_ir] InlineCall("swap")
004800r 2                   ; inline call(swap)
004800r 2  48               pha
004801r 2  48               pha
004802r 2               
004802r 2               @target_1196:
004802r 2               
004802r 2               ; src/prelude.fth:3:10 in `swap`
004802r 2               @OPCODE_3940:   ; [c64_ir] AltPush
004802r 2  CA               dex
004803r 2  CA               dex
004804r 2  B5 03            lda $03,x
004806r 2  48               pha
004807r 2  B5 02            lda $02,x
004809r 2  48               pha
00480Ar 2               
00480Ar 2               ; src/prelude.fth:3:13 in `swap`
00480Ar 2               @OPCODE_3941:   ; [c64_ir] TempStore
00480Ar 2  CA               dex
00480Br 2  CA               dex
00480Cr 2  B5 03            lda $03,x
00480Er 2  85 96            sta TEMP_PAX2
004810r 2  B5 02            lda $02,x
004812r 2  85 95            sta TEMP_PAX1
004814r 2               
004814r 2               ; src/prelude.fth:3:19 in `swap`
004814r 2               @OPCODE_3942:   ; [c64_ir] AltPop
004814r 2  E8               inx
004815r 2  E8               inx
004816r 2  68               pla
004817r 2  95 00            sta $00,x
004819r 2  68               pla
00481Ar 2  95 01            sta $01,x
00481Cr 2               
00481Cr 2               ; src/prelude.fth:3:22 in `swap`
00481Cr 2               @OPCODE_3943:   ; [c64_ir] TempLoad
00481Cr 2  E8               inx
00481Dr 2  E8               inx
00481Er 2  A5 95            lda TEMP_PAX1
004820r 2  95 00            sta $00,x
004822r 2  A5 96            lda TEMP_PAX2
004824r 2  95 01            sta $01,x
004826r 2               
004826r 2               ; src/prelude.fth:3:28 in `swap`
004826r 2               @OPCODE_3944:   ; [c64_ir] InlineExit
004826r 2                   ; inline exit
004826r 2  68               pla
004827r 2  68               pla
004828r 2               
004828r 2               @target_1197:
004828r 2               
004828r 2               ; src/prelude.fth:5:18 in `rot`
004828r 2               @OPCODE_3946:   ; [c64_ir] AltPop
004828r 2  E8               inx
004829r 2  E8               inx
00482Ar 2  68               pla
00482Br 2  95 00            sta $00,x
00482Dr 2  68               pla
00482Er 2  95 01            sta $01,x
004830r 2               
004830r 2               ; src/prelude.fth:5:21 in `rot`
004830r 2               @OPCODE_3947:   ; [c64_ir] InlineCall("swap")
004830r 2                   ; inline call(swap)
004830r 2  48               pha
004831r 2  48               pha
004832r 2               
004832r 2               @target_1198:
004832r 2               
004832r 2               ; src/prelude.fth:3:10 in `swap`
004832r 2               @OPCODE_3949:   ; [c64_ir] AltPush
004832r 2  CA               dex
004833r 2  CA               dex
004834r 2  B5 03            lda $03,x
004836r 2  48               pha
004837r 2  B5 02            lda $02,x
004839r 2  48               pha
00483Ar 2               
00483Ar 2               ; src/prelude.fth:3:13 in `swap`
00483Ar 2               @OPCODE_3950:   ; [c64_ir] TempStore
00483Ar 2  CA               dex
00483Br 2  CA               dex
00483Cr 2  B5 03            lda $03,x
00483Er 2  85 96            sta TEMP_PAX2
004840r 2  B5 02            lda $02,x
004842r 2  85 95            sta TEMP_PAX1
004844r 2               
004844r 2               ; src/prelude.fth:3:19 in `swap`
004844r 2               @OPCODE_3951:   ; [c64_ir] AltPop
004844r 2  E8               inx
004845r 2  E8               inx
004846r 2  68               pla
004847r 2  95 00            sta $00,x
004849r 2  68               pla
00484Ar 2  95 01            sta $01,x
00484Cr 2               
00484Cr 2               ; src/prelude.fth:3:22 in `swap`
00484Cr 2               @OPCODE_3952:   ; [c64_ir] TempLoad
00484Cr 2  E8               inx
00484Dr 2  E8               inx
00484Er 2  A5 95            lda TEMP_PAX1
004850r 2  95 00            sta $00,x
004852r 2  A5 96            lda TEMP_PAX2
004854r 2  95 01            sta $01,x
004856r 2               
004856r 2               ; src/prelude.fth:3:28 in `swap`
004856r 2               @OPCODE_3953:   ; [c64_ir] InlineExit
004856r 2                   ; inline exit
004856r 2  68               pla
004857r 2  68               pla
004858r 2               
004858r 2               @target_1199:
004858r 2               
004858r 2               ; src/prelude.fth:5:26 in `rot`
004858r 2               @OPCODE_3955:   ; [c64_ir] InlineExit
004858r 2                   ; inline exit
004858r 2  68               pla
004859r 2  68               pla
00485Ar 2               
00485Ar 2               @target_1200:
00485Ar 2               
00485Ar 2               ; src/prelude.fth:48:71 in `%`
00485Ar 2               @OPCODE_3957:   ; [c64_ir] Drop
00485Ar 2  CA               dex
00485Br 2  CA               dex
00485Cr 2               
00485Cr 2               ; src/prelude.fth:48:76 in `%`
00485Cr 2               @OPCODE_3958:   ; [c64_ir] InlineCall("swap")
00485Cr 2                   ; inline call(swap)
00485Cr 2  48               pha
00485Dr 2  48               pha
00485Er 2               
00485Er 2               @target_1201:
00485Er 2               
00485Er 2               ; src/prelude.fth:3:10 in `swap`
00485Er 2               @OPCODE_3960:   ; [c64_ir] AltPush
00485Er 2  CA               dex
00485Fr 2  CA               dex
004860r 2  B5 03            lda $03,x
004862r 2  48               pha
004863r 2  B5 02            lda $02,x
004865r 2  48               pha
004866r 2               
004866r 2               ; src/prelude.fth:3:13 in `swap`
004866r 2               @OPCODE_3961:   ; [c64_ir] TempStore
004866r 2  CA               dex
004867r 2  CA               dex
004868r 2  B5 03            lda $03,x
00486Ar 2  85 96            sta TEMP_PAX2
00486Cr 2  B5 02            lda $02,x
00486Er 2  85 95            sta TEMP_PAX1
004870r 2               
004870r 2               ; src/prelude.fth:3:19 in `swap`
004870r 2               @OPCODE_3962:   ; [c64_ir] AltPop
004870r 2  E8               inx
004871r 2  E8               inx
004872r 2  68               pla
004873r 2  95 00            sta $00,x
004875r 2  68               pla
004876r 2  95 01            sta $01,x
004878r 2               
004878r 2               ; src/prelude.fth:3:22 in `swap`
004878r 2               @OPCODE_3963:   ; [c64_ir] TempLoad
004878r 2  E8               inx
004879r 2  E8               inx
00487Ar 2  A5 95            lda TEMP_PAX1
00487Cr 2  95 00            sta $00,x
00487Er 2  A5 96            lda TEMP_PAX2
004880r 2  95 01            sta $01,x
004882r 2               
004882r 2               ; src/prelude.fth:3:28 in `swap`
004882r 2               @OPCODE_3964:   ; [c64_ir] InlineExit
004882r 2                   ; inline exit
004882r 2  68               pla
004883r 2  68               pla
004884r 2               
004884r 2               @target_1202:
004884r 2               
004884r 2               ; src/prelude.fth:48:81 in `%`
004884r 2               @OPCODE_3966:   ; [c64_ir] PushLiteral(0)
004884r 2  E8               inx
004885r 2  E8               inx
004886r 2  A9 00            lda #0
004888r 2  95 00            sta $00,x
00488Ar 2  A9 00            lda #0
00488Cr 2  95 01            sta $01,x
00488Er 2               
00488Er 2               ; src/prelude.fth:48:83 in `%`
00488Er 2               @OPCODE_3967:   ; [c64_ir] JumpTarget(1202)
00488Er 2               
00488Er 2               @target_1203:
00488Er 2               
00488Er 2               ; src/prelude.fth:48:88 in `%`
00488Er 2               @OPCODE_3969:   ; [c64_ir] LoopIf0(1171)
00488Er 2  CA               dex
00488Fr 2  CA               dex
004890r 2  B5 02            lda $02,x
004892r 2  15 03            ora $03,x
004894r 2  D0 03            bne *+5
004896r 2  4C rr rr         jmp @target_1171
004899r 2               
004899r 2               @target_1204:
004899r 2               
004899r 2               ; src/prelude.fth:48:94 in `%`
004899r 2               @OPCODE_3971:   ; [c64_ir] InlineCall("swap")
004899r 2                   ; inline call(swap)
004899r 2  48               pha
00489Ar 2  48               pha
00489Br 2               
00489Br 2               @target_1205:
00489Br 2               
00489Br 2               ; src/prelude.fth:3:10 in `swap`
00489Br 2               @OPCODE_3973:   ; [c64_ir] AltPush
00489Br 2  CA               dex
00489Cr 2  CA               dex
00489Dr 2  B5 03            lda $03,x
00489Fr 2  48               pha
0048A0r 2  B5 02            lda $02,x
0048A2r 2  48               pha
0048A3r 2               
0048A3r 2               ; src/prelude.fth:3:13 in `swap`
0048A3r 2               @OPCODE_3974:   ; [c64_ir] TempStore
0048A3r 2  CA               dex
0048A4r 2  CA               dex
0048A5r 2  B5 03            lda $03,x
0048A7r 2  85 96            sta TEMP_PAX2
0048A9r 2  B5 02            lda $02,x
0048ABr 2  85 95            sta TEMP_PAX1
0048ADr 2               
0048ADr 2               ; src/prelude.fth:3:19 in `swap`
0048ADr 2               @OPCODE_3975:   ; [c64_ir] AltPop
0048ADr 2  E8               inx
0048AEr 2  E8               inx
0048AFr 2  68               pla
0048B0r 2  95 00            sta $00,x
0048B2r 2  68               pla
0048B3r 2  95 01            sta $01,x
0048B5r 2               
0048B5r 2               ; src/prelude.fth:3:22 in `swap`
0048B5r 2               @OPCODE_3976:   ; [c64_ir] TempLoad
0048B5r 2  E8               inx
0048B6r 2  E8               inx
0048B7r 2  A5 95            lda TEMP_PAX1
0048B9r 2  95 00            sta $00,x
0048BBr 2  A5 96            lda TEMP_PAX2
0048BDr 2  95 01            sta $01,x
0048BFr 2               
0048BFr 2               ; src/prelude.fth:3:28 in `swap`
0048BFr 2               @OPCODE_3977:   ; [c64_ir] InlineExit
0048BFr 2                   ; inline exit
0048BFr 2  68               pla
0048C0r 2  68               pla
0048C1r 2               
0048C1r 2               @target_1206:
0048C1r 2               
0048C1r 2               ; src/prelude.fth:48:99 in `%`
0048C1r 2               @OPCODE_3979:   ; [c64_ir] Drop
0048C1r 2  CA               dex
0048C2r 2  CA               dex
0048C3r 2               
0048C3r 2               ; src/prelude.fth:48:104 in `%`
0048C3r 2               @OPCODE_3980:   ; [c64_ir] InlineExit
0048C3r 2                   ; inline exit
0048C3r 2  68               pla
0048C4r 2  68               pla
0048C5r 2               
0048C5r 2               @target_1207:
0048C5r 2               
0048C5r 2               ; snake.fth:8:43 in `random`
0048C5r 2               @OPCODE_3982:   ; [c64_ir] InlineExit
0048C5r 2                   ; inline exit
0048C5r 2  68               pla
0048C6r 2  68               pla
0048C7r 2               
0048C7r 2               @target_1208:
0048C7r 2               
0048C7r 2               ; snake.fth:174:21 in `random-y-position`
0048C7r 2               @OPCODE_3984:   ; [c64_ir] PushLiteral(2)
0048C7r 2  E8               inx
0048C8r 2  E8               inx
0048C9r 2  A9 02            lda #2
0048CBr 2  95 00            sta $00,x
0048CDr 2  A9 00            lda #0
0048CFr 2  95 01            sta $01,x
0048D1r 2               
0048D1r 2               ; snake.fth:174:23 in `random-y-position`
0048D1r 2               @OPCODE_3985:   ; [c64_ir] Add
0048D1r 2                   ; 21
0048D1r 2  CA               dex
0048D2r 2  CA               dex
0048D3r 2  18               clc
0048D4r 2  B5 00            lda $00,x
0048D6r 2  75 02            adc $02,x
0048D8r 2  95 00            sta $00,x
0048DAr 2  B5 01            lda $01,x
0048DCr 2  75 03            adc $03,x
0048DEr 2  95 01            sta $01,x
0048E0r 2               
0048E0r 2               ; snake.fth:174:25 in `random-y-position`
0048E0r 2               @OPCODE_3986:   ; [c64_ir] InlineExit
0048E0r 2                   ; inline exit
0048E0r 2  68               pla
0048E1r 2  68               pla
0048E2r 2               
0048E2r 2               @target_1209:
0048E2r 2               
0048E2r 2               ; snake.fth:179:3 in `move-apple`
0048E2r 2               @OPCODE_3988:   ; [c64_ir] InlineCall("set-apple-position")
0048E2r 2                   ; inline call(set-apple-position)
0048E2r 2  48               pha
0048E3r 2  48               pha
0048E4r 2               
0048E4r 2               @target_1210:
0048E4r 2               
0048E4r 2               ; snake.fth:105:22 in `set-apple-position`
0048E4r 2               @OPCODE_3990:   ; [c64_ir] PushLiteral(-26664)
0048E4r 2  E8               inx
0048E5r 2  E8               inx
0048E6r 2  A9 D8            lda #216
0048E8r 2  95 00            sta $00,x
0048EAr 2  A9 97            lda #151
0048ECr 2  95 01            sta $01,x
0048EEr 2               
0048EEr 2               ; snake.fth:105:30 in `set-apple-position`
0048EEr 2               @OPCODE_3991:   ; [c64_ir] Store
0048EEr 2  CA               dex
0048EFr 2  CA               dex
0048F0r 2  CA               dex
0048F1r 2  CA               dex
0048F2r 2  B5 02            lda $02,x
0048F4r 2  81 04            sta ($04,x)
0048F6r 2                   ; TODO high byte
0048F6r 2               
0048F6r 2               ; snake.fth:105:32 in `set-apple-position`
0048F6r 2               @OPCODE_3992:   ; [c64_ir] PushLiteral(-26662)
0048F6r 2  E8               inx
0048F7r 2  E8               inx
0048F8r 2  A9 DA            lda #218
0048FAr 2  95 00            sta $00,x
0048FCr 2  A9 97            lda #151
0048FEr 2  95 01            sta $01,x
004900r 2               
004900r 2               ; snake.fth:105:40 in `set-apple-position`
004900r 2               @OPCODE_3993:   ; [c64_ir] Store
004900r 2  CA               dex
004901r 2  CA               dex
004902r 2  CA               dex
004903r 2  CA               dex
004904r 2  B5 02            lda $02,x
004906r 2  81 04            sta ($04,x)
004908r 2                   ; TODO high byte
004908r 2               
004908r 2               ; snake.fth:105:42 in `set-apple-position`
004908r 2               @OPCODE_3994:   ; [c64_ir] InlineExit
004908r 2                   ; inline exit
004908r 2  68               pla
004909r 2  68               pla
00490Ar 2               
00490Ar 2               @target_1211:
00490Ar 2               
00490Ar 2               ; snake.fth:179:22 in `move-apple`
00490Ar 2               @OPCODE_3996:   ; [c64_ir] InlineExit
00490Ar 2                   ; inline exit
00490Ar 2  68               pla
00490Br 2  68               pla
00490Cr 2               
00490Cr 2               @target_1212:
00490Cr 2               
00490Cr 2               ; snake.fth:188:5 in `check-apple`
00490Cr 2               @OPCODE_3998:   ; [c64_ir] InlineCall("grow-snake")
00490Cr 2                   ; inline call(grow-snake)
00490Cr 2  48               pha
00490Dr 2  48               pha
00490Er 2               
00490Er 2               @target_1213:
00490Er 2               
00490Er 2               ; snake.fth:181:15 in `grow-snake`
00490Er 2               @OPCODE_4000:   ; [c64_ir] PushLiteral(1)
00490Er 2  E8               inx
00490Fr 2  E8               inx
004910r 2  A9 01            lda #1
004912r 2  95 00            sta $00,x
004914r 2  A9 00            lda #0
004916r 2  95 01            sta $01,x
004918r 2               
004918r 2               ; snake.fth:181:17 in `grow-snake`
004918r 2               @OPCODE_4001:   ; [c64_ir] PushLiteral(-26658)
004918r 2  E8               inx
004919r 2  E8               inx
00491Ar 2  A9 DE            lda #222
00491Cr 2  95 00            sta $00,x
00491Er 2  A9 97            lda #151
004920r 2  95 01            sta $01,x
004922r 2               
004922r 2               ; snake.fth:181:24 in `grow-snake`
004922r 2               @OPCODE_4002:   ; [c64_ir] InlineCall("+!")
004922r 2                   ; inline call(+!)
004922r 2  48               pha
004923r 2  48               pha
004924r 2               
004924r 2               @target_1214:
004924r 2               
004924r 2               ; src/prelude.fth:20:8 in `+!`
004924r 2               @OPCODE_4004:   ; [c64_ir] InlineCall("dup")
004924r 2                   ; inline call(dup)
004924r 2  48               pha
004925r 2  48               pha
004926r 2               
004926r 2               @target_1215:
004926r 2               
004926r 2               ; src/prelude.fth:6:10 in `dup`
004926r 2               @OPCODE_4006:   ; [c64_ir] TempStore
004926r 2  CA               dex
004927r 2  CA               dex
004928r 2  B5 03            lda $03,x
00492Ar 2  85 96            sta TEMP_PAX2
00492Cr 2  B5 02            lda $02,x
00492Er 2  85 95            sta TEMP_PAX1
004930r 2               
004930r 2               ; src/prelude.fth:6:16 in `dup`
004930r 2               @OPCODE_4007:   ; [c64_ir] TempLoad
004930r 2  E8               inx
004931r 2  E8               inx
004932r 2  A5 95            lda TEMP_PAX1
004934r 2  95 00            sta $00,x
004936r 2  A5 96            lda TEMP_PAX2
004938r 2  95 01            sta $01,x
00493Ar 2               
00493Ar 2               ; src/prelude.fth:6:22 in `dup`
00493Ar 2               @OPCODE_4008:   ; [c64_ir] TempLoad
00493Ar 2  E8               inx
00493Br 2  E8               inx
00493Cr 2  A5 95            lda TEMP_PAX1
00493Er 2  95 00            sta $00,x
004940r 2  A5 96            lda TEMP_PAX2
004942r 2  95 01            sta $01,x
004944r 2               
004944r 2               ; src/prelude.fth:6:28 in `dup`
004944r 2               @OPCODE_4009:   ; [c64_ir] InlineExit
004944r 2                   ; inline exit
004944r 2  68               pla
004945r 2  68               pla
004946r 2               
004946r 2               @target_1216:
004946r 2               
004946r 2               ; src/prelude.fth:20:12 in `+!`
004946r 2               @OPCODE_4011:   ; [c64_ir] AltPush
004946r 2  CA               dex
004947r 2  CA               dex
004948r 2  B5 03            lda $03,x
00494Ar 2  48               pha
00494Br 2  B5 02            lda $02,x
00494Dr 2  48               pha
00494Er 2               
00494Er 2               ; src/prelude.fth:20:15 in `+!`
00494Er 2               @OPCODE_4012:   ; [c64_ir] Load
00494Er 2  A1 00            lda ($00,x)
004950r 2  95 00            sta $00,x
004952r 2  A9 00            lda #0
004954r 2  95 01            sta $01,x
004956r 2               
004956r 2               ; src/prelude.fth:20:17 in `+!`
004956r 2               @OPCODE_4013:   ; [c64_ir] Add
004956r 2                   ; 21
004956r 2  CA               dex
004957r 2  CA               dex
004958r 2  18               clc
004959r 2  B5 00            lda $00,x
00495Br 2  75 02            adc $02,x
00495Dr 2  95 00            sta $00,x
00495Fr 2  B5 01            lda $01,x
004961r 2  75 03            adc $03,x
004963r 2  95 01            sta $01,x
004965r 2               
004965r 2               ; src/prelude.fth:20:19 in `+!`
004965r 2               @OPCODE_4014:   ; [c64_ir] AltPop
004965r 2  E8               inx
004966r 2  E8               inx
004967r 2  68               pla
004968r 2  95 00            sta $00,x
00496Ar 2  68               pla
00496Br 2  95 01            sta $01,x
00496Dr 2               
00496Dr 2               ; src/prelude.fth:20:22 in `+!`
00496Dr 2               @OPCODE_4015:   ; [c64_ir] Store
00496Dr 2  CA               dex
00496Er 2  CA               dex
00496Fr 2  CA               dex
004970r 2  CA               dex
004971r 2  B5 02            lda $02,x
004973r 2  81 04            sta ($04,x)
004975r 2                   ; TODO high byte
004975r 2               
004975r 2               ; src/prelude.fth:20:24 in `+!`
004975r 2               @OPCODE_4016:   ; [c64_ir] InlineExit
004975r 2                   ; inline exit
004975r 2  68               pla
004976r 2  68               pla
004977r 2               
004977r 2               @target_1217:
004977r 2               
004977r 2               ; snake.fth:181:27 in `grow-snake`
004977r 2               @OPCODE_4018:   ; [c64_ir] InlineExit
004977r 2                   ; inline exit
004977r 2  68               pla
004978r 2  68               pla
004979r 2               
004979r 2               @target_1218:
004979r 2               
004979r 2               ; snake.fth:189:3 in `check-apple`
004979r 2               @OPCODE_4020:   ; [c64_ir] JumpTarget(1218)
004979r 2               
004979r 2               @target_1219:
004979r 2               
004979r 2               ; snake.fth:189:8 in `check-apple`
004979r 2               @OPCODE_4022:   ; [c64_ir] InlineExit
004979r 2                   ; inline exit
004979r 2  68               pla
00497Ar 2  68               pla
00497Br 2               
00497Br 2               @target_1220:
00497Br 2               
00497Br 2               ; snake.fth:223:1 in `main`
00497Br 2               @OPCODE_4024:   ; [c64_ir] InlineCall("check-collision")
00497Br 2                   ; inline call(check-collision)
00497Br 2  48               pha
00497Cr 2  48               pha
00497Dr 2               
00497Dr 2               @target_1221:
00497Dr 2               
00497Dr 2               ; snake.fth:193:3 in `check-collision`
00497Dr 2               @OPCODE_4026:   ; [c64_ir] PushLiteral(-28668)
00497Dr 2  E8               inx
00497Er 2  E8               inx
00497Fr 2  A9 04            lda #4
004981r 2  95 00            sta $00,x
004983r 2  A9 90            lda #144
004985r 2  95 01            sta $01,x
004987r 2               
004987r 2               ; snake.fth:193:16 in `check-collision`
004987r 2               @OPCODE_4027:   ; [c64_ir] Load
004987r 2  A1 00            lda ($00,x)
004989r 2  95 00            sta $00,x
00498Br 2  A9 00            lda #0
00498Dr 2  95 01            sta $01,x
00498Fr 2               
00498Fr 2               ; snake.fth:193:18 in `check-collision`
00498Fr 2               @OPCODE_4028:   ; [c64_ir] PushLiteral(-27666)
00498Fr 2  E8               inx
004990r 2  E8               inx
004991r 2  A9 EE            lda #238
004993r 2  95 00            sta $00,x
004995r 2  A9 93            lda #147
004997r 2  95 01            sta $01,x
004999r 2               
004999r 2               ; snake.fth:193:31 in `check-collision`
004999r 2               @OPCODE_4029:   ; [c64_ir] Load
004999r 2  A1 00            lda ($00,x)
00499Br 2  95 00            sta $00,x
00499Dr 2  A9 00            lda #0
00499Fr 2  95 01            sta $01,x
0049A1r 2               
0049A1r 2               ; snake.fth:196:3 in `check-collision`
0049A1r 2               @OPCODE_4030:   ; [c64_ir] InlineCall("convert-x-y")
0049A1r 2                   ; inline call(convert-x-y)
0049A1r 2  48               pha
0049A2r 2  48               pha
0049A3r 2               
0049A3r 2               @target_1222:
0049A3r 2               
0049A3r 2               ; snake.fth:48:34 in `convert-x-y`
0049A3r 2               @OPCODE_4032:   ; [c64_ir] PushLiteral(40)
0049A3r 2  E8               inx
0049A4r 2  E8               inx
0049A5r 2  A9 28            lda #40
0049A7r 2  95 00            sta $00,x
0049A9r 2  A9 00            lda #0
0049ABr 2  95 01            sta $01,x
0049ADr 2               
0049ADr 2               ; snake.fth:48:37 in `convert-x-y`
0049ADr 2               @OPCODE_4033:   ; [c64_ir] InlineCall("*")
0049ADr 2                   ; inline call(*)
0049ADr 2  48               pha
0049AEr 2  48               pha
0049AFr 2               
0049AFr 2               @target_1223:
0049AFr 2               
0049AFr 2               ; src/prelude.fth:44:5 in `*`
0049AFr 2               @OPCODE_4035:   ; [c64_ir] AltPush
0049AFr 2  CA               dex
0049B0r 2  CA               dex
0049B1r 2  B5 03            lda $03,x
0049B3r 2  48               pha
0049B4r 2  B5 02            lda $02,x
0049B6r 2  48               pha
0049B7r 2               
0049B7r 2               ; src/prelude.fth:44:8 in `*`
0049B7r 2               @OPCODE_4036:   ; [c64_ir] PushLiteral(0)
0049B7r 2  E8               inx
0049B8r 2  E8               inx
0049B9r 2  A9 00            lda #0
0049BBr 2  95 00            sta $00,x
0049BDr 2  A9 00            lda #0
0049BFr 2  95 01            sta $01,x
0049C1r 2               
0049C1r 2               ; src/prelude.fth:44:10 in `*`
0049C1r 2               @OPCODE_4037:   ; [c64_ir] AltPop
0049C1r 2  E8               inx
0049C2r 2  E8               inx
0049C3r 2  68               pla
0049C4r 2  95 00            sta $00,x
0049C6r 2  68               pla
0049C7r 2  95 01            sta $01,x
0049C9r 2               
0049C9r 2               ; src/prelude.fth:44:13 in `*`
0049C9r 2               @OPCODE_4038:   ; [c64_ir] PushLiteral(0)
0049C9r 2  E8               inx
0049CAr 2  E8               inx
0049CBr 2  A9 00            lda #0
0049CDr 2  95 00            sta $00,x
0049CFr 2  A9 00            lda #0
0049D1r 2  95 01            sta $01,x
0049D3r 2               
0049D3r 2               ; src/prelude.fth:44:15 in `*`
0049D3r 2               @OPCODE_4039:   ; [c64_ir] AltPush
0049D3r 2  CA               dex
0049D4r 2  CA               dex
0049D5r 2  B5 03            lda $03,x
0049D7r 2  48               pha
0049D8r 2  B5 02            lda $02,x
0049DAr 2  48               pha
0049DBr 2               
0049DBr 2               ; src/prelude.fth:44:15 in `*`
0049DBr 2               @OPCODE_4040:   ; [c64_ir] AltPush
0049DBr 2  CA               dex
0049DCr 2  CA               dex
0049DDr 2  B5 03            lda $03,x
0049DFr 2  48               pha
0049E0r 2  B5 02            lda $02,x
0049E2r 2  48               pha
0049E3r 2               
0049E3r 2               ; src/prelude.fth:44:15 in `*`
0049E3r 2               @OPCODE_4041:   ; [c64_ir] LoopTarget(1223)
0049E3r 2               
0049E3r 2               @target_1224:
0049E3r 2               
0049E3r 2               ; src/prelude.fth:44:18 in `*`
0049E3r 2               @OPCODE_4043:   ; [c64_ir] InlineCall("over")
0049E3r 2                   ; inline call(over)
0049E3r 2  48               pha
0049E4r 2  48               pha
0049E5r 2               
0049E5r 2               @target_1225:
0049E5r 2               
0049E5r 2               ; src/prelude.fth:4:10 in `over`
0049E5r 2               @OPCODE_4045:   ; [c64_ir] AltPush
0049E5r 2  CA               dex
0049E6r 2  CA               dex
0049E7r 2  B5 03            lda $03,x
0049E9r 2  48               pha
0049EAr 2  B5 02            lda $02,x
0049ECr 2  48               pha
0049EDr 2               
0049EDr 2               ; src/prelude.fth:4:13 in `over`
0049EDr 2               @OPCODE_4046:   ; [c64_ir] TempStore
0049EDr 2  CA               dex
0049EEr 2  CA               dex
0049EFr 2  B5 03            lda $03,x
0049F1r 2  85 96            sta TEMP_PAX2
0049F3r 2  B5 02            lda $02,x
0049F5r 2  85 95            sta TEMP_PAX1
0049F7r 2               
0049F7r 2               ; src/prelude.fth:4:19 in `over`
0049F7r 2               @OPCODE_4047:   ; [c64_ir] TempLoad
0049F7r 2  E8               inx
0049F8r 2  E8               inx
0049F9r 2  A5 95            lda TEMP_PAX1
0049FBr 2  95 00            sta $00,x
0049FDr 2  A5 96            lda TEMP_PAX2
0049FFr 2  95 01            sta $01,x
004A01r 2               
004A01r 2               ; src/prelude.fth:4:25 in `over`
004A01r 2               @OPCODE_4048:   ; [c64_ir] AltPop
004A01r 2  E8               inx
004A02r 2  E8               inx
004A03r 2  68               pla
004A04r 2  95 00            sta $00,x
004A06r 2  68               pla
004A07r 2  95 01            sta $01,x
004A09r 2               
004A09r 2               ; src/prelude.fth:4:28 in `over`
004A09r 2               @OPCODE_4049:   ; [c64_ir] TempLoad
004A09r 2  E8               inx
004A0Ar 2  E8               inx
004A0Br 2  A5 95            lda TEMP_PAX1
004A0Dr 2  95 00            sta $00,x
004A0Fr 2  A5 96            lda TEMP_PAX2
004A11r 2  95 01            sta $01,x
004A13r 2               
004A13r 2               ; src/prelude.fth:4:34 in `over`
004A13r 2               @OPCODE_4050:   ; [c64_ir] InlineExit
004A13r 2                   ; inline exit
004A13r 2  68               pla
004A14r 2  68               pla
004A15r 2               
004A15r 2               @target_1226:
004A15r 2               
004A15r 2               ; src/prelude.fth:44:23 in `*`
004A15r 2               @OPCODE_4052:   ; [c64_ir] Add
004A15r 2                   ; 21
004A15r 2  CA               dex
004A16r 2  CA               dex
004A17r 2  18               clc
004A18r 2  B5 00            lda $00,x
004A1Ar 2  75 02            adc $02,x
004A1Cr 2  95 00            sta $00,x
004A1Er 2  B5 01            lda $01,x
004A20r 2  75 03            adc $03,x
004A22r 2  95 01            sta $01,x
004A24r 2               
004A24r 2               ; src/prelude.fth:44:25 in `*`
004A24r 2               @OPCODE_4053:   ; [c64_ir] InlineCall("loopimpl")
004A24r 2                   ; inline call(loopimpl)
004A24r 2  48               pha
004A25r 2  48               pha
004A26r 2               
004A26r 2               @target_1227:
004A26r 2               
004A26r 2               ; src/prelude.fth:33:12 in `loopimpl`
004A26r 2               @OPCODE_4055:   ; [c64_ir] AltPop
004A26r 2  E8               inx
004A27r 2  E8               inx
004A28r 2  68               pla
004A29r 2  95 00            sta $00,x
004A2Br 2  68               pla
004A2Cr 2  95 01            sta $01,x
004A2Er 2               
004A2Er 2               ; src/prelude.fth:33:15 in `loopimpl`
004A2Er 2               @OPCODE_4056:   ; [c64_ir] AltPop
004A2Er 2  E8               inx
004A2Fr 2  E8               inx
004A30r 2  68               pla
004A31r 2  95 00            sta $00,x
004A33r 2  68               pla
004A34r 2  95 01            sta $01,x
004A36r 2               
004A36r 2               ; src/prelude.fth:33:18 in `loopimpl`
004A36r 2               @OPCODE_4057:   ; [c64_ir] AltPop
004A36r 2  E8               inx
004A37r 2  E8               inx
004A38r 2  68               pla
004A39r 2  95 00            sta $00,x
004A3Br 2  68               pla
004A3Cr 2  95 01            sta $01,x
004A3Er 2               
004A3Er 2               ; src/prelude.fth:33:21 in `loopimpl`
004A3Er 2               @OPCODE_4058:   ; [c64_ir] InlineCall("1+")
004A3Er 2                   ; inline call(1+)
004A3Er 2  48               pha
004A3Fr 2  48               pha
004A40r 2               
004A40r 2               @target_1228:
004A40r 2               
004A40r 2               ; src/prelude.fth:18:8 in `1+`
004A40r 2               @OPCODE_4060:   ; [c64_ir] PushLiteral(1)
004A40r 2  E8               inx
004A41r 2  E8               inx
004A42r 2  A9 01            lda #1
004A44r 2  95 00            sta $00,x
004A46r 2  A9 00            lda #0
004A48r 2  95 01            sta $01,x
004A4Ar 2               
004A4Ar 2               ; src/prelude.fth:18:10 in `1+`
004A4Ar 2               @OPCODE_4061:   ; [c64_ir] Add
004A4Ar 2                   ; 21
004A4Ar 2  CA               dex
004A4Br 2  CA               dex
004A4Cr 2  18               clc
004A4Dr 2  B5 00            lda $00,x
004A4Fr 2  75 02            adc $02,x
004A51r 2  95 00            sta $00,x
004A53r 2  B5 01            lda $01,x
004A55r 2  75 03            adc $03,x
004A57r 2  95 01            sta $01,x
004A59r 2               
004A59r 2               ; src/prelude.fth:18:12 in `1+`
004A59r 2               @OPCODE_4062:   ; [c64_ir] InlineExit
004A59r 2                   ; inline exit
004A59r 2  68               pla
004A5Ar 2  68               pla
004A5Br 2               
004A5Br 2               @target_1229:
004A5Br 2               
004A5Br 2               ; src/prelude.fth:33:24 in `loopimpl`
004A5Br 2               @OPCODE_4064:   ; [c64_ir] InlineCall("2dup")
004A5Br 2                   ; inline call(2dup)
004A5Br 2  48               pha
004A5Cr 2  48               pha
004A5Dr 2               
004A5Dr 2               @target_1230:
004A5Dr 2               
004A5Dr 2               ; src/prelude.fth:8:10 in `2dup`
004A5Dr 2               @OPCODE_4066:   ; [c64_ir] InlineCall("over")
004A5Dr 2                   ; inline call(over)
004A5Dr 2  48               pha
004A5Er 2  48               pha
004A5Fr 2               
004A5Fr 2               @target_1231:
004A5Fr 2               
004A5Fr 2               ; src/prelude.fth:4:10 in `over`
004A5Fr 2               @OPCODE_4068:   ; [c64_ir] AltPush
004A5Fr 2  CA               dex
004A60r 2  CA               dex
004A61r 2  B5 03            lda $03,x
004A63r 2  48               pha
004A64r 2  B5 02            lda $02,x
004A66r 2  48               pha
004A67r 2               
004A67r 2               ; src/prelude.fth:4:13 in `over`
004A67r 2               @OPCODE_4069:   ; [c64_ir] TempStore
004A67r 2  CA               dex
004A68r 2  CA               dex
004A69r 2  B5 03            lda $03,x
004A6Br 2  85 96            sta TEMP_PAX2
004A6Dr 2  B5 02            lda $02,x
004A6Fr 2  85 95            sta TEMP_PAX1
004A71r 2               
004A71r 2               ; src/prelude.fth:4:19 in `over`
004A71r 2               @OPCODE_4070:   ; [c64_ir] TempLoad
004A71r 2  E8               inx
004A72r 2  E8               inx
004A73r 2  A5 95            lda TEMP_PAX1
004A75r 2  95 00            sta $00,x
004A77r 2  A5 96            lda TEMP_PAX2
004A79r 2  95 01            sta $01,x
004A7Br 2               
004A7Br 2               ; src/prelude.fth:4:25 in `over`
004A7Br 2               @OPCODE_4071:   ; [c64_ir] AltPop
004A7Br 2  E8               inx
004A7Cr 2  E8               inx
004A7Dr 2  68               pla
004A7Er 2  95 00            sta $00,x
004A80r 2  68               pla
004A81r 2  95 01            sta $01,x
004A83r 2               
004A83r 2               ; src/prelude.fth:4:28 in `over`
004A83r 2               @OPCODE_4072:   ; [c64_ir] TempLoad
004A83r 2  E8               inx
004A84r 2  E8               inx
004A85r 2  A5 95            lda TEMP_PAX1
004A87r 2  95 00            sta $00,x
004A89r 2  A5 96            lda TEMP_PAX2
004A8Br 2  95 01            sta $01,x
004A8Dr 2               
004A8Dr 2               ; src/prelude.fth:4:34 in `over`
004A8Dr 2               @OPCODE_4073:   ; [c64_ir] InlineExit
004A8Dr 2                   ; inline exit
004A8Dr 2  68               pla
004A8Er 2  68               pla
004A8Fr 2               
004A8Fr 2               @target_1232:
004A8Fr 2               
004A8Fr 2               ; src/prelude.fth:8:15 in `2dup`
004A8Fr 2               @OPCODE_4075:   ; [c64_ir] InlineCall("over")
004A8Fr 2                   ; inline call(over)
004A8Fr 2  48               pha
004A90r 2  48               pha
004A91r 2               
004A91r 2               @target_1233:
004A91r 2               
004A91r 2               ; src/prelude.fth:4:10 in `over`
004A91r 2               @OPCODE_4077:   ; [c64_ir] AltPush
004A91r 2  CA               dex
004A92r 2  CA               dex
004A93r 2  B5 03            lda $03,x
004A95r 2  48               pha
004A96r 2  B5 02            lda $02,x
004A98r 2  48               pha
004A99r 2               
004A99r 2               ; src/prelude.fth:4:13 in `over`
004A99r 2               @OPCODE_4078:   ; [c64_ir] TempStore
004A99r 2  CA               dex
004A9Ar 2  CA               dex
004A9Br 2  B5 03            lda $03,x
004A9Dr 2  85 96            sta TEMP_PAX2
004A9Fr 2  B5 02            lda $02,x
004AA1r 2  85 95            sta TEMP_PAX1
004AA3r 2               
004AA3r 2               ; src/prelude.fth:4:19 in `over`
004AA3r 2               @OPCODE_4079:   ; [c64_ir] TempLoad
004AA3r 2  E8               inx
004AA4r 2  E8               inx
004AA5r 2  A5 95            lda TEMP_PAX1
004AA7r 2  95 00            sta $00,x
004AA9r 2  A5 96            lda TEMP_PAX2
004AABr 2  95 01            sta $01,x
004AADr 2               
004AADr 2               ; src/prelude.fth:4:25 in `over`
004AADr 2               @OPCODE_4080:   ; [c64_ir] AltPop
004AADr 2  E8               inx
004AAEr 2  E8               inx
004AAFr 2  68               pla
004AB0r 2  95 00            sta $00,x
004AB2r 2  68               pla
004AB3r 2  95 01            sta $01,x
004AB5r 2               
004AB5r 2               ; src/prelude.fth:4:28 in `over`
004AB5r 2               @OPCODE_4081:   ; [c64_ir] TempLoad
004AB5r 2  E8               inx
004AB6r 2  E8               inx
004AB7r 2  A5 95            lda TEMP_PAX1
004AB9r 2  95 00            sta $00,x
004ABBr 2  A5 96            lda TEMP_PAX2
004ABDr 2  95 01            sta $01,x
004ABFr 2               
004ABFr 2               ; src/prelude.fth:4:34 in `over`
004ABFr 2               @OPCODE_4082:   ; [c64_ir] InlineExit
004ABFr 2                   ; inline exit
004ABFr 2  68               pla
004AC0r 2  68               pla
004AC1r 2               
004AC1r 2               @target_1234:
004AC1r 2               
004AC1r 2               ; src/prelude.fth:8:20 in `2dup`
004AC1r 2               @OPCODE_4084:   ; [c64_ir] InlineExit
004AC1r 2                   ; inline exit
004AC1r 2  68               pla
004AC2r 2  68               pla
004AC3r 2               
004AC3r 2               @target_1235:
004AC3r 2               
004AC3r 2               ; src/prelude.fth:33:29 in `loopimpl`
004AC3r 2               @OPCODE_4086:   ; [c64_ir] AltPush
004AC3r 2  CA               dex
004AC4r 2  CA               dex
004AC5r 2  B5 03            lda $03,x
004AC7r 2  48               pha
004AC8r 2  B5 02            lda $02,x
004ACAr 2  48               pha
004ACBr 2               
004ACBr 2               ; src/prelude.fth:33:32 in `loopimpl`
004ACBr 2               @OPCODE_4087:   ; [c64_ir] AltPush
004ACBr 2  CA               dex
004ACCr 2  CA               dex
004ACDr 2  B5 03            lda $03,x
004ACFr 2  48               pha
004AD0r 2  B5 02            lda $02,x
004AD2r 2  48               pha
004AD3r 2               
004AD3r 2               ; src/prelude.fth:33:35 in `loopimpl`
004AD3r 2               @OPCODE_4088:   ; [c64_ir] InlineCall("=")
004AD3r 2                   ; inline call(=)
004AD3r 2  48               pha
004AD4r 2  48               pha
004AD5r 2               
004AD5r 2               @target_1236:
004AD5r 2               
004AD5r 2               ; src/prelude.fth:22:8 in `=`
004AD5r 2               @OPCODE_4090:   ; [c64_ir] InlineCall("-")
004AD5r 2                   ; inline call(-)
004AD5r 2  48               pha
004AD6r 2  48               pha
004AD7r 2               
004AD7r 2               @target_1237:
004AD7r 2               
004AD7r 2               ; src/prelude.fth:16:12 in `-`
004AD7r 2               @OPCODE_4092:   ; [c64_ir] InlineCall("negate")
004AD7r 2                   ; inline call(negate)
004AD7r 2  48               pha
004AD8r 2  48               pha
004AD9r 2               
004AD9r 2               @target_1238:
004AD9r 2               
004AD9r 2               ; src/prelude.fth:15:12 in `negate`
004AD9r 2               @OPCODE_4094:   ; [c64_ir] InlineCall("invert")
004AD9r 2                   ; inline call(invert)
004AD9r 2  48               pha
004ADAr 2  48               pha
004ADBr 2               
004ADBr 2               @target_1239:
004ADBr 2               
004ADBr 2               ; src/prelude.fth:14:12 in `invert`
004ADBr 2               @OPCODE_4096:   ; [c64_ir] PushLiteral(-1)
004ADBr 2  E8               inx
004ADCr 2  E8               inx
004ADDr 2  A9 FF            lda #255
004ADFr 2  95 00            sta $00,x
004AE1r 2  A9 FF            lda #255
004AE3r 2  95 01            sta $01,x
004AE5r 2               
004AE5r 2               ; src/prelude.fth:14:15 in `invert`
004AE5r 2               @OPCODE_4097:   ; [c64_ir] Nand
004AE5r 2                   ; 26
004AE5r 2  CA               dex
004AE6r 2  CA               dex
004AE7r 2  B5 00            lda $00,x
004AE9r 2  35 02            and $02,x
004AEBr 2  49 FF            eor #$ff
004AEDr 2  95 00            sta $00,x
004AEFr 2  B5 01            lda $01,x
004AF1r 2  35 03            and $03,x
004AF3r 2  49 FF            eor #$ff
004AF5r 2  95 01            sta $01,x
004AF7r 2               
004AF7r 2               ; src/prelude.fth:14:20 in `invert`
004AF7r 2               @OPCODE_4098:   ; [c64_ir] InlineExit
004AF7r 2                   ; inline exit
004AF7r 2  68               pla
004AF8r 2  68               pla
004AF9r 2               
004AF9r 2               @target_1240:
004AF9r 2               
004AF9r 2               ; src/prelude.fth:15:19 in `negate`
004AF9r 2               @OPCODE_4100:   ; [c64_ir] PushLiteral(1)
004AF9r 2  E8               inx
004AFAr 2  E8               inx
004AFBr 2  A9 01            lda #1
004AFDr 2  95 00            sta $00,x
004AFFr 2  A9 00            lda #0
004B01r 2  95 01            sta $01,x
004B03r 2               
004B03r 2               ; src/prelude.fth:15:21 in `negate`
004B03r 2               @OPCODE_4101:   ; [c64_ir] Add
004B03r 2                   ; 21
004B03r 2  CA               dex
004B04r 2  CA               dex
004B05r 2  18               clc
004B06r 2  B5 00            lda $00,x
004B08r 2  75 02            adc $02,x
004B0Ar 2  95 00            sta $00,x
004B0Cr 2  B5 01            lda $01,x
004B0Er 2  75 03            adc $03,x
004B10r 2  95 01            sta $01,x
004B12r 2               
004B12r 2               ; src/prelude.fth:15:23 in `negate`
004B12r 2               @OPCODE_4102:   ; [c64_ir] InlineExit
004B12r 2                   ; inline exit
004B12r 2  68               pla
004B13r 2  68               pla
004B14r 2               
004B14r 2               @target_1241:
004B14r 2               
004B14r 2               ; src/prelude.fth:16:19 in `-`
004B14r 2               @OPCODE_4104:   ; [c64_ir] Add
004B14r 2                   ; 21
004B14r 2  CA               dex
004B15r 2  CA               dex
004B16r 2  18               clc
004B17r 2  B5 00            lda $00,x
004B19r 2  75 02            adc $02,x
004B1Br 2  95 00            sta $00,x
004B1Dr 2  B5 01            lda $01,x
004B1Fr 2  75 03            adc $03,x
004B21r 2  95 01            sta $01,x
004B23r 2               
004B23r 2               ; src/prelude.fth:16:21 in `-`
004B23r 2               @OPCODE_4105:   ; [c64_ir] InlineExit
004B23r 2                   ; inline exit
004B23r 2  68               pla
004B24r 2  68               pla
004B25r 2               
004B25r 2               @target_1242:
004B25r 2               
004B25r 2               ; src/prelude.fth:22:10 in `=`
004B25r 2               @OPCODE_4107:   ; [c64_ir] InlineCall("0=")
004B25r 2                   ; inline call(0=)
004B25r 2  48               pha
004B26r 2  48               pha
004B27r 2               
004B27r 2               @target_1243:
004B27r 2               
004B27r 2               ; src/prelude.fth:21:8 in `0=`
004B27r 2               @OPCODE_4109:   ; [c64_ir] JumpIf0(1245)
004B27r 2  CA               dex
004B28r 2  CA               dex
004B29r 2  B5 02            lda $02,x
004B2Br 2  15 03            ora $03,x
004B2Dr 2  D0 03            bne *+5
004B2Fr 2  4C rr rr         jmp @target_1245
004B32r 2               
004B32r 2               @target_1244:
004B32r 2               
004B32r 2               ; src/prelude.fth:21:11 in `0=`
004B32r 2               @OPCODE_4111:   ; [c64_ir] PushLiteral(0)
004B32r 2  E8               inx
004B33r 2  E8               inx
004B34r 2  A9 00            lda #0
004B36r 2  95 00            sta $00,x
004B38r 2  A9 00            lda #0
004B3Ar 2  95 01            sta $01,x
004B3Cr 2               
004B3Cr 2               ; src/prelude.fth:21:13 in `0=`
004B3Cr 2               @OPCODE_4112:   ; [c64_ir] JumpElse(1246)
004B3Cr 2  4C rr rr         jmp @target_1246
004B3Fr 2               
004B3Fr 2               @target_1245:
004B3Fr 2               
004B3Fr 2               ; src/prelude.fth:21:18 in `0=`
004B3Fr 2               @OPCODE_4114:   ; [c64_ir] PushLiteral(-1)
004B3Fr 2  E8               inx
004B40r 2  E8               inx
004B41r 2  A9 FF            lda #255
004B43r 2  95 00            sta $00,x
004B45r 2  A9 FF            lda #255
004B47r 2  95 01            sta $01,x
004B49r 2               
004B49r 2               ; src/prelude.fth:21:21 in `0=`
004B49r 2               @OPCODE_4115:   ; [c64_ir] JumpTarget(1245)
004B49r 2               
004B49r 2               @target_1246:
004B49r 2               
004B49r 2               ; src/prelude.fth:21:26 in `0=`
004B49r 2               @OPCODE_4117:   ; [c64_ir] InlineExit
004B49r 2                   ; inline exit
004B49r 2  68               pla
004B4Ar 2  68               pla
004B4Br 2               
004B4Br 2               @target_1247:
004B4Br 2               
004B4Br 2               ; src/prelude.fth:22:13 in `=`
004B4Br 2               @OPCODE_4119:   ; [c64_ir] InlineExit
004B4Br 2                   ; inline exit
004B4Br 2  68               pla
004B4Cr 2  68               pla
004B4Dr 2               
004B4Dr 2               @target_1248:
004B4Dr 2               
004B4Dr 2               ; src/prelude.fth:33:37 in `loopimpl`
004B4Dr 2               @OPCODE_4121:   ; [c64_ir] InlineCall("swap")
004B4Dr 2                   ; inline call(swap)
004B4Dr 2  48               pha
004B4Er 2  48               pha
004B4Fr 2               
004B4Fr 2               @target_1249:
004B4Fr 2               
004B4Fr 2               ; src/prelude.fth:3:10 in `swap`
004B4Fr 2               @OPCODE_4123:   ; [c64_ir] AltPush
004B4Fr 2  CA               dex
004B50r 2  CA               dex
004B51r 2  B5 03            lda $03,x
004B53r 2  48               pha
004B54r 2  B5 02            lda $02,x
004B56r 2  48               pha
004B57r 2               
004B57r 2               ; src/prelude.fth:3:13 in `swap`
004B57r 2               @OPCODE_4124:   ; [c64_ir] TempStore
004B57r 2  CA               dex
004B58r 2  CA               dex
004B59r 2  B5 03            lda $03,x
004B5Br 2  85 96            sta TEMP_PAX2
004B5Dr 2  B5 02            lda $02,x
004B5Fr 2  85 95            sta TEMP_PAX1
004B61r 2               
004B61r 2               ; src/prelude.fth:3:19 in `swap`
004B61r 2               @OPCODE_4125:   ; [c64_ir] AltPop
004B61r 2  E8               inx
004B62r 2  E8               inx
004B63r 2  68               pla
004B64r 2  95 00            sta $00,x
004B66r 2  68               pla
004B67r 2  95 01            sta $01,x
004B69r 2               
004B69r 2               ; src/prelude.fth:3:22 in `swap`
004B69r 2               @OPCODE_4126:   ; [c64_ir] TempLoad
004B69r 2  E8               inx
004B6Ar 2  E8               inx
004B6Br 2  A5 95            lda TEMP_PAX1
004B6Dr 2  95 00            sta $00,x
004B6Fr 2  A5 96            lda TEMP_PAX2
004B71r 2  95 01            sta $01,x
004B73r 2               
004B73r 2               ; src/prelude.fth:3:28 in `swap`
004B73r 2               @OPCODE_4127:   ; [c64_ir] InlineExit
004B73r 2                   ; inline exit
004B73r 2  68               pla
004B74r 2  68               pla
004B75r 2               
004B75r 2               @target_1250:
004B75r 2               
004B75r 2               ; src/prelude.fth:33:42 in `loopimpl`
004B75r 2               @OPCODE_4129:   ; [c64_ir] AltPush
004B75r 2  CA               dex
004B76r 2  CA               dex
004B77r 2  B5 03            lda $03,x
004B79r 2  48               pha
004B7Ar 2  B5 02            lda $02,x
004B7Cr 2  48               pha
004B7Dr 2               
004B7Dr 2               ; src/prelude.fth:33:45 in `loopimpl`
004B7Dr 2               @OPCODE_4130:   ; [c64_ir] InlineExit
004B7Dr 2                   ; inline exit
004B7Dr 2  68               pla
004B7Er 2  68               pla
004B7Fr 2               
004B7Fr 2               @target_1251:
004B7Fr 2               
004B7Fr 2               ; src/prelude.fth:44:25 in `*`
004B7Fr 2               @OPCODE_4132:   ; [c64_ir] LoopIf0(1224)
004B7Fr 2  CA               dex
004B80r 2  CA               dex
004B81r 2  B5 02            lda $02,x
004B83r 2  15 03            ora $03,x
004B85r 2  D0 03            bne *+5
004B87r 2  4C rr rr         jmp @target_1224
004B8Ar 2               
004B8Ar 2               @target_1252:
004B8Ar 2               
004B8Ar 2               ; src/prelude.fth:44:25 in `*`
004B8Ar 2               @OPCODE_4134:   ; [c64_ir] AltPop
004B8Ar 2  E8               inx
004B8Br 2  E8               inx
004B8Cr 2  68               pla
004B8Dr 2  95 00            sta $00,x
004B8Fr 2  68               pla
004B90r 2  95 01            sta $01,x
004B92r 2               
004B92r 2               ; src/prelude.fth:44:25 in `*`
004B92r 2               @OPCODE_4135:   ; [c64_ir] Drop
004B92r 2  CA               dex
004B93r 2  CA               dex
004B94r 2               
004B94r 2               ; src/prelude.fth:44:25 in `*`
004B94r 2               @OPCODE_4136:   ; [c64_ir] AltPop
004B94r 2  E8               inx
004B95r 2  E8               inx
004B96r 2  68               pla
004B97r 2  95 00            sta $00,x
004B99r 2  68               pla
004B9Ar 2  95 01            sta $01,x
004B9Cr 2               
004B9Cr 2               ; src/prelude.fth:44:25 in `*`
004B9Cr 2               @OPCODE_4137:   ; [c64_ir] Drop
004B9Cr 2  CA               dex
004B9Dr 2  CA               dex
004B9Er 2               
004B9Er 2               ; src/prelude.fth:44:30 in `*`
004B9Er 2               @OPCODE_4138:   ; [c64_ir] InlineCall("swap")
004B9Er 2                   ; inline call(swap)
004B9Er 2  48               pha
004B9Fr 2  48               pha
004BA0r 2               
004BA0r 2               @target_1253:
004BA0r 2               
004BA0r 2               ; src/prelude.fth:3:10 in `swap`
004BA0r 2               @OPCODE_4140:   ; [c64_ir] AltPush
004BA0r 2  CA               dex
004BA1r 2  CA               dex
004BA2r 2  B5 03            lda $03,x
004BA4r 2  48               pha
004BA5r 2  B5 02            lda $02,x
004BA7r 2  48               pha
004BA8r 2               
004BA8r 2               ; src/prelude.fth:3:13 in `swap`
004BA8r 2               @OPCODE_4141:   ; [c64_ir] TempStore
004BA8r 2  CA               dex
004BA9r 2  CA               dex
004BAAr 2  B5 03            lda $03,x
004BACr 2  85 96            sta TEMP_PAX2
004BAEr 2  B5 02            lda $02,x
004BB0r 2  85 95            sta TEMP_PAX1
004BB2r 2               
004BB2r 2               ; src/prelude.fth:3:19 in `swap`
004BB2r 2               @OPCODE_4142:   ; [c64_ir] AltPop
004BB2r 2  E8               inx
004BB3r 2  E8               inx
004BB4r 2  68               pla
004BB5r 2  95 00            sta $00,x
004BB7r 2  68               pla
004BB8r 2  95 01            sta $01,x
004BBAr 2               
004BBAr 2               ; src/prelude.fth:3:22 in `swap`
004BBAr 2               @OPCODE_4143:   ; [c64_ir] TempLoad
004BBAr 2  E8               inx
004BBBr 2  E8               inx
004BBCr 2  A5 95            lda TEMP_PAX1
004BBEr 2  95 00            sta $00,x
004BC0r 2  A5 96            lda TEMP_PAX2
004BC2r 2  95 01            sta $01,x
004BC4r 2               
004BC4r 2               ; src/prelude.fth:3:28 in `swap`
004BC4r 2               @OPCODE_4144:   ; [c64_ir] InlineExit
004BC4r 2                   ; inline exit
004BC4r 2  68               pla
004BC5r 2  68               pla
004BC6r 2               
004BC6r 2               @target_1254:
004BC6r 2               
004BC6r 2               ; src/prelude.fth:44:35 in `*`
004BC6r 2               @OPCODE_4146:   ; [c64_ir] Drop
004BC6r 2  CA               dex
004BC7r 2  CA               dex
004BC8r 2               
004BC8r 2               ; src/prelude.fth:44:40 in `*`
004BC8r 2               @OPCODE_4147:   ; [c64_ir] InlineExit
004BC8r 2                   ; inline exit
004BC8r 2  68               pla
004BC9r 2  68               pla
004BCAr 2               
004BCAr 2               @target_1255:
004BCAr 2               
004BCAr 2               ; snake.fth:48:39 in `convert-x-y`
004BCAr 2               @OPCODE_4149:   ; [c64_ir] Add
004BCAr 2                   ; 21
004BCAr 2  CA               dex
004BCBr 2  CA               dex
004BCCr 2  18               clc
004BCDr 2  B5 00            lda $00,x
004BCFr 2  75 02            adc $02,x
004BD1r 2  95 00            sta $00,x
004BD3r 2  B5 01            lda $01,x
004BD5r 2  75 03            adc $03,x
004BD7r 2  95 01            sta $01,x
004BD9r 2               
004BD9r 2               ; snake.fth:48:41 in `convert-x-y`
004BD9r 2               @OPCODE_4150:   ; [c64_ir] InlineExit
004BD9r 2                   ; inline exit
004BD9r 2  68               pla
004BDAr 2  68               pla
004BDBr 2               
004BDBr 2               @target_1256:
004BDBr 2               
004BDBr 2               ; snake.fth:196:15 in `check-collision`
004BDBr 2               @OPCODE_4152:   ; [c64_ir] PushLiteral(1024)
004BDBr 2  E8               inx
004BDCr 2  E8               inx
004BDDr 2  A9 00            lda #0
004BDFr 2  95 00            sta $00,x
004BE1r 2  A9 04            lda #4
004BE3r 2  95 01            sta $01,x
004BE5r 2               
004BE5r 2               ; snake.fth:196:24 in `check-collision`
004BE5r 2               @OPCODE_4153:   ; [c64_ir] Add
004BE5r 2                   ; 21
004BE5r 2  CA               dex
004BE6r 2  CA               dex
004BE7r 2  18               clc
004BE8r 2  B5 00            lda $00,x
004BEAr 2  75 02            adc $02,x
004BECr 2  95 00            sta $00,x
004BEEr 2  B5 01            lda $01,x
004BF0r 2  75 03            adc $03,x
004BF2r 2  95 01            sta $01,x
004BF4r 2               
004BF4r 2               ; snake.fth:196:26 in `check-collision`
004BF4r 2               @OPCODE_4154:   ; [c64_ir] Load8
004BF4r 2  A1 00            lda ($00,x)
004BF6r 2  95 00            sta $00,x
004BF8r 2  A9 00            lda #0
004BFAr 2  95 01            sta $01,x
004BFCr 2               
004BFCr 2               ; snake.fth:199:3 in `check-collision`
004BFCr 2               @OPCODE_4155:   ; [c64_ir] PushLiteral(32)
004BFCr 2  E8               inx
004BFDr 2  E8               inx
004BFEr 2  A9 20            lda #32
004C00r 2  95 00            sta $00,x
004C02r 2  A9 00            lda #0
004C04r 2  95 01            sta $01,x
004C06r 2               
004C06r 2               ; snake.fth:199:15 in `check-collision`
004C06r 2               @OPCODE_4156:   ; [c64_ir] InlineCall("=")
004C06r 2                   ; inline call(=)
004C06r 2  48               pha
004C07r 2  48               pha
004C08r 2               
004C08r 2               @target_1257:
004C08r 2               
004C08r 2               ; src/prelude.fth:22:8 in `=`
004C08r 2               @OPCODE_4158:   ; [c64_ir] InlineCall("-")
004C08r 2                   ; inline call(-)
004C08r 2  48               pha
004C09r 2  48               pha
004C0Ar 2               
004C0Ar 2               @target_1258:
004C0Ar 2               
004C0Ar 2               ; src/prelude.fth:16:12 in `-`
004C0Ar 2               @OPCODE_4160:   ; [c64_ir] InlineCall("negate")
004C0Ar 2                   ; inline call(negate)
004C0Ar 2  48               pha
004C0Br 2  48               pha
004C0Cr 2               
004C0Cr 2               @target_1259:
004C0Cr 2               
004C0Cr 2               ; src/prelude.fth:15:12 in `negate`
004C0Cr 2               @OPCODE_4162:   ; [c64_ir] InlineCall("invert")
004C0Cr 2                   ; inline call(invert)
004C0Cr 2  48               pha
004C0Dr 2  48               pha
004C0Er 2               
004C0Er 2               @target_1260:
004C0Er 2               
004C0Er 2               ; src/prelude.fth:14:12 in `invert`
004C0Er 2               @OPCODE_4164:   ; [c64_ir] PushLiteral(-1)
004C0Er 2  E8               inx
004C0Fr 2  E8               inx
004C10r 2  A9 FF            lda #255
004C12r 2  95 00            sta $00,x
004C14r 2  A9 FF            lda #255
004C16r 2  95 01            sta $01,x
004C18r 2               
004C18r 2               ; src/prelude.fth:14:15 in `invert`
004C18r 2               @OPCODE_4165:   ; [c64_ir] Nand
004C18r 2                   ; 26
004C18r 2  CA               dex
004C19r 2  CA               dex
004C1Ar 2  B5 00            lda $00,x
004C1Cr 2  35 02            and $02,x
004C1Er 2  49 FF            eor #$ff
004C20r 2  95 00            sta $00,x
004C22r 2  B5 01            lda $01,x
004C24r 2  35 03            and $03,x
004C26r 2  49 FF            eor #$ff
004C28r 2  95 01            sta $01,x
004C2Ar 2               
004C2Ar 2               ; src/prelude.fth:14:20 in `invert`
004C2Ar 2               @OPCODE_4166:   ; [c64_ir] InlineExit
004C2Ar 2                   ; inline exit
004C2Ar 2  68               pla
004C2Br 2  68               pla
004C2Cr 2               
004C2Cr 2               @target_1261:
004C2Cr 2               
004C2Cr 2               ; src/prelude.fth:15:19 in `negate`
004C2Cr 2               @OPCODE_4168:   ; [c64_ir] PushLiteral(1)
004C2Cr 2  E8               inx
004C2Dr 2  E8               inx
004C2Er 2  A9 01            lda #1
004C30r 2  95 00            sta $00,x
004C32r 2  A9 00            lda #0
004C34r 2  95 01            sta $01,x
004C36r 2               
004C36r 2               ; src/prelude.fth:15:21 in `negate`
004C36r 2               @OPCODE_4169:   ; [c64_ir] Add
004C36r 2                   ; 21
004C36r 2  CA               dex
004C37r 2  CA               dex
004C38r 2  18               clc
004C39r 2  B5 00            lda $00,x
004C3Br 2  75 02            adc $02,x
004C3Dr 2  95 00            sta $00,x
004C3Fr 2  B5 01            lda $01,x
004C41r 2  75 03            adc $03,x
004C43r 2  95 01            sta $01,x
004C45r 2               
004C45r 2               ; src/prelude.fth:15:23 in `negate`
004C45r 2               @OPCODE_4170:   ; [c64_ir] InlineExit
004C45r 2                   ; inline exit
004C45r 2  68               pla
004C46r 2  68               pla
004C47r 2               
004C47r 2               @target_1262:
004C47r 2               
004C47r 2               ; src/prelude.fth:16:19 in `-`
004C47r 2               @OPCODE_4172:   ; [c64_ir] Add
004C47r 2                   ; 21
004C47r 2  CA               dex
004C48r 2  CA               dex
004C49r 2  18               clc
004C4Ar 2  B5 00            lda $00,x
004C4Cr 2  75 02            adc $02,x
004C4Er 2  95 00            sta $00,x
004C50r 2  B5 01            lda $01,x
004C52r 2  75 03            adc $03,x
004C54r 2  95 01            sta $01,x
004C56r 2               
004C56r 2               ; src/prelude.fth:16:21 in `-`
004C56r 2               @OPCODE_4173:   ; [c64_ir] InlineExit
004C56r 2                   ; inline exit
004C56r 2  68               pla
004C57r 2  68               pla
004C58r 2               
004C58r 2               @target_1263:
004C58r 2               
004C58r 2               ; src/prelude.fth:22:10 in `=`
004C58r 2               @OPCODE_4175:   ; [c64_ir] InlineCall("0=")
004C58r 2                   ; inline call(0=)
004C58r 2  48               pha
004C59r 2  48               pha
004C5Ar 2               
004C5Ar 2               @target_1264:
004C5Ar 2               
004C5Ar 2               ; src/prelude.fth:21:8 in `0=`
004C5Ar 2               @OPCODE_4177:   ; [c64_ir] JumpIf0(1266)
004C5Ar 2  CA               dex
004C5Br 2  CA               dex
004C5Cr 2  B5 02            lda $02,x
004C5Er 2  15 03            ora $03,x
004C60r 2  D0 03            bne *+5
004C62r 2  4C rr rr         jmp @target_1266
004C65r 2               
004C65r 2               @target_1265:
004C65r 2               
004C65r 2               ; src/prelude.fth:21:11 in `0=`
004C65r 2               @OPCODE_4179:   ; [c64_ir] PushLiteral(0)
004C65r 2  E8               inx
004C66r 2  E8               inx
004C67r 2  A9 00            lda #0
004C69r 2  95 00            sta $00,x
004C6Br 2  A9 00            lda #0
004C6Dr 2  95 01            sta $01,x
004C6Fr 2               
004C6Fr 2               ; src/prelude.fth:21:13 in `0=`
004C6Fr 2               @OPCODE_4180:   ; [c64_ir] JumpElse(1267)
004C6Fr 2  4C rr rr         jmp @target_1267
004C72r 2               
004C72r 2               @target_1266:
004C72r 2               
004C72r 2               ; src/prelude.fth:21:18 in `0=`
004C72r 2               @OPCODE_4182:   ; [c64_ir] PushLiteral(-1)
004C72r 2  E8               inx
004C73r 2  E8               inx
004C74r 2  A9 FF            lda #255
004C76r 2  95 00            sta $00,x
004C78r 2  A9 FF            lda #255
004C7Ar 2  95 01            sta $01,x
004C7Cr 2               
004C7Cr 2               ; src/prelude.fth:21:21 in `0=`
004C7Cr 2               @OPCODE_4183:   ; [c64_ir] JumpTarget(1266)
004C7Cr 2               
004C7Cr 2               @target_1267:
004C7Cr 2               
004C7Cr 2               ; src/prelude.fth:21:26 in `0=`
004C7Cr 2               @OPCODE_4185:   ; [c64_ir] InlineExit
004C7Cr 2                   ; inline exit
004C7Cr 2  68               pla
004C7Dr 2  68               pla
004C7Er 2               
004C7Er 2               @target_1268:
004C7Er 2               
004C7Er 2               ; src/prelude.fth:22:13 in `=`
004C7Er 2               @OPCODE_4187:   ; [c64_ir] InlineExit
004C7Er 2                   ; inline exit
004C7Er 2  68               pla
004C7Fr 2  68               pla
004C80r 2               
004C80r 2               @target_1269:
004C80r 2               
004C80r 2               ; snake.fth:199:17 in `check-collision`
004C80r 2               @OPCODE_4189:   ; [c64_ir] InlineExit
004C80r 2                   ; inline exit
004C80r 2  68               pla
004C81r 2  68               pla
004C82r 2               
004C82r 2               @target_1270:
004C82r 2               
004C82r 2               ; snake.fth:224:1 in `main`
004C82r 2               @OPCODE_4191:   ; [c64_ir] JumpIf0(1272)
004C82r 2  CA               dex
004C83r 2  CA               dex
004C84r 2  B5 02            lda $02,x
004C86r 2  15 03            ora $03,x
004C88r 2  D0 03            bne *+5
004C8Ar 2  4C rr rr         jmp @target_1272
004C8Dr 2               
004C8Dr 2               @target_1271:
004C8Dr 2               
004C8Dr 2               ; snake.fth:224:4 in `main`
004C8Dr 2               @OPCODE_4193:   ; [c64_ir] JumpElse(1273)
004C8Dr 2  4C rr rr         jmp @target_1273
004C90r 2               
004C90r 2               @target_1272:
004C90r 2               
004C90r 2               ; snake.fth:224:9 in `main`
004C90r 2               @OPCODE_4195:   ; [c64_ir] PushLiteral(0)
004C90r 2  E8               inx
004C91r 2  E8               inx
004C92r 2  A9 00            lda #0
004C94r 2  95 00            sta $00,x
004C96r 2  A9 00            lda #0
004C98r 2  95 01            sta $01,x
004C9Ar 2               
004C9Ar 2               ; snake.fth:224:11 in `main`
004C9Ar 2               @OPCODE_4196:   ; [c64_ir] PushLiteral(-28672)
004C9Ar 2  E8               inx
004C9Br 2  E8               inx
004C9Cr 2  A9 00            lda #0
004C9Er 2  95 00            sta $00,x
004CA0r 2  A9 90            lda #144
004CA2r 2  95 01            sta $01,x
004CA4r 2               
004CA4r 2               ; snake.fth:224:23 in `main`
004CA4r 2               @OPCODE_4197:   ; [c64_ir] Store
004CA4r 2  CA               dex
004CA5r 2  CA               dex
004CA6r 2  CA               dex
004CA7r 2  CA               dex
004CA8r 2  B5 02            lda $02,x
004CAAr 2  81 04            sta ($04,x)
004CACr 2                   ; TODO high byte
004CACr 2               
004CACr 2               ; snake.fth:224:25 in `main`
004CACr 2               @OPCODE_4198:   ; [c64_ir] JumpTarget(1272)
004CACr 2               
004CACr 2               @target_1273:
004CACr 2               
004CACr 2               ; :0:0 in ``
004CACr 2               @OPCODE_4200:   ; [c64_ir] Exit
004CACr 2  60               rts
004CADr 2               .endproc
004CADr 2               
004CADr 2               
004CADr 2               
004CADr 2               
004CADr 2               
004CADr 2               ; function start
004CADr 2               
004CADr 2               
004CADr 2               
004CADr 1               
