(func $fn_mytype (type $t0)
;; PushLiteral(0)
    i32.const 0
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; LoopTarget(0)
    block $L0_BLOCK
    loop $L0

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Call("i")
    i32.const 0
    call $return_push
    call $fn_i
    call $return_pop
    call $drop

;; Add
    call $add

;; Load
    call $data_pop
    call $mem_load
    call $data_push

;; Emit
    call $data_pop
    call $emit

;; Call("loopimpl")
    i32.const 0
    call $return_push
    call $fn_loopimpl
    call $return_pop
    call $drop

;; LoopIf0(1)
    call $data_pop
    i32.eqz
    br_if $L0
    end
    end

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Exit

)

(func $fn_swap (type $t0)
;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; Exit

)

(func $fn_over (type $t0)
;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; Exit

)

(func $fn_rot (type $t0)
;; AltPush
    call $data_pop
    call $return_push

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Exit

)

(func $fn_dup (type $t0)
;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; LoadTemp
    call $temp_load
    call $data_push

;; Exit

)

(func $fn_2drop (type $t0)
;; Add
    call $add

;; Drop
    call $drop

;; Exit

)

(func $fn_2dup (type $t0)
;; Call("over")
    i32.const 0
    call $return_push
    call $fn_over
    call $return_pop
    call $drop

;; Call("over")
    i32.const 0
    call $return_push
    call $fn_over
    call $return_pop
    call $drop

;; Exit

)

(func $fn_r$40 (type $t0)
;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; LoadTemp
    call $temp_load
    call $data_push

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; Exit

)

(func $fn_r$21 (type $t0)
;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; Exit

)

(func $fn_invert (type $t0)
;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; Nand
    call $nand

;; Exit

)

(func $fn_negate (type $t0)
;; Call("invert")
    i32.const 0
    call $return_push
    call $fn_invert
    call $return_pop
    call $drop

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; Exit

)

(func $fn_$2D (type $t0)
;; Call("negate")
    i32.const 0
    call $return_push
    call $fn_negate
    call $return_pop
    call $drop

;; Add
    call $add

;; Exit

)

(func $fn_1$2B (type $t0)
;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; Exit

)

(func $fn_1$2D (type $t0)
;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; Add
    call $add

;; Exit

)

(func $fn_$2B$21 (type $t0)
;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; Load
    call $data_pop
    call $mem_load
    call $data_push

;; Add
    call $add

;; AltPop
    call $return_pop

;; Store
    call $data_pop
    call $data_pop
    call $mem_store

;; Exit

)

(func $fn_0$3D (type $t0)
;; JumpIf0(2)
    block $B0
    block $B1
    call $data_pop
    i32.eqz
    br_if $B1

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpElse(3)
    br $B0
    end
    block $B2

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; JumpTarget(2)
    end
    end

;; Exit

)

(func $fn_$3D (type $t0)
;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; Call("0=")
    i32.const 0
    call $return_push
    call $fn_0$3D
    call $return_pop
    call $drop

;; Exit

)

(func $fn_$3C$3E (type $t0)
;; Call("=")
    i32.const 0
    call $return_push
    call $fn_$3D
    call $return_pop
    call $drop

;; Call("0=")
    i32.const 0
    call $return_push
    call $fn_0$3D
    call $return_pop
    call $drop

;; Exit

)

(func $fn_$3D$3D (type $t0)
;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; Call("0=")
    i32.const 0
    call $return_push
    call $fn_0$3D
    call $return_pop
    call $drop

;; Exit

)

(func $fn_or (type $t0)
;; Call("invert")
    i32.const 0
    call $return_push
    call $fn_invert
    call $return_pop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Call("invert")
    i32.const 0
    call $return_push
    call $fn_invert
    call $return_pop
    call $drop

;; Nand
    call $nand

;; Exit

)

(func $fn_xor (type $t0)
;; Call("2dup")
    i32.const 0
    call $return_push
    call $fn_2dup
    call $return_pop
    call $drop

;; Nand
    call $nand

;; Call("1+")
    i32.const 0
    call $return_push
    call $fn_1$2B
    call $return_pop
    call $drop

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Add
    call $add

;; Add
    call $add

;; Add
    call $add

;; Exit

)

(func $fn_and (type $t0)
;; Nand
    call $nand

;; Call("invert")
    i32.const 0
    call $return_push
    call $fn_invert
    call $return_pop
    call $drop

;; Exit

)

(func $fn_loopimpl (type $t0)
;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; Call("1+")
    i32.const 0
    call $return_push
    call $fn_1$2B
    call $return_pop
    call $drop

;; Call("2dup")
    i32.const 0
    call $return_push
    call $fn_2dup
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; Call("=")
    i32.const 0
    call $return_push
    call $fn_$3D
    call $return_pop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; Exit

)

(func $fn_$2Dloopimpl (type $t0)
;; AltPop
    call $return_pop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; Call("2dup")
    i32.const 0
    call $return_push
    call $fn_2dup
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; Call("=")
    i32.const 0
    call $return_push
    call $fn_$3D
    call $return_pop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; Exit

)

(func $fn_i (type $t0)
;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; LoadTemp
    call $temp_load
    call $data_push

;; Exit

)

(func $fn_j (type $t0)
;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; LoadTemp
    call $temp_load
    call $data_push

;; Exit

)

(func $fn_cells (type $t0)
;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Add
    call $add

;; Exit

)

(func $fn_cell$2B (type $t0)
;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Call("cells")
    i32.const 0
    call $return_push
    call $fn_cells
    call $return_pop
    call $drop

;; Add
    call $add

;; Exit

)

(func $fn_$2A (type $t0)
;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; AltPop
    call $return_pop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; LoopTarget(0)
    block $L0_BLOCK
    loop $L0

;; Call("over")
    i32.const 0
    call $return_push
    call $fn_over
    call $return_pop
    call $drop

;; Add
    call $add

;; Call("loopimpl")
    i32.const 0
    call $return_push
    call $fn_loopimpl
    call $return_pop
    call $drop

;; LoopIf0(1)
    call $data_pop
    i32.eqz
    br_if $L0
    end
    end

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Drop
    call $drop

;; Exit

)

(func $fn_2$2A (type $t0)
;; PushLiteral(2)
    i32.const 2
    call $data_push

;; Call("*")
    i32.const 0
    call $return_push
    call $fn_$2A
    call $return_pop
    call $drop

;; Exit

)

(func $fn_0$3C (type $t0)
;; PushLiteral(32768)
    i32.const 32768
    call $data_push

;; Nand
    call $nand

;; Call("invert")
    i32.const 0
    call $return_push
    call $fn_invert
    call $return_pop
    call $drop

;; JumpIf0(3)
    block $B0
    block $B1
    call $data_pop
    i32.eqz
    br_if $B1

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; JumpElse(4)
    br $B0
    end
    block $B2

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpTarget(3)
    end
    end

;; Exit

)

(func $fn_$25 (type $t0)
;; LoopTarget(0)
    block $L0_BLOCK
    loop $L0

;; Call("2dup")
    i32.const 0
    call $return_push
    call $fn_2dup
    call $return_pop
    call $drop

;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Call("0<")
    i32.const 0
    call $return_push
    call $fn_0$3C
    call $return_pop
    call $drop

;; JumpIf0(8)
    block $B1
    block $B2
    call $data_pop
    i32.eqz
    br_if $B2

;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; Drop
    call $drop

;; Add
    call $add

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; JumpElse(11)
    br $B1
    end
    block $B3

;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; Drop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpTarget(10)
    end
    end

;; LoopIf0(1)
    call $data_pop
    i32.eqz
    br_if $L0
    end
    end

;; Exit

)

(func $fn_type (type $t0)
;; PushLiteral(0)
    i32.const 0
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; LoopTarget(0)
    block $L0_BLOCK
    loop $L0

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Call("i")
    i32.const 0
    call $return_push
    call $fn_i
    call $return_pop
    call $drop

;; Add
    call $add

;; Load
    call $data_pop
    call $mem_load
    call $data_push

;; Emit
    call $data_pop
    call $emit

;; Call("loopimpl")
    i32.const 0
    call $return_push
    call $fn_loopimpl
    call $return_pop
    call $drop

;; LoopIf0(1)
    call $data_pop
    i32.eqz
    br_if $L0
    end
    end

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Drop
    call $drop

;; Exit

)

(func $fn_cr (type $t0)
;; PushLiteral(13)
    i32.const 13
    call $data_push

;; Emit
    call $data_pop
    call $emit

;; PushLiteral(10)
    i32.const 10
    call $data_push

;; Emit
    call $data_pop
    call $emit

;; Exit

)

(func $fn_0$3E$3D (type $t0)
;; PushLiteral(32768)
    i32.const 32768
    call $data_push

;; Nand
    call $nand

;; Call("invert")
    i32.const 0
    call $return_push
    call $fn_invert
    call $return_pop
    call $drop

;; JumpIf0(3)
    block $B0
    block $B1
    call $data_pop
    i32.eqz
    br_if $B1

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpElse(4)
    br $B0
    end
    block $B2

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; JumpTarget(3)
    end
    end

;; Exit

)

(func $fn_0$3C$3D (type $t0)
;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Call("0=")
    i32.const 0
    call $return_push
    call $fn_0$3D
    call $return_pop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Call("0<")
    i32.const 0
    call $return_push
    call $fn_0$3C
    call $return_pop
    call $drop

;; Call("or")
    i32.const 0
    call $return_push
    call $fn_or
    call $return_pop
    call $drop

;; Exit

)

(func $fn_$2Drot (type $t0)
;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Exit

)

(func $fn_tuck (type $t0)
;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Call("over")
    i32.const 0
    call $return_push
    call $fn_over
    call $return_pop
    call $drop

;; Exit

)

(func $fn_throw (type $t0)
;; PushLiteral(0)
    i32.const 0
    call $data_push

;; Call("=")
    i32.const 0
    call $return_push
    call $fn_$3D
    call $return_pop
    call $drop

;; JumpIf0(3)
    block $B0
    block $B1
    call $data_pop
    i32.eqz
    br_if $B1

;; JumpElse(4)
    br $B0
    end
    block $B2

;; Abort
    unreachable

;; JumpTarget(3)
    end
    end

;; Exit

)

(func $fn_$3Fdup (type $t0)
;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Call("0=")
    i32.const 0
    call $return_push
    call $fn_0$3D
    call $return_pop
    call $drop

;; JumpIf0(4)
    block $B0
    block $B1
    call $data_pop
    i32.eqz
    br_if $B1

;; JumpElse(6)
    br $B0
    end
    block $B2

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; JumpTarget(5)
    end
    end

;; Exit

)

(func $fn_2$40 (type $t0)
;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Call("1+")
    i32.const 0
    call $return_push
    call $fn_1$2B
    call $return_pop
    call $drop

;; Load
    call $data_pop
    call $mem_load
    call $data_push

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Load
    call $data_pop
    call $mem_load
    call $data_push

;; Exit

)

(func $fn_2$21 (type $t0)
;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; StoreTemp
    call $data_pop
    call $temp_store

;; Store
    call $data_pop
    call $data_pop
    call $mem_store

;; LoadTemp
    call $temp_load
    call $data_push

;; Call("1+")
    i32.const 0
    call $return_push
    call $fn_1$2B
    call $return_pop
    call $drop

;; Store
    call $data_pop
    call $data_pop
    call $mem_store

;; Exit

)

(func $fn_2over (type $t0)
;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; Call("-rot")
    i32.const 0
    call $return_push
    call $fn_$2Drot
    call $return_pop
    call $drop

;; Call("r@")
    i32.const 0
    call $return_push
    call $fn_r$40
    call $return_pop
    call $drop

;; Call("-rot")
    i32.const 0
    call $return_push
    call $fn_$2Drot
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Exit

)

(func $fn_2swap (type $t0)
;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Exit

)

(func $fn_nip (type $t0)
;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; AltPop
    call $return_pop

;; Exit

)

(func $fn_$3C (type $t0)
;; Call("2dup")
    i32.const 0
    call $return_push
    call $fn_2dup
    call $return_pop
    call $drop

;; Call("xor")
    i32.const 0
    call $return_push
    call $fn_xor
    call $return_pop
    call $drop

;; Call("0<")
    i32.const 0
    call $return_push
    call $fn_0$3C
    call $return_pop
    call $drop

;; JumpIf0(6)
    block $B0
    block $B1
    call $data_pop
    i32.eqz
    br_if $B1

;; Drop
    call $drop

;; Call("0<")
    i32.const 0
    call $return_push
    call $fn_0$3C
    call $return_pop
    call $drop

;; JumpElse(9)
    br $B0
    end
    block $B2

;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; Call("0<")
    i32.const 0
    call $return_push
    call $fn_0$3C
    call $return_pop
    call $drop

;; JumpTarget(8)
    end
    end

;; Exit

)

(func $fn_u$3C (type $t0)
;; Call("2dup")
    i32.const 0
    call $return_push
    call $fn_2dup
    call $return_pop
    call $drop

;; Call("xor")
    i32.const 0
    call $return_push
    call $fn_xor
    call $return_pop
    call $drop

;; Call("0<")
    i32.const 0
    call $return_push
    call $fn_0$3C
    call $return_pop
    call $drop

;; JumpIf0(7)
    block $B0
    block $B1
    call $data_pop
    i32.eqz
    br_if $B1

;; Call("nip")
    i32.const 0
    call $return_push
    call $fn_nip
    call $return_pop
    call $drop

;; Call("0<")
    i32.const 0
    call $return_push
    call $fn_0$3C
    call $return_pop
    call $drop

;; JumpElse(10)
    br $B0
    end
    block $B2

;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; Call("0<")
    i32.const 0
    call $return_push
    call $fn_0$3C
    call $return_pop
    call $drop

;; JumpTarget(9)
    end
    end

;; Exit

)

(func $fn_$3E (type $t0)
;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Call("<")
    i32.const 0
    call $return_push
    call $fn_$3C
    call $return_pop
    call $drop

;; Exit

)

(func $fn_u$3E (type $t0)
;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Call("u>")
    i32.const 0
    call $return_push
    call $fn_u$3E
    call $return_pop
    call $drop

;; Exit

)

(func $fn_$3E$3D (type $t0)
;; Call("2dup")
    i32.const 0
    call $return_push
    call $fn_2dup
    call $return_pop
    call $drop

;; Call(">")
    i32.const 0
    call $return_push
    call $fn_$3E
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; Call("=")
    i32.const 0
    call $return_push
    call $fn_$3D
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("or")
    i32.const 0
    call $return_push
    call $fn_or
    call $return_pop
    call $drop

;; Exit

)

(func $fn_within (type $t0)
;; Call("over")
    i32.const 0
    call $return_push
    call $fn_over
    call $return_pop
    call $drop

;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("u<")
    i32.const 0
    call $return_push
    call $fn_u$3C
    call $return_pop
    call $drop

;; Exit

)

(func $fn_true (type $t0)
;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; Exit

)

(func $fn_false (type $t0)
;; PushLiteral(0)
    i32.const 0
    call $data_push

;; Exit

)

(func $fn_roll (type $t0)
;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; LoopTarget(1)
    block $L0_BLOCK
    loop $L0

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; Call("<>")
    i32.const 0
    call $return_push
    call $fn_$3C$3E
    call $return_pop
    call $drop

;; JumpIf0(8)
    block $B1
    block $B2
    call $data_pop
    i32.eqz
    br_if $B2

;; Call("1-")
    i32.const 0
    call $return_push
    call $fn_1$2D
    call $return_pop
    call $drop

;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpElse(9)
    br $B1
    end
    block $B3

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpTarget(8)
    end
    end

;; LoopIf0(2)
    call $data_pop
    i32.eqz
    br_if $L0
    end
    end

;; Drop
    call $drop

;; LoopTarget(10)
    block $L4_BLOCK
    loop $L4

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; Call("<>")
    i32.const 0
    call $return_push
    call $fn_$3C$3E
    call $return_pop
    call $drop

;; JumpIf0(17)
    block $B5
    block $B6
    call $data_pop
    i32.eqz
    br_if $B6

;; Call("1-")
    i32.const 0
    call $return_push
    call $fn_1$2D
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("-rot")
    i32.const 0
    call $return_push
    call $fn_$2Drot
    call $return_pop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpElse(18)
    br $B5
    end
    block $B7

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpTarget(17)
    end
    end

;; LoopIf0(11)
    call $data_pop
    i32.eqz
    br_if $L4
    end
    end

;; Drop
    call $drop

;; Exit

)

(func $fn_pick (type $t0)
;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; LoopTarget(1)
    block $L0_BLOCK
    loop $L0

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; Call("<>")
    i32.const 0
    call $return_push
    call $fn_$3C$3E
    call $return_pop
    call $drop

;; JumpIf0(8)
    block $B1
    block $B2
    call $data_pop
    i32.eqz
    br_if $B2

;; Call("1-")
    i32.const 0
    call $return_push
    call $fn_1$2D
    call $return_pop
    call $drop

;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpElse(9)
    br $B1
    end
    block $B3

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpTarget(8)
    end
    end

;; LoopIf0(2)
    call $data_pop
    i32.eqz
    br_if $L0
    end
    end

;; Drop
    call $drop

;; Call("over")
    i32.const 0
    call $return_push
    call $fn_over
    call $return_pop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; LoopTarget(12)
    block $L4_BLOCK
    loop $L4

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; Call("<>")
    i32.const 0
    call $return_push
    call $fn_$3C$3E
    call $return_pop
    call $drop

;; JumpIf0(19)
    block $B5
    block $B6
    call $data_pop
    i32.eqz
    br_if $B6

;; Call("1-")
    i32.const 0
    call $return_push
    call $fn_1$2D
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("-rot")
    i32.const 0
    call $return_push
    call $fn_$2Drot
    call $return_pop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpElse(20)
    br $B5
    end
    block $B7

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpTarget(19)
    end
    end

;; LoopIf0(13)
    call $data_pop
    i32.eqz
    br_if $L4
    end
    end

;; Drop
    call $drop

;; Exit

)

(func $fn_compare (type $t0)
;; LoopTarget(0)
    block $L0_BLOCK
    loop $L0

;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; Call("2dup")
    i32.const 0
    call $return_push
    call $fn_2dup
    call $return_pop
    call $drop

;; Call("or")
    i32.const 0
    call $return_push
    call $fn_or
    call $return_pop
    call $drop

;; Call("0=")
    i32.const 0
    call $return_push
    call $fn_0$3D
    call $return_pop
    call $drop

;; JumpIf0(7)
    block $B1
    block $B2
    call $data_pop
    i32.eqz
    br_if $B2

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpElse(37)
    br $B1
    end
    block $B3

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Call("0=")
    i32.const 0
    call $return_push
    call $fn_0$3D
    call $return_pop
    call $drop

;; JumpIf0(11)
    block $B4
    block $B5
    call $data_pop
    i32.eqz
    br_if $B5

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpElse(36)
    br $B4
    end
    block $B6

;; Call("over")
    i32.const 0
    call $return_push
    call $fn_over
    call $return_pop
    call $drop

;; Call("0=")
    i32.const 0
    call $return_push
    call $fn_0$3D
    call $return_pop
    call $drop

;; JumpIf0(15)
    block $B7
    block $B8
    call $data_pop
    i32.eqz
    br_if $B8

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpElse(35)
    br $B7
    end
    block $B9

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; Call("2dup")
    i32.const 0
    call $return_push
    call $fn_2dup
    call $return_pop
    call $drop

;; Load
    call $data_pop
    call $mem_load
    call $data_push

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Load
    call $data_pop
    call $mem_load
    call $data_push

;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; Call("0<")
    i32.const 0
    call $return_push
    call $fn_0$3C
    call $return_pop
    call $drop

;; JumpIf0(22)
    block $B10
    block $B11
    call $data_pop
    i32.eqz
    br_if $B11

;; Drop
    call $drop

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpElse(34)
    br $B10
    end
    block $B12

;; JumpIf0(24)
    block $B13
    block $B14
    call $data_pop
    i32.eqz
    br_if $B14

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; Drop
    call $drop

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpElse(33)
    br $B13
    end
    block $B15

;; Call("1+")
    i32.const 0
    call $return_push
    call $fn_1$2B
    call $return_pop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; Call("1+")
    i32.const 0
    call $return_push
    call $fn_1$2B
    call $return_pop
    call $drop

;; Call("swap")
    i32.const 0
    call $return_push
    call $fn_swap
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("1-")
    i32.const 0
    call $return_push
    call $fn_1$2D
    call $return_pop
    call $drop

;; AltPop
    call $return_pop

;; Call("1-")
    i32.const 0
    call $return_push
    call $fn_1$2D
    call $return_pop
    call $drop

;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; Call("rot")
    i32.const 0
    call $return_push
    call $fn_rot
    call $return_pop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpTarget(32)
    end
    end

;; JumpTarget(33)
    end
    end

;; JumpTarget(34)
    end
    end

;; JumpTarget(35)
    end
    end

;; JumpTarget(36)
    end
    end

;; LoopIf0(1)
    call $data_pop
    i32.eqz
    br_if $L0
    end
    end

;; Exit

)

(func $fn_main (type $t0)
;; PushLiteral(32)
    i32.const 32
    call $data_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Add
    call $add

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Drop
    call $drop

;; PushLiteral(10000)
    i32.const 10000
    call $data_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(72)
    i32.const 72
    call $data_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Store
    call $data_pop
    call $data_pop
    call $mem_store

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(105)
    i32.const 105
    call $data_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Store
    call $data_pop
    call $data_pop
    call $mem_store

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(13)
    i32.const 13
    call $data_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Store
    call $data_pop
    call $data_pop
    call $mem_store

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(10)
    i32.const 10
    call $data_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Store
    call $data_pop
    call $data_pop
    call $mem_store

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Store
    call $data_pop
    call $data_pop
    call $mem_store

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Drop
    call $drop

;; PushLiteral(10000)
    i32.const 10000
    call $data_push

;; PushLiteral(4)
    i32.const 4
    call $data_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; LoopTarget(0)
    block $L0_BLOCK
    loop $L0

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Add
    call $add

;; Load
    call $data_pop
    call $mem_load
    call $data_push

;; Emit
    call $data_pop
    call $emit

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; AltPop
    call $return_pop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; Nand
    call $nand

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Add
    call $add

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; JumpIf0(3)
    block $B1
    block $B2
    call $data_pop
    i32.eqz
    br_if $B2

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpElse(4)
    br $B1
    end
    block $B3

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; JumpTarget(3)
    end
    end

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; PushLiteral(65535)
    i32.const 65535
    call $data_push

;; AltPush
    call $data_pop
    call $return_push

;; AltPush
    call $data_pop
    call $return_push

;; StoreTemp
    call $data_pop
    call $temp_store

;; AltPop
    call $return_pop

;; LoadTemp
    call $temp_load
    call $data_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; AltPush
    call $data_pop
    call $return_push

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; LoopIf0(1)
    call $data_pop
    i32.eqz
    br_if $L0
    end
    end

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; AltPop
    call $return_pop

;; Drop
    call $drop

;; Exit

)
