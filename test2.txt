
(module
    (type $t0 (func))
    (type $t1 (func (param i32 i32)))
    (type $t2 (func (param i32) (result i32)))
    (type $t3 (func (param i32)))
    (type $t4 (func (result i32)))

    (import "root" "print" (func $print (type $t2)))
    (import "root" "extmem_load" (func $extmem_load (param i32) (result i32)))
    (import "root" "extmem_load_8" (func $extmem_load_8 (param i32) (result i32)))
    (import "root" "extmem_store" (func $extmem_store (param i32) (param i32)))
    (import "root" "extmem_store_8" (func $extmem_store_8 (param i32) (param i32)))

    (func $__wasm_call_ctors (type $t0))

    (func $mem_load (export "mem_load") (type $t2) (param $p0 i32) (result i32)
        get_local $p0
        call $extmem_load)

    (func $mem_load_8 (export "mem_load_8") (type $t2) (param $p0 i32) (result i32)
        get_local $p0
        call $extmem_load_8)

    (func $mem_store (export "mem_store") (type $t1) (param $p0 i32) (param $p1 i32)
        get_local $p0
        get_local $p1
        call $extmem_store)

    (func $mem_store_8 (export "mem_store_8") (type $t1) (param $p0 i32) (param $p1 i32)
        get_local $p0
        get_local $p1
        call $extmem_store_8)

    (func $data_push (export "data_push") (type $t3) (param $p0 i32)
        (local $l0 i32)
        i32.const 0
        i32.const 0
        i32.load offset=1028
        tee_local $l0
        i32.const 1
        i32.add
        i32.store offset=1028
        get_local $l0
        i32.const 1
        i32.shl
        i32.const 2048
        i32.add
        get_local $p0
        i32.store16)

    (func $data_pop (export "data_pop") (type $t4) (result i32)
        (local $l0 i32)
        i32.const 0
        i32.const 0
        i32.load offset=1028
        i32.const -1
        i32.add
        tee_local $l0
        i32.store offset=1028
        get_local $l0
        i32.const 1
        i32.shl
        i32.const 2048
        i32.add
        i32.load16_s)

    (func $return_push (export "return_push") (type $t3) (param $p0 i32)
        (local $l0 i32)
        i32.const 0
        i32.const 0
        i32.load offset=1024
        tee_local $l0
        i32.const 1
        i32.add
        i32.store offset=1024
        get_local $l0
        i32.const 1
        i32.shl
        i32.const 4096
        i32.add
        get_local $p0
        i32.store16)

    (func $return_pop (export "return_pop") (type $t0)
        (local $l0 i32)
        i32.const 0
        i32.const 0
        i32.load offset=1024
        i32.const -1
        i32.add
        tee_local $l0
        i32.store offset=1024
        get_local $l0
        i32.const 1
        i32.shl
        i32.const 4096
        i32.add
        i32.load16_s
        call $data_push)

    (func $temp_store (export "temp_store") (type $t3) (param $p0 i32)
        i32.const 0
        get_local $p0
        i32.store16 offset=1032)

    (func $temp_load (export "temp_load") (type $t4) (result i32)
        i32.const 0
        i32.load16_s offset=1032)

    (func $drop (export "drop") (type $t0)
        i32.const 0
        i32.const 0
        i32.load offset=1028
        i32.const -1
        i32.add
        i32.store offset=1028)

    (func $add (export "add") (type $t0)
        call $data_pop
        call $data_pop
        i32.add
        i32.const 16
        i32.shl
        i32.const 16
        i32.shr_s
        call $data_push)

    (func $multiply (export "multiply") (type $t0)
        call $data_pop
        call $data_pop
        i32.mul
        i32.const 16
        i32.shl
        i32.const 16
        i32.shr_s
        call $data_push)

    (func $nand (export "nand") (type $t0)
        call $data_pop
        call $data_pop
        i32.and
        i32.const -1
        i32.xor
        call $data_push)

    (func $fn_dup (type $t0)
;; BranchTarget(0)

;; StoreTemp
    call $data_pop
    call $temp_store

;; LoadTemp
    call $temp_load
    call $data_push

;; LoadTemp
    call $temp_load
    call $data_push

;; Exit

)

(func $fn_invert (type $t0)
;; BranchTarget(0)

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; Nand
    call $nand

;; Exit

)

(func $fn_negate (type $t0)
;; BranchTarget(0)

;; Call("invert")
    i32.const 0
    call $return_push
    call $fn_invert
    call $return_pop
    call $drop

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; Add
    call $add

;; Exit

)

(func $fn_$2D (type $t0)
;; BranchTarget(0)

;; Call("negate")
    i32.const 0
    call $return_push
    call $fn_negate
    call $return_pop
    call $drop

;; Add
    call $add

;; Exit

)

(func $fn_0$3D (type $t0)
;; BranchTarget(0)

;; JumpIf0(3)
    block $B0
    block $B1
    call $data_pop
    i32.eqz
    br_if $B1

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpIf0(4)
;;   (optimized as JumpAlways)
    call $drop
    br $B0
    end
    block $B2

;; BranchTarget(3)

;; PushLiteral(-1)
    i32.const -1
    call $data_push

;; BranchTarget(4)
    end
    end

;; Exit

)

(func $fn_$3D (type $t0)
;; BranchTarget(0)

;; Call("-")
    i32.const 0
    call $return_push
    call $fn_$2D
    call $return_pop
    call $drop

;; Call("0=")
    i32.const 0
    call $return_push
    call $fn_0$3D
    call $return_pop
    call $drop

;; Exit

)

(func $fn_main (type $t0)
;; PushLiteral(6)
    i32.const 6
    call $data_push

;; BranchTarget(0)
    loop $L0

;; Call("dup")
    i32.const 0
    call $return_push
    call $fn_dup
    call $return_pop
    call $drop

;; PushLiteral(6)
    i32.const 6
    call $data_push

;; Call("=")
    i32.const 0
    call $return_push
    call $fn_$3D
    call $return_pop
    call $drop

;; JumpIf0(5)
    block $B1
    block $B2
    call $data_pop
    i32.eqz
    br_if $B2

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; Print
    call $data_pop
    call $print
    drop

;; PushLiteral(0)
    i32.const 0
    call $data_push

;; JumpIf0(7)
;;   (optimized as JumpAlways)
    call $drop
    br $B1
    end
    block $B3

;; BranchTarget(5)

;; PushLiteral(2)
    i32.const 2
    call $data_push

;; Print
    call $data_pop
    call $print
    drop

;; PushLiteral(1)
    i32.const 1
    call $data_push

;; JumpIf0(0)
    call $data_pop
    i32.eqz
    br_if $B3
    end

;; BranchTarget(7)
    end
    end

;; Exit

)


    (func $main (export "main") (type $t4) (result i32)
        call $fn_main
        i32.const 255)


    (memory $memory (export "memory") 2))


